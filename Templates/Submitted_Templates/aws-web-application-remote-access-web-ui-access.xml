<?xml version="1.0" encoding="UTF-8"?>
<template ref="two-examples-template" name="AWS - Web Application (Remote Access + Web UI Access)" tags="Community">
  <desc>&lt;p&gt;This project shows &lt;strong&gt;two&lt;/strong&gt; simple threat models:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;One that is remotely accessed by a user&lt;/li&gt;
 &lt;li&gt;Another that builds on this by having external monitoring made available to a Security team via. their SIEM.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Made by &lt;a target="_blank"&gt;Jonny Tennyson&lt;/a&gt;&lt;/p&gt;</desc>
  <diagram draft="false">
    <schema></schema>
  </diagram>
  <trustZones>
    <trustZone ref="private-secured" uuid="2ab4effa-40b7-4cd2-ba81-8247d29a6f2d" name="Private Secured" desc="A secured zone within a trusted private zone" trustRating="40"/>
    <trustZone ref="internet" uuid="f0ba7722-39b6-4c81-8290-a30a248bb8d9" name="Internet" desc="Untrusted Internet public zone" trustRating="1"/>
    <trustZone ref="public-cloud" uuid="b61d6911-338d-46a8-9f39-8dcd24abfe91" name="Public Cloud" desc="Public cloud services" trustRating="20"/>
  </trustZones>
  <questions/>
  <assets/>
  <settings/>
  <dataflows>
    <dataflow name="API - I/O -&gt; EC2 - Elastic Compute Cloud" ref="24090cb1-0cb6-455d-9d17-3c11ba708487" source="329646f1-38b8-4996-93e4-1e342f0bafb3" target="f4049c60-9be6-471e-8885-753b7ce5c14d">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="SCW User -&gt; AWS CloudFront" ref="2c64ddcc-ada7-47d2-b2bd-8b6233e97469" source="5fabbae7-9089-4bc6-beb9-9a432631c9d2" target="55881b84-57b2-495d-b21c-84c5fea0db1c">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="EC2 - Elastic Compute Cloud -&gt; PostgreSQL" ref="456ef3b4-d874-4be9-93d1-577b3df224c0" source="f4049c60-9be6-471e-8885-753b7ce5c14d" target="794c99e8-a31a-4592-93a6-618a207a7aaa">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="AWS ELB (Elastic Load Balancer) -&gt; AWS ElastiCache for Redis" ref="505014f2-a0cd-4aa0-b102-cc5980e138d8" source="f594eb8d-5453-4e6c-89aa-5d4ada78530e" target="ac6b58c4-31d2-491c-8e25-ef787e9af4ae">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="CloudWatch -&gt; Internal Logging Server" ref="53ba2d47-cf17-4abd-8736-420be80e8643" source="8bf78537-3cdd-4c79-88be-e341adba0b30" target="8ecba4d5-1c67-4175-bfc8-e29fb10a2c3d">
      <assets/>
      <tags>
        <tag tag="Alerts"/>
      </tags>
    </dataflow>
    <dataflow name="SCW User -&gt; AWS API Gateway" ref="5a749a1a-0403-477f-8cb3-bbff44a0d911" source="5fabbae7-9089-4bc6-beb9-9a432631c9d2" target="cb3c3a00-6887-4025-a440-4c5298fb2b0d">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="AWS API Gateway -&gt; AWS ELB (Elastic Load Balancer)" ref="5badf974-aeeb-4bb0-9fde-af603313d63a" source="cb3c3a00-6887-4025-a440-4c5298fb2b0d" target="f594eb8d-5453-4e6c-89aa-5d4ada78530e">
      <assets/>
      <tags>
        <tag tag="https: 443"/>
      </tags>
    </dataflow>
    <dataflow name="AWS CloudFront -&gt; AWS ELB (Elastic Load Balancer)" ref="8147f210-6823-4cfc-b094-2d9be8167ba4" source="55881b84-57b2-495d-b21c-84c5fea0db1c" target="f594eb8d-5453-4e6c-89aa-5d4ada78530e">
      <assets/>
      <tags>
        <tag tag="https: 443"/>
      </tags>
    </dataflow>
    <dataflow name="User - Web UI -&gt; AWS API Gateway" ref="be17d053-be74-4db1-95f4-02a7fba8663c" source="c489bf07-0b51-45f9-b4f8-5cc2d83e6a81" target="329646f1-38b8-4996-93e4-1e342f0bafb3">
      <assets>
        <asset name="Personally Identifiable Information"/>
      </assets>
      <tags>
        <tag tag="Login Credentials"/>
      </tags>
    </dataflow>
    <dataflow name="Elasticsearch -&gt; Overflow / Cold Storage" ref="c0130149-5c31-4165-b6e2-22cc58339bdd" source="458aeca6-65f5-4791-a48c-3d18d76a02b5" target="85488534-b4b9-4b7f-837b-1d895fd6a673">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="CloudWatch -&gt; EC2 - Elastic Compute Cloud" ref="ca9bb336-5f0b-4461-b156-16aeeec16146" source="8bf78537-3cdd-4c79-88be-e341adba0b30" target="f4049c60-9be6-471e-8885-753b7ce5c14d">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="EC2 - Elastic Compute Cloud -&gt; Elasticsearch" ref="d2b00bd0-3732-40f2-8948-2bd6093fc6dc" source="f4049c60-9be6-471e-8885-753b7ce5c14d" target="458aeca6-65f5-4791-a48c-3d18d76a02b5">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Elasticsearch -&gt; PostgreSQL" ref="e1351bee-27d2-46c7-bb89-6f292faf39f8" source="458aeca6-65f5-4791-a48c-3d18d76a02b5" target="794c99e8-a31a-4592-93a6-618a207a7aaa">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Internal Logging Server -&gt; SIEM Team" ref="e312edcf-ecf1-4c73-8fb4-7dd95e8b06da" source="8ecba4d5-1c67-4175-bfc8-e29fb10a2c3d" target="315742d3-3d9e-4a0c-909c-78f3885e8607">
      <assets/>
      <tags/>
    </dataflow>
  </dataflows>
  <customFields/>
  <components>
    <component uuid="794e4f2f-b0d4-4f89-80ca-518da7b3b7d0" diagramComponentId="737d7a3c-9ae7-4c37-8ff7-6c7637feed0a" ref="55881b84-57b2-495d-b21c-84c5fea0db1c" name="AWS CloudFront" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="cf-cloudfront">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-693" name="Protection Mechanism Failure" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection
                        mechanism that provides sufficient defense against directed attacks against the
                        product.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.291">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.292">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="PROOF-DOS" name="There are no proofs of a DoS" state="0" impact="100" issueId="" issueLink="">
          <desc>System is not configured to alert system administrators that a denial of service attack is happening or happened.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.292">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-3.12" name="Configure HTTP to HTTPS Redirects with a CloudFront Viewer Protocol Policy" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Configure the Viewer Protocol Policy for your CloudFront cache to redirect HTTP requests to HTTPS requests or to require that viewers use only the HTTPS protocol to access your objects in the CloudFront cache. You should also configure one or more cache behaviors in the same distribution to allow both HTTP and HTTPS, so you can require HTTPS for some objects but not for others. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  In order to use HTTPS, a SSL\TLS certificate must be attached. This depends on your data classification policy and needs to be configured according to your encryption policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For configuring "ViewerProtocolPolicy" first save locally the current distribution config:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Edit and replace "ViewerProtocolPolicy" element in /tmp/cf-distribution.json with the below section:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "ViewerProtocolPolicy": "redirect-to-https", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; -- distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get streaming distribution config" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-streaming-distribution-config.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Secure Connections" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="3.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the "ViewerProtocolPolicy" used by application Cloudfront distributions (it should be set as redirect-to-https):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, ViewerProtocolPolicy:DefaultCacheBehavior.ViewerProtocolPolicy}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.187">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.17" name="Configure TLS1.1+ for CloudFront to Origin connection" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  CloudFront can connect to your origin using only HTTP, only HTTPS, or to connect by matching the protocol used by the viewer. Our recommendation is to use HTTPS only. In 
  this case you can choose which SSL\TLS protocols CloudFront is allowed to use when 
  establishing an HTTPS connection to your origin. Ensure that you are using only TLS1.1+ as 
  the SSL\TLS protocol. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For configuring Origin SSL protocols first save locally the current distribution config:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Edit and replace "OriginSslProtocols" element in /tmp/cf-distribution.json with the below section:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "OriginSslProtocols": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    &amp;nbsp;"Items": [ 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "TLSv1.1", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "TLSv1.2" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    ], 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Quantity": 2 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    }, 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; -- distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon Cloudfront New Origin Security Features" url="https://aws.amazon.com/about-aws/whats-new/2016/01/amazon-cloudfront-adds-new-origin-security-features/"/>
            <reference name="Get distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-distribution.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="1.17" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the "OriginSslProtocols" used by application Cloudfront distributions (only TLSv1.1 and TLSv1.2 should be present):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, OriginSslProtocols:Origins.Items[*].CustomOriginConfig.OriginSslProtocols.Items[*]}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.3" name="Enable AWS Cloudfront logging" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront is a web service that speeds up distribution of your static and dynamic web content, for example, .html, .css, .php, image, and media files, to end users. CloudFront delivers your content through a worldwide network of edge locations. When an end user requests content that you're serving with CloudFront, the user is routed to the edge location that provides the lowest latency, so content is delivered with the best possible performance. If the content is already in that edge location, CloudFront delivers it immediately. If the content is not currently in that edge location, CloudFront retrieves it from a customer defined Origin, such as AWS S3, AWS ELB or EC2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For enabling logging first save locally the current distribution config:&lt;/li&gt; 
 &lt;/ul&gt; 
  aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Edit and replace "Logging" element in /tmp/cf-distribution.json with the below section: "Logging": { "Bucket": "&amp;lt;s3_bucket_name&amp;gt;", "Prefix": "cloudfrontlogs", "Enabled": true, "IncludeCookies": false },&lt;/li&gt; 
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag"&lt;/li&gt; 
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; --distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get distribution config" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-distribution-config.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="5.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all Cloudfront distributions and identify your application Distribution and Origin IDs. Note the "Id:" element:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;span style="white-space:pre"&gt; &lt;/span&gt;aws cloudfront list-distributions 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Using the distribution Id from the previous step display the distribution settings, and check if the "Enabled" element is True or False:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;span style="white-space:pre"&gt; &lt;/span&gt;aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig.Logging" 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.4" name="Enable Geo-Restriction within Cloudfront Distribution" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront is a web service that speeds up distribution of your static and dynamic 
  web content, for example, .html, .css, .php, image, and media files, to end users. CloudFront 
  delivers your content through a worldwide network of edge locations. When an end user 
  requests content that you're serving with CloudFront, the user is routed to the edge 
  location that provides the lowest latency, so content is delivered with the best possible 
  performance. If the content is already in that edge location, CloudFront delivers it 
  immediately. If the content is not currently in that edge location, CloudFront retrieves it 
  from a customer defined Origin, such as AWS S3, AWS ELB or EC2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For enabling GeoRestrictions first save locally the current distribution config: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Edit the GeoRestrictions section in /tmp/cf-distribution.json with the desired configuration (similar to the below sample):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Restrictions": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     "GeoRestriction": { 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt;
      "RestrictionType": "&amp;lt;blacklist|whitelist&amp;gt;", 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt;
      &amp;nbsp;"Quantity": 3, 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt;
      &amp;nbsp;"Items": ["&amp;lt;country_code_1&amp;gt;", "&amp;lt;country_code_2&amp;gt;"] 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     } 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    }, 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; -- distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt;&amp;nbsp; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-distribution.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="6.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Check if geo restrictions are enabled on your application CloudFront distribution:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws cloudfront get-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "Distribution.DistributionConfig.Restrictions.GeoRestriction" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-7" name="Prevent viewer requests from bypassing the CDN and accessing the origin content directly" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;When you deliver web content through a CDN such as CloudFront, a best practice is to prevent viewer requests from bypassing the CDN and accessing your origin content directly. For more information, see the blog post How to enhance Amazon CloudFront origin security with AWS WAF and AWS Secrets Manager.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
            <reference name="How to enhance Amazon CloudFront origin security with AWS WAF and AWS Secrets Manager" url="https://aws.amazon.com/blogs/security/how-to-enhance-amazon-cloudfront-origin-security-with-aws-waf-and-aws-secrets-manager/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the CDN is not bypassed by auditing the logs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-7" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="PROOF-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.3" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.17" mitigation="25"/>
                    <countermeasure ref="aws-tier-3.12" mitigation="25"/>
                    <countermeasure ref="aws-tier-6.4" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.17" mitigation="25"/>
                <countermeasure ref="aws-tier-3.12" mitigation="25"/>
                <countermeasure ref="aws-tier-5.3" mitigation="25"/>
                <countermeasure ref="aws-tier-6.4" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="dc781d65-f874-4a58-84d7-f84a402edb24" diagramComponentId="4ed19abf-d5cc-4c2f-9a55-b79dc6ba21e3" ref="8eac4034-fa71-4753-938c-c147a01a52cb" name="AWS ElastiCache" desc="" library="Hydras-AWS-Foundation" parentComponentRef="ac6b58c4-31d2-491c-8e25-ef787e9af4ae" componentDefinitionRef="elasticache">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.754">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-522" name="Insufficiently Protected Credentials" state="0" impact="100" issueId="" issueLink="">
          <desc>This weakness occurs when the application transmits or stores
                    authentication credentials and uses an insecure method that is susceptible to
                    unauthorized interception and/or retrieval.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.755">
              <output/>
            </source>
            <references>
              <reference name="CWE-522: Insufficiently Protected Credentials" url="https://cwe.mitre.org/data/definitions/522.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-320" name="Key Management Errors" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category are related to errors in the management of cryptographic keys.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.755">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.755">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.527">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.755">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.755">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.675">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE8" name="Apply any updates of type security for AWS ElastiCache" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Apply any updates of type security for AWS ElastiCache 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You control when to apply an update, regardless of the recommendation. At a minimum, AWS strongly recommends that you apply any updates of type security to ensure that your clusters are always up-to-date with current security patches. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Applying the Service Updates Using the Console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can apply the service updates using one of the following console options. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Applying the Service Updates Using the Console for Redis or Memcached 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose this to view Update Status for individual clusters, and then choose Apply, View, or Stop for the service updates. If a service update is available, the console displays a banner at the top of the page. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you choose Apply Now, you can choose to apply the service update to all or a subset of the applicable clusters in this workflow. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  If you choose Dismiss, the console stops displaying the banner for that console session. However, the banner reappears the next time that you refresh your session. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  On the Apply Updates Now page, you can use these options: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Auto-Update after Due Date: If this attribute is yes, after the Recommended apply by Date has passed, ElastiCache schedules clusters yet to be updated in the appropriate maintenance window. Updates are applied along with other applicable updates. You can continue to apply the updates until the update expiration date. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If this attribute is no and you don't apply the self-service update before it expires, ElastiCache doesn't automatically apply the service update for you. If your cluster is part of one or more ElastiCache-supported compliance programs and isn't updated, it remains out of compliance until the next cumulative update becomes available. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - The Nodes Updated ratio value for your cluster and the Estimated Update Time value help you plan your maintenance schedule. If service updates exceed the estimated time constraints for your business flows, you can stop updates and reapply them at a later date. For more information, see Stopping the Self-Service Updates. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - If you choose to apply the service updates to any or all available clusters, choose Confirm. If you choose this, you then view the Service Updates page, where you can monitor the status of your service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - If you choose Cancel, you can explore further options, as explained following. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  On the ElastiCache dashboard, you can check Update Status for each of your Redis clusters, as shown following. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Update Status displays one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - update available: An update is available to apply to this cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - not-applied: An update is available but not yet applied. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - scheduling: The update date is being scheduled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - scheduled: The update date has been scheduled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - waiting-to-start: The update process will soon begin. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - in-progress: The update is being applied to this cluster, rendering it unavailable for the duration of the value in Estimated Update Time. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - stopping: An in-progress update has been interrupted before completion. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - stopped: The update has been terminated. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you stop an in-progress update on a cluster, some nodes might be updated while others are not. The stopping process doesn't roll back any changes to already updated nodes. You can reapply the update to those nodes that still have an available status at your convenience if the update doesn't have an Expired status. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - complete: The update has been successfully applied. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - up to date: The cluster doesn't have any outstanding active service updates and your cluster is compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Applying the Service Updates Using the Service Updates List 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To view the list of individual service updates and their status, along with other information, choose the Service Updates List tab. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In Service Updates List, you can view the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update Name: A unique identifier for the service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Status: The status of the update, which is one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- available: The update is available for requisite Redis clusters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- complete: The update has been applied and all clusters are compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- cancelled: The update has been canceled and is no longer necessary. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- expired: The update is no longer available to apply. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Severity: The priority of applying the update: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- critical: We recommend that you apply this update immediately (within 14 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- important: We recommend that you apply this update as soon as your business flow allows (within 30 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- medium: We recommend that you apply this update as soon as you can (within 60 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- low: We recommend that you apply this update as soon as you can (within 90 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Type: For this version, only security updates are supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Release Date: When the update is released and available to apply on your Redis fleet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Recommended Apply By Date: ElastiCache guidance date to apply the updates by. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choosing an individual update provides additional details, including the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Description: Provides details on the service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Expiration Date: The date when the service update expires and no longer is available. Any updates that aren't applied before their expiration date are cumulatively rolled into the next update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Important 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you apply updates of type security as soon as you can. Doing this helps ensure that your Redis clusters are always up-to-date with the latest security patches and are compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To view the list of individual service updates in relation to the applicable clusters, choose the Service Update Status tab. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the Service Updates Status list, you can view the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update Name: Detailed information about the service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Cluster Name: The list of your Redis clusters that are eligible for the update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Nodes Updated: The ratio of individual nodes within a specific cluster that were updated or remain available for the specific service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Severity: The priority of applying the update: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- critical: We recommend that you apply this update immediately (within 14 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- important: We recommend that you apply this update as soon as you can (within 30 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- medium: We recommend that you apply this update as soon as you can (within 60 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- low: We recommend that you apply this update as soon as you can (within 90 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Type: For this version, only security updates are supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update Status: The status of the update, which is one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- available: The update is available for requisite Redis clusters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- complete: The update has been applied and all Redis clusters are compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- canceled: The update has been canceled and is no longer necessary. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- expired: The update is no longer available to apply. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update SLA Met: This reflects whether your cluster is compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- yes: All available updates have been applied to this cluster and available nodes by the apply-by date. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  -- no: The service update might have been applied successfully to one or more nodes, but other nodes within the cluster still have an available status. This typically happens when a service update is applied and then stopped. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  If you stop the progress of a service update on a cluster, any nodes that are already updated have a complete status. Any nodes that have an In Progress or Stopping status revert to a Stopped status, and the Service Update SLA Met status changes to no. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- N/A: The replication group was created after the recommended apply-by date. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Cluster Status Modified Date: The latest date that the cluster was modified with a service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  The Show Previous Updates check box, if selected, displays a list of previous updates that are no longer available. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Managing the Service Updates -  Memcached" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/managing-updates.html"/>
            <reference name="Managing the Service Updates - Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/managing-updates.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that any updates of type security are applied for AWS ElastiCache.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.466">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.7" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.675">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE1" name="Control access to AWS ElastiCache using IAM policies" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to AWS ElastiCache using IAM policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can have valid credentials to authenticate your requests, but unless you have permissions you cannot create or access Amazon ElastiCache resources. For example, you must have permissions to create an ElastiCache cache cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  The following shows an example of a permissions policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp;"Version": "2012-10-17", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp;"Statement": [{ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Sid": "AllowClusterPermissions", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Effect": "Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Action": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:CreateCacheCluster", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:CreateReplicationGroup", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:DescribeCacheClusters", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:ModifyCacheCluster", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:RebootCacheCluster"], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Resource": "*" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}, 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;{ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Sid": "AllowUserToPassRole", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Effect": "Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Action": [ "iam:PassRole" ], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Resource": "*" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;} 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp;] 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The policy has two statements: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. The first statement grants permissions for the Amazon ElastiCache actions (elasticache:CreateCacheCluster, elasticache:DescribeCacheClusters, elasticache:ModifyCacheCluster, and elasticache:RebootCacheCluster) on any cache cluster owned by the account. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. The second statement grants permissions for the IAM action (iam:PassRole) on IAM roles. The wildcard character (*) at the end of the Resource value means that the statement allows permission for the iam:PassRole action on any IAM role. To limit this permission to a specific role, replace the wildcard character (*) in the resource ARN with the specific role name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The policy doesn't specify the Principal element because in an identity-based policy you don't specify the principal who gets the permission. When you attach policy to a user, the user is the implicit principal. When you attach a permissions policy to an IAM role, the principal identified in the role's trust policy gets the permissions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using Identity-Based Policies (IAM Policies) for Amazon ElastiCache" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.IdentityBasedPolicies.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.467">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.8" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.9" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="12.10.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE10" name="Enable AWS SNS Notifications for AWS ElastiCache" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable AWS SNS Notifications for AWS ElastiCache 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  When significant events happen for a cluster, ElastiCache sends notification to a specific Amazon SNS topic. Examples include a failure to add a node, success in adding a node, the modification of a security group, and others. By monitoring for key events, you can know the current state of your clusters and, depending upon the event, be able to take corrective action. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Adding an Amazon SNS Topic (Console) 
&lt;/div&gt; 
&lt;div&gt;
  The following procedure shows you how to add an Amazon SNS topic for a cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  This process can also be used to modify the Amazon SNS topic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To add or modify an Amazon SNS topic for a cluster (Console) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Sign in to the AWS Management Console and open the ElastiCache console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In Clusters, choose the cluster for which you want to add or modify an Amazon SNS topic ARN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Choose Modify. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4 In Modify Cluster under Topic for SNS Notification, choose the SNS topic you want to add, or choose Manual ARN input and type the ARN of the Amazon SNS topic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. Choose Modify. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Managing ElastiCache Amazon SNS Notifications - Memcached" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/ECEvents.SNS.html"/>
            <reference name="Managing ElastiCache Amazon SNS Notifications - Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.SNS.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.467">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.6" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest for Amazon S3" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Encrypt sensitive data at rest for Amazon S3&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Data protection at rest refers to protecting data while it is stored on disks in Amazon S3 data centers.&lt;/p&gt;&lt;p&gt;You have the following options for protecting data at rest in Amazon S3:&lt;/p&gt;&lt;p&gt;- Server-Side Encryption - Request Amazon S3 to encrypt your object before saving it on disks in its data centers and then decrypt it when you download the objects.&lt;/p&gt;&lt;p&gt;- Client-Side Encryption - Encrypt data client-side and upload the encrypted data to Amazon S3. In this case, you manage the encryption process, the encryption keys, and related tools.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Server-Side Encryption&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;You can't apply different types of server-side encryption to the same object simultaneously.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)&lt;/p&gt;&lt;p&gt;When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a root key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256) GCM, to encrypt your data. For objects encrypted prior to AES-GCM, AES-CBC is still supported to decrypt those objects.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with KMS keys Stored in AWS Key Management Service (SSE-KMS)&lt;/p&gt;&lt;p&gt;Server-Side Encryption with AWS KMS keys (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a KMS key that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your KMS key was used and by whom. Additionally, you can create and manage customer managed keys or use AWS managed keys that are unique to you, your service, and your Region.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Customer-Provided Keys (SSE-C)&lt;/p&gt;&lt;p&gt;With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.&lt;/p&gt;&lt;p&gt;Client-Side Encryption&lt;/p&gt;&lt;p&gt;To enable client-side encryption, you have the following options:&lt;/p&gt;&lt;p&gt;- Use a key stored in AWS Key Management Service (AWS KMS).&lt;/p&gt;&lt;p&gt;- Use a key that you store within your application.&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;Amazon S3 supports only symmetric encryption KMS keys, and not asymmetric KMS keys.&lt;/p&gt;&lt;p&gt;For more information about each encryption option, please see Reference URLs.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Protecting data using client-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingClientSideEncryption.html"/>
            <reference name="Protecting data using server-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.467">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW2" name="Use AWS Secrets Manager to securely rotate, manage, and retrieve database credentials, API keys, and other secrets" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Securely rotate, manage, and retrieve database credentials, API keys, and other secrets. AWS recommends to use AWS Secrets Manager for this purpose.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;AWS Secrets Manager is a secrets management service that helps you protect access to your applications, services, and IT resources. This service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Using Secrets Manager, you can secure and manage secrets used to access resources in the AWS Cloud, on third-party services, and on-premises.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To get started with AWS Secrets Manager:&lt;/p&gt;&lt;p&gt;1. Identify your secrets and locate where they are used in your applications.&lt;/p&gt;&lt;p&gt;2. Sign in to the AWS Management Console using your AWS credentials and navigate to the Secrets Manager console.&lt;/p&gt;&lt;p&gt;3. Use the Secrets Manager console to upload the secret you identified. Alternatively, you can use the AWS SDK or AWS CLI to upload a secret (once per secret). You can also write a script to upload multiple secrets.&lt;/p&gt;&lt;p&gt;4. If your secret is not in use yet, follow the instructions on the console to configure automatic rotation. If applications are using your secret, complete steps (5) and (6) before configuring automatic rotation.&lt;/p&gt;&lt;p&gt;5. If other users or applications need to retrieve the secret, write an IAM policy to grant permissions to the secret.&lt;/p&gt;&lt;p&gt;6. Update your applications to retrieve secrets from Secrets Manager.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;You can configure Amazon CloudWatch Events to receive a notification when AWS Secrets Manager rotates a secret. You can also see when Secrets Manager last rotated a secret using the Secrets Manager console or APIs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.676">
              <output/>
            </source>
            <references>
              <reference name="AWS Secrets Manager FAQs" url="https://aws.amazon.com/secrets-manager/faqs/"/>
              <reference name="Get started with AWS Secrets Manager" url="https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE9" name="Use CloudWatch alarms with AWS ElastiCache" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use CloudWatch alarms with AWS ElastiCache 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  ElastiCache provides metrics that enable you to monitor your clusters. You can access these metrics through CloudWatch. ElastiCache provides both host-level metrics (for example, CPU usage) and metrics that are specific to the cache engine software (for example, cache gets and cache misses). These metrics are measured and published for each Cache node in 60-second intervals. 
&lt;/div&gt; 
&lt;div&gt;
  By setting CloudWatch alarms on certain key metrics, you will be notified if your cache cluster's performance starts to degrade. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Monitoring CloudWatch Cluster and Node Metrics (Console) 
&lt;/div&gt; 
&lt;div&gt;
  To gather CPU utilization statistics for a cache cluster 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Sign in to the AWS Management Console and open the ElastiCache console at https://console.aws.amazon.com/elasticache/. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Select the cache nodes you want to view metrics for. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  Selecting more than 20 nodes disables viewing metrics on the console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  a. On the Cache Clusters page of the AWS Management Console, click the name of one or more cache clusters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The detail page for the cache cluster appears. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  b. Click the Nodes tab at the top of the window. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  c. On the Nodes tab of the detail window, select the cache nodes that you want to view metrics for. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A list of available CloudWatch Metrics appears at the bottom of the console window. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  d. Click on the CPU Utilization metric. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The CloudWatch console will open, displaying your selected metrics. You can use the Statistic and Period drop-down list boxes and Time Range tab to change the metrics being displayed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring Use with CloudWatch Metrics - Memcached" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheMetrics.html"/>
            <reference name="Monitoring Use with CloudWatch Metrics - Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheMetrics.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  To test your rule that triggers on an API call, you have to trigger it with its Specific operation as defined into the Cloudwatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  In CloudWatch Events, it is possible to create rules that lead to infinite loops, where a rule is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket, and trigger software to change them to the desired state. If the rule is not written carefully, the subsequent change to the ACLs fires the rule again, creating an infinite loop. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To prevent this, write the rules so that the triggered actions do not re-fire the same rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead of after any change. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An infinite loop can quickly cause higher than expected charges. AWS recommends that you use budgeting, which alerts you when charges exceed your specified limit. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.467">
              <output/>
            </source>
            <references>
              <reference name="Creating a CloudWatch Events Rule That Triggers on an AWS API Call Using AWS CloudTrail" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Create-CloudWatch-Events-CloudTrail-Rule.html"/>
              <reference name="Creating a CloudWatch Events Rule That Triggers on an AWS API Call Using AWS CloudTrail PDF" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Create-CloudWatch-Events-CloudTrail-Rule.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.1-1.2-1.3" name="Use the principle of least privilege on key ownership and usage" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&amp;nbsp;&lt;br&gt;AWS Key Management Service (KMS) by default provides service Customer Managed Keys (CMK). Customers also have the ability to create CMKs, which allows for configuration of key rotation and key policy which is applied to the customer created CMK. You can use the key policy by itself to control who has access to the CMK and what actions each identity can perform. Controlling access this way specifies the full scope of access to the CMK in a single document (the key policy).Customer created CMKs can be used for:&amp;nbsp;&lt;br&gt;- AWS Service level encryption(e.g. EBS, RDS, S3).&amp;nbsp;&lt;br&gt;- Key management for file/application level encryption.&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Rationale&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Ensures principle of least privilege on key ownership and usage.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;Using the Amazon unified command line interface:&amp;nbsp;&lt;br&gt;- If there is no alias listed for Web tier, create a new KMS key and note the "KeyId" element:&lt;/p&gt; 
&lt;p&gt;aws kms create-key&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;- Create an alias for the Web tier key using the above KeyId:&amp;nbsp;&lt;br&gt;aws kms create-alias --alias-name &amp;lt;tier_kms_alias&amp;gt; --target-key-id &amp;lt;tier_kms_key&amp;gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI Command Reference:create-alias" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-alias.html"/>
            <reference name="AWS CLI Command Reference:create-key" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-key.html"/>
            <reference name="AWS CLI Command Reference:list-aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Run the following command via the Amazon unified command line interface to determine if a web-tier KMS key exists: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  aws kms list-aliases --query 'Aliases[?AliasName == '&amp;lt;web_tier_kms_alias&amp;gt;']' 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;If such a key exists, an AliasArnproperty will be displayed in the output.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.675">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:36.467">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authorization" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE8" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-ENCRYPTION-KEYS" name="Attackers obtain access to encryption keys and are able to decrypt ciphertext" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Cryptography is intrinsically related to the secure management of cryptographic keys which need to be protected and securely stored by applications. Leaking cryptographic keys diminishes any advantage of cryptography, allowing attackers to break message confidentiality and integrity, and to authenticate as legitimate users or impersonate legitimate services.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-522">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE10" mitigation="50"/>
                    <countermeasure ref="AWS-ELASTICACHE9" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE10" mitigation="50"/>
                <countermeasure ref="AWS-ELASTICACHE9" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="1291b3e1-bf0b-497b-9387-b8053fe67f69" diagramComponentId="b335208f-2ec3-466f-ab76-51f9da590406" ref="315742d3-3d9e-4a0c-909c-78f3885e8607" name="SIEM Team" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="generic-client">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-798, CWE-603" name="Client side code stores secret keys, sensitive business logic or other proprietary information" state="0" impact="100" issueId="" issueLink="">
          <desc>When client side code is fully controlled by the user, a malicious user may be able to read the code or reverse engineer it if it is compiled in any form. If the client side code includes secret keys, sensitive business logic (like client authentication) or proprietary information, all of this is directly exposed to the user, allowing them to get the sensitive information or study the business logic with the aim of bypassing it.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Some examples of this vulnerability are:&amp;nbsp; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Performing an authentication on the client side without server side validation.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Making privileged calls from the client based solely on client side conditions (i.e. a cash check on the client side to place an order on an e-commerce platform).&lt;/li&gt; 
   &lt;li&gt;&amp;nbsp;Hard-coding keys and secrets on the client side to make client-to-client calls without a proxy.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-28T12:50:39.802">
              <output/>
            </source>
            <references>
              <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="https://cwe.mitre.org/data/definitions/602.html"/>
              <reference name="CWE-603: Use of client-side Authentication" url="https://cwe.mitre.org/data/definitions/603.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-05-06T09:23:20.012">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T09:56:18.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-05-30T14:52:04.610">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-477" name="Use of Obsolete Function" state="0" impact="75" issueId="" issueLink="">
          <desc>The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.
&lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T09:48:50.678">
              <output/>
            </source>
            <references>
              <reference name="CWE-477: Use of Obsolete Function" url="https://cwe.mitre.org/data/definitions/477.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T10:04:19.860">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and server, terminating within a secure environment on the server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-low-baseline" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.133">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="INS-CLIENT" name="Ensure the application does not use unsupported, insecure, or deprecated client-side technologies" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure the application does not use unsupported, insecure, or deprecated client-side technologies such as: NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
 &lt;li&gt;Test the presence of any client side applet such as Flash, ActiveX and Silverlight.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T10:10:41.554">
              <output/>
            </source>
            <references>
              <reference name="Testing Information Gathering" url="https://www.owasp.org/index.php/Testing_Information_Gathering"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CS-CLIENT-SECRET" name="Implement sensitive logic and data validation on the server-side" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data and functionalities on the client-side must be considered tainted and subject to manipulation by a malicious actor, regardless of the controls in place (e.g. encryption or obfuscation of client-side code or content). &lt;/p&gt; This includes application logic decisions, such as access controls, and data considered sensitive or secret, such as encryption keys. While controls may be duplicated on the client-side to improve the user experience, it is important to have these enforced on the server-side.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Business logic, in particular access controls, must be implemented on the server-side.&lt;/li&gt; 
  &lt;li&gt;Secret data should be stored on the server-side, and only what is explicitly required should be duplicated on the client-side.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;All data provided from the client-side (even from binary clients) should be considered tainted, and security decisions should not be made solely on this data. For example, an insecure implementation could include a compiled application (e.g. Flash!) performing authentication on the client-side against a stored password. The decompilation of the binary (in this case flv file) or the interception and modification of controls between the client and server could expose the password or allow unauthorized access to the authenticated application content. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-low-baseline" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify where critical decisions are made on the application. Key areas include:&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;authentication&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;input validation&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;access to resources&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;state bypasses&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Ensure those decisions are made or validated on the server side, particularly where client-side controls are implemented.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that sensitive data passed to the client side is appropriate, and ensure no inappropriate data is stored or hard-coded into client-side components, for example&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Personally Identifiable Information.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Financial data, in particular cardholder data (as defined by the &lt;span class="caps"&gt;PCI&lt;/span&gt; Council).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Application secrets - such as symmetric encryption keys or passwords.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-28T12:52:08.060">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-CLIENT-SECRET" name="Review code, configuration, and online repositories for secrets and sensitive information systemically" issueId="" issueLink="" platform="" cost="0" risk="77" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secret or sensitive information should not be exposed in source-code or client-side software.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Code and online repositories must not contain secrets or sensitive information.&lt;/li&gt;&lt;li&gt;Configuration files on the client- and server-side must not contain hard-coded credentials or other sensitive data.&lt;/li&gt;&lt;li&gt;Online repositories, services, and other associated restricted content must have appropriate access controls in place.&lt;/li&gt;&lt;li&gt;Where sensitive information must be stored on the server side, it should be in memory for transient data, or encrypted if persistent. &amp;nbsp;Depending on the use case, this encryption may be asymmetric or public key, or symmetric using a shared secret. Note however that reversible encryption on the client-side and in-memory storage are still susceptible to client-side attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Use automated tools to regularly search for keywords or regular expression patterns within the code, configuration and other files exposed on the client and server-side, and any remote repositories.&lt;/li&gt;&lt;li&gt;The scanning process must be triggered before the code is published (in particular for public/open source code) as once published it is likely to be archived (and any disclosed secrets would be exposed and/or have to be changed)&lt;/li&gt;&lt;li&gt;Review criteria and requirements for any temporary or persistent storage of sensitive or secret data on the client-side, and the protections in place.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T17:54:26.128">
              <output/>
            </source>
            <references>
              <reference name="Amazon git-secrets" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Microsoft Exchange 2016 Sensitive Information Patterns" url="https://technet.microsoft.com/en-us/library/jj150541(v=exchg.160).aspx"/>
              <reference name="Prevents you from committing secrets and credentials into git repositories" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Seekret" url="https://github.com/apuigsech/seekret"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:53:45.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), should be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
&lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity that issues security tokens or electronic credentials to subscribers. A CSP forms part of an authentication system, most typically identified as a separate entity in a Federated authentication system. A CSP may be an independent third party, or may issue credentials for its own use. Credential Service Provider is typically also the Identity Provider (IDP). An example of a CSP would be an online site whose primary purpose may be, for example, internet banking - but whose users may be subsequently authenticated to other sites, applications or services without further action on their part.&lt;/p&gt;
&lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
&lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying the claimant's possession and control of one or two authenticators, using an authentication protocol.&lt;/p&gt;
&lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically to process a transaction or grant access to information or a system.&lt;/p&gt;
&lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and identity proofing.&lt;/p&gt;
&lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more authentication protocols.&lt;/p&gt;
&lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-30T08:44:22.165">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-295-CLIENT" name="Validate the certificate presented by the server" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Certificates presented by the server must be valid, provable, and cryptographically secure in order to derive the benefits of TLS encrypted communications.&amp;nbsp; Invalid certificates expose the application and its users to spoofing attacks such as Man In The Middle (MITM) where data may be intercepted or redirected to a malicious site, and undermine confidence in the site.&lt;/p&gt;&lt;p&gt;Validate the certificate presented by the server is signed by a trusted Certificate Authority.&lt;/p&gt;&lt;p&gt;Ensure the certificate chain of trust is legitimate and secure.&lt;/p&gt;&lt;p&gt;Verify cryptographically secure ciphers are in use throughout the chain, in particular strong hashing algorithms for certificate signatures.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-11 Trusted Path" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/71-08_02_SC-11"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
          </references>
          <standards>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify the client is conducting appropriate checks and receives a positive response regarding the validity and quality of the site certificate.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the server certificate, and those in the trust chain.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:13.775">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-327" name="Validate the TLS implementation in use" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There are a number of established open- and closed- source TLS implementations in use, which have undergone extensive review and testing by the developers, as well as third-parties in the development, security, and cryptography space. Typically, these widely used implementations have a lower risk of exploitation compared with privately developed - or less known - implementations (although vulnerabilities such as Heartbleed highlight this is not universally true) due to this additional scrutiny scrutiny.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify the TLS and other cryptographic libraries, implementations, and technologies in use.&lt;/li&gt;&lt;li&gt;Verify the veracity of the implementations, and review third party validations together with security advisories or best-practices relating to them.&lt;/li&gt;&lt;li&gt;Some well-known TLS libraries are NSS from Mozilla, and OpenSSL.&lt;/li&gt;&lt;li&gt;Where an unknown or unproven implementation is in use, consider use of an established option.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Compatibility" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm the TLS layer in use is a secure, stable, release of a publicly published implementation that has been subject to expert analysis and review.&lt;ul&gt;&lt;li&gt;If not, assurance of the security of the implementation should be sought, or the risk quantified.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that a client connecting to the server will only be able to negotiate cryptographically strong, secure ciphers.&lt;/li&gt;&lt;li&gt;Confirm that a client can not downgrade to a weaker cipher after initial negotiation.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the TLS/SSL ciphers, protocols, and security mechanisms.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T10:05:11.074">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CSD-CLIENT-SECRET" name="Attackers gain unauthorised access to data or services by accessing a client side secret" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>Secrets stored in any client side components, such as a mobile application, thick
                                client application or in JavaScript used by a browser, can be accessed by
                                users/attackers who have access to this client.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Attackers could then gain access to the data or services that are protected by this
                                secret, if no other credentials are required.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-798, CWE-603">
                  <countermeasures>
                    <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="DEP-CLIENT-TECH" name="Attackers gain unauthorised access to the application by the use of deprecated client-side technologies" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  As programming languages evolve, functions occasionally become obsolete due to:
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;Advances in the language.&lt;/li&gt;
 &lt;li&gt;Improved understanding of how operations should be performed effectively and securely.&lt;/li&gt;
 &lt;li&gt;Changes in the conventions that govern certain operations. &lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-477">
                  <countermeasures>
                    <countermeasure ref="INS-CLIENT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="INS-CLIENT" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed to the other component as if it were never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-295-CLIENT" mitigation="34"/>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="33"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="CWE-327" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-295-CLIENT" mitigation="34"/>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="33"/>
                <countermeasure ref="CWE-327" mitigation="33"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="10"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="1eb0e3d1-7d8a-413c-bce4-1c51579945b6" diagramComponentId="c14aab51-dfef-4c32-bd59-9259ea4adf04" ref="f594eb8d-5453-4e6c-89aa-5d4ada78530e" name="AWS ELB (Elastic Load Balancer)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="load-balancer">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-295" name="Improper Certificate Validation" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not validate, or incorrectly validates, a certificate.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.810">
              <output/>
            </source>
            <references>
              <reference name="CWE-295: Improper Certificate Validation" url="https://cwe.mitre.org/data/definitions/295.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.811">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.4" name="Non-auditable actions in the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The actions in the resources are not audited and not recorded in the logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.811">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693" name="Protection Mechanism Failure" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection
                        mechanism that provides sufficient defense against directed attacks against the
                        product.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="unknown-resource-status" name="Unknown resource status" state="0" impact="100" issueId="" issueLink="">
          <desc>We do not have our resources current status and as a result lose control of some resources,
                        for example, we may believe these resources are inactive when in fact the status has changed and we are unaware.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-1.12" name="Add SSL/TLS Certificate to App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances. 
&lt;br&gt; 
&lt;br&gt; The SSL\TLS protocol uses an X.509 certificate (SSL\TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer. 
&lt;br&gt; 
&lt;br&gt; You can create a certificate using a Third Party Certificate Authority, AWS Certificate Manager or a self signed certificate like OpenSSL. 
&lt;br&gt; 
&lt;br&gt; Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;br&gt; 
&lt;br&gt; All the application traffic between the Web Tier instances and the App Tier ELB nodes should be encrypted using an SSL\TLS certificate. 
&lt;br&gt; 
&lt;b&gt;Remediation:&lt;/b&gt; 
&lt;br&gt; 
&lt;br&gt; Using the Amazon unified command line interface: 
&lt;ul&gt; 
 &lt;li&gt;Adding a HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80): &lt;br&gt; 
  &lt;blockquote&gt;
    aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn 
  &lt;/blockquote&gt; &lt;/li&gt; 
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB add/delete listeners" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-add-or-delete-listeners.html#add-listener-cli"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App-tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Note that if the ListenerDescriptions is empty, the ELB does not have a listener configured with a SSL\TLS certificate, or a TCP listener (TCP pass-through):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.611">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.9" name="Add SSL/TLS Certificate to Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  When you use HTTPS for your front-end listener, you must deploy an SSL/TLS certificate on your load balancer. The load balancer uses the certificate to terminate the connection and then decrypt requests from clients before sending them to the back-end instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The TLS protocol uses an X.509 certificate (SSL/TLS server certificate) to authenticate both the client and the back-end application. An X.509 certificate is a digital form of identification issued by a trusted certificate authority (CA) and contains identification information, a validity period, a public key, a serial number, and the digital signature of the issuer. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can create a certificate using a Third Party Certificate Authority or AWS Certificate Manager. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: an SSL certificate configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  All the application traffic between the clients and the Web Tier ELB nodes should be encrypted using a SSL/TLS certificate. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Adding a HTTPS listener configured with a SSL/TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB add/delete listeners" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-add-or-delete-listeners.html#add-listener-cli"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Note that if the ListenerDescriptions element is empty, the ELB does not have a listener configured with a SSL/TLS certificate, or a TCP listener (TCP pass-through):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.SSLCertificateId != null ||&amp;nbsp; Listener.Protocol == 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.612">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.13" name="Allow connectivity to the VPC Internet Gateway (IGW) and associate the Routing Table with Web tier ELB subnet (by default route (0.0.0.0/0))" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A route table contains a set of rules, called routes, that are used to determine where network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the routing for the subnet. A subnet can only be associated with one route table at a time, but you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  The default route (0.0.0.0/0) should be pointing to the Internet Gateway in order to provide internet connectivity for the Web tier ELB. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have an IGW configured as gateway:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_igw&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_igw&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].Subnets&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has an IGW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnet-id,Values=&amp;lt;web_tier_elb_subnet1&amp;gt;,&amp;lt;web_tier_elb_subnet2&amp;gt; --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.612">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.15" name="Associate App Tier Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Through Auto-Scaling Group configuration you can define: 
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group 
  Availability Zones / subnets used 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List existing load balancers:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}' 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div style=""&gt;
   or 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new load balancer:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --scheme internal --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;app_tier_subnet1&amp;gt; &amp;lt;app_tier_subnet2&amp;gt; --security-groups &amp;lt;app_tier_elb_security_group&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --auto-scaling-group-name &amp;lt;app_tier_autoscaling_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;app_tier_autoscaling_group_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.1" name="Associate each Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Through Auto-Scaling Group configuration you can define: 
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group 
  Availability Zones / subnets used 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List existing load balancers:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}' 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div style=""&gt;
   or 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new load balancer:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;elb_name&amp;gt; --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;application_subnet&amp;gt; --security-groups &amp;lt;application_security_groups&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;elb_name&amp;gt; --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.612">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.14" name="Associate Web Tier Auto-Scaling Group to ELB" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  It enables greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic across 1 or more Availability Zones within a VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Elastic Load Balancing must be integrated with Auto Scaling Groups to ensure that you have availability of compute resources in the event of a failure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Integrating Auto Scaling Groups with an Elastic Load Balancer will help provide high availability and back-end EC2 instance scaling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Through Auto-Scaling Group configuration you can define: 
  minimum / maximum number of EC2 instances to be launched by the Auto-Scaling Group 
  Availability Zones / subnets used 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List existing load balancers:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName}' 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   or 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new load balancer:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners &amp;lt;listener_config&amp;gt; --subnets &amp;lt;web_tier_elb_subnet1&amp;gt; &amp;lt;web_tier_elb_subnet2&amp;gt; --security-groups &amp;lt;web_tier_elb_security_group&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Attached load balancer from previous steps to autoscaling group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws autoscaling attach-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --auto-scaling-group-name &amp;lt;web_tier_autoscaling_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe autoscaling load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify Autoscaling Group Name and associated ELB name:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups&amp;nbsp; --query 'AutoScalingGroups[*].{ELB:LoadBalancerNames, ASGName:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify current status of the ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-load-balancers --auto-scaling-group-name &amp;lt;web_tier_autoscaling_group_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.612">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-ELB1" name="Configure ALB to redirect all HTTP requests to HTTPS" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Before you start to use your Application Load Balancer, you must add one or more listeners. A listener is a process that uses the configured protocol and port to check for connection requests. Listeners support both the HTTP and HTTPS protocols. You can use an HTTPS listener to offload the work of encryption and decryption to your load balancer. To enforce encryption in transit, you should use redirect actions with Application Load Balancers to redirect client HTTP requests to an HTTPS request on port 443.&lt;/p&gt;&lt;p&gt;If you use Application Load Balancers with an HTTP listener, ensure that the listener is redirected to HTTPS for any nonconsole administrative access. Allowing unencrypted authentication over HTTP for administrators of the cardholder data environment might violate the requirement to encrypt all nonconsole administrative access using strong cryptography.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;To remediate this issue, you redirect HTTP request to HTTPS.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To redirect HTTP requests to HTTPS on an Application Load Balancer&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.&lt;/li&gt;&lt;li&gt;In the navigation pane, under &lt;strong&gt;Load Balancing&lt;/strong&gt;, choose &lt;strong&gt;Load balancers&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose an Application Load Balancer.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Listeners&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Select the check box for an HTTP listener (port 80 TCP) and then choose &lt;strong&gt;Edit&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;If there is an existing rule, you must delete it. Otherwise, choose &lt;strong&gt;Add action&lt;/strong&gt; and then choose &lt;strong&gt;Redirect to...&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;HTTPS&lt;/strong&gt; and then enter &lt;strong&gt;443&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose the check mark in a circle symbol and then choose &lt;strong&gt;Update&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="2.2.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="4.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.10" name="Configure Health Check for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon ELB will periodically sends pings, attempts connections, or sends requests to test the EC2 instances, these tests are called health checks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The status of the instances that are healthy at the time of the health check is InService. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The status of any instances that are unhealthy at the time of the health check is OutOfService. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state. The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Ensures availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Target": "&amp;lt;string&amp;gt;", 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Interval": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Timeout": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "UnhealthyThreshold": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "HealthyThreshold": &amp;lt;integer&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify App tier ELB to include appropriate health check:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb configure-health-check --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --health-check file:///tmp/ELBhealthcheck.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB healthchecks" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-healthchecks.html"/>
            <reference name="Amazon docs: configure health check" url="https://docs.aws.amazon.com/cli/latest/reference/elb/configure-health-check.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify if health check is in place on the App tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName,HealthCheck:HealthCheck}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.9" name="Configure Health Check for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  By default, an Auto-Scaling Group periodically uses the results of the EC2 instance status checks to determine the health status of each instance. If an instance fails the EC2 instance status checks, Auto-Scaling marks the instance as unhealthy and replaces the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  However, if you have attached one or more Elastic Load Balancing (ELB) load balancers to your Auto-Scaling Group and the instance fails the ELB health checks, Auto-Scaling does not replace the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon ELB will periodically sends pings, attempt connections, or sends requests to test the EC2 instances, these tests are called health checks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The status of the instances that are healthy at the time of the health check is InService. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The status of any instances that are unhealthy at the time of the health check is OutOfService. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The load balancer performs health checks on all registered instances, whether the instance is in a healthy state or an unhealthy state. The load balancer routes requests only to the healthy instances. When the load balancer determines that an instance is unhealthy, it stops routing requests to that instance. The load balancer resumes routing requests to the instance when it has been restored to a healthy state 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Ensure availability of back-end EC2 instances associated with an Amazon ELB through application layer health check (ex: http) instead of TCP health checks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ELBhealthcheck.json:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Target": "&amp;lt;string&amp;gt;", 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Interval": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "Timeout": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "UnhealthyThreshold": &amp;lt;integer&amp;gt;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; "HealthyThreshold": &amp;lt;integer&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Modify Web tier ELB to include appropriate health check:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb configure-health-check --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --health-check file:///tmp/ELBhealthcheck.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: configure health check" url="https://docs.aws.amazon.com/cli/latest/reference/elb/configure-health-check.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Identify if health check is in place on the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query 'LoadBalancerDescriptions[*].{ELBName:LoadBalancerName,HealthCheck:HealthCheck}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.13" name="Configure the latest SSL Security Policies for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div style=""&gt; 
 &lt;ul&gt; 
  &lt;li&gt;(Note that you should replace &amp;lt;app\_tier\_elb&amp;gt; with your App-tier ELB name, and &amp;lt;latest\_ssl\_policy&amp;gt; with the proper policy name)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb set-load-balancer-policies-of-listener --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --load-balancer-port 443 --policy-names&amp;nbsp; &amp;lt;latest_ssl_policy&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener policy" url="https://aws.amazon.com/premiumsupport/knowledge-center/elb-listener-policy-cli/"/>
            <reference name="Amazon docs: ELB security policy options" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-options.html"/>
            <reference name="Amazon docs: describe load balancer policies" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-policies.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: set load balancer policies of listener" url="https://docs.aws.amazon.com/cli/latest/reference/elb/set-load-balancer-policies-of-listener.html"/>
          </references>
          <standards>
            <standard ref="1.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App-tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Find all the SSL security policies associated with your load balancer listener:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancer-policies --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query 'PolicyDescriptions[?PolicyTypeName==`SSLNegotiationPolicyType`].{PolicyName:PolicyName,ReferenceSecurityPolicy:PolicyAttributeDescriptions[0].AttributeValue}' --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Find which of the above policies is currently active, and check on AWS documentation if it is the latest (note that for the TCP listeners the PolicyNames element will be empty, but the TCP listener is still compliant when using SSL certificates on the back-end EC2 instances):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{CompliantListeners:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.10" name="Configure the latest SSL Security Policies for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing uses an Secure Socket Layer (SSL) negotiation configuration, known as a security policy, to negotiate SSL/TLS connections between a client and the load balancer. A security policy is a combination of SSL/TLS protocols, ciphers, and the Server Order Preference option. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Elastic Load Balancing supports configuring your load balancer to use either predefined or custom security policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols that are used to encrypt confidential data over insecure networks such as the Internet. The TLS protocol is a newer version of the SSL protocol. In the Elastic Load Balancing documentation, we refer to both SSL and TLS protocols as the SSL protocol. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: an SSL certificate configured on the ELB and an SSL Security Policy is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Making sure the latest ELB SSL Security Policy is used will ensure the SSL/TLS connection will be negotiated using only the appropriate cryptographic protocols deemed safe with no proven vulnerabilities. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt;
   (Note that you should replace &amp;lt;web\_tier\_elb&amp;gt; with your Web-tier ELB name, and _&amp;lt;latest\_ssl\_policy&amp;gt;_ with the proper policy name) 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;div style=""&gt;
    aws elb set-load-balancer-policies-of-listener --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --load-balancer-port 443 --policy-names&amp;nbsp; &amp;lt;latest_ssl_policy&amp;gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener policy" url="https://aws.amazon.com/premiumsupport/knowledge-center/elb-listener-policy-cli/"/>
            <reference name="Amazon docs: ELB security policy options" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-options.html"/>
            <reference name="Amazon docs: describe load balancer policies" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-policies.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: set load balancer policies of listener" url="https://docs.aws.amazon.com/cli/latest/reference/elb/set-load-balancer-policies-of-listener.html"/>
          </references>
          <standards>
            <standard ref="1.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Find all the SSL security policies associated with your load balancer listener:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancer-policies --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query 'PolicyDescriptions[?PolicyTypeName==`SSLNegotiationPolicyType`].{PolicyName:PolicyName,ReferenceSecurityPolicy:PolicyAttributeDescriptions[0].AttributeValue}' --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Find which of the above policies is currently active, and check on AWS documentation if it is the latest (note that for the TCP listeners the PolicyNames element will be empty, but the TCP listener is still compliant when using SSL certificates on the back-end EC2 instances):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{CompliantListeners:ListenerDescriptions[?Listener.SSLCertificateId != null || Listener.Protocol == 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.5" name="Create subnets for the Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can add
                        one or more subnets in each Availability Zone. Each subnet must reside entirely within one
                        Availability Zone and cannot span zones. Availability Zones are distinct locations that are
                        engineered to be isolated from failures in other Availability Zones. By launching instances in
                        separate Availability Zones, you can protect your applications from the failure of a single
                        location. AWS assigns a unique ID to each subnet.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a subnet
                        shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). The
                        allowed block size is between a /28 netmask and /16 netmask. If you create more than one subnet
                        in a VPC, the CIDR blocks of the subnets must not overlap.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Some AWS regions have more than 2 availability zones and it is recommended to use more than 2
                        where possible.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        At least 2 subnets in 2 different availability zones (AZ) should be created in order to have
                        fault tolerance and high availability from the perspective of resource deployment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create subnets for Web tier ELB, and note the subnet id:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 create-subnet --vpc-id application_vpc
                        --cidr-block desired_cidr
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Tag the above subnets with the Web tier ELB tags:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 create-tags --resources web_tier_elb_subnet1
                        web_tier_elb_subnet2 --tags Key=public_tier_tag,Value=public_tier_tag_value
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].Subnets&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  OR 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets created for the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:public_tier_tag,Values=public_tier_tag_value --query &amp;quot;Subnets[*].SubnetId&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.26" name="Create the App tier ELB as Internal" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  An internal load balancer routes traffic to your EC2 instances in private subnets using private IP addresses. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Create an internal load balancer and register the database servers with it. The web servers receive requests from the Internet-facing load balancer and send requests for the database servers to the internal load balancer. The database servers receive requests from the internal load balancer. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  When an internal load balancer is created, it receives a public DNS name with the following form: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   internal-name-123456789.region.elb.amazonaws.com 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  The DNS servers resolve the DNS name of your load balancer to the private IP addresses of the load balancer nodes for your internal load balancer. Each load balancer node is connected to the private IP addresses of the back-end instances that are in its Availability Zone using elastic network interfaces. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Creating the App tier ELB as internal will prevent access to the app tier from the Internet and will allow access from the Web tier instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new internal ELB for your App tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer --load-balancer-name app_tier_elb --scheme internal --listeners listener_config --subnets app_tier_subnet1 app_tier_subnet2 --security-groups app_tier_elb_security_group 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Register App tier instances with the new App tier ELB:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb register-instances-with-load-balancer --load-balancer-name app_tier_elb --instances &amp;lt;app_tier_instance1&amp;gt; &amp;lt;app_tier_instance2&amp;gt; &amp;lt;app_tier_instance3&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB internal load balancers" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-internal-load-balancers.html"/>
            <reference name="Amazon docs: create load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: register instances with load balancer" url="https://docs.aws.amazon.com/cli/latest/reference/elb/register-instances-with-load-balancer.html"/>
          </references>
          <standards>
            <standard ref="6.26" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.26" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the Scheme of your App tier ELB, and make sure it is &amp;quot;internal&amp;quot;:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, Scheme:Scheme}&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.21" name="Create the App tier ELB Security Group to only accept HTTP/HTTPS" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        A security group acts as a virtual firewall for your instance to control inbound and outbound
                        traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the
                        instance to up to five security groups. Security groups act at the instance level, not the
                        subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different
                        set of security groups. If you don't specify a particular group at launch time, the instance is
                        automatically assigned to the default security group for the VPC.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For each security group, you add rules that control the inbound traffic to instances, and a
                        separate set of rules that control the outbound traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The SG associated with the App tier ELB should allow connectivity from the security group
                        associated with Web tier instances only for the HTTP (TCP 80) and HTTPS (TCP 443) ports.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The defaults for HTTP and HTTPS are used as an example, any other ports would apply depending on
                        the application design.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;First remove all the ingress rules for the security group associated with the App tier
                        ELB:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 describe-security-groups --group-id app_tier_elb_security_group
                        --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 revoke-security-group-ingress --group-id app_tier_elb_security_group
                        --ip-permissions file:///tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;create locally the below json file containing ingress rules for HTTP (TCP 80) and
                        HTTPS (TCP 443) ports only from and name it IpPermissions.json:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 80,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 80,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserId&amp;quot;:
                        &amp;quot;&amp;lt;&amp;lt;em&amp;gt;aws_account_number&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;GroupId&amp;quot;:
                        &amp;quot;&amp;lt;span style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;&amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span
                        style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;web_tier_security_group&amp;quot;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; },
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 443,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [],
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 443,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserId&amp;quot;:
                        &amp;quot;&amp;lt;&amp;lt;em&amp;gt;aws_account_number&amp;gt;&amp;lt;/em&amp;gt;&amp;quot;,
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;GroupId&amp;quot;:
                        &amp;quot;&amp;lt;span style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;&amp;lt;&amp;lt;/span&amp;gt;&amp;lt;span
                        style=&amp;quot;font-style: italic;&amp;quot;&amp;gt;web_tier_security_group&amp;lt;/span&amp;gt;&amp;gt;&amp;quot;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &amp;nbsp; &amp;nbsp; }
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        ]
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Add to the security group associated with the App tier ELB the above ingress rules:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 authorize-security-group-ingress --group-id app_tier_elb_security_group&amp;nbsp;
                        --ip-permissions file:///PathTo/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.21" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.21" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the security group associated with the App tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, AppTierELBSecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table&amp;nbsp; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br /&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  note the &amp;quot;AppTierELBSecurityGroups&amp;quot; from the output 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure that only HTTP (TCP 80) and HTTPS (TCP 443) traffic is allowed from Web tier Security Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids&amp;nbsp; &amp;lt;app_tier_elb_security_group&amp;gt; --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.22" name="Create the App tier Security Group to allow inbound connections from App tier ELB Security Group for explicit ports" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        A security group acts as a virtual firewall for your instance to control inbound and outbound
                        traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the
                        instance to up to five security groups. Security groups act at the instance level, not the
                        subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different
                        set of security groups. If you don't specify a particular group at launch time, the instance is
                        automatically assigned to the default security group for the VPC.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        For each security group, you add rules that control the inbound traffic to instances, and a
                        separate set of rules that control the outbound traffic.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This is required for both the configured port and protocol for the listener on the back-end
                        instance and the port and protocol used for the health check.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        This protects the App-server tier from unauthorized access, it is recommended to add inbound
                        security group rules that allow traffic for the specific application protocol and ports by
                        referencing as source the security group associated with the App tier ELB.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        Using the Amazon unified command line interface:
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;First remove all the ingress rules for the App tier security group (use the &amp;quot;AppTierSecurityGroup&amp;quot;
                        element from Audit procedure):&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 describe-security-groups --group-id app_tier_security_group
                        --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div style=""&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 revoke-security-group-ingress --group-id app_tier_security_group
                        --ip-permissions file:///tmp/IpPermissions.json
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the
                        App tier ELB security group as the source of the connections:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;div style=""&gt;
                        aws ec2 authorize-security-group-ingress --group-id app_tier_security_group
                        --protocol tcp --port specific_port
                        --source-group app_tier_elb_security_group
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.22" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.22" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List the ingress rules for the above security group, and make sure that allows
                            connections only from App tier ELB security group on specific ports:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws ec2 describe-security-groups --filters Name=tag:app_tier_tag,Values=app_tier_tag_value
                            --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions,
                            AppTierSecurityGroup:GroupId}&amp;quot; --output table
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.19" name="Create the Web tier Security Group to allow inbound connections from Web tier ELB Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. This is required for both the configured port and protocol for the listener on the back-end instance and the port and protocol used for the health check. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;First remove all the ingress rules for the Web tier security group (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;web_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the Web tier ELB security group as the source of the connections:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;web_tier_elb_security_group&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.19" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.19" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the Web tier security group, and make sure that allows connections only from Web tier ELB security group on specific ports:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-9" name="Deploy AWS WAF policies to protect the ALB" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;For additional layers of defense, you can deploy AWS WAF policies to protect the Application Load Balancer. Having edge policies, application policies, and even private or internal policy enforcement layers adds to the visibility of communication requests and provides unified policy enforcement. For more information, see the blog post Deploying defense in depth using AWS Managed Rules for AWS WAF.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
            <reference name="Deploying defense in depth using AWS Managed Rules for AWS WAF" url="https://aws.amazon.com/blogs/security/deploying-defense-in-depth-using-aws-managed-rules-for-aws-waf-part-2/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that AWS WAF is blocking potentially dangerous requests.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.18" name="Do not use Web tier ELB Security Group in the Auto Scaling launch configuration of any other tier (Web, App)" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  When you use the AWS Management Console to create a load balancer in a VPC, you can choose an existing security group for the VPC or create a new security group for the VPC. If you choose an existing security group, it must allow traffic in both directions to the listener and health check ports for the load balancer. If you choose to create a security group, the console automatically adds rules to allow all traffic on these ports. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Be sure to review the security group rules to ensure that they allow traffic on the listener and health check ports for the new load balancer. When you delete your load balancer, this security group is not deleted automatically. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  If you add a listener to an existing load balancer, you must review your security groups to ensure they allow traffic on the new listener port in both directions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  The web-tier ELB is the only one that is public facing and should have rules to allow inbound traffic to the application ports (ex: HTTP and HTTPS) from any IP source (0.0.0.0/0). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  The outbound security group rules for the web-tier ELB should be restricted to only the backend web-server instances for the appropriate application ports. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Associating the web-tier ELB security group to any other instances that shouldn't be publicly accessible exposes them to unauthorized access. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration using the correct security groups for Web and/or App tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws autoscaling create-launch-configuration --launch-configuration-name &amp;lt;web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt;/&amp;lt;app_tier_security_group --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;/&amp;lt;app_tier_instance_profile&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
          </references>
          <standards>
            <standard ref="6.18" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.18" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the security group associated with the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, WebTierELBSecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br /&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  note the &amp;quot;WebTierELBSecurityGroups&amp;quot; from the output 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the security groups associated with all Autoscaling launch configurations and make sure that the above Web tier ELB security group is not present:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --query &amp;quot;LaunchConfigurations[*].{SecurityGroups:SecurityGroups, LaunchConfigurationName:LaunchConfigurationName}&amp;quot; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.2" name="Enable the ELB logging" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Elastic Load Balancing automatically distributes incoming application traffic across multiple Amazon EC2 instances in the a VPC. It enables you to achieve greater levels of fault tolerance in your applications, seamlessly providing the required amount of load balancing capacity needed to distribute application traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  AWS Elastic Load Balancers (ELBs) can record all incoming requests sent to the load balancer and store within logs on S3. This allows for diagnosing application failures and analyzing web traffic and security analysis of incoming traffic 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a JSON file containing the attributes you want to modify and save it locally as /tmp/ElbLogs.json:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;quot;AccessLog&amp;quot;: { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;Enabled&amp;quot;: true, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;S3BucketName&amp;quot;: &amp;quot;string&amp;quot;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;EmitInterval&amp;quot;: integer, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;quot;S3BucketPrefix&amp;quot;: &amp;quot;string&amp;quot; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Update the Load Balancer attributes:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb modify-load-balancer-attributes --load-balancer-name &amp;lt;elb_name&amp;gt; --load-balancer-attributes file:///tmp/ElbLogs.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe load balancer attributes" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancer-attributes.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
            <reference name="Amazon docs: elb describe tags" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-tags.html"/>
            <reference name="Amazon docs: enable access logs" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/enable-access-logs.html"/>
            <reference name="Amazon docs: modify load balancer attributes" url="https://docs.aws.amazon.com/cli/latest/reference/elb/modify-load-balancer-attributes.html"/>
          </references>
          <standards>
            <standard ref="5.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Via Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all ELB's:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Confirm correct ELB is selected by review ELB tags:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-tags --load-balancer-names &amp;lt;elb_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Review selected ELB attributes and ensure Access Log is enabled:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancer-attributes --load-balancer-name &amp;lt;elb_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.15" name="Implement mechanism to check that Public Web Tier SSL\TLS certificates are &gt;30 days from expiration" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;Public SSL\TLS certificates that are used for AWS resources such as the ELB or CloudFront should always be renewed prior to expiration both as a security best practice and to ensure the reputation of the web application is not impacted by an expired certificate. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Request a certificate renewal from your CA, and upload the new certificate in IAM:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam upload-server-certificate --server-certificate-name &amp;lt;ssl_certificate_name&amp;gt; --certificate-body file://public_key_cert_file.pem --private-key file://my_private_key.pem --certificate-chain file://my_certificate_chain_file.pem 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For Amazon Certificate Manager users the renewal is managed by ACM service&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe certificate" url="https://docs.aws.amazon.com/cli/latest/reference/acm/describe-certificate.html"/>
            <reference name="Id credentials server certs" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html"/>
            <reference name="Id credentials server certs manage" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html"/>
            <reference name="List certificates" url="https://docs.aws.amazon.com/cli/latest/reference/acm/list-certificates.html"/>
            <reference name="List server certificates" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-server-certificates.html"/>
            <reference name="Upload server certs" url="https://docs.aws.amazon.com/cli/latest/reference/iam/upload-server-certificate.html"/>
          </references>
          <standards>
            <standard ref="1.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all SSL\TLS certificates stored in IAM and check the Expiration field&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-server-certificates 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For Amazon Certificate Manager users: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List ACM certificates and note the CertificateArnvalue of the certificates used by the app:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws acm list-certificates 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Get the details of the desired certificate and check the ExpirationDatevalue (the certificate expiration time as an Epoch timestamp):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws acm describe-certificate --certificate-arn &amp;lt;ssl_certificate_arn&amp;gt; --query "Certificate.{ExpirationDate:NotAfter, Status:Status, SubjectAlternativeNames:SubjectAlternativeNames, DomainName:DomainName}"&amp;nbsp; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-ELB-02" name="Select the Server Order Preference option" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Within Elastic Load Balancing ensure the use of newer and stronger cipher suites when
                        establishing a new connection supporting the Server Order Preference option. When this option is
                        selected, the load balancer selects the first cipher in its list that is in the client's list of
                        ciphers.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt; &lt;b&gt;Remediation:&lt;/b&gt; &lt;/b&gt;
                        &lt;br /&gt;To enable Server Order Preference:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Open the Amazon EC2 console.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Under LOAD BALANCING, choose Load Balancers.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Select your Load Balancer.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;On the Listeners tab, for Cipher, choose Change.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;On the Select a Cipher page, select Custom Security Policy.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;For SSL Options, select Server Order Preference.&lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Click Save. &lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Open the Amazon EC2 console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Under LOAD BALANCING, choose Load Balancers.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;Select your Load Balancer.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;On the Listeners tab, for Cipher, choose Change.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;On the Select a Cipher page, select Custom Security Policy.&lt;br /&gt;&lt;/li&gt;
                            &lt;li&gt;For SSL Options, check that the option Server Order Preference is selected. &lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.13" name="Set a HTTPS connection from all CloudFront Distributions to the Web Tier ELB origin" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Configure the Origin Protocol Policy for the Web tier ELB origin either to require that CloudFront fetches objects from your origin by using HTTPS or to require that CloudFront uses the protocol that the viewer used to request the objects. For example, if you choose Match Viewer for the Origin Protocol Policy and the viewer uses HTTPS to request an object from CloudFront, CloudFront also uses HTTPS to forward the request to your origin. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  In order to use HTTPS, an SSL\TLS certificate must be attached. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  To ensure that objects are encrypted from edge locations to the Web-Tier ELB origin according to the data classification policy, use Match Viewer. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For configuring "OriginProtocolPolicy"first save locally the current distribution config:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws cloudfront get-distribution-config --id application_cfn_distribution_id&amp;nbsp; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div style=""&gt;
   Edit and replace "OriginProtocolPolicy"element in /tmp/cf-distribution.json with the below section: 
 &lt;/div&gt; 
 &lt;div style=""&gt;
   "OriginProtocolPolicy": "https-only", 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Retrieve the current ETag of your CloudFront distribution:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt;&amp;nbsp; --query "ETag" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; --distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get streaming distribution config" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-streaming-distribution-config.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Secure Connections" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="3.13" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check the &amp;quot;OriginProtocolPolicy&amp;quot; used by application Cloudfront
                            distributions (it should be set as https-only):&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws cloudfront list-distributions --query &amp;quot;DistributionList.Items[*].{Id:Id,
                            OriginProtocolPolicy:Origins.Items[*].CustomOriginConfig.OriginProtocolPolicy}&amp;quot;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="https://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.17" name="Use a Web-Tier ELB Security Group to accept only HTTP/HTTPS" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  The SG associated with the Web tier ELB should allow connectivity from any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;First remove all the ingress rules for the security group associated with the Web tier ELB:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws ec2 describe-security-groups --group-id &amp;lt;security_group_id&amp;gt; --query &amp;quot;SecurityGroups[0].IpPermissions&amp;quot; &amp;gt; /tmp/IpPermissions.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div style=""&gt; 
   &lt;br /&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws ec2 revoke-security-group-ingress --group-id &amp;lt;security_group_id&amp;gt; --ip-permissions file:///tmp/IpPermissions.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;create locally the below json file containing ingress rules for any source IP (0.0.0.0/0) only for the HTTP (TCP 80) and HTTPS (TCP 443) ports and name it IpPermissions.json:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     [ 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [], 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 80, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [ 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;CidrIp&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 80, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [] 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; }, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;PrefixListIds&amp;quot;: [], 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;FromPort&amp;quot;: 443, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpRanges&amp;quot;: [ 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; { 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;CidrIp&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;ToPort&amp;quot;: 443, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;IpProtocol&amp;quot;: &amp;quot;tcp&amp;quot;, 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;UserIdGroupPairs&amp;quot;: [] 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     &amp;nbsp; &amp;nbsp; } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     ] 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Add to the security group associated with the Web tier ELB the above ingress rules:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws ec2 authorize-security-group-ingress --group-id &amp;lt;security_group_id&amp;gt;&amp;nbsp; --ip-permissions file:///PathTo/IpPermissions.json 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="6.17" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.17" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the security group associated with the Web tier ELB:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-name &amp;lt;your_web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{DNSName:DNSName, SecurityGroups:SecurityGroups, SourceSecurityGroup:SourceSecurityGroup}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  note the security group id from the output 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure that only HTTP (TCP 80) and HTTPS (TCP 443) traffic is allowed from any source IP (0.0.0.0/0)any source IP (0.0.0.0/0):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids&amp;nbsp; &amp;lt;security_group_id&amp;gt; --query &amp;quot;SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.14" name="Use HTTPS listener for App Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A load balancer takes requests from clients and distributes them across the EC2 instances that are registered with the load balancer (also known as back-end instances). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: an HTTPS listener configured on the ELB is not mandatory if you are terminating SSL connections directly on the App Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using an HTTPS Elastic Load Balancer listener will make sure the application traffic between the client and the App Tier ELB is encrypted over the SSL\TLS channel. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If the ListenerDescription field is missing, add a new HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;app_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener configuration" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-listener-config.html"/>
            <reference name="Amazon docs: create load balancer listeners" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer-listeners.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;app_tier_elb&amp;gt; with your App tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if the App Tier ELB is using an HTTPS or TCP listener. Note if the ListenerDescription field is missing or not:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;app_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.Protocol == 'HTTPS' || Listener.Protocol == 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.11" name="Use HTTPS listener for Web Tier ELB" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A load balancer takes requests from clients and distributes them across the EC2 instances that are registered with the load balancer (also known as back-end instances). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A listener is a process that checks for connection requests. It is configured with a protocol and a port for front-end (client to load balancer) connections 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: an HTTPS listener configured on the ELB is not mandatory if you are terminating SSL connections directly on the Web Tier EC2 instances, and using a TCP listener on the ELB (TCP pass-through) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using an HTTPS Elastic Load Balancer listener will make sure the application traffic between the client and the Web Tier ELB is encrypted over the SSL\TLS channel. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;div&gt;
    Using the Amazon unified command line interface: 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If the ListenerDescription field is missing, add a new HTTPS listener configured with a SSL\TLS certificate (the listener forwards traffic to the backend instances on port 80, but this can be modified by editing InstancePort=80):&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt; 
    &lt;div&gt;
      aws elb create-load-balancer-listeners --load-balancer-name &amp;lt;web_tier_elb&amp;gt; --listeners Protocol=HTTPS,LoadBalancerPort=443,InstanceProtocol=HTTP,InstancePort=80, SSLCertificateId=ssl_certificate_arn 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: ELB listener configuration" url="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-listener-config.html"/>
            <reference name="Amazon docs: create load balancer listeners" url="https://docs.aws.amazon.com/cli/latest/reference/elb/create-load-balancer-listeners.html"/>
            <reference name="Amazon docs: describe load balancers" url="https://docs.aws.amazon.com/cli/latest/reference/elb/describe-load-balancers.html"/>
          </references>
          <standards>
            <standard ref="1.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
  (Note that you should replace &amp;lt;web_tier_elb&amp;gt; with your Web-tier ELB name) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if the Web Tier ELB is using an HTTPS or TCP listener. Note if the ListenerDescription field is missing or not:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws elb describe-load-balancers --load-balancer-names &amp;lt;web_tier_elb&amp;gt; --query &amp;quot;LoadBalancerDescriptions[*].{LoadBalancerName:LoadBalancerName, DNSName:DNSName, Scheme:Scheme, ListenerDescriptions:ListenerDescriptions[?Listener.Protocol == 'HTTPS' || Listener.Protocol = 'TCP']}&amp;quot; --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-ELB-01" name="Use the Perfect Forward Secrecy feature" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>For greater communication privacy Elastic Load Balancing allows the use of Perfect Forward
                        Secrecy. This feature provides additional safeguards against eavesdropping on encrypted data,
                        through the use of a unique random session key, and therefore prevents the decoding of captured
                        data, even if the secret long-term key is compromised.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;To begin using Perfect Forward Secrecy: &lt;br /&gt;&lt;/b&gt;Configure your load
                        balancer with the newly added Elliptic Curve Cryptography (ECDHE) cipher suites.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that your load balancer is configured with the newly added Elliptic Curve
                            Cryptography (ECDHE) cipher suites.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON WEB SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-295">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.12" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.15" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.9" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.11" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.14" mitigation="10"/>
                    <countermeasure ref="aws-tier-3.13" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-326">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-ELB-01" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-ELB-02" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.10" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.13" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-ELB-01" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-ELB-02" mitigation="10"/>
                <countermeasure ref="aws-tier-1.10" mitigation="10"/>
                <countermeasure ref="aws-tier-1.11" mitigation="10"/>
                <countermeasure ref="aws-tier-1.12" mitigation="10"/>
                <countermeasure ref="aws-tier-1.13" mitigation="10"/>
                <countermeasure ref="aws-tier-1.14" mitigation="10"/>
                <countermeasure ref="aws-tier-1.15" mitigation="10"/>
                <countermeasure ref="aws-tier-1.9" mitigation="10"/>
                <countermeasure ref="aws-tier-3.13" mitigation="10"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.13" mitigation="9"/>
                    <countermeasure ref="aws-tier-6.17" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.19" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.21" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.22" mitigation="7"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="7"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="C-AWS-ELB1" mitigation="7"/>
                    <countermeasure ref="aws-tier-3.1" mitigation="7"/>
                    <countermeasure ref="aws-tier-3.14" mitigation="7"/>
                    <countermeasure ref="aws-tier-3.15" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.18" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.26" mitigation="7"/>
                    <countermeasure ref="aws-tier-6.5" mitigation="7"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-693">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-9" mitigation="7"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-ELB1" mitigation="7"/>
                <countermeasure ref="C-AWS-SRA-9" mitigation="7"/>
                <countermeasure ref="aws-tier-3.1" mitigation="7"/>
                <countermeasure ref="aws-tier-3.14" mitigation="7"/>
                <countermeasure ref="aws-tier-3.15" mitigation="7"/>
                <countermeasure ref="aws-tier-5.1" mitigation="7"/>
                <countermeasure ref="aws-tier-6.13" mitigation="9"/>
                <countermeasure ref="aws-tier-6.17" mitigation="7"/>
                <countermeasure ref="aws-tier-6.18" mitigation="7"/>
                <countermeasure ref="aws-tier-6.19" mitigation="7"/>
                <countermeasure ref="aws-tier-6.21" mitigation="7"/>
                <countermeasure ref="aws-tier-6.22" mitigation="7"/>
                <countermeasure ref="aws-tier-6.26" mitigation="7"/>
                <countermeasure ref="aws-tier-6.5" mitigation="7"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUDITABLE-CHANGES-RESOURCES-AWS" name="Attackers make undetected and unaudited changes in the resources" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                If audit trails in the resources are not enabled or not protected, attackers could gain
                                access to the system and modify or delete data from the resources and the changes are
                                not detected.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Logging-3.4">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.2" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="unknown-resource-status">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.10" mitigation="34"/>
                    <countermeasure ref="aws-tier-3.9" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-3.10" mitigation="34"/>
                <countermeasure ref="aws-tier-3.9" mitigation="33"/>
                <countermeasure ref="aws-tier-5.2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.3" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ca5c76bb-4bee-4a37-b807-3cab139cd499" diagramComponentId="8670166e-dc36-4f52-bea6-4545e9992c88" ref="794c99e8-a31a-4592-93a6-618a207a7aaa" name="PostgreSQL" desc="" library="CS-Default" parentComponentRef="bb23eb31-51d2-42fd-9350-d4db18531e34" componentDefinitionRef="postgresql">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-05-29T09:16:00.986">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-23T20:58:34.717">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-89" name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted and executed as SQL instead of ordinary user data. This can be leveraged to alter query logic in order to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is relatively easily detected, and often easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted automated attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:13.083">
              <output/>
            </source>
            <references>
              <reference name="CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" url="https://cwe.mitre.org/data/definitions/89.html"/>
              <reference name="OWASP Testing Guide" url="https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)#Standard_SQL_Injection_Testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:44.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt; 
 &lt;li&gt;Weak encryption algorithms&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Loss of encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Compromised encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Revoked keys are still active (bad key lifecycle management)&lt;/li&gt; 
&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-07T07:51:33.406">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="RESTRICT-ACCESS-DATABASE" name="Access the data store from an account with the least privileges necessary" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Use an account with only the minimum set of permissions required to access the data store. The account should not be able to perform operations that are not explicitly required by the component that performs these operations. For example, if a web application needs to read data from certain tables and insert and update data from others, then a database account with only those specific permissions should be used by the application server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-low-baseline" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the user account used by external components to access this data store.&lt;/li&gt; 
 &lt;li&gt;Check which permissions are assigned to this user account.&lt;/li&gt; 
 &lt;li&gt;Verify that they are the minimum set of permissions necessary and no unnecessary permissions are assigned.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-20T18:23:44.319">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PATCH-SERVICE" name="Apply required security patches to the service" issueId="" issueLink="" platform="" cost="1" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Vendors and other maintainers of software release patches in response to security flaws and other bugs in their products.&amp;nbsp; The longer a system is exposed with a known security vulnerability, the easier to compromise it. &amp;nbsp;As the exploit enters the public domain, they get included in automated exploitation suites like Metasploit and a wider less skilled miscreant is able to leverage them.&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected failures or exploitation.&lt;/li&gt;&lt;li&gt;Clearly define an approach for testing and applying patches, in particular security patches, with expected timescales. &amp;nbsp;There is often a small window between the release of a patch, and potentially malicious actors reverse-engineering the patch to identify and exploit the flaw.&lt;/li&gt;&lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting services to ensure the project team is promptly aware of issues within the project or its components.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-01 Configuration Management Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/152-08_02_CM-01"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CM-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check with the software or service vendor whether security vulnerabilities and
                            their associated patches are available for the version deployed.&lt;/li&gt;
                            &lt;li&gt;Evaluate the criticality of the vulnerability and schedule a fix accordingly.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" name="Encrypt personal data" issueId="" issueLink="" platform="" cost="0" risk="60" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement encryption at rest (see guidance below) or give a risk-based explanation as to why encryption was not implemented.&lt;br /&gt;&lt;br /&gt;Use well-known encryption libraries, taking into account the data use, and do not invent your own. 
          &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;personal data must be encrypted&lt;/li&gt;
              &lt;li&gt;data that is not used by the application (e.g. passwords, ...) should be hashed so they cannot be recovered easily&lt;/li&gt;
              &lt;/ul&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Proactive controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify that users' personal data processed by the application is encrypted at rest (e.g. databases).&lt;/li&gt;
                &lt;li&gt;If encryption is not being leveraged, verify that there is documentation outlining the reasoning for that decision.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-01-18T14:44:50.785">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For less sensitive but still restricted data, simple verification of the location of the user may suffice (e.g. IP restrictions).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For non-sensitive but non-public data, access could be restricted by IP address, limiting access to internal networks, workstations, or gateways&lt;/li&gt;&lt;li&gt;For more sensitive data, TLS client-side certificates may be appropriate&lt;/li&gt;&lt;li&gt;Where secret or other sensitive data is handled, a full authentication process to identify and validate users with single or multi-factor authentication may be required&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-authentication.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-21" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-low-baseline" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                &lt;li&gt;Try to obtain access to this information without any type of authentication, for example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:14.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer to reduce exposure" issueId="" issueLink="" platform="" cost="1" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to services should be restricted to expected sources, limiting the exposure of the service and its attack surface; and the likelihood of a malicious actor gaining access to the system.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Apply network layer security controls so that only the necessary and expected IP addresses are permitted access to connect to the service.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-authentication.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check that the network access to the service is only allowed for the components which need it.&lt;/li&gt; 
 &lt;li&gt;There should be a firewall protecting the network segment in which the service is installed.&lt;/li&gt; 
 &lt;li&gt;Check that the firewall restricts all access and only permits the minimum connections required using the principal of least privilege.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-23T21:01:06.125">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform=".NET C#" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side, in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker may append an 'OR' statement to the customerName parameter in order to bypass checks and return additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;Using prepared statements with carefully controlled and validated input conditions mitigates against SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
            <implementation platform="Java">
              <desc>
                                ClN0cmluZyBzZWxlY3RTdGF0ZW1lbnQgPSAiU0VMRUNUICogRlJPTSBVc2VyIFdIRVJFIHVzZXJJZCA9ID8gIjsKUHJlcGFyZWRTdGF0ZW1lbnQgcHJlcFN0bXQgPSBjb24ucHJlcGFyZVN0YXRlbWVudChzZWxlY3RTdGF0ZW1lbnQpOwpwcmVwU3RtdC5zZXRTdHJpbmcoMSwgdXNlcklkKTsKUmVzdWx0U2V0IHJzID0gcHJlcFN0bXQuZXhlY3V0ZVF1ZXJ5KCk7Cg==
                            </desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should used be in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:13.157">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS SERVICE" name="Access service" desc="" library="CS-Default">
          <threats>
            <threat ref="VULN-SERVICE" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                    <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="AUTH-DATASTORE-LEAST-PRIV" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-66" name="Attackers gain unauthorised access to data and/or systems through SQL Injection attacks" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Successful SQL Injection attacks could lead to full compromise of the database or to a partial compromise of only the data visible to the application.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Typically, these types of attacks result in unauthorized disclosure of sensitive data, but can also be used to inject spurious data into the database or to drop tables and deny services to legitimate users.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-89">
                  <countermeasures>
                    <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="50f3c51c-b1e1-4c4f-a363-2f611369ea35" diagramComponentId="f724f657-7b55-4a94-b235-295a78d04b3c" ref="ac6b58c4-31d2-491c-8e25-ef787e9af4ae" name="AWS ElastiCache for Redis" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="CD-ELASTICACHE-FOR-REDIS">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:22.572">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:22.572">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:22.571">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:22.572">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:22.572">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-ELASTICACHE2-REDIS" name="Authenticate users with Redis AUTH or RBAC" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Authenticate users with Redis AUTH or RBAC 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Redis authentication tokens enable Redis to require a token (password) before allowing clients to run commands, thereby improving data security. Instead of authenticating users with the Redis AUTH command, in Amazon ElastiCache for Redis 6.x you can use a feature called Role-Based Access Control (RBAC). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Applying Redis AUTH to an ElastiCache for Redis Cluster 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can require that users enter a token on a token-protected Redis server. To do this, include the parameter --auth-token (API: AuthToken) with the correct token when you create your replication group or cluster. Also include it in all subsequent commands to the replication group or cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Applying RBAC to a Replication Group for ElastiCache for Redis 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To use ElastiCache for Redis RBAC, you take the following steps: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Create one or more users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Create a user group and add users to the group. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Assign the user group to a replication group that has in-transit encryption enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Authenticating Users with Role-Based Access Control (RBAC)" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html"/>
            <reference name="Authenticating Users with the Redis AUTH Command" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that you use Redis AUTH or RBAC for enhanced security.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:17.465">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE7-REDIS" name="Enable AOF in AWS ElastiCache for Redis" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable Append Only Files (AOF) in AWS ElastiCache for Redis 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  By default, the data in a Redis node on ElastiCache resides only in memory and isn't persistent. If a node is rebooted, or if the underlying physical server experiences a hardware failure, the data in the cache is lost. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you require data durability, you can enable the Redis append-only file feature (AOF). When this feature is enabled, the node writes all of the commands that change cache data to an append-only file. When a node is rebooted and the cache engine starts, the AOF is "replayed." The result is a warm Redis cache with all of the data intact. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  AOF is disabled by default. To enable AOF for a cluster running Redis, you must create a parameter group with the appendonly parameter set to yes. You then assign that parameter group to your cluster. You can also modify the appendfsync parameter to control how often Redis writes to the AOF file. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When using AOF, keep the following in mind: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - To improve performance, consider enabling RDB snapshots on a designated persistence only secondary node. Then, disable both RDB snapshots and AOF on the primary node and all other secondary nodes. 
&lt;/div&gt; 
&lt;div&gt;
  - To improve performance, set the value of the appendfsync parameter to everysec or no to write to disk every second or as needed. 
&lt;/div&gt; 
&lt;div&gt;
  - AOF is supported only for use with Redis versions 2.8.21 and earlier. 
&lt;/div&gt; 
&lt;div&gt;
  - AOF is subject to the limitations described at Mitigating failures: Redis Append Only Files (AOF). 
&lt;/div&gt; 
&lt;div&gt;
  - AOF isn't supported for cache.t1.micro and cache.t2.* nodes, or Multi-AZ replication groups. For nodes of these types, the appendonly parameter value is ignored. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Manual backups using AOF is a suitable option for maintaining a high level of data persistence at a relatively low cost by using the functionality that is native to Redis versions 2.8.21 and earlier. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  Performance impact - Low to high. AOF performance impact is highly correlated with the associated appendfsync parameter value, which controls how often the AOF output buffer is written to disk. The more frequently the output buffer is written to disk, the greater the impact on performance. Choosing the always option for this parameter causes the buffer to be flushed every time the cache data is modified. Therefore, this option isn't recommended. Because the AOF file can grow quickly, it's a best practice to verify your disk space requirements. Another performance consideration for AOF is the time required to replay an AOF file. You might need several minutes to populate the Redis nodes with the cache data. During this time, your application can satisfy queries only for uncached data by directly querying your database. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Append Only Files (AOF) in ElastiCache for Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/RedisAOF.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that AOF is enabled in AWS ElastiCache for Redis.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:17.473">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE6-REDIS" name="Enable automatic backups on AWS ElastiCache clusters running Redis" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable automatic backips on AWS ElastiCache clusters running Redis 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Amazon ElastiCache clusters running Redis can back up their data. You can use the backup to restore a cluster or seed a new cluster. The backup consists of the cluster's metadata, along with all of the data in the cluster. All backups are written to Amazon Simple Storage Service (Amazon S3), which provides durable storage. At any time, you can restore your data by creating a new Redis cluster and populating it with data from a backup. With ElastiCache, you can manage backups using the AWS Management Console, the AWS Command Line Interface (AWS CLI), and the ElastiCache API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can enable or disable automatic backups on an existing Redis cluster or replication group by modifying it using the ElastiCache console, the AWS CLI, or the ElastiCache API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Using the AWS Management Console 
&lt;/div&gt; 
&lt;div&gt;
  To modify a cluster (console) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Sign in to the AWS Management Console and open the ElastiCache console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. From the list in the upper-right corner, choose the AWS Region where the cluster that you want to modify is located. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. In the navigation pane, choose the engine running on the cluster that you want to modify. 
&lt;/div&gt; 
&lt;div&gt;
  A list of the chosen engine's clusters appears. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. In the list of clusters, for the cluster that you want to modify, choose its name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. Choose Actions and then choose Modify. 
&lt;/div&gt; 
&lt;div&gt;
  The Modify Cluster window appears. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. In the Modify Cluster window, make the modifications that you want. 
&lt;/div&gt; 
&lt;div&gt;
  The Apply Immediately box applies only to node type and engine version modifications. To apply changes immediately, choose the Apply Immediately check box. If this box is not chosen, node type and engine version modifications are applied during the next maintenance window. Other modifications, such as changing the maintenance window, are applied immediately. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Choose Modify. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can enable or disable automatic backups when creating a Redis cluster or replication group using the ElastiCache console, the AWS CLI, or the ElastiCache API. You can enable automatic backups when you create a Redis cluster by checking the Enable Automatic Backups box in the Advanced Redis Settings section. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  Performance Impact of Backups 
&lt;/div&gt; 
&lt;div&gt;
  The backup process depends upon which Redis version you're running. Beginning with Redis 2.8.22, the process is forkless. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Backup and Restore for ElastiCache for Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that Enable Automatic Backups box is checked in the Advanced Redis Settings section.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:17.473">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE5-REDIS" name="Enable AWS ElastiCache at-rest encryption for Redis" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable AWS ElastiCache at-rest encryption for Redis 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  ElastiCache for Redis at-rest encryption is an optional feature to increase data security by encrypting on-disk data. When enabled on a replication group, it encrypts the following aspects: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Disk during sync, backup and swap operations 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Backups stored in Amazon S3 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  If you want to enable at-rest encryption, you must meet the following conditions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Your cluster or replication group must be running Redis 3.2.6, 4.0.10 or later. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Your cluster or replication group must be created in a VPC based on Amazon VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Optionally, you can also use AUTH and the AUTH token (password) needed to perform operations on this cluster or replication group. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can enable ElastiCache at-rest encryption when you create a Redis replication group by setting the parameter AtRestEncryptionEnabled to true. You can't enable at-rest encryption on existing replication groups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can enable at-rest encryption when you create an ElastiCache for Redis replication group. You can do so using the AWS Management Console, the AWS CLI, or the ElastiCache API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When creating a replication group, you can pick one of the following options: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Default - This option uses service managed encryption at rest. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Customer managed CMK - This option allows you to provide the Key ID/ARN from AWS KMS for encryption at rest. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Enabling At-Rest Encryption on an Existing Redis Cluster 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can only enable at-rest encryption when you create a Redis replication group. If you have an existing replication group on which you want to enable at-rest encryption, do the following. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable at-rest encryption on an existing replication group 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Create a manual backup of your existing replication group. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Create a new replication group by restoring from the backup. On the new replication group, enable at-rest encryption.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Update the endpoints in your application to point to the new replication group. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Delete the old replication group. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Enabling At-Rest Encryption Using the AWS Management Console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable at-rest encryption when creating a replication group using the AWS Management Console, make the following selections: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Choose Redis as your engine. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Choose version 3.2.6, 4.0.10 or later as your engine version. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Choose Yes from the Encryption at-rest list. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  Because there is some processing needed to encrypt and decrypt the data, enabling at-rest encryption can have a performance impact during these operations. You should benchmark your data with and without at-rest encryption to determine the performance impact for your use cases. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="At-Rest Encryption in ElastiCache for Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/at-rest-encryption.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that AWS ElastiCache at-rest encryption for Redis is enabled when creating a replication group.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:17.473">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE3-REDIS" name="Enable AWS ElastiCache in-transit encryption for Redis" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable AWS ElastiCache in-transit encryption for Redis 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  To help keep your data secure, Amazon ElastiCache and Amazon EC2 provide mechanisms to guard against unauthorized access of your data on the server. By providing in-transit encryption capability, ElastiCache gives you a tool you can use to help protect your data when it is moving from one location to another. For example, you might move data from a primary node to a read replica node within a replication group, or between your replication group and your application. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  If you want to enable in-transit encryption, you must meet the following conditions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Your cluster or replication group must be running Redis 3.2.6, 4.0.10 or later. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Your cluster or replication group must be created in a VPC based on Amazon VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Optionally, you can also use AUTH and the AUTH token (password) needed to perform operations on this cluster or replication group. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can enable in-transit encryption when you create an ElastiCache for Redis replication group using the AWS Management Console, the AWS CLI, or the ElastiCache API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Enabling In-Transit Encryption on an Existing Cluster 
&lt;/div&gt; 
&lt;div&gt;
  You can only enable in-transit encryption when you create a Redis replication group. If you have an existing replication group on which you want to enable in-transit encryption, do the following. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable in-transit encryption for an existing Redis replication group 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Create a manual backup of the replication group. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Create a new replication group by restoring from the backup setting the engine version to 3.2.6, 4.0.10 and later, and the parameter TransitEncryptionEnabled to true (CLI: --transit-encryption-enabled). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Update the endpoints in your application to the new replication group's endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Delete the old replication group. 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  Enabling In-Transit Encryption Using the AWS Management Console 
&lt;/div&gt; 
&lt;div&gt;
  To enable in-transit encryption when creating a replication group using the AWS Management Console, make the following selections: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Choose Redis as your engine. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Choose engine version 3.2.6, 4.0.10 or later. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Choose Yes from the Encryption in-transit list. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  Because of the processing required to encrypt and decrypt the data at the endpoints, implementing in-transit encryption can reduce performance. Benchmark in-transit encryption compared to no encryption on your own data to determine its impact on performance for your implementation. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="ElastiCache for Redis In-Transit Encryption (TLS)" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/in-transit-encryption.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that AWS ElastiCache in-transit encryption for Redis is enabled when creating a replication group.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:17.474">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE4-REDIS" name="Enable Multi-AZ in AWS ElastiCache for Redis" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable Multi-AZ in AWS ElastiCache for Redis 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  In certain cases, ElastiCache for Redis detects and replaces a primary node. These cases include certain types of planned maintenance and the unlikely event of a primary node or Availability Zone failure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This replacement results in some downtime for the cluster. If you have Multi-AZ enabled on the cluster, the downtime is minimized. In this case, the role of primary node fails over to one of the read replicas. There's no need to create and provision a new primary node. This failover and replica promotion ensure that you can resume writing to the new primary as soon as promotion is complete. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can enable Multi-AZ using the ElastiCache console when you create a new Redis cluster or by modifying an existing Redis cluster with replication. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Multi-AZ is enabled by default on Redis (cluster mode enabled) clusters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Important 
&lt;/div&gt; 
&lt;div&gt;
  ElastiCache will automatically enable Multi-AZ only if the cluster contains at least one replica in a different Availability Zone from the primary in all shards. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When creating a Cluster Mode Disabled Cluster (Console) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - For Number of replicas, choose the number of read replicas that you want for this cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - If you choose to have one or more replicas, the Multi-AZ check box is available. AWS strongly suggests that you enable Multi-AZ, which helps ensure your eligibility for service level agreement (SLA) compliance. If you enter 0, the Multi-AZ check box is not enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Minimizing Downtime in ElastiCache for Redis with Multi-AZ" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that Multi-AZ is enabled in AWS ElastiCache for Redis.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:17.474">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="redis" name="Redis" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE3-REDIS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE3-REDIS" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE2-REDIS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE2-REDIS" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE4-REDIS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE4-REDIS" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE6-REDIS" mitigation="50"/>
                    <countermeasure ref="AWS-ELASTICACHE7-REDIS" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE6-REDIS" mitigation="50"/>
                <countermeasure ref="AWS-ELASTICACHE7-REDIS" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE5-REDIS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE5-REDIS" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="5160f03a-545b-46a5-9108-ce52631e57bd" diagramComponentId="9952204e-7e2c-440c-9505-54c1c1f55e81" ref="458aeca6-65f5-4791-a48c-3d18d76a02b5" name="Elasticsearch" desc="" library="Hydras-AWS-Foundation" parentComponentRef="bb23eb31-51d2-42fd-9350-d4db18531e34" componentDefinitionRef="elasticsearch">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.231">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.213">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.208">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.225">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.219">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.238">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.202">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-ELASTICSEARCH1" name="Control access to Amazon Elasticsearch" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to Amazon Elasticsearch&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Amazon Elasticsearch Service offers several ways of controlling access to domains by supporting three types of access policies:&lt;br&gt; - Resource-based Policies&lt;br&gt; - Identity-based Policies&lt;br&gt; - IP-based Policies&lt;/p&gt; 
&lt;p&gt;Fine-grained access control offers additional ways of controlling access to your data on Amazon Elasticsearch Service. For example, depending on who makes the request, you might want a search to return results from only one index. You might want to hide certain fields in your documents or exclude certain documents altogether. Fine-grained access control offers the following features:&lt;br&gt; - Role-based access control&lt;br&gt; - Security at the index, document, and field level&lt;br&gt; - Kibana multi-tenancy&lt;br&gt; - HTTP basic authentication for Elasticsearch and Kibana&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; To configure access policies (console)&lt;/p&gt; 
&lt;p&gt;1. Sign In to the Console.&lt;/p&gt; 
&lt;p&gt;2. Under Analytics, choose Elasticsearch Service.&lt;/p&gt; 
&lt;p&gt;3. In the navigation pane, under My domains, choose the domain that you want to update.&lt;/p&gt; 
&lt;p&gt;4. Choose Actions and Modify access policy.&lt;/p&gt; 
&lt;p&gt;5. Edit the access policy JSON, or use the dropdown list to choose a preconfigured option.&lt;/p&gt; 
&lt;p&gt;6. Choose Submit.&lt;/p&gt; 
&lt;p&gt;Enabling Fine-Grained Access Control&lt;/p&gt; 
&lt;p&gt;Enable fine-grained access control using the console, AWS CLI, or configuration API. The console offers the simplest experience while creating a new domain.&lt;/p&gt; 
&lt;p&gt;In the Fine-grained access control section, enable or disable fine-grained access control:&lt;/p&gt; 
&lt;p&gt;- If you want to use IAM for user management, choose Set IAM role as master user and specify the ARN for an IAM role.&lt;/p&gt; 
&lt;p&gt;- If you want to use the internal user database, choose Create a master user and specify a user name and password.&lt;/p&gt; 
&lt;p&gt;Whichever option you choose, the master user can access all indices in the cluster and all Elasticsearch APIs.&lt;/p&gt; 
&lt;p&gt;If you disable fine-grained access control, you can still control access to your domain by placing it within a VPC, applying a restrictive access policy, or both. You must enable node-to-node encryption and encryption at rest to use fine-grained access control.&lt;/p&gt; 
&lt;p&gt;Here are the requirements for enabling fine-grained access control:&lt;/p&gt; 
&lt;p&gt;- Elasticsearch 6.7 or later&lt;br&gt; - Encryption of data at rest and node-to-node encryption enabled&lt;br&gt; - Require HTTPS for all traffic to the domain enabled&lt;/p&gt; 
&lt;p&gt;You can't enable fine-grained access control on existing domains, only new ones. After you enable fine-grained access control, you can't disable it.&lt;/p&gt; 
&lt;p&gt;For more information and examples about different types of policies and access control, please see Reference URLs.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; If you enabled VPC access for your domain, you can't configure an IP-based policy. Instead, you can use security groups to control which IP addresses can access the domain.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Creating and Managing Amazon Elasticsearch Service Domains" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html"/>
            <reference name="Identity and Access Management in Amazon Elasticsearch Service" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-ac.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.774">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICSEARCH7" name="Create alerts for Amazon Elasticsearch" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create alerts for Amazon Elasticsearch&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Configure alerts in Amazon Elasticsearch Service (Amazon ES) to get notified when data from one or more Elasticsearch indices meets certain conditions. &lt;br&gt; For example, you might want to receive an email if your application logs more than five HTTP 503 errors in one hour, or you might want to page a developer if no new documents have been indexed in the last 20 minutes.&lt;br&gt; Alerting requires Elasticsearch version 6.2 or later.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; To get started with alerting&lt;/p&gt; 
&lt;p&gt;1. Choose Alerting from the Kibana main menu.&lt;/p&gt; 
&lt;p&gt;2. Set up a destination for the alert. Choose between Slack, Amazon Chime, a custom webhook, or Amazon SNS. As you might imagine, notifications require connectivity to the destination. For example, your Amazon ES domain must be able to connect to the internet to notify a Slack channel or send a custom webhook to a third-party server.&lt;/p&gt; 
&lt;p&gt;3. Create a monitor in one of three ways: visually, using a query, or using an anomaly detector.&lt;/p&gt; 
&lt;p&gt;4. Define a condition to trigger the monitor.&lt;/p&gt; 
&lt;p&gt;5. (Optional) Add one or more actions to the monitor.&lt;/p&gt; 
&lt;p&gt;Tip&lt;br&gt; After an action successfully sends a message, secure access to that message. If your domain contains sensitive data, consider using triggers without actions and periodically checking Kibana for alerts.&lt;/p&gt; 
&lt;p&gt;For further information and Recommended CloudWatch Alarms please see Reference URLs.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Alerting for Amazon Elasticsearch Service" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/alerting.html"/>
            <reference name="Recommended CloudWatch Alarms" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/cloudwatch-alarms.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you have created alerts for Amazon Elasticsearch.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.836">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICSEARCH6" name="Enable all logs for Amazon Elasticsearch" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable all logs for Amazon Elasticsearch&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Amazon ES exposes four Elasticsearch logs through Amazon CloudWatch Logs: error logs, search slow logs, index slow logs, and audit logs. Search slow logs, index slow logs, and error logs are useful for troubleshooting performance and stability issues. Audit logs track user activity for compliance purposes. &lt;br&gt; All the logs are disabled by default.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Enabling Log Publishing (Console)&lt;/p&gt; 
&lt;p&gt;The Amazon ES console is the simplest way to enable the publishing of logs to CloudWatch.&lt;/p&gt; 
&lt;p&gt;To enable log publishing to CloudWatch (console)&lt;/p&gt; 
&lt;p&gt;1. Sign In to the Console.&lt;/p&gt; 
&lt;p&gt;2. Under Analytics, choose Elasticsearch Service.&lt;/p&gt; 
&lt;p&gt;3. In the navigation pane, under My domains, choose the domain you want to update.&lt;/p&gt; 
&lt;p&gt;4. On the Logs tab, choose Setup for the log you want.&lt;/p&gt; 
&lt;p&gt;5. Create a CloudWatch log group, or choose an existing one.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; If you plan to enable multiple logs, AWS recommends publishing each to its own log group. This separation makes the logs easier to scan.&lt;/p&gt; 
&lt;p&gt;6. Choose an access policy that contains the appropriate permissions, or create a policy using the JSON that the console provides:&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Principal": { "Service": "es.amazonaws.com" }, "Action": [ "logs:PutLogEvents", "logs:CreateLogStream" ], "Resource": "cw_log_group_arn" } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;Important&lt;br&gt; CloudWatch Logs supports 10 resource policies per Region. If you plan to enable logs for several Amazon ES domains, you should create and reuse a broader policy that includes multiple log groups to avoid reaching this limit.&lt;/p&gt; 
&lt;p&gt;7. Choose Enable.&lt;/p&gt; 
&lt;p&gt;Audit Log Kibana UI&lt;/p&gt; 
&lt;p&gt;After you enable audit logs, configure them to match your needs.&lt;/p&gt; 
&lt;p&gt;1. Open Kibana, and choose Security.&lt;/p&gt; 
&lt;p&gt;2. Choose Audit logs.&lt;/p&gt; 
&lt;p&gt;3. Choose Enable audit logging.&lt;/p&gt; 
&lt;p&gt;The Kibana UI offers full control of audit log settings under General settings and Compliance settings.&lt;/p&gt; 
&lt;p&gt;Setting Elasticsearch Logging Thresholds for Slow Logs&lt;/p&gt; 
&lt;p&gt;After you enable the publishing of slow logs to CloudWatch, you still must specify logging thresholds for each Elasticsearch index. These thresholds define precisely what should be logged and at which log level.&lt;/p&gt; 
&lt;p&gt;You specify these settings through the Elasticsearch REST API:&lt;/p&gt; 
&lt;p&gt;PUT elasticsearch_domain_endpoint/index/_settings&lt;br&gt; { "index.search.slowlog.threshold.query.warn": "5s", "index.search.slowlog.threshold.query.info": "2s"&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; The status of your domain changes from Active to Processing. The status must return to Active before log publishing is enabled. This change typically takes 30 minutes, but can take longer depending on your domain configuration.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Audit Logs for Amazon Elasticsearch Service" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/audit-logs.html"/>
            <reference name="Configuring Elasticsearch Logs" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createdomain-configure-slow-logs.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Observe the logs&lt;/p&gt;

	&lt;p&gt;1. Open the CloudWatch console.&lt;br /&gt;
2. In the navigation pane, choose Log groups.&lt;br /&gt;
3. Choose the log group that you specified while enabling logs. Within the log group, Amazon ES creates a log stream for each node in your domain.&lt;br /&gt;
4. In Log streams, choose Search all.&lt;br /&gt;
5. For the read and write events, see the corresponding logs. You can expect a delay of 5 seconds before the log appears.&lt;/p&gt;


	&lt;p&gt;Testing slow logs&lt;/p&gt;

	&lt;p&gt;To test that slow logs are publishing successfully, consider starting with very low values to verify that logs appear in CloudWatch, and then increase the thresholds to more useful levels.&lt;/p&gt;

	&lt;p&gt;If the logs don't appear, check the following:&lt;/p&gt;

	&lt;p&gt;- Does the CloudWatch log group exist? Check the CloudWatch console.&lt;/p&gt;

	&lt;p&gt;- Does Amazon ES have permissions to write to the log group? Check the Amazon ES console.&lt;/p&gt;

	&lt;p&gt;- Is the Amazon ES domain configured to publish to the log group? Check the Amazon ES console, use the AWS CLI describe-elasticsearch-domain-config option, or call DescribeElasticsearchDomainConfig using one of the SDKs.&lt;/p&gt;

	&lt;p&gt;- Are the Elasticsearch logging thresholds low enough that your requests are exceeding them? To review your thresholds for an index, use the following command:&lt;/p&gt;

	&lt;p&gt;GET elasticsearch_domain_endpoint/index/_settings?pretty&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.826">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICSEARCH5" name="Enable dedicated master nodes for production Amazon Elasticsearch domains" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable dedicated master nodes for production Amazon Elasticsearch domains&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Amazon Elasticsearch Service uses dedicated master nodes to increase cluster stability. A dedicated master node performs cluster management tasks, but does not hold data or respond to data upload requests. AWS recommends that you add three dedicated master nodes to each production Amazon ES domain. Never choose an even number of dedicated master nodes.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; When creating and managing Amazon ES domains:&lt;/p&gt; 
&lt;p&gt;- Enable dedicated master nodes. Dedicated master nodes increase cluster stability and are required for domains that have instance counts greater than 10. AWS recommends three dedicated master nodes for production domains.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; You can choose different instance types for your dedicated master nodes and data nodes. For example, you might select general purpose or storage-optimized instances for your data nodes, but compute-optimized instances for your dedicated master nodes.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Dedicated Master Nodes" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains-dedicatedmasternodes.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that dedicated master nodes option is enabled and three dedicated master nodes are used for each domain.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.818">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICSEARCH4" name="Enable encryption of data at rest for Amazon Elasticsearch" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable encryption of data at rest for Amazon Elasticsearch&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Amazon ES domains offer encryption of data at rest, a security feature that helps prevent unauthorized access to your data. The feature uses AWS Key Management Service (AWS KMS) to store and manage your encryption keys and the Advanced Encryption Standard algorithm with 256-bit keys (AES-256) to perform the encryption. If enabled, the feature encrypts the following aspects of a domain:&lt;/p&gt; 
&lt;p&gt;- All indices (including those in UltraWarm storage)&lt;br&gt; - Elasticsearch logs&lt;br&gt; - Swap files&lt;br&gt; - All other data in the application directory&lt;br&gt; - Automated snapshots&lt;/p&gt; 
&lt;p&gt;The following are not encrypted when you enable encryption of data at rest, but you can take additional steps to protect them:&lt;/p&gt; 
&lt;p&gt;- Manual snapshots: You currently can't use KMS master keys to encrypt manual snapshots. You can, however, use server-side encryption with S3-managed keys or customer master keys (CMKs) to encrypt the bucket you use as a snapshot repository.&lt;br&gt; - Slow logs and error logs: If you publish logs and want to encrypt them, you can encrypt their CloudWatch Logs log group using the same AWS KMS master key as the Amazon ES domain.&lt;/p&gt; 
&lt;p&gt;Amazon ES supports only symmetric customer master keys, not asymmetric ones.&lt;/p&gt; 
&lt;p&gt;Regardless of whether encryption at rest is enabled, all domains automatically encrypt custom packages using AES-256 and Amazon ES-managed keys.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Enabling Encryption of Data at Rest&lt;/p&gt; 
&lt;p&gt;Encryption of data at rest on new domains requires Elasticsearch 5.1 or later. Enabling the feature on existing domains requires Elasticsearch 6.7 or later. Choose the existing domain in the AWS console, Actions, and Modify encryption.&lt;/p&gt; 
&lt;p&gt;To use the Amazon ES console to configure encryption of data at rest, you must have read permissions to AWS KMS, such as the following identity-based policy:&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": [ "kms:List*", "kms:Describe*" ], "Resource": "*" } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;If you want to use a master key other than (Default) aws/es, you must also have permissions to create grants for the key. These permissions typically take the form of a resource-based policy that you specify when you create the key.&lt;/p&gt; 
&lt;p&gt;If you want to keep your key exclusive to Amazon ES, you can add the kms:ViaService condition to that key policy:&lt;/p&gt; 
&lt;p&gt;"Condition": { "StringEquals": { "kms:ViaService": "es.us-west-1.amazonaws.com" }, "Bool": { "kms:GrantIsForAWSResource": "true" }&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;Warning&lt;br&gt; If you delete the key that you used to encrypt a domain, the domain becomes inaccessible. The Amazon ES team can't help you recover your data. AWS KMS deletes master keys only after a waiting period of at least seven days, so the Amazon ES team might contact you if they detect that your domain is at risk.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; - Automatic key rotation preserves the properties of your AWS KMS master keys, so the rotation has no effect on your ability to access your Elasticsearch data. Encrypted Amazon ES domains don't support manual key rotation, which involves creating a new master key and updating any references to the old key. &lt;br&gt; - Certain instance types don't support encryption of data at rest.&lt;br&gt; - Domains that encrypt data at rest use a different repository name for their automated snapshots.&lt;br&gt; - Encrypting an Amazon ES domain requires a grant, and each encryption key has a limit of 500 grants per principal. This limit means that the maximum number of Amazon ES domains that you can encrypt using a single key is 500. Currently, Amazon ES supports a maximum of 100 domains per account (per Region), so this grant limit is of no consequence. If the domain limit per account increases, however, the grant limit might become relevant.&lt;br&gt; If you need to encrypt more than 500 domains at that time, you can create additional keys. Keys are regional, not global, so if you operate in more than one AWS Region, you already need multiple keys.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Encryption of Data at Rest for Amazon Elasticsearch Service" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/encryption-at-rest.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;To ensure that encryption of data at rest for Amazon Elasticsearch is enabled (from console):&lt;/p&gt;

	&lt;p&gt;1. Sign In to the Console.&lt;br /&gt;
2. Go to Amazon Elasticsearch dashboard.&lt;br /&gt;
3. Ensure that Encryption at rest is set to Enabled on the selected domain&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICSEARCH9" name="Enable Node-to-node Encryption for Amazon Elasticsearch" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable Node-to-node Encryption for Amazon Elasticsearch&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Node-to-node encryption provides an additional layer of security on top of the default features of Amazon ES.&lt;/p&gt; 
&lt;p&gt;Each Amazon ES domain-regardless of whether the domain uses VPC access-resides within its own, dedicated VPC. This architecture prevents potential attackers from intercepting traffic between Elasticsearch nodes and keeps the cluster secure. By default, however, traffic within the VPC is unencrypted. Node-to-node encryption enables TLS 1.2 encryption for all communications within the VPC.&lt;/p&gt; 
&lt;p&gt;If you send data to Amazon ES over HTTPS, node-to-node encryption helps ensure that your data remains encrypted as Elasticsearch distributes (and redistributes) it throughout the cluster. If data arrives unencrypted over HTTP, Amazon ES encrypts it after it reaches the cluster. You can require that all traffic to the domain arrive over HTTPS using the console, AWS CLI, or configuration API.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Enabling Node-to-node Encryption&lt;/p&gt; 
&lt;p&gt;Node-to-node encryption on new domains requires Elasticsearch 6.0 or later. Enabling the feature on existing domains requires Elasticsearch 6.7 or later. Choose the existing domain in the AWS console, Actions, and Modify encryption.&lt;/p&gt; 
&lt;p&gt;Alternatively, you can use the AWS CLI or configuration API.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; After you configure a domain to use node-to-node encryption, you can't disable the setting. Instead, you can take a manual snapshot of the encrypted domain, create another domain, migrate your data, and delete the old domain.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Node-to-node Encryption for Amazon Elasticsearch Service" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/ntn.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that Node-to-node Encryption for Amazon Elasticsearch is enabled.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.855">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICSEARCH8" name="Set up Anomaly Detection for Amazon Elasticsearch" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Set up Anomaly Detection for Amazon Elasticsearch&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Anomaly detection in Amazon Elasticsearch Service (Amazon ES) automatically detects anomalies in your Elasticsearch data in near-real time by using the Random Cut Forest (RCF) algorithm. RCF is an unsupervised machine learning algorithm that models a sketch of your incoming data stream. The algorithm computes an anomaly grade and confidence score value for each incoming data point. Anomaly detection uses these values to differentiate an anomaly from normal variations in your data.&lt;br&gt; You can pair the anomaly detection plugin with the Alerting for Amazon Elasticsearch Service plugin to notify you as soon as an anomaly is detected.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Anomaly detection requires Elasticsearch 7.4 or later. All instance types support anomaly detection except for t2.micro and t2.small.&lt;/p&gt; 
&lt;p&gt;Getting Started with Anomaly Detection&lt;/p&gt; 
&lt;p&gt;To get started, choose Anomaly Detection in Kibana.&lt;/p&gt; 
&lt;p&gt;Step 1: Create a Detector&lt;/p&gt; 
&lt;p&gt;A detector is an individual anomaly detection task. You can create multiple detectors, and all the detectors can run simultaneously, with each analyzing data from different sources.&lt;/p&gt; 
&lt;p&gt;Step 2: Add Features to Your Detector&lt;/p&gt; 
&lt;p&gt;A feature is the field in your index that you check for anomalies. A detector can discover anomalies across one or more features. You must choose one of the following aggregations for each feature: average(), sum(), count(), min(), or max().&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; The count() aggregation method is only available in Elasticsearch version 7.7 and later. For version 7.4, use a custom expression like the following:&lt;/p&gt; 
&lt;p&gt;{ "aggregation_name": { "value_count": { "field": "field_name" } }&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;The aggregation method determines what constitutes an anomaly. For example, if you choose min(), the detector focuses on finding anomalies based on the minimum values of your feature. If you choose average(), the detector finds anomalies based on the average values of your feature. You can add a maximum of five features per detector.&lt;/p&gt; 
&lt;p&gt;You can configure the following optional settings (available in 7.7 and later):&lt;/p&gt; 
&lt;p&gt;- Category field - Categorize or slice your data with a dimension like IP address, product ID, country code, and so on.&lt;/p&gt; 
&lt;p&gt;- Window size - Set the number of aggregation intervals from your data stream to consider in a detection window.&lt;/p&gt; 
&lt;p&gt;After you set up your features, preview sample anomalies and adjust the feature settings if necessary.&lt;/p&gt; 
&lt;p&gt;Step 3: Observe the Results&lt;/p&gt; 
&lt;p&gt;- Live anomalies - displays the live anomaly results for the last 60 intervals. For example, if the interval is set to 10, it shows the results for the last 600 minutes. This chart refreshes every 30 seconds.&lt;/p&gt; 
&lt;p&gt;- Anomaly history - plots the anomaly grade with the corresponding measure of confidence.&lt;/p&gt; 
&lt;p&gt;- Feature breakdown - plots the features based on the aggregation method. You can vary the date-time range of the detector.&lt;/p&gt; 
&lt;p&gt;- Anomaly occurrence - shows the Start time, End time, Data confidence, and Anomaly grade for each anomaly detected.&lt;/p&gt; 
&lt;p&gt;If you set the category field, you see an additional Heat map chart that correlates results for anomalous entities. Choose a filled rectangle to see a more detailed view of the anomaly.&lt;/p&gt; 
&lt;p&gt;Step 4: Set Up Alerts&lt;br&gt; To create a monitor to send you notifications when any anomalies are detected, choose Set up alerts. The plugin redirects you to the Add monitor page where you can configure an alert.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Anomaly Detection for Amazon Elasticsearch Service" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/ad.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that Anomaly Detection for Amazon Elasticsearch has been properly configured.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.846">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.865">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICSEARCH3" name="Update Service Software for Amazon Elasticsearch" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Update Service Software for Amazon Elasticsearch&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Amazon ES regularly releases system software updates that add features or otherwise improve your domains.&lt;br&gt; The Notifications panel in the console is the easiest way to see if an update is available or check the status of an update. You can also receive these notifications through Amazon EventBridge.&lt;br&gt; Each notification includes details about the service software update. The notification severity is Informational if the update is optional and High if it's required. Consider the following when deciding whether to update your domain:&lt;br&gt; - If you take no action on required updates, Amazon ES still updates your domain service software automatically after a certain timeframe (typically two weeks). In this situation, Amazon ES sends notifications when it starts the update and when the update is complete.&lt;br&gt; - If you start an update manually, Amazon ES doesn't send a notification when it starts the update, only when the update is complete.&lt;br&gt; Manually updating your domain lets you take advantage of new features more quickly.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; Service software updates differ from Elasticsearch version upgrades.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; To request a service software update (console)&lt;/p&gt; 
&lt;p&gt;1. Sign In to the Console.&lt;/p&gt; 
&lt;p&gt;2. Under Analytics, choose Elasticsearch Service.&lt;/p&gt; 
&lt;p&gt;3. In the navigation pane, under My domains, choose the domain you want to update.&lt;/p&gt; 
&lt;p&gt;4. For Service software release, follow the documentation link to compare your current version to the latest version. Then choose Update.&lt;/p&gt; 
&lt;p&gt;To request a service software update (AWS CLI and AWS SDKs)&lt;/p&gt; 
&lt;p&gt;You can use the following commands to see if an update is available, check upgrade eligibility, and request an update:&lt;/p&gt; 
&lt;p&gt;describe-elasticsearch-domain (DescribeElasticsearchDomain)&lt;/p&gt; 
&lt;p&gt;start-elasticsearch-service-software-update (StartElasticsearchServiceSoftwareUpdate)&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Consider starting the update at a low traffic time.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Service Software Updates" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-service-software.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that Service Software for Amazon Elasticsearch has been updated.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.798">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICSEARCH2" name="Upgrade Amazon Elasticsearch to the latest version" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Upgrade Amazon Elasticsearch to the latest version&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; To get the new Elasticsearch features, bug fixes and security updates, upgrade Elasticsearch to the latest version.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; Elasticsearch version upgrades differ from service software updates.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The upgrade process consists of three steps:&lt;/p&gt; 
&lt;p&gt;1. Pre-upgrade checks - Amazon ES performs a series of checks for issues that can block an upgrade and doesn't proceed to the next step unless these checks succeed.&lt;/p&gt; 
&lt;p&gt;2. Snapshot - Amazon ES takes a snapshot of the Elasticsearch cluster and doesn't proceed to the next step unless the snapshot succeeds. If the upgrade fails, Amazon ES uses this snapshot to restore the cluster to its original state.&lt;/p&gt; 
&lt;p&gt;3. Upgrade - Amazon ES starts the upgrade, which can take from 15 minutes to several hours to complete. Kibana might be unavailable during some or all of the upgrade.&lt;/p&gt; 
&lt;p&gt;Starting an Upgrade&lt;/p&gt; 
&lt;p&gt;The upgrade process is irreversible and can't be paused or canceled. During an upgrade, you can't make configuration changes to the domain. Before starting an upgrade, double-check that you want to proceed. You can use these same steps to perform the pre-upgrade check without actually starting an upgrade.&lt;/p&gt; 
&lt;p&gt;If the cluster has dedicated master nodes, upgrades complete without downtime. Otherwise, the cluster might be unresponsive for several seconds post-upgrade while it elects a master node.&lt;/p&gt; 
&lt;p&gt;To upgrade a domain to a later version of Elasticsearch (console)&lt;/p&gt; 
&lt;p&gt;1. Take a manual snapshot of your domain. This snapshot serves as a backup that you can restore on a new domain if you want to return to using the prior Elasticsearch version.&lt;/p&gt; 
&lt;p&gt;2. Sign In to the Console.&lt;/p&gt; 
&lt;p&gt;3. Under Analytics, choose Elasticsearch Service.&lt;/p&gt; 
&lt;p&gt;4. In the navigation pane, under My domains, choose the domain that you want to upgrade.&lt;/p&gt; 
&lt;p&gt;5. Choose Actions and Upgrade domain.&lt;/p&gt; 
&lt;p&gt;6. For Operation, choose Upgrade, Submit, and Continue.&lt;/p&gt; 
&lt;p&gt;7. Return to the Overview tab and choose Upgrade status to monitor the state of the upgrade.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; If the cluster has dedicated master nodes, upgrades complete without downtime. Otherwise, the cluster might be unresponsive for several seconds post-upgrade while it elects a master node.&lt;br&gt; Upgrade can take from 15 minutes to several hours to complete. Kibana might be unavailable during some or all of the upgrade.&lt;br&gt; Amazon ES offers in-place Elasticsearch upgrades for domains that run versions 5.1 and later. If you use services like Amazon Kinesis Data Firehose or Amazon CloudWatch Logs to stream data to Amazon ES, check that these services support the newer version of Elasticsearch before migrating.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Upgrading Elasticsearch" url="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-version-migration.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use the following operation to identify the right Elasticsearch version for your domain:&lt;/p&gt;

	&lt;p&gt;get-compatible-elasticsearch-versions (GetCompatibleElasticsearchVersions)&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.789">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICSEARCH1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICSEARCH1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICSEARCH2" mitigation="50"/>
                    <countermeasure ref="AWS-ELASTICSEARCH3" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICSEARCH2" mitigation="50"/>
                <countermeasure ref="AWS-ELASTICSEARCH3" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICSEARCH5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICSEARCH5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICSEARCH4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICSEARCH4" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOGGING AND MONITORING" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICSEARCH6" mitigation="34"/>
                    <countermeasure ref="AWS-ELASTICSEARCH7" mitigation="33"/>
                    <countermeasure ref="AWS-ELASTICSEARCH8" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICSEARCH6" mitigation="34"/>
                <countermeasure ref="AWS-ELASTICSEARCH7" mitigation="33"/>
                <countermeasure ref="AWS-ELASTICSEARCH8" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICSEARCH9" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICSEARCH9" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-5.1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="0e2135b9-d234-486d-822f-928bca46b59c" diagramComponentId="da58f473-0983-4a35-aed8-e9fc0d6f4dde" ref="8ecba4d5-1c67-4175-bfc8-e29fb10a2c3d" name="Internal Logging Server" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="internal-server">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="UNPATCHED-SERVER" name="Recommended security patches are not applied" state="0" impact="100" issueId="" issueLink="">
          <desc>When patches are not applied in a timely manner then the server or system could be vulnerable
                        to known security issues. These issues could be used by an attacker to gain access to the
                        system.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.522">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="UNNECESSARY-SERVICES" name="Unnecessary services are exposed" state="0" impact="100" issueId="" issueLink="">
          <desc>The application exposes unnecessary services which increase the attack surface.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.510">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="PATCH-SERVER" name="Apply required security patches" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Vendors and other maintainers of software release patches in response to security flaws and
                        other bugs in their products.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected
                        failures or exploitation.&lt;/li&gt;
                        &lt;li&gt;Clearly define an approach for testing and applying patches, in particular security
                        patches, with expected timescales. &amp;nbsp;There is often a small window between release of a
                        patch, and potentially malicious actors reverse-engineering the patch to identify and exploit
                        the flaw.&lt;/li&gt;
                        &lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting service to ensure
                        the project team is aware of issues within the project or its components promptly.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA CM-01 Configuration Management Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/152-08_02_CM-01"/>
          </references>
          <standards>
            <standard ref="10.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="10.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Verify there is a processes for identifying, categorizing, and prioritizing
                            security and other patches.&lt;/li&gt;
                            &lt;li&gt;Review the testing and release process.&lt;/li&gt;
                            &lt;li&gt;Verify patches are applied in a timely manner, in line with the policies and
                            taking into account the associated risk.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.535">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="INF-UNNECESSARY-SERVICES" name="Restrict access to required services only" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The attack surface, and therefore susceptibility to attack, should be minimized. In particular, services that are not explicitly required for the proper operation of the server or service should be disable, or access to them be restricted.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Any service, feature, or functionality that is not required should be disabled or removed. This applies equally to the operating system, middleware, web-server, or other software in use.&lt;/li&gt; 
 &lt;li&gt;Access to the server and remaining services (in particular those that cannot be disabled or removed) should be controlled use host-based and/or network security controls; for example host firewalls, network firewalls, routers, or switches.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt; 
 &lt;li&gt;Conduct a host review to confirm the software and services running and exposed on the system. - Support the host review with network based scans across at least all &lt;span class="caps"&gt;TCP&lt;/span&gt; and &lt;span class="caps"&gt;UDP&lt;/span&gt; ports (0-65535), together with &lt;span class="caps"&gt;RPC&lt;/span&gt; and other remote call services.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify the running and accessible services against expected configuration for the system, and against the security principal of 'least privilege'.&lt;/li&gt; 
 &lt;li&gt;Where a network or host based firewall is in use, it should be configured to drop connections rather than reject them. i.e. port-scans should identify only 'open' or 'filtered' services; no service should be identifiably 'closed'.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Note however that different network based security solutions exhibit different behavior in this regard.&lt;/li&gt; 
&lt;/ul&gt; </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:43.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS SERVICES" name="Access services" desc="" library="CS-Default">
          <threats>
            <threat ref="SERVER-ATTACK" name="Data is compromised if the server itself is compromised" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>If attackers compromise the server that hosts the service or data, then the data and
                                the service itself could be at risk of compromise. The server could be compromised
                                through any of the services that it exposes.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="UNNECESSARY-SERVICES">
                  <countermeasures>
                    <countermeasure ref="INF-UNNECESSARY-SERVICES" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="UNPATCHED-SERVER">
                  <countermeasures>
                    <countermeasure ref="PATCH-SERVER" mitigation="80"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="INF-UNNECESSARY-SERVICES" mitigation="20"/>
                <countermeasure ref="PATCH-SERVER" mitigation="80"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="b72c4d08-d532-40ca-9d4d-682929663006" diagramComponentId="351ce93a-53cd-41e7-b6fd-a7effc997ac3" ref="329646f1-38b8-4996-93e4-1e342f0bafb3" name="API - I/O" desc="" library="Hydras-AWS-Foundation" parentComponentRef="88ead499-6db6-4ecb-96d9-363b587ed0d5" componentDefinitionRef="api-gateway">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.104">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:13.747">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-295" name="Improper Certificate Validation" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not validate, or incorrectly validates, a certificate.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references>
              <reference name="CWE-295: Improper Certificate Validation" url="https://cwe.mitre.org/data/definitions/295.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-77" name="Improper Neutralization of Special Elements used in a Command ('Command Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software constructs all or part of a command using
                    externally-influenced input from an upstream component, but it does not
                    neutralize or incorrectly neutralizes special elements that could modify the
                    intended command when it is sent to a downstream
                    component.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-10T15:20:50.102">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:45.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-522" name="Insufficiently Protected Credentials" state="0" impact="100" issueId="" issueLink="">
          <desc>This weakness occurs when the application transmits or stores
                    authentication credentials and uses an insecure method that is susceptible to
                    unauthorized interception and/or retrieval.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-10T15:20:49.915">
              <output/>
            </source>
            <references>
              <reference name="CWE-522: Insufficiently Protected Credentials" url="https://cwe.mitre.org/data/definitions/522.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-320" name="Key Management Errors" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category are related to errors in the management of cryptographic keys.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-12-10T16:38:53.139">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.133">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards>
            <standard ref="1.22" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.861">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.10" name="Apply setting MFA for sensitive API calls" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>To the extent that it is practical consider enforcing MFA access for sensitive API calls. For example, you can require that a user has authenticated with an MFA device in order to be allowed to terminate an Amazon EC2 instance. This ensures that such high level changes to your AWS environment are protected with an extra layer of security thus helping to prevent accidental or malicious damage. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;The following is an example of how to create a policy that enforces MFA to terminate EC2 instances: 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Select "Policies".&lt;/li&gt; 
  &lt;li&gt;Select "Create Policy".&lt;/li&gt; 
  &lt;li&gt;Select "Create your own policy".&lt;/li&gt; 
  &lt;li&gt;Provide a policy name and description.&lt;/li&gt; 
  &lt;li&gt;In the policy document add the following:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;i&gt; {&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Version": "2012-10-17",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Statement": [{&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Effect": "Allow",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Action": [&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "ec2:StopInstances",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "ec2:TerminateInstances"&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; ],&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Resource": ["*"],&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Condition": {"Bool": {"aws:MultiFactorAuthPresent": "true"}}&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; }]&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt;}&lt;/i&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click "Create policy".&lt;/li&gt; 
  &lt;li&gt;The policy may now be added to a group by following the outlines in "Use RBAC with pre-defined policies added into groups or roles".&lt;/li&gt; 
 &lt;/ul&gt; &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configuring MFA-Protected API Access" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_configure-api-require.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that MFA is forced on a policy:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                            &lt;li&gt;Go to IAM Service on the AWS Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Policies&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;In the filter select &amp;quot;Customer Managed Policies&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select the policy to check.&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line: &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:MultiFactorAuthPresent&amp;quot;: &amp;quot;true&amp;quot;}}&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.5" name="Avoid API keys for root account" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>You use an access key (an access key ID and secret access key) to make programmatic requests to AWS. However, do not use your AWS account (root) access key. The access key for your AWS account gives full access to all your resources for all AWS services, including your billing information. You cannot restrict the permissions associated with your AWS account access key.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console as Root.&lt;/li&gt; 
  &lt;li&gt;Click on Account Name at the top left and select Security Credentials.&lt;/li&gt; 
  &lt;li&gt;On the pop up screen Click on Continue to Security Credentials.&lt;/li&gt; 
  &lt;li&gt;Click on Access Keys.&lt;/li&gt; 
  &lt;li&gt;Under the Status column if there are any Keys which are "Active".&lt;/li&gt; 
  &lt;li&gt;Click on "Make Inactive" and click "Delete".&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;Run the following command: aws iam get-credential-report --query 'Content'
                            --output text | base64 -D | egrep &amp;quot;root|access&amp;quot; | awk -F, '{print
                            $1,$9,$14}'&lt;/li&gt;
                            &lt;li&gt;For the &amp;lt;root_account&amp;gt; user ensure access_key_1_active and
                            access_key_2_active are false.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.878">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW7" name="Choose a minimum TLS version for a custom domain in API Gateway" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Choose a minimum TLS version for a custom domain in API Gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  The APIs created with Amazon API Gateway expose HTTPS endpoints only. API Gateway doesn't support unencrypted (HTTP) endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For greater security, you can choose a minimum Transport Layer Security (TLS) protocol version to be enforced for your API Gateway custom domain. You can choose either a TLS version 1.2 or TLS version 1.0 security policy. WebSocket APIs and HTTP APIs support only TLS 1.2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  When you create a custom domain, you specify the security policy for it. 
&lt;/div&gt; 
&lt;div&gt;
  You can change the security policy by updating the domain name settings. To change the minimum TLS version, use one of the following commands, specifying the new TLS version (TLS_1_0 or TLS_1_2) in the securityPolicy parameter. Allow up to 60 minutes for the update to be completed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Choosing a minimum TLS version for a custom domain in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure when creating a custom domain name, that you specify the minimum TLS version by choosing the "Choose a minimum TLS version" option.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T10:38:45.299">
              <output/>
            </source>
            <references>
              <reference name="Creating an edge-optimized custom domain name" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-edge-optimized-custom-domain-name.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW1" name="Control access to an API using supported mechanisms" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control and manage access to a REST API in API Gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  API Gateway supports multiple mechanisms for controlling and managing access to your API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can use the following mechanisms for authentication and authorization: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Resource policies let you create resource-based policies to allow or deny access to your APIs and methods from specified source IP addresses or VPC endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Standard AWS IAM roles and policies offer flexible and robust access controls that can be applied to an entire API or individual methods. IAM roles and policies can be used for controlling who can create and manage your APIs, as well as who can invoke them. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. IAM tags can be used together with IAM policies to control access. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Endpoint policies for interface VPC endpoints allow you to attach IAM resource policies to interface VPC endpoints to improve the security of your private APIs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. Lambda authorizers are Lambda functions that control access to REST API methods using bearer token authentication-as well as information described by headers, paths, query strings, stage variables, or context variables request parameters. Lambda authorizers are used to control who can invoke REST API methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Amazon Cognito user pools let you create customizable authentication and authorization solutions for your REST APIs. Amazon Cognito user pools are used to control who can invoke REST API methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Controlling and managing access to a REST API in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-18T15:20:51.952">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM Policies with the IAM Policy Simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.903">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.888">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW5" name="Create Route 53 alias records for API endpoints" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Create Route 53 alias records for API endpoints 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Attackers sometimes hijack traffic to internet endpoints such as web servers by intercepting DNS queries and returning their own IP addresses to DNS resolvers in place of the actual IP addresses for those endpoints. Users are then routed to the IP addresses provided by the attackers in the spoofed response, for example, to fake websites. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can protect your domain from this type of attack, known as DNS spoofing or a man-in-the-middle attack, by configuring Domain Name System Security Extensions (DNSSEC), a protocol for securing DNS traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Amazon Route 53 offers a special type of record called an 'Alias' record that lets you map your zone apex (example.com) DNS name to your Amazon API Gateway DNS name (i.e. api-id.execute-api.region.amazonaws.com/stage). IP addresses associated with Amazon API Gateway can change at any time due to scaling up, scaling down, or software updates. Route 53 responds to each request for an Alias record with one or more IP addresses for the API Gateway. There is no additional charge for queries to Alias records that are mapped to Amazon API Gateways. These queries are listed as "Intra-AWS-DNS-Queries" on the Route 53 usage report. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Amazon API Gateway lets you create, publish, maintain, monitor, and secure APIs. You can create APIs that access AWS services or other web services, as well as data stored in the AWS Cloud. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The method that you use to route domain traffic to an API Gateway API depends on whether you created a regional API Gateway endpoint or an edge-optimized API Gateway endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Regional API endpoint: You create a Route 53 alias record that routes traffic to the regional API endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Edge-optimized API endpoint: You create a Route 53 alias record that routes traffic to the edge-optimized API. This causes traffic to be routed to the CloudFront distribution that's associated with the edge-optimized API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An alias record is a Route 53 extension to DNS that's similar to a CNAME record. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configuring Route 53 to route traffic to a regional API Gateway endpoint" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-api-gateway.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your API by using the name of the alias record that you created in this procedure.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T10:49:02.306">
              <output/>
            </source>
            <references>
              <reference name="Configuring Route 53 to route traffic to a regional API Gateway endpoint" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-api-gateway.html"/>
              <reference name="Routing traffic to an Amazon API Gateway API by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-api-gateway.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW12" name="Do not put sensitive data into AWS API Gateway free-form fields" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Do not put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you never put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. This includes when you work with API Gateway or other AWS services using the console, API, AWS CLI, or AWS SDKs. Any data that you enter into AWS services might get picked up for inclusion in diagnostic logs. When you provide a URL to an external server, don't include credentials information in the URL to validate your request to that server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that free-form fields do not contain sensitive data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Data protection in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/data-protection.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T11:29:43.925">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW16" name="Enable API Gateway X-Ray Tracing" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Ensure APIs created with Amazon API Gateway have active tracing support for AWS X-Ray enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can use AWS X-Ray to trace and analyze user requests as they travel through your Amazon API Gateway REST APIs to the underlying services. API Gateway supports X-Ray tracing for all API Gateway REST API endpoint types: Regional, edge-optimized, and private. You can use X-Ray with Amazon API Gateway in all AWS Regions where X-Ray is available. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Because X-Ray gives you an end-to-end view of an entire request, you can analyze latencies in your APIs and their backend services. You can use an X-Ray service map to view the latency of an entire request and that of the downstream services that are integrated with X-Ray. You can also configure sampling rules to tell X-Ray which requests to record and at what sampling rates, according to criteria that you specify. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you call an API Gateway API from a service that's already being traced, API Gateway passes the trace through, even if X-Ray tracing isn't enabled on the API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable X-Ray for an API stage by using the API Gateway console, or by using the API Gateway API or CLI. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Tracing user requests to REST APIs using X-Ray" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-xray.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Once you've enabled X-Ray for your API stage, you can use the X-Ray management console to view the traces and service maps.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T11:47:51.718">
              <output/>
            </source>
            <references>
              <reference name="Setting up AWS X-Ray with API Gateway REST APIs" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enabling-xray.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW14" name="Enable APIs CloudWatch Logs" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Ensure APIs created with Amazon API Gateway have AWS CloudWatch logging enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  To help debug issues related to request execution or client access to your API, you can enable Amazon CloudWatch Logs to log API calls. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To set up CloudWatch API logging, you must have deployed the API to a stage. You must also have configured an appropriate CloudWatch Logs role ARN for your account. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the API Gateway console at https://console.aws.amazon.com/apigateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose a REST API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Settings from the primary navigation panel and enter an ARN of an IAM role with appropriate permissions in CloudWatch log role ARN. You need to do this once. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Do one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose an existing API and then choose a stage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Create an API and deploy it to a stage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Logs/Tracing in the Stage Editor. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable execution logging: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Enable CloudWatch Logs under CloudWatch Settings. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Error or Info from the dropdown menu. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If desired, choose Enable Detailed CloudWatch Metrics. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For more information about CloudWatch metrics, see Monitoring REST API execution with Amazon CloudWatch metrics. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable access logging: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Enable Access Logging under Custom Access Logging. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Enter the ARN of a log group in Access Log Destination ARN. The ARN format is arn:aws:logs:{region}:{account-id}:log-group:log-group-name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Enter a log format in Log Format. You can choose CLF, JSON, XML, or CSV to use one of the provided examples as a guide. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Save Changes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  You can enable execution logging and access logging independent of each other. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  API Gateway is now ready to log requests to your API. You don't need to redeploy the API when you update the stage settings, logs, or stage variables. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Setting up CloudWatch logging for a REST API in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Test your logging setup&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Send a new request to your API using your client application or a tool such as the Postman app or wscat (for WebSocket APIs). 
&lt;/div&gt; 
&lt;div&gt;
  2. In the CloudWatch console, in the left navigation pane, under Logs, choose Log Groups. 
&lt;/div&gt; 
&lt;div&gt;
  3. In the list of Log Groups, choose the log group of the API that you're debugging. 
&lt;/div&gt; 
&lt;div&gt;
  For a REST API, the log group's name is in this format: API-Gateway-Execution-Logs_apiId/stageName. 
&lt;/div&gt; 
&lt;div&gt;
  For a WebSocket API, the log group's name is in this format: /aws/apigateway/apiId/stageName. 
&lt;/div&gt; 
&lt;div&gt;
  Note: The access logs are located in the log group whose ARN you specified when you enabled access logging. 
&lt;/div&gt; 
&lt;div&gt;
  4. In the list of Log Streams, choose the logs stream with the latest Last Event Time to see messages with the execution or access details of your request. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T11:45:18.275">
              <output/>
            </source>
            <references>
              <reference name="How do I enable CloudWatch Logs for troubleshooting my API Gateway REST API or WebSocket API?" url="https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-cloudwatch-logs/"/>
              <reference name="View API Gateway log events in the CloudWatch console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/view-cloudwatch-log-events-in-cloudwatch-console.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW15" name="Enable APIs CloudWatch Metrics" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Monitor REST API execution with Amazon CloudWatch metrics 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can monitor API execution by using CloudWatch, which collects and processes raw data from API Gateway into readable, near-real-time metrics. These statistics are recorded for a period of 15 months so you can access historical information and gain a better perspective on how your web application or service is performing. By default, API Gateway metric data is automatically sent to CloudWatch in one-minute periods.The metrics reported by API Gateway provide information that you can analyze in different ways. The following list shows some common uses for the metrics that are suggestions to get you started: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Monitor the IntegrationLatency metrics to measure the responsiveness of the backend. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Monitor the Latency metrics to measure the overall responsiveness of your API calls. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Monitor the CacheHitCount and CacheMissCount metrics to optimize cache capacities to achieve a desired performance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can access CloudWatch using any of the following methods: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Amazon CloudWatch console 
&lt;/div&gt; 
&lt;div&gt;
  AWS CLI&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  CloudWatch API 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that detailed CloudWatch metrics are enabled for all APIs created with AWS API Gateway service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring REST API execution with Amazon CloudWatch metrics" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/monitoring-cloudwatch.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>You can use the API dashboard in the API Gateway Console to display the CloudWatch metrics of your deployed API in API Gateway. These are shown as a summary of API activity over time. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Examine API activities in the dashboard&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   1. Sign in to the API Gateway console at https://console.aws.amazon.com/apigateway. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   2. Choose the name of the API. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   3. Under the selected API, choose Dashboard. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   4. To display a summary of API activity over time, for Stage, choose the desired stage. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   5. Use From and To to enter the date range. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   6. Refresh, if needed, and view individual metrics displayed in separate graphs titled API Calls, Integration Latency, Latency, 4xx Error and 5xx Error. The CacheHitCount and CacheMissCount graphs will be displayed only if API caching has been enabled. 
 &lt;/div&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T11:46:32.717">
              <output/>
            </source>
            <references>
              <reference name="View CloudWatch metrics with the API dashboard in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-api-dashboard.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.925">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.934">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW6" name="Enable Content Encoding for API Responses" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Ensure APIs created with Amazon API Gateway have Content Encoding feature enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Content encoding allows API clients to request content to be compressed before being sent back in the response to an API request. This reduces the amount of data that is sent from API Gateway to API clients and decreases the time it takes to transfer the data. You can enable content encoding in the API definition. You can also set the minimum response size that triggers compression. By default, APIs do not have content encoding support enabled.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To enable payload compression by using the API Gateway console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the API Gateway console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose an existing API or create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the primary navigation pane, choose Settings under the API you chose or the one you created. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under the Content Encoding section in the Settings pane, select the Content Encoding enabled option to enable payload compression. Enter a number for the minimum compression size (in bytes) next to Minimum body size required for compression. To disable the compression, clear the Content Encoding enabled option. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Save Changes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Another way is to use AWS CLI to create a new API and enable compression. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The compression types supported by Amazon API Gateway service are gzip, deflate and identity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Enable payload compression for an API" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-enable-compression.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that Content Encoding enable option is selected into the API Gateway console. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you want the compression applied on a payload of any size, set the minimumCompressionSize value to zero. However, compressing data of a small size might actually increase the final data size. Furthermore, compression in API Gateway and decompression in the client might increase overall latency and require more computing times. You should run test cases against your API to determine an optimal value. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Test a method with the API Gateway console&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   1. Sign in to the API Gateway console. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   2. Choose a REST API. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   3. In the Resources pane, choose the method you want to test. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   4. In the Method Execution pane, in the Client box, choose TEST. Type values in any of the displayed boxes (such as Query Strings, Headers, and Request Body). The console includes these values in the method request in default application/json form. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   For additional options you may need to specify, contact the API owner. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   5. Choose Test. The following information will be displayed: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Request is the resource's path that was called for the method.&lt;/li&gt; 
   &lt;li&gt;Status is the response's HTTP status code.&lt;/li&gt; 
   &lt;li&gt;Latency is the time between the receipt of the request from the caller and the returned response.&lt;/li&gt; 
   &lt;li&gt;Response Body is the HTTP response body.&lt;/li&gt; 
   &lt;li&gt;Response Headers are the HTTP response headers.&lt;/li&gt; 
   &lt;li&gt;Logs are the simulated Amazon CloudWatch Logs entries that would have been written if this method were called outside of the API Gateway console.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T10:33:00.030">
              <output/>
            </source>
            <references>
              <reference name="Enable payload compression for an API" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-enable-compression.html"/>
              <reference name="Use the API Gateway console to test a REST API method" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-test-method.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW11" name="Enable data encryption at rest in AWS API Gateway" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  If you choose to enable caching for a REST API, you can enable cache encryption. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  If you anticipate that a method that you are caching will receive sensitive data in its responses, in Cache Settings, choose Encrypt cache data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To configure API caching for individual methods using the console: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the API Gateway console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Go to the API Gateway console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose the API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Stages. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the Stages list for the API, expand the stage and choose a method in the API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Override for this method in Settings. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the Cache Settings area, you can set or clear Enable Method Cache or customize any other desired options. (This section is shown only if stage-level caching is enabled.) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Data encryption in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/data-protection-encryption.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Ensure that in Cache Settings, "Encrypt cache data" option is enabled into the API Gateway console. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T11:28:19.444">
              <output/>
            </source>
            <references>
              <reference name="Enabling API caching to enhance responsiveness" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.946">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.6" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.955">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW8" name="Enable request validation in API Gateway" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable request validation in API Gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  API Gateway can be configured to perform basic validation of an API request before proceeding with the integration request. When the validation fails, API Gateway immediately fails the request, returns a 400 error response to the caller, and publishes the validation results in CloudWatch Logs. This reduces unnecessary calls to the backend. More importantly, it lets you focus on the validation efforts specific to your application. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can set up request validators in an API's OpenAPI definition file and then import the OpenAPI definitions into API Gateway. You can also set them up in the API Gateway console or by calling the API Gateway REST API, the AWS CLI, or one of the AWS SDKs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Enable Request Validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html"/>
            <reference name="Enable request validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html"/>
            <reference name="Set up basic request validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-validation-set-up.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Test basic request validation using the API Gateway console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The following steps describe how to test basic request validation in the API Gateway console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test the request validation on a method using TestInvoke in the API Gateway console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  While signed in to the API Gateway console, do the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Resources for the API that you've configured a request validators map for. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose a method for which you have enabled the request validation with a specified request validator. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Method Execution, in the Client box, choose Test. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Try different values for required request parameter or applicable body, and then choose Test to see the response. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When the method call passes validation, you should get expected responses. If validation fails, the following error message returns if the payload is not the correct format: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; "message": "Invalid request body" 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt; 
&lt;div&gt;
  If the request parameters aren't valid, the following error message returns: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; "message": "Missing required request parameters: [p1]" 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T10:41:53.285">
              <output/>
            </source>
            <references>
              <reference name="Test basic request validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-validation-test.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW17" name="Review the use of stars in Lambda Authorizer's policyDocument objects" issueId="" issueLink="" platform="" cost="0" risk="89" state="Required" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;These are a few of our recommendations in decreasing order of priority to ensure your serverless APIs in AWS are not vulnerable to the problems described in this blog post:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the use of stars in the&amp;nbsp;&lt;i&gt;policyDocument&amp;nbsp;&lt;/i&gt;object. The rule of thumb is that if a star is used at all at the last part of the ARN, it should be in the form of a "/*" at the very end of the resource string (i.e.: "arn:aws:execute-api:us-west-1:12345678:myApiId/test/GET/foo/bar/*"). You can obtain the API ID, stage name and HTTP method dynamically from the input provided to the lambda authorizer. Create one resource string in the policy for each allowed HTTP method.&lt;/li&gt;&lt;li&gt;Consider adding Deny statements that help limit the impact or scope of star expansions on the&amp;nbsp;&lt;i&gt;policyDocument.&amp;nbsp;&lt;/i&gt;Remember that AWS IAM always gives precedence to Deny over Allow if multiple statements match an operation.&lt;/li&gt;&lt;li&gt;Whenever feasible, use defense in depth and check again that the user is authorized to call an endpoint in the lambda that implements it. Don't rely on the lambda authorizer policy as your only method of authorization unless you are sure you can do it securely.&lt;/li&gt;&lt;li&gt;Make sure any code imported from the previous version of the lambda authorizer blueprints is updated to the latest version.&lt;/li&gt;&lt;li&gt;If you use URL path parameters in your APIs, avoid cases where the valid values expected to be submitted to them can be chosen by potential attackers. Prefer backend-generated IDs instead of user-chosen names for entities, for example.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Implications of AWS API Gateway Lambda Authorizers and IAM Wildcard Expansion" url="https://www.tenchisecurity.com/blog/thefaultinourstars"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Imagine an API that needs to allow a user to access any HTTP verb on a single endpoint "/business/op". The developer might be tempted to write the &lt;i&gt;policyDocument&lt;/i&gt; as follows: "arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/*/business/op"&lt;/p&gt;&lt;p&gt;All of the following ARNs would be allowed by the example policy. But item 6 most likely would not be expected by a developer that read this part of the documentation.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/GET/business/op&lt;/li&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/PATCH/business/op&lt;/li&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/DELETE/business/op&lt;/li&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/PUT/business/op&lt;/li&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/POST/business/op&lt;/li&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/GET/foo/bar/business/op&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So having the HTTP verb as a star makes it so that the endpoint resource is no longer anchored to the beginning of the URL path.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:13.168">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW4" name="Rotate Expiring SSL Client Certificates" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Ensure that SSL certificates associated with API Gateway REST APIs are rotated periodically. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  The client certificate generated by API Gateway is valid for 365 days. You must rotate the certificate before a client certificate on an API stage expires to avoid any downtime for the API. You can check the expiration date of certificate by calling clientCertificate:by-id of the API Gateway REST API or the AWS CLI command of get-client-certificate and inspecting the returned expirationDate property. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To rotate a client certificate, do the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Generate a new client certificate by calling clientcertificate:generate of the API Gateway REST API or the AWS CLI command of generate-client-certificate. In this tutorial, we assume that the new client certificate ID is ndiqef. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Update the backend server to include the new client certificate. Don't remove the existing client certificate yet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Some servers might require a restart to finish the update. Consult the server documentation to see if you must restart the server during the update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Update the API stage to use the new client certificate by calling stage:update of the API Gateway REST API, with the new client certificate ID (ndiqef): 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  PATCH /restapis/{restapi-id}/stages/stage1 HTTP/1.1 
&lt;/div&gt; 
&lt;div&gt;
  Content-Type: application/json 
&lt;/div&gt; 
&lt;div&gt;
  Host: apigateway.us-east-1.amazonaws.com 
&lt;/div&gt; 
&lt;div&gt;
  X-Amz-Date: 20170603T200400Z 
&lt;/div&gt; 
&lt;div&gt;
  Authorization: AWS4-HMAC-SHA256 Credential=... 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; "patchOperations" : [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "op" : "replace", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "path" : "/clientCertificateId", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "value" : "ndiqef" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; } 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; ] 
&lt;/div&gt; 
&lt;div&gt;
  }&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  or by calling the CLI command of update-stage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Update the backend server to remove the old certificate. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Delete the old certificate from API Gateway by calling the clientcertificate:delete of the API Gateway REST API, specifying the clientCertificateId (a1b2c3) of the old certificate: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  DELETE /clientcertificates/a1b2c3&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  or by calling the CLI command of delete-client-certificate: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  aws apigateway delete-client-certificate --client-certificate-id a1b2c3 
&lt;/div&gt; 
&lt;div&gt;
  To rotate a client certificate in the console for a previously deployed API, do the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the main navigation pane, choose Client Certificates. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  From the Client Certificates pane, choose Generate Client Certificate. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the API for which you want to use the client certificate. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Stages under the selected API and then choose a stage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the Stage Editor panel, select the new certificate under the Client Certificate section. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To save the settings, choose Save Changes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You need to redeploy the API for the changes to take effect. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Rotate an expiring client certificate" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>You can check the expiration date of certificate by calling clientCertificate:by-id of the API Gateway REST API or the AWS CLI command of get-client-certificate and inspecting the returned expirationDate property.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T10:31:36.166">
              <output/>
            </source>
            <references>
              <reference name="Rotate an expiring client certificate" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW13" name="Set up a stage for a REST API" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Set up a stage for a REST API 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  A stage is a named reference to a deployment, which is a snapshot of the API. You use a Stage to manage and optimize a particular deployment. For example, you can configure stage settings to enable caching, customize request throttling, configure logging, define stage variables, or attach a canary release for testing. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Create a new stage 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  After the initial deployment, you can add more stages and associate them with existing deployments. You can use the API Gateway console to create a new stage, or you can choose an existing stage while deploying an API. In general, you can add a new stage to an API deployment before redeploying the API. To create a new stage using the API Gateway console, follow these steps:. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the API Gateway console at https://console.aws.amazon.com/apigateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  From the APIs navigation pane, choose Stages under an API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  From the Stages navigation pane, choose Create. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Create Stage, enter a stage name, for example, prod, for Stage name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Optionally, enter a stage description for Stage description. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  From the Deployment drop-down list, choose the date and time of the existing API deployment you want to associate with this stage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Setting up a stage for a REST API" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-stages.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  To see your Stages follow the steps below: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Sign in to the API Gateway console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the APIs pane, choose the API, and then choose Stages. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. In the Stages pane, choose the name of the stage. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T11:34:49.306">
              <output/>
            </source>
            <references>
              <reference name="Setting up a stage using the API Gateway console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/stages.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW2" name="Use AWS Secrets Manager to securely rotate, manage, and retrieve database credentials, API keys, and other secrets" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Securely rotate, manage, and retrieve database credentials, API keys, and other secrets. AWS recommends to use AWS Secrets Manager for this purpose. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Secrets Manager is a secrets management service that helps you protect access to your applications, services, and IT resources. This service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Using Secrets Manager, you can secure and manage secrets used to access resources in the AWS Cloud, on third-party services, and on-premises. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To get started with AWS Secrets Manager: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Identify your secrets and locate where they are used in your applications. 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the AWS Management Console using your AWS credentials and navigate to the Secrets Manager console. 
&lt;/div&gt; 
&lt;div&gt;
  Use the Secrets Manager console to upload the secret you identified. Alternatively, you can use the AWS SDK or AWS CLI to upload a secret (once per secret). You can also write a script to upload multiple secrets. 
&lt;/div&gt; 
&lt;div&gt;
  If your secret is not in use yet, follow the instructions on the console to configure automatic rotation. If applications are using your secret, complete steps (5) and (6) before configuring automatic rotation. 
&lt;/div&gt; 
&lt;div&gt;
  If other users or applications need to retrieve the secret, write an IAM policy to grant permissions to the secret. 
&lt;/div&gt; 
&lt;div&gt;
  Update your applications to retrieve secrets from Secrets Manager. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
          </references>
          <standards>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How do I know when AWS Secrets Manager rotates a database credential?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can configure Amazon CloudWatch Events to receive a notification when AWS Secrets Manager rotates a secret. You can also see when Secrets Manager last rotated a secret using the Secrets Manager console or APIs. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.983">
              <output/>
            </source>
            <references>
              <reference name="AWS Secrets Manager FAQs" url="https://aws.amazon.com/secrets-manager/faqs/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T11:20:17.914">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.837">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW10" name="Use AWS WAF to protect APIs" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS WAF to protect Amazon API Gateway APIs from common web exploits. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS WAF is a web application firewall that helps protect your web applications or APIs against common web exploits that may affect availability, compromise security, or consume excessive resources. AWS WAF gives you control over how traffic reaches your applications by enabling you to create security rules that block common attack patterns, such as SQL injection or cross-site scripting, and rules that filter out specific traffic patterns you define. You can get started quickly using Managed Rules for AWS WAF, a pre-configured set of rules managed by AWS or AWS Marketplace Sellers. The Managed Rules for WAF address issues like the OWASP Top 10 security risks. These rules are regularly updated as new issues emerge. AWS WAF includes a full-featured API that you can use to automate the creation, deployment, and maintenance of security rules. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that AWS Web Application Firewall (WAF) is integrated with Amazon API Gateway to protect your APIs from common web exploits such as SQL injection attacks, cross-site scripting (XSS) attacks and Cross-Site Request Forgery (CSRF) attacks that could affect API availability and performance, compromise API data security or consume excessive resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using AWS WAF to protect your APIs" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>To ensure that you don't accidentally configure AWS WAF to block web requests that you want to allow or allow requests that you want to block, AWS recommends that you test your web ACL thoroughly before you start using it on your website or web application. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can do this by: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Counting the web requests that match the rules in a web ACL&amp;nbsp;in an Amazon CloudWatch graph.&lt;/li&gt; 
  &lt;li&gt;Viewing a sample of web requests in the AWS WAF console.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T11:18:21.424">
              <output/>
            </source>
            <references>
              <reference name="Testing web ACLs" url="https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-testing.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW3" name="Use client-side SSL certificates for HTTP backend authentication" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use client-side SSL certificates for HTTP backend authentication within AWS API Gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Client-side SSL certificates can be used to verify that HTTP requests to your backend system are from API Gateway. It is strongly recommended to use client-side SSL certificates to verify the requester's authenticity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can use API Gateway to generate an SSL certificate and then use its public key in the backend to verify that HTTP requests to your backend system are from API Gateway. This allows your HTTP backend to control and accept only requests that originate from Amazon API Gateway, even if the backend is publicly accessible. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  Some backend servers might not support SSL client authentication as API Gateway does and could return an SSL certificate error. For a list of incompatible backend servers, see Amazon API Gateway important notes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The SSL certificates that are generated by API Gateway are self-signed, and only the public key of a certificate is visible in the API Gateway console or through the APIs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Generate and configure an SSL certificate for backend authentication" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
            <reference name="Rotate an expiring client certificate" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Test invoke to verify the client certificate configuration&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Choose an API method. In Client, choose Test. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. From Client Certificate, choose Test to invoke the method request. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  API Gateway presents the chosen SSL certificate for the HTTP backend to authenticate the API. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T10:30:05.704">
              <output/>
            </source>
            <references>
              <reference name="Rotate an expiring client certificate" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
              <reference name="Test invoke to verify the client certificate configuration" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.1-1.2-1.3" name="Use the principle of least privilege on key ownership and usage" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&amp;nbsp;&lt;br&gt;AWS Key Management Service (KMS) by default provides service Customer Managed Keys (CMK). Customers also have the ability to create CMKs, which allows for configuration of key rotation and key policy which is applied to the customer created CMK. You can use the key policy by itself to control who has access to the CMK and what actions each identity can perform. Controlling access this way specifies the full scope of access to the CMK in a single document (the key policy).Customer created CMKs can be used for:&amp;nbsp;&lt;br&gt;- AWS Service level encryption(e.g. EBS, RDS, S3).&amp;nbsp;&lt;br&gt;- Key management for file/application level encryption.&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Rationale&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Ensures principle of least privilege on key ownership and usage.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;Using the Amazon unified command line interface:&amp;nbsp;&lt;br&gt;- If there is no alias listed for Web tier, create a new KMS key and note the "KeyId" element:&lt;/p&gt; 
&lt;p&gt;aws kms create-key&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;- Create an alias for the Web tier key using the above KeyId:&amp;nbsp;&lt;br&gt;aws kms create-alias --alias-name &amp;lt;tier_kms_alias&amp;gt; --target-key-id &amp;lt;tier_kms_key&amp;gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI Command Reference:create-alias" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-alias.html"/>
            <reference name="AWS CLI Command Reference:create-key" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-key.html"/>
            <reference name="AWS CLI Command Reference:list-aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Run the following command via the Amazon unified command line interface to determine if a web-tier KMS key exists: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  aws kms list-aliases --query 'Aliases[?AliasName == '&amp;lt;web_tier_kms_alias&amp;gt;']' 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;If such a key exists, an AliasArnproperty will be displayed in the output.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.843">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authentication" name="Authentication" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authorization" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="CAPEC-39" name="Attacker gains access by manipulation of an authentication token or other sensitive data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;In circumstances in which an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) this data could potentially be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW17" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW17" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW1" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.10" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW1" mitigation="33"/>
                <countermeasure ref="AWS-API-GW2" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-IAM-2.10" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-ENCRYPTION-KEYS" name="Attackers obtain access to encryption keys and are able to decrypt ciphertext" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Cryptography is intrinsically related to the secure management of cryptographic keys which need to be protected and securely stored by applications. Leaking cryptographic keys diminishes any advantage of cryptography, allowing attackers to break message confidentiality and integrity, and to authenticate as legitimate users or impersonate legitimate services.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW13" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW13" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW11" mitigation="33"/>
                    <countermeasure ref="AWS-API-GW12" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-522">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW11" mitigation="33"/>
                <countermeasure ref="AWS-API-GW12" mitigation="33"/>
                <countermeasure ref="AWS-API-GW2" mitigation="34"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW14" mitigation="34"/>
                    <countermeasure ref="AWS-API-GW15" mitigation="33"/>
                    <countermeasure ref="AWS-API-GW16" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW14" mitigation="34"/>
                <countermeasure ref="AWS-API-GW15" mitigation="33"/>
                <countermeasure ref="AWS-API-GW16" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-295">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW3" mitigation="25"/>
                    <countermeasure ref="AWS-API-GW4" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW6" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-326">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW7" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW3" mitigation="25"/>
                <countermeasure ref="AWS-API-GW4" mitigation="25"/>
                <countermeasure ref="AWS-API-GW6" mitigation="25"/>
                <countermeasure ref="AWS-API-GW7" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-248" name="An attacker injects new items into an existing command to execute a command of their choosing" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-77">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW8" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW10" mitigation="33"/>
                    <countermeasure ref="AWS-API-GW9" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW5" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW10" mitigation="33"/>
                <countermeasure ref="AWS-API-GW5" mitigation="34"/>
                <countermeasure ref="AWS-API-GW9" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="6b097766-0b12-4b58-9847-8ef48e085739" diagramComponentId="e95e2b87-78dd-4691-abbe-7305c52be781" ref="46ce1e88-97c9-4162-b67f-b64b5af527c6" name="AWS ElastiCache" desc="" library="Hydras-AWS-Foundation" parentComponentRef="ac6b58c4-31d2-491c-8e25-ef787e9af4ae" componentDefinitionRef="elasticache">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.345">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.107">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-522" name="Insufficiently Protected Credentials" state="0" impact="100" issueId="" issueLink="">
          <desc>This weakness occurs when the application transmits or stores
                    authentication credentials and uses an insecure method that is susceptible to
                    unauthorized interception and/or retrieval.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.345">
              <output/>
            </source>
            <references>
              <reference name="CWE-522: Insufficiently Protected Credentials" url="https://cwe.mitre.org/data/definitions/522.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-320" name="Key Management Errors" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category are related to errors in the management of cryptographic keys.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.345">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.345">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.345">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.345">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.257">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE8" name="Apply any updates of type security for AWS ElastiCache" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Apply any updates of type security for AWS ElastiCache 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You control when to apply an update, regardless of the recommendation. At a minimum, AWS strongly recommends that you apply any updates of type security to ensure that your clusters are always up-to-date with current security patches. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Applying the Service Updates Using the Console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can apply the service updates using one of the following console options. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Applying the Service Updates Using the Console for Redis or Memcached 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose this to view Update Status for individual clusters, and then choose Apply, View, or Stop for the service updates. If a service update is available, the console displays a banner at the top of the page. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you choose Apply Now, you can choose to apply the service update to all or a subset of the applicable clusters in this workflow. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  If you choose Dismiss, the console stops displaying the banner for that console session. However, the banner reappears the next time that you refresh your session. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  On the Apply Updates Now page, you can use these options: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Auto-Update after Due Date: If this attribute is yes, after the Recommended apply by Date has passed, ElastiCache schedules clusters yet to be updated in the appropriate maintenance window. Updates are applied along with other applicable updates. You can continue to apply the updates until the update expiration date. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If this attribute is no and you don't apply the self-service update before it expires, ElastiCache doesn't automatically apply the service update for you. If your cluster is part of one or more ElastiCache-supported compliance programs and isn't updated, it remains out of compliance until the next cumulative update becomes available. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - The Nodes Updated ratio value for your cluster and the Estimated Update Time value help you plan your maintenance schedule. If service updates exceed the estimated time constraints for your business flows, you can stop updates and reapply them at a later date. For more information, see Stopping the Self-Service Updates. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - If you choose to apply the service updates to any or all available clusters, choose Confirm. If you choose this, you then view the Service Updates page, where you can monitor the status of your service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - If you choose Cancel, you can explore further options, as explained following. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  On the ElastiCache dashboard, you can check Update Status for each of your Redis clusters, as shown following. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Update Status displays one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - update available: An update is available to apply to this cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - not-applied: An update is available but not yet applied. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - scheduling: The update date is being scheduled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - scheduled: The update date has been scheduled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - waiting-to-start: The update process will soon begin. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - in-progress: The update is being applied to this cluster, rendering it unavailable for the duration of the value in Estimated Update Time. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - stopping: An in-progress update has been interrupted before completion. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - stopped: The update has been terminated. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you stop an in-progress update on a cluster, some nodes might be updated while others are not. The stopping process doesn't roll back any changes to already updated nodes. You can reapply the update to those nodes that still have an available status at your convenience if the update doesn't have an Expired status. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - complete: The update has been successfully applied. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - up to date: The cluster doesn't have any outstanding active service updates and your cluster is compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Applying the Service Updates Using the Service Updates List 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To view the list of individual service updates and their status, along with other information, choose the Service Updates List tab. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In Service Updates List, you can view the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update Name: A unique identifier for the service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Status: The status of the update, which is one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- available: The update is available for requisite Redis clusters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- complete: The update has been applied and all clusters are compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- cancelled: The update has been canceled and is no longer necessary. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- expired: The update is no longer available to apply. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Severity: The priority of applying the update: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- critical: We recommend that you apply this update immediately (within 14 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- important: We recommend that you apply this update as soon as your business flow allows (within 30 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- medium: We recommend that you apply this update as soon as you can (within 60 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- low: We recommend that you apply this update as soon as you can (within 90 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Type: For this version, only security updates are supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Release Date: When the update is released and available to apply on your Redis fleet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Recommended Apply By Date: ElastiCache guidance date to apply the updates by. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choosing an individual update provides additional details, including the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Description: Provides details on the service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Expiration Date: The date when the service update expires and no longer is available. Any updates that aren't applied before their expiration date are cumulatively rolled into the next update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Important 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you apply updates of type security as soon as you can. Doing this helps ensure that your Redis clusters are always up-to-date with the latest security patches and are compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To view the list of individual service updates in relation to the applicable clusters, choose the Service Update Status tab. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the Service Updates Status list, you can view the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update Name: Detailed information about the service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Cluster Name: The list of your Redis clusters that are eligible for the update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Nodes Updated: The ratio of individual nodes within a specific cluster that were updated or remain available for the specific service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Severity: The priority of applying the update: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- critical: We recommend that you apply this update immediately (within 14 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- important: We recommend that you apply this update as soon as you can (within 30 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- medium: We recommend that you apply this update as soon as you can (within 60 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- low: We recommend that you apply this update as soon as you can (within 90 days or less). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Update Type: For this version, only security updates are supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update Status: The status of the update, which is one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- available: The update is available for requisite Redis clusters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- complete: The update has been applied and all Redis clusters are compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- canceled: The update has been canceled and is no longer necessary. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- expired: The update is no longer available to apply. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Service Update SLA Met: This reflects whether your cluster is compliant. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- yes: All available updates have been applied to this cluster and available nodes by the apply-by date. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  -- no: The service update might have been applied successfully to one or more nodes, but other nodes within the cluster still have an available status. This typically happens when a service update is applied and then stopped. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  If you stop the progress of a service update on a cluster, any nodes that are already updated have a complete status. Any nodes that have an In Progress or Stopping status revert to a Stopped status, and the Service Update SLA Met status changes to no. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;-- N/A: The replication group was created after the recommended apply-by date. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - Cluster Status Modified Date: The latest date that the cluster was modified with a service update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  The Show Previous Updates check box, if selected, displays a list of previous updates that are no longer available. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Managing the Service Updates -  Memcached" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/managing-updates.html"/>
            <reference name="Managing the Service Updates - Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/managing-updates.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that any updates of type security are applied for AWS ElastiCache.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.004">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.7" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.257">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE1" name="Control access to AWS ElastiCache using IAM policies" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to AWS ElastiCache using IAM policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can have valid credentials to authenticate your requests, but unless you have permissions you cannot create or access Amazon ElastiCache resources. For example, you must have permissions to create an ElastiCache cache cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  The following shows an example of a permissions policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp;"Version": "2012-10-17", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp;"Statement": [{ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Sid": "AllowClusterPermissions", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Effect": "Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Action": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:CreateCacheCluster", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:CreateReplicationGroup", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:DescribeCacheClusters", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:ModifyCacheCluster", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "elasticache:RebootCacheCluster"], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Resource": "*" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}, 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;{ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Sid": "AllowUserToPassRole", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Effect": "Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Action": [ "iam:PassRole" ], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Resource": "*" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;} 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp;] 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The policy has two statements: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. The first statement grants permissions for the Amazon ElastiCache actions (elasticache:CreateCacheCluster, elasticache:DescribeCacheClusters, elasticache:ModifyCacheCluster, and elasticache:RebootCacheCluster) on any cache cluster owned by the account. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. The second statement grants permissions for the IAM action (iam:PassRole) on IAM roles. The wildcard character (*) at the end of the Resource value means that the statement allows permission for the iam:PassRole action on any IAM role. To limit this permission to a specific role, replace the wildcard character (*) in the resource ARN with the specific role name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The policy doesn't specify the Principal element because in an identity-based policy you don't specify the principal who gets the permission. When you attach policy to a user, the user is the implicit principal. When you attach a permissions policy to an IAM role, the principal identified in the role's trust policy gets the permissions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using Identity-Based Policies (IAM Policies) for Amazon ElastiCache" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.IdentityBasedPolicies.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.005">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.8" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.9" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.257">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.257">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.257">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="12.10.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.257">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE10" name="Enable AWS SNS Notifications for AWS ElastiCache" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable AWS SNS Notifications for AWS ElastiCache 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  When significant events happen for a cluster, ElastiCache sends notification to a specific Amazon SNS topic. Examples include a failure to add a node, success in adding a node, the modification of a security group, and others. By monitoring for key events, you can know the current state of your clusters and, depending upon the event, be able to take corrective action. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Adding an Amazon SNS Topic (Console) 
&lt;/div&gt; 
&lt;div&gt;
  The following procedure shows you how to add an Amazon SNS topic for a cluster. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  This process can also be used to modify the Amazon SNS topic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To add or modify an Amazon SNS topic for a cluster (Console) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Sign in to the AWS Management Console and open the ElastiCache console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In Clusters, choose the cluster for which you want to add or modify an Amazon SNS topic ARN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Choose Modify. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4 In Modify Cluster under Topic for SNS Notification, choose the SNS topic you want to add, or choose Manual ARN input and type the ARN of the Amazon SNS topic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. Choose Modify. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Managing ElastiCache Amazon SNS Notifications - Memcached" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/ECEvents.SNS.html"/>
            <reference name="Managing ElastiCache Amazon SNS Notifications - Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.SNS.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.005">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.257">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.258">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.6" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.258">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest for Amazon S3" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Encrypt sensitive data at rest for Amazon S3&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Data protection at rest refers to protecting data while it is stored on disks in Amazon S3 data centers.&lt;/p&gt;&lt;p&gt;You have the following options for protecting data at rest in Amazon S3:&lt;/p&gt;&lt;p&gt;- Server-Side Encryption - Request Amazon S3 to encrypt your object before saving it on disks in its data centers and then decrypt it when you download the objects.&lt;/p&gt;&lt;p&gt;- Client-Side Encryption - Encrypt data client-side and upload the encrypted data to Amazon S3. In this case, you manage the encryption process, the encryption keys, and related tools.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Server-Side Encryption&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;You can't apply different types of server-side encryption to the same object simultaneously.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)&lt;/p&gt;&lt;p&gt;When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a root key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256) GCM, to encrypt your data. For objects encrypted prior to AES-GCM, AES-CBC is still supported to decrypt those objects.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with KMS keys Stored in AWS Key Management Service (SSE-KMS)&lt;/p&gt;&lt;p&gt;Server-Side Encryption with AWS KMS keys (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a KMS key that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your KMS key was used and by whom. Additionally, you can create and manage customer managed keys or use AWS managed keys that are unique to you, your service, and your Region.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Customer-Provided Keys (SSE-C)&lt;/p&gt;&lt;p&gt;With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.&lt;/p&gt;&lt;p&gt;Client-Side Encryption&lt;/p&gt;&lt;p&gt;To enable client-side encryption, you have the following options:&lt;/p&gt;&lt;p&gt;- Use a key stored in AWS Key Management Service (AWS KMS).&lt;/p&gt;&lt;p&gt;- Use a key that you store within your application.&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;Amazon S3 supports only symmetric encryption KMS keys, and not asymmetric KMS keys.&lt;/p&gt;&lt;p&gt;For more information about each encryption option, please see Reference URLs.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Protecting data using client-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingClientSideEncryption.html"/>
            <reference name="Protecting data using server-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.006">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW2" name="Use AWS Secrets Manager to securely rotate, manage, and retrieve database credentials, API keys, and other secrets" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Securely rotate, manage, and retrieve database credentials, API keys, and other secrets. AWS recommends to use AWS Secrets Manager for this purpose.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;AWS Secrets Manager is a secrets management service that helps you protect access to your applications, services, and IT resources. This service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Using Secrets Manager, you can secure and manage secrets used to access resources in the AWS Cloud, on third-party services, and on-premises.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To get started with AWS Secrets Manager:&lt;/p&gt;&lt;p&gt;1. Identify your secrets and locate where they are used in your applications.&lt;/p&gt;&lt;p&gt;2. Sign in to the AWS Management Console using your AWS credentials and navigate to the Secrets Manager console.&lt;/p&gt;&lt;p&gt;3. Use the Secrets Manager console to upload the secret you identified. Alternatively, you can use the AWS SDK or AWS CLI to upload a secret (once per secret). You can also write a script to upload multiple secrets.&lt;/p&gt;&lt;p&gt;4. If your secret is not in use yet, follow the instructions on the console to configure automatic rotation. If applications are using your secret, complete steps (5) and (6) before configuring automatic rotation.&lt;/p&gt;&lt;p&gt;5. If other users or applications need to retrieve the secret, write an IAM policy to grant permissions to the secret.&lt;/p&gt;&lt;p&gt;6. Update your applications to retrieve secrets from Secrets Manager.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;You can configure Amazon CloudWatch Events to receive a notification when AWS Secrets Manager rotates a secret. You can also see when Secrets Manager last rotated a secret using the Secrets Manager console or APIs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.258">
              <output/>
            </source>
            <references>
              <reference name="AWS Secrets Manager FAQs" url="https://aws.amazon.com/secrets-manager/faqs/"/>
              <reference name="Get started with AWS Secrets Manager" url="https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.258">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-ELASTICACHE9" name="Use CloudWatch alarms with AWS ElastiCache" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use CloudWatch alarms with AWS ElastiCache 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  ElastiCache provides metrics that enable you to monitor your clusters. You can access these metrics through CloudWatch. ElastiCache provides both host-level metrics (for example, CPU usage) and metrics that are specific to the cache engine software (for example, cache gets and cache misses). These metrics are measured and published for each Cache node in 60-second intervals. 
&lt;/div&gt; 
&lt;div&gt;
  By setting CloudWatch alarms on certain key metrics, you will be notified if your cache cluster's performance starts to degrade. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Monitoring CloudWatch Cluster and Node Metrics (Console) 
&lt;/div&gt; 
&lt;div&gt;
  To gather CPU utilization statistics for a cache cluster 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Sign in to the AWS Management Console and open the ElastiCache console at https://console.aws.amazon.com/elasticache/. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Select the cache nodes you want to view metrics for. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  Selecting more than 20 nodes disables viewing metrics on the console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  a. On the Cache Clusters page of the AWS Management Console, click the name of one or more cache clusters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The detail page for the cache cluster appears. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  b. Click the Nodes tab at the top of the window. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  c. On the Nodes tab of the detail window, select the cache nodes that you want to view metrics for. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A list of available CloudWatch Metrics appears at the bottom of the console window. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  d. Click on the CPU Utilization metric. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The CloudWatch console will open, displaying your selected metrics. You can use the Statistic and Period drop-down list boxes and Time Range tab to change the metrics being displayed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring Use with CloudWatch Metrics - Memcached" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheMetrics.html"/>
            <reference name="Monitoring Use with CloudWatch Metrics - Redis" url="https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheMetrics.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  To test your rule that triggers on an API call, you have to trigger it with its Specific operation as defined into the Cloudwatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  In CloudWatch Events, it is possible to create rules that lead to infinite loops, where a rule is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket, and trigger software to change them to the desired state. If the rule is not written carefully, the subsequent change to the ACLs fires the rule again, creating an infinite loop. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To prevent this, write the rules so that the triggered actions do not re-fire the same rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead of after any change. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An infinite loop can quickly cause higher than expected charges. AWS recommends that you use budgeting, which alerts you when charges exceed your specified limit. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.005">
              <output/>
            </source>
            <references>
              <reference name="Creating a CloudWatch Events Rule That Triggers on an AWS API Call Using AWS CloudTrail" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Create-CloudWatch-Events-CloudTrail-Rule.html"/>
              <reference name="Creating a CloudWatch Events Rule That Triggers on an AWS API Call Using AWS CloudTrail PDF" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Create-CloudWatch-Events-CloudTrail-Rule.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.1-1.2-1.3" name="Use the principle of least privilege on key ownership and usage" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&amp;nbsp;&lt;br&gt;AWS Key Management Service (KMS) by default provides service Customer Managed Keys (CMK). Customers also have the ability to create CMKs, which allows for configuration of key rotation and key policy which is applied to the customer created CMK. You can use the key policy by itself to control who has access to the CMK and what actions each identity can perform. Controlling access this way specifies the full scope of access to the CMK in a single document (the key policy).Customer created CMKs can be used for:&amp;nbsp;&lt;br&gt;- AWS Service level encryption(e.g. EBS, RDS, S3).&amp;nbsp;&lt;br&gt;- Key management for file/application level encryption.&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Rationale&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Ensures principle of least privilege on key ownership and usage.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;Using the Amazon unified command line interface:&amp;nbsp;&lt;br&gt;- If there is no alias listed for Web tier, create a new KMS key and note the "KeyId" element:&lt;/p&gt; 
&lt;p&gt;aws kms create-key&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;- Create an alias for the Web tier key using the above KeyId:&amp;nbsp;&lt;br&gt;aws kms create-alias --alias-name &amp;lt;tier_kms_alias&amp;gt; --target-key-id &amp;lt;tier_kms_key&amp;gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI Command Reference:create-alias" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-alias.html"/>
            <reference name="AWS CLI Command Reference:create-key" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-key.html"/>
            <reference name="AWS CLI Command Reference:list-aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Run the following command via the Amazon unified command line interface to determine if a web-tier KMS key exists: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  aws kms list-aliases --query 'Aliases[?AliasName == '&amp;lt;web_tier_kms_alias&amp;gt;']' 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;If such a key exists, an AliasArnproperty will be displayed in the output.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.256">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:32.006">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authorization" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE8" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-ENCRYPTION-KEYS" name="Attackers obtain access to encryption keys and are able to decrypt ciphertext" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Cryptography is intrinsically related to the secure management of cryptographic keys which need to be protected and securely stored by applications. Leaking cryptographic keys diminishes any advantage of cryptography, allowing attackers to break message confidentiality and integrity, and to authenticate as legitimate users or impersonate legitimate services.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-522">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-ELASTICACHE10" mitigation="50"/>
                    <countermeasure ref="AWS-ELASTICACHE9" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-ELASTICACHE10" mitigation="50"/>
                <countermeasure ref="AWS-ELASTICACHE9" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="9e24a1d1-e6a8-4fee-937c-2f6fe8375aa1" diagramComponentId="630f8d7f-ab52-44c9-9875-ef9c979cd4e5" ref="f4049c60-9be6-471e-8885-753b7ce5c14d" name="EC2 - Elastic Compute Cloud" desc="" library="Hydras-AWS-Foundation" parentComponentRef="bb23eb31-51d2-42fd-9350-d4db18531e34" componentDefinitionRef="ec2">
      <tags>
        <tag tag="Autoscaling"/>
      </tags>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IND-RESOURCES" name="AWS Resources are indistinguishable" state="0" impact="100" issueId="" issueLink="">
          <desc>AWS Resources are indistinguishable and countermeasures cannot be applied confidently.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-25T12:38:28.834">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:14.070">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:14.079">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-25T12:54:10.678">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EC2-6.2" name="The instances are not patched with the latest vendor updates or are misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc>The latest vendor updates that ensure that the systems are not vulnerable have not been applied to the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="VOLUMES-NOT-ENCRYPTED" name="The volumes are not encrypted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Volumes are not encrypted, leading to the disclosure of information.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-25T12:34:35.371">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-04" name="Unauthorised connection attempts are allowed on Amazon resources" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to Amazon resources is most likely to be receiving an attack. To avoid this, access to the network must be as restricted as possible using Network Access Control Lists for blacklisting.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-02" name="Unauthorised connection attempts are allowed on port 22" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 22 is most likely to be receiving an SSH attack. To
                        avoid this, access to the network must be as restricted as possible, so that only the necessary
                        ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-03" name="Unauthorised connection attempts are allowed on port 3389" state="0" impact="100" issueId="" issueLink="">
          <desc>Receiving unauthorized connections to port 3389 is most likely to be receiving an RDP attack.
                        To avoid this, access to the network must be as restricted as possible, so that only the
                        necessary ports are open and the minimum inbound traffic is accepted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-6.9" name="Allocate Elastic IPs for NAT Gateways" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. 
  You can associate an Elastic IP address with any instance, network interface for your VPC or a NAT Gateway. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Allocate Elastic IP address for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 allocate-address --domain vpc 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allocate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/allocate-address.html"/>
            <reference name="Describe addresses" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-addresses.html"/>
          </references>
          <standards>
            <standard ref="6.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if you have Elastic IP addresses allocated and unused for the number of NAT Gateways that you want to deploy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-addresses --filters Name=domain,Values=vpc --query "Addresses[?AssociationId == null]" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T09:31:03.095">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.10-5.11" name="Apply an AWS Managed Config Rule to encrypt volumes" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records all configuration changes to these resources. You can evaluate these configurations and changes to comply with the ideal configurations defined by AWS Config Rules.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Create locally a json file (similar to the below example) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;{&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Description": "Checks whether Web Tier EBS volumes that are in an attached state&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;are encrypted.",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"ConfigRuleName": "encrypted-volumes-web-tier",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Source": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Owner": "AWS",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"SourceIdentifier": "ENCRYPTED_VOLUMES"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;},&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"InputParameters": "{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"Scope": {&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagKey": "&amp;lt;web_tier_tag&amp;gt;",&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;"TagValue": "&amp;lt;web_tier_tag_value&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Search for a Config Rule that checks if the EBS volumes tagged with Web tier tags are encrypted with the Web tier KMS key:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'ENCRYPTED_VOLUMES']|[?Scope.TagKey == '&amp;lt;web_tier_tag&amp;gt;']|[?Scope.TagValue =='&amp;lt;web_tier_tag_value&amp;gt;']|[?InputParameters == '{\"kmsId\":\"&amp;lt;web_tier_kms_key&amp;gt;\"}']"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T16:44:34.594">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.2" name="Configure Auto-Scaling Group for multiple Availability Zones" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon Unified CLI: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List all the subnets and the associated Availability Zones from the application VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --query "Subnets[?VpcId == '&amp;lt;application_vpc&amp;gt;'].{VPC:VpcId,Subnet:SubnetId, AZ:AvailabilityZone, CIDR:CidrBlock}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Update AutoScaling Group to include more than 1 Availability Zones within the same VPC:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling update-auto-scaling-group --auto-scaling-group-name &amp;lt;autoscaling_group_name&amp;gt; --availability-zones &amp;lt;application_az&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
            <reference name="Update autoscaling group" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/update-auto-scaling-group.html"/>
          </references>
          <standards>
            <standard ref="3.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all Auto-Scaling Groups and associated Availability Zones, and ensure there is more than 1 Availability Zone assigned to the Auto-Scaling Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].{AZs:AvailabilityZones, ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T14:30:24.393">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.3-3.4" name="Configure Auto-Scaling Launch Configuration for Tier to use an approved AMI" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon EC2 capacity up or down automatically according to conditions you define.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  These properties can be defined within the Auto-Scaling Group configuration.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;Your Organization must maintain a list of approved AMIs. Use these when creating AutoScaling Groups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier. 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration for the Web tier using the approved Web tier AMI from your organization's list:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt;&amp;nbsp; 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;br&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;b&gt;Impact&lt;/b&gt;: 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;div&gt; 
  &lt;div&gt;
    A list of approved AMIs must be maintained by the organization. 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="3.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="3.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using an approved AMI from your organization's list (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, AMI:ImageId,InstanceType:InstanceType}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T14:46:26.599">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.32-6.33" name="Configure Auto-Scaling Launch Configuration for Tier to use the Tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Auto Scaling helps maintain application availability and allows you to scale your Amazon 
  EC2 capacity up or down automatically according to conditions you define. You can use Auto Scaling to help ensure that you are running your desired number of Amazon EC2 instances or can automatically increase the number of Amazon EC2 instances during demand spikes to maintain performance and decrease capacity during lulls to reduce costs. These properties can be defined within the Auto-Scaling Group configuration. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Additional properties can be defined through the launch configuration such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Instance Type&lt;/li&gt; 
  &lt;li&gt;Amazon Machine Image (Pre-configured Operating System Images - allows for O.S Hardening)&lt;/li&gt; 
  &lt;li&gt;IAM Role&lt;/li&gt; 
  &lt;li&gt;Security Groups&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create new launch configuration for the Web tier using the Web Tier Security Group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;new_web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Describe autoscaling groups" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-auto-scaling-groups.html"/>
          </references>
          <standards>
            <standard ref="6.32" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.33" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the associated Launch Configuration of the Web Tier Auto-Scaling Group (note the value of "LaunchConfig" element):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names &amp;lt;web_tier_autoscaling_group_name&amp;gt; --query 'AutoScalingGroups[*].{LaunchConfig:LaunchConfigurationName,ASG:AutoScalingGroupName}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Ensure actively used Launch Configuration found in the previous step is using the Web Tier Security Group (replace &amp;lt;web_tier_launch_config&amp;gt; with the Launch Configuration previously found):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query 'LaunchConfigurations[*].{LaunchConfig:LaunchConfigurationName, SecurityGroups:SecurityGroups}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T10:57:31.515">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.12" name="Create a route table for the private subnets" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your private subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the private subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnetid &amp;lt;private_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the private subnets, and check if they contain the default route (0.0.0.0/0) pointing to the NAT Gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;private_subnet1&amp;gt;,&amp;lt;private_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T09:40:33.837">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.11" name="Create a route table for the public subnets" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a route table for your public subnets, and note the RouteTableId in the output:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route-table --vpc-id &amp;lt;application_vpc&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Associate the new route table with the public subnets: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet1&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 associate-route-table --route-table-id &amp;lt;route_table_id&amp;gt; --subnet-id &amp;lt;public_subnet2&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Create route table" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route-table.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
          </references>
          <standards>
            <standard ref="6.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List route tables attached to the public subnets, and check if they contain the default route (0.0.0.0/0) pointing to the Internet Gateway (IGW):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;public_subnet1&amp;gt;,&amp;lt;public_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Tags:Tags, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T09:37:32.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.14-6.15" name="Create default route (0.0.0.0/0) from Routing Table associated with tier subnet" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists but it doesn't have a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 replace-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) doesn't exist: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;vpc_nat_gw&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: EC2 replace route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/replace-route.html"/>
            <reference name="Create route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.14" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.15" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface:: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;web_tier_subnet1&amp;gt;,&amp;lt;web_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T09:46:34.606">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.10" name="Create NAT Gateways in at least two AZ" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use a network address translation (NAT) gateway to enable instances in a private subnet to connect to the Internet or other AWS services, but prevent the Internet from initiating a connection with those instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  To create a NAT gateway, you must specify the public subnet in which the NAT gateway will reside. You must also specify an Elastic IP address to associate with the NAT gateway when you create it. This enables instances in your private subnets to communicate with the Internet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each NAT gateway is created in a specific Availability Zone and implemented with 
  redundancy in that zone. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a NAT Gateway in a public subnet from a different Availability Zone: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet1&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   and/or 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-nat-gateway --subnet-id &amp;lt;public_subnet2&amp;gt; --allocation-id &amp;lt;elastic_ip_allocation&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create NAT Gateway" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-nat-gateway.html"/>
            <reference name="Describe NAT Gateways" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-nat-gateways.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the NAT Gateways from your application VPC, and note the subnets they are deployed in:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt; --query "NatGateways[*].{NatGatewayId:NatGatewayId, SubnetId:SubnetId}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the Availability Zones where the above subnets are deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --subnet-ids &amp;lt;public_subnet1&amp;gt; &amp;lt;public_subnet2&amp;gt; --query "Subnets[*].{SubnetId:SubnetId, AvailabilityZone:AvailabilityZone}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T09:34:03.576">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.6-6.7-6.8" name="Create subnets for tier" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can create a VPC that spans multiple Availability Zones. After creating a VPC, you can 
  add one or more subnets in each Availability Zone. Each subnet must reside entirely within 
  one Availability Zone and cannot span zones. Availability Zones are distinct locations that 
  are engineered to be isolated from failures in other Availability Zones. By launching 
  instances in separate Availability Zones, you can protect your applications from the failure 
  of a single location. AWS assigns a unique ID to each subnet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When you create a subnet, you specify the CIDR block for the subnet. The CIDR block of a 
  subnet shouldn't be the same as the CIDR block for the VPC (for a single subnet in the VPC). 
  The allowed block size is between a /28 netmask and /16 netmask. If you create more than 
  one subnet in a VPC, the CIDR blocks of the subnets must not overlap. 
  Some AWS regions have more than 2 availability zones and it is recommended to use more 
  than 2 where possible. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create subnets for Web tier, and note the subnet id: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-subnet --vpc-id &amp;lt;application_vpc&amp;gt; --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Tag the above subnets with the Web tier tags: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-tags --resources &amp;lt;web_tier_subnet1&amp;gt; &amp;lt;web_tier_subnet2&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: create subnet" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-subnet.html"/>
            <reference name="Amazon docs: create tags" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the subnets associated with the Web tier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-subnets --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T09:27:41.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.24" name="Create the Data tier Security Group and ensure it allows inbound connections from App tier Security Group for explicit ports" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The port for these inbound rules would depend on the Database engine used and the 
  configured port. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The default values are: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt; MySQL - TCP 3306&lt;/li&gt; 
  &lt;li&gt;MSSQL - TCP 1433&lt;/li&gt; 
  &lt;li&gt;Oracle SQL - TCP 1521&lt;/li&gt; 
  &lt;li&gt;PostgreSQL - TCP 5432&lt;/li&gt; 
  &lt;li&gt;MariaDB - TCP 3306&lt;/li&gt; 
  &lt;li&gt;Amazon Aurora DB - TCP 3306&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;First remove all the ingress rules for the security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-id &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[0].IpPermissions" &amp;gt; /tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --ippermissions file:///tmp/IpPermissions.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Add an ingress rule for a specific port, using --source-group option to specify the App tier security group as the source of the connections:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 authorize-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; -- protocol tcp --port &amp;lt;specific_port&amp;gt; --source-group &amp;lt;app_tier_security_group&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: authorize security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/authorize-security-group-ingress.html"/>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.24" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; --query "DBInstances[*].VpcSecurityGroups" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure that allows connections only from App tier security group on specific ports:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T10:04:42.704">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.31" name="Don't use the default VPC" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A default VPC is ready for you to use - you can immediately start launching instances into your default VPC without having to perform any additional configuration steps. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  When we create a default VPC, AWS does the following to set it up: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a default subnet in each Availability Zone.&lt;/li&gt; 
  &lt;li&gt;Create an Internet gateway and connect it to your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a main route table for your default VPC with a rule that sends all traffic destined for the Internet to the Internet gateway.&lt;/li&gt; 
  &lt;li&gt;Create a default security group and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/li&gt; 
  &lt;li&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
  Label this Default VPC "Do Not Use". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new VPC with the desired CIDR and migrate your application: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-vpc --cidr-block &amp;lt;desired_cidr&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Impact&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The Default VPC can be deleted but only AWS Support can restore it. Don't delete it - just 
  set a label to remind others not to use it. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create VPC" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-vpc.html"/>
            <reference name="Default VPC" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html"/>
            <reference name="Deleted default VPC" url="https://aws.amazon.com/premiumsupport/knowledge-center/deleted-default-vpc/"/>
            <reference name="Describe VPCs" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-vpcs.html"/>
          </references>
          <standards>
            <standard ref="6.31" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon Unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the attributes of the VPC's in your account and note the value of the "IsDefault" attribute for the VPC where the application is deployed:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-vpcs --query "Vpcs[*].{VpcId:VpcId, IsDefault:IsDefault, Tags:Tags}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T10:52:45.279">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.5-1.6" name="Encrypt all EBS Volumes for tier" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;&lt;br&gt;Elastic Block Storage (EBS) volumes can be encrypted using AWS Key Management Service (KMS). In this configuration, encryption and decryption are handled transparently and require no additional action from the user, an Amazon EC2 instance, or an application. When an encrypted Amazon EBS volume is attached to a supported Amazon EC2 instance type, the data stored at rest on the volume, disk I/O, and snapshots created from the volume are all encrypted. The encryption occurs on the servers that host Amazon EC2 instances. Additionally, snapshots of encrypted volumes are automatically encrypted, and volumes that are created from encrypted snapshots are also automatically encrypted. It is recommended that all EBS volumes for the web tier be encrypted.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;*Note: references to Web tier are also applicable to App tier.&lt;/p&gt;&lt;p&gt;&lt;br&gt;Using the Amazon unified command line interface:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note all the volume ids of unencrypted EBS volumes and create a snapshot for each of them:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-snapshot --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt; --description "Snapshot for encryption operation"&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotIdelement from the output of step 1 and copy the snapshot to an encrypted snapshot using the KMS key created for the Web-tier:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 copy-snapshot --source-region &amp;lt;application_region&amp;gt; --source-snapshot-id &amp;lt;unencrypted_ebs_snapshot&amp;gt; --description "Encrypted snapshot." --encrypted --kms-keyid &amp;lt;web_tier_kms_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Note the SnapshotId element from the output of step 2 and create a new EBS volume from the encrypted snapshot in the same Availability Zone as the unencrypted volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-volume --availability-zone &amp;lt;application_az&amp;gt; --snapshot-id &amp;lt;encrypted_ebs_snapshot&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Tag the newly created EBS volume using the Volume Id from the previous step &amp;lt;encrypted_ebs_volume&amp;gt;:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 create-tags --resources &amp;lt;encrypted_ebs_volume&amp;gt; --tags Key=&amp;lt;web_tier_tag&amp;gt;,Value=&amp;lt;web_tier_tag_value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Delete unencrypted EBS volume:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 delete-volume --volume-id &amp;lt;unencrypted_ebs_volume&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Copy snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/copy-snapshot.html"/>
            <reference name="Create snapshot" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-snapshot.html"/>
            <reference name="Create volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/create-volume.html"/>
            <reference name="Delete volume" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/delete-volume.html"/>
            <reference name="Describe volumes" url="http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-volumes.html"/>
            <reference name="EBS Encryption Considerations" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Using the Amazon unified command line interface: (Note that you should replace &amp;lt;web_tier_tag&amp;gt;:&amp;lt;web_tier_tag_value&amp;gt; with your own tag and value for the Web tier)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note the EBS volume ids, Instance ids, Availability Zones, and check if the Encrypted element is True or False&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;aws ec2 describe-volumes --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query 'Volumes[*].{VolumeId:VolumeId, Encrypted:Encrypted, AvailabilityZone:AvailabilityZone, InstanceId:Attachments[*].InstanceId}' --output table&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T17:12:03.887">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.2" name="Maintain a patch policy and patch EC2 systems regularly" issueId="" issueLink="" platform="" cost="1" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Patching instances ensures that packages within the Operating System (OS) are updated to the
                        latest version and/or have security fixes applied. It is recommended to patch EC2 instances
                        every 90 days (or immediately if security patches become available) to avoid undue exposure
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;For linux instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/managing-software.html&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For Windows instances ensure your OS is updated as per:
                        http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#update-windows-instance&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Ensure you have a documented patching policy.&lt;/li&gt;
                            &lt;li&gt;Ensure your systems have been patched at least every 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.16" name="Remove default route (0.0.0.0/0) from Routing Table associated with Data tier subnet" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A route table contains a set of rules, called routes, that are used to determine where 
  network traffic is directed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Each subnet in your VPC must be associated with a route table; the table controls the 
  routing for the subnet. A subnet can only be associated with one route table at a time, but 
  you can associate multiple subnets with the same route table. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For the above route tables, if the default route (0.0.0.0/0) exists and it has a NAT GW configured as gateway:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidrblock 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Delete route" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/delete-route.html"/>
            <reference name="Describe route tables" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-route-tables.html"/>
            <reference name="Describe subnets" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-subnets.html"/>
          </references>
          <standards>
            <standard ref="6.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the subnets associated with the Data tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-subnets --filters Name=tag:&amp;lt;data_tier_tag&amp;gt;,Values=&amp;lt;data_tier_tag_value&amp;gt; --query "Subnets[*].SubnetId" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the routes of the route tables associated with the above subnets, and check if the default route (0.0.0.0/0) has a NAT GW configured as gateway:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-route-tables --filters Name=association.subnetid,Values=&amp;lt;data_tier_subnet1&amp;gt;,&amp;lt;data_tier_subnet2&amp;gt; --query "RouteTables[*].{RouteTableId:RouteTableId, Routes:Routes}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T09:49:36.275">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.27-6.28-6.29" name="Remove Elastic / Public IP addresses from EC2 instances within Tier" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  All subnets have an attribute that determines whether instances launched into that subnet receive a public IP address. The public IP address is assigned to the default network interface (eth0). By default, instances launched into a default subnet are assigned a public IP address. A public IP address is mapped to the primary private IP address through network address translation (NAT). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  An Elastic IP address is a static, public IP address designed for dynamic cloud computing. You can associate an Elastic IP address with any instance or network interface for your VPC. With an Elastic IP address, you can mask the failure of an instance by rapidly remapping the address to another instance in your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App and Data tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If in the above output the "IpOwnerId" is "amazon" the public Ip is not an Elastic IP and it cannot be manually disassociated from the instance after launch:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Make sure that the Web tier subnet doesn't assign public Ip's at launch (run the command for all Web tier subnets)&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     aws ec2 modify-subnet-attribute --subnet-id &amp;lt;web_tier_subnet1&amp;gt; --no-map-publicip-on-launch 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an AMI from the instance and launch a replacement instance in the same subnet&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;If in the above output the "IpOwnerId" is an AWS account number, this is an Elastic IP and it can be disassociated:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 disassociate-address --public-ip &amp;lt;elastic_ip_address&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Disassociate address" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/disassociate-address.html"/>
            <reference name="Modify subnet attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-subnet-attribute.html"/>
            <reference name="VPC IP Addressing" url="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html"/>
          </references>
          <standards>
            <standard ref="6.27" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.28" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.29" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the instance-id's, tags and public IP's of the EC2 instances from the application VPC that have a public IP associated, and check if there are any instances with Web tier tags listed:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-instances --filters "Name=vpc-id,Values=&amp;lt;application_vpc&amp;gt;" --query "Reservations[*].Instances[?PublicIpAddress != null].{InstanceId:InstanceId, PublicIpAddresses:NetworkInterfaces[*].Association, SubnetId:SubnetId, Tags:Tags}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T10:17:49.283">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.25" name="Remove inbound rules for CIDR of 0 (Global Allow) for Data tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you can assign the instance to up to five security groups. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC could be assigned to a different set of security groups. If you don't specify a particular group at launch time, the instance is automatically assigned to the default security group for the VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;data_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe db instances" url="https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-instances.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.25" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the Data tier security group configured for your RDS DB instance:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws rds describe-db-instances --db-instance-identifier &amp;lt;your_db_instance&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the ingress rules for the above security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-security-groups --group-ids &amp;lt;data_tier_security_group&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}" --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T10:10:24.664">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.20-6.23" name="Remove inbound rules for CIDR of 0 (Global Allow) for tier Security Group" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A security group acts as a virtual firewall for your instance to control inbound and 
  outbound traffic. When you launch an instance in the AWS Virtual Private Cloud (VPC), you 
  can assign the instance to up to five security groups. Security groups act at the instance 
  level, not the subnet level. Therefore, each instance in a subnet in your VPC could be 
  assigned to a different set of security groups. If you don't specify a particular group at 
  launch time, the instance is automatically assigned to the default security group for the 
  VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  For each security group, you add rules that control the inbound traffic to instances, and a 
  separate set of rules that control the outbound traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Remove the ingress rules for CIDR 0.0.0.0/0 (use the "WebTierSecurityGroup" element from Audit procedure):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 revoke-security-group-ingress --group-id &amp;lt;web_tier_security_group&amp;gt; --protocol tcp/udp --port &amp;lt;specific_port&amp;gt; --cidr 0.0.0.0/0 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Amazon docs: describe security groups" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-security-groups.html"/>
            <reference name="Revoke security group ingress" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/revoke-security-group-ingress.html"/>
          </references>
          <standards>
            <standard ref="6.20" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="6.23" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;List the ingress rules for the Web tier security group, and make sure it has no inbound rules for CIDR of 0.0.0.0/0:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 describe-security-groups --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions, WebTierSecurityGroup:GroupId}" --output table 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-18T10:00:55.700">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.6" name="Restrict all traffic with the default security group" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit all traffic
                        (ingress/egress) on the default security group in order to force the use of least privilege via
                        custom created security groups.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify AWS resources that exist within the default security group.&lt;/li&gt;
                        &lt;li&gt;Create a set of least privilege security groups for those resources.&lt;/li&gt;
                        &lt;li&gt;Place the resources in those security groups.&lt;/li&gt;
                        &lt;li&gt;Remove the resources noted in 1 from the default security group.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the default security group.&lt;/li&gt;
                            &lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exist.&lt;/li&gt;
                            &lt;li&gt;Click the Outbound Rules tab.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure no rules exist.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.7-1.8" name="Set Customer-owned AMIs in tier to be private" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon Machine Images (AMI) are an exact duplicate of the instance they were created from and will allow anyone with access to create a complete replica of the original instance. The original instance may contain intellectual property, proprietary applications, and configuration information that can be used to exploit or compromise any running instance in the web tier.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;For each AMI that is public remove group ALL from the launch permissions:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws ec2 modify-image-attribute --image-id &amp;lt;public_image_id&amp;gt; --launch-permission "{\"Remove\":[{\"Group\":\"all\"}]}" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Default Value&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt;
   The prescribed value is the default value. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe images" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"/>
            <reference name="Modify image attribute" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-image-attribute.html"/>
            <reference name="Sharing AMIs" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sharingamis-intro.html"/>
          </references>
          <standards>
            <standard ref="1.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: (Note that you should replace&amp;nbsp;&amp;lt;tier_tag&amp;gt;:&amp;lt;tier_tag_value&amp;gt;&amp;nbsp;with your own tag and value for the tier)&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Note the image id's, AMI name, and check if Public element is True or False:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-images --owners self --filters 
  &lt;/div&gt; 
  &lt;div&gt;
    Name=tag:&amp;lt;tier_tag&amp;gt;,Values=&amp;lt;tier_tag_value&amp;gt; --query 'Images[*].{Name:Name, 
  &lt;/div&gt; 
  &lt;div&gt;
    ImageId:ImageId, Public:Public}' --output table 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T12:25:04.870">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T16:14:01.280">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:13.436">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-8" name="Use AWS Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You can use Traffic Mirroring to copy network traffic from an elastic network interface of EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for content inspection, threat monitoring, or troubleshooting. For example, you might want to monitor the traffic that is leaving your VPC or the traffic whose source is outside your VPC. In this case, you will mirror all traffic except for the traffic passing within your VPC and send it to a single monitoring appliance. VPC flow logs do not capture mirrored traffic; they generally capture information from packet headers only. Traffic Mirroring provides deeper insight into the network traffic by allowing you to analyze actual traffic content, including payload. Enable Traffic Mirroring only for the elastic network interface of EC2 instances that might be operating as part of sensitive workloads or for which you expect to need detailed diagnostics in the event of an issue.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the network traffic is copied from an EC2 instance after having configured Traffic Mirroring.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:13.451">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:13.460">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-EC2-IMDS" name="Use IMDSv2 instead of IMDSv1" issueId="" issueLink="" platform="" cost="0" risk="76" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All EC2 Instances have access to the metadata service at 169.254.169.254. This contains useful information about the instance such as its IP address, the name of the security group, etc. On EC2 instances that have an IAM role attached the metadata service will also contain IAM credentials to authenticate as this role. Depending on what version of IMDS is in place, and what capabilities the SSRF has those credentials could be stolen.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Tools for helping with the transition to IMDSv2&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;If your software uses IMDSv1, use the following tools to help reconfigure your software to use IMDSv2.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AWS software:&lt;/strong&gt; The latest versions of the AWS SDKs and CLIs support IMDSv2. To use IMDSv2, make sure that your EC2 instances have the latest versions of the AWS SDKs and CLIs. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html"&gt;Installing, updating, and uninstalling the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CloudWatch&lt;/strong&gt;: IMDSv2 uses token-backed sessions, while IMDSv1 does not. The MetadataNoToken CloudWatch metric tracks the number of calls to the instance metadata service that are using IMDSv1. By tracking this metric to zero, you can determine if and when all of your software has been upgraded to use IMDSv2. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Updates to EC2 APIs and CLIs&lt;/strong&gt;: For existing instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2. For new instances, you can use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; API) and the metadata-options parameter to launch new instances that require the use of IMDSv2.&lt;/p&gt;&lt;p&gt;To require the use of IMDSv2 on all new instances launched by Auto Scaling groups, your Auto Scaling groups can use either a launch template or a launch configuration. When you &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/create-launch-template.html"&gt;create a launch template&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"&gt;create a launch configuration&lt;/a&gt;, you must configure the MetadataOptions parameters to require the use of IMDSv2. After you configure the launch template or launch configuration, the Auto Scaling group launches new instances using the new launch template or launch configuration, but existing instances are not affected.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; CLI command (or the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API) to require the use of IMDSv2 on the existing instances, or terminate the instances and the Auto Scaling group will launch new replacement instances with the instance metadata options settings that are defined in the launch template or launch configuration.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;IAM policies and SCPs&lt;/strong&gt;: You can use an IAM condition to enforce that IAM users can't launch an instance unless it uses IMDSv2. You can also use IAM conditions to enforce that IAM users can't modify running instances to re-enable IMDSv1, and to enforce that the instance metadata service is available on the instance.&lt;/p&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. These condition keys can be used either in IAM policies or AWS Organizations service control policies (SCPs).&lt;/p&gt;&lt;p&gt;Furthermore, you can choose an additional layer of protection to enforce the change from IMDSv1 to IMDSv2. At the access management layer with respect to the APIs called via EC2 Role credentials, you can use a new condition key in either IAM policies or AWS Organizations service control policies (SCPs). Specifically, by using the policy condition key ec2:RoleDelivery with a value of 2.0 in your IAM policies, API calls made with EC2 Role credentials obtained from IMDSv1 will receive an UnauthorizedOperation response. The same thing can be achieved more broadly with that condition required by an SCP. This ensures that credentials delivered via IMDSv1 cannot actually be used to call APIs because any API calls not matching the specified condition will receive an UnauthorizedOperation error. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scp.html"&gt;Service Control Policies&lt;/a&gt; in the &lt;i&gt;AWS Organizations User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommended path to requiring IMDSv2 access&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Using the above tools, we recommend that you follow this path for transitioning to IMDSv2:&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 1: At the start&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Update the SDKs, CLIs, and your software that use Role credentials on their EC2 instances to IMDSv2-compatible versions. For information about updating the CLI, see &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/install-linux.html#install-linux-awscli-upgrade"&gt;Upgrading to the latest version of the AWS CLI&lt;/a&gt; in the &lt;i&gt;AWS Command Line Interface User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Then, change your software that directly accesses instance metadata (in other words, that does not use an SDK) using the IMDSv2 requests.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 2: During the transition&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Track your transition progress by using the CloudWatch metric MetadataNoToken. This metric shows the number of calls to the instance metadata service that are using IMDSv1 on your instances. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html#ec2-cloudwatch-metrics"&gt;Instance metrics&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 3: When everything is ready on all instances&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Everything is ready on all instances when the CloudWatch metric MetadataNoToken records zero IMDSv1 usage. At this stage, you can do the following:&lt;/p&gt;&lt;p&gt;For existing instances: You can require IMDSv2 use through the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/modify-instance-metadata-options.html"&gt;modify-instance-metadata-options&lt;/a&gt; command. You can make these changes on running instances; you do not need to restart your instances.&lt;/p&gt;&lt;p&gt;For new instances: When launching a new instance, you can do one of the following:&lt;/p&gt;&lt;p&gt;In the Amazon EC2 console launch instance wizard, set &lt;strong&gt;Metadata accessible&lt;/strong&gt; to &lt;strong&gt;Enabled&lt;/strong&gt; and &lt;strong&gt;Metadata version&lt;/strong&gt; to &lt;strong&gt;V2&lt;/strong&gt;. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/launching-instance.html#configure_instance_details_step"&gt;Step 3: Configure Instance Details&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Use the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html"&gt;run-instances&lt;/a&gt; command to specify that only IMDSv2 is to be used.&lt;/p&gt;&lt;p&gt;Updating instance metadata options for existing instances is available only through the API or AWS CLI. It is currently not available in the Amazon EC2 console. For more information, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html"&gt;Configure the instance metadata options&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Step 4: When all of your instances are transitioned to IMDSv2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;The ec2:MetadataHttpTokens, ec2:MetadataHttpPutResponseHopLimit, and ec2:MetadataHttpEndpoint IAM condition keys can be used to control the use of the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html"&gt;RunInstances&lt;/a&gt; and the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceMetadataOptions.html"&gt;ModifyInstanceMetadataOptions&lt;/a&gt; API and corresponding CLI. If a policy is created, and a parameter in the API call does not match the state specified in the policy using the condition key, the API or CLI call fails with an UnauthorizedOperation response. For example IAM policies, see &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-instance-metadata"&gt;Work with instance metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Configuring IMDS" url="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;If there is a valid role you can steal, make a request to http://&amp;lt;aws-ip&amp;gt;/?proxy=http://169.254.169.254/latest/meta-data/iam/security-credentials/. This will return the name of the IAM role the credentials represent.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:13.475">
              <output/>
            </source>
            <references>
              <reference name="Steal EC2 Metadata Credentials via SSRF" url="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.7" name="Use Network Access Control Lists (NACLs) for blacklisting" issueId="" issueLink="" platform="" cost="1" risk="73" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Network Access Control Lists (NACLs) act as packet filters across subnets, allowing or deny traffic per pre-created rules. It is recommended to use NACLs as a method to blacklist IP addresses, denying either inbound or outbound access across your subnets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console (with VPC update).&lt;/li&gt;&lt;li&gt;Select VPC from the service menu.&lt;/li&gt;&lt;li&gt;Select Network ACL's.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;ul&gt;&lt;li&gt;Select the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Click edit.&lt;/li&gt;&lt;li&gt;add a DENY rule that will restrict inbound access from a blacklisted IP address or range to a designated port or IP range.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select VPC from the services menu.&lt;/li&gt;&lt;li&gt;Select Network ACLs.&lt;/li&gt;&lt;li&gt;For each Network ACL ID, perform the following:&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Click the Inbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access from a blacklisted IP or range.&lt;/li&gt;&lt;li&gt;Click the Outbound Rules tab.&lt;/li&gt;&lt;li&gt;Ensure a rule exists to DENY access to a blacklisted IP or range.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.5" name="Use security groups to block ingress to all ports from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        ALL TCP or ALL ports to avoid undue server exposure.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range of 0-1024 of 0-65535 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.3" name="Use security groups to block ingress to port 22 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 22 (SSH) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update)&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Select Security Groups&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt; 
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 22</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.4" name="Use security groups to block ingress to port 3389 from 0.0.0.0/0" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security groups are analogous to firewalls and therefore provide stateful filtering of
                        ingress/egress network traffic to AWS resources. It is recommended to limit inbound access to
                        port 3389 (RDP) to IP addresses that require this access to avoid undue exposure to risk.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Login to the AWS Management Console (with VPC update).&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select Security Groups.&lt;/li&gt;
                        &lt;li&gt;For each security group, perform the following:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Select the security group.&lt;/li&gt;
                        &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                        &lt;li&gt;Identify the rules to be removed.&lt;/li&gt;
                        &lt;li&gt;Click the x in the Remove column.&lt;/li&gt;
                        &lt;li&gt;Click Save&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Security Groups.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each security group, perform the following:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Select the security group.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the Inbound tab.&lt;/li&gt;
                            &lt;li&gt;Ensure no rule exists that has a port range that includes port 22 and has a source
                            of 0.0.0.0/0.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;NB: Note that if the port range includes 0-1024 or 0-65535 these also include
                            port 3389</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-EC2-IMDS" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="NON-UPDATED-SYSTEMS-AWS" name="Attackers gain unauthorized access to data on EC2 instances" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>Attackers gain access to data on EC2 instances by exploiting weaknesses in non-updated or misconfigured systems.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EC2-6.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IND-RESOURCES">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-04">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                    <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                    <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="VOLUMES-NOT-ENCRYPTED">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                    <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.7" mitigation="12"/>
                <countermeasure ref="aws-tier-1.5-1.6" mitigation="12"/>
                <countermeasure ref="aws-tier-1.7-1.8" mitigation="12"/>
                <countermeasure ref="aws-tier-3.2" mitigation="12"/>
                <countermeasure ref="aws-tier-3.3-3.4" mitigation="12"/>
                <countermeasure ref="aws-tier-5.1" mitigation="12"/>
                <countermeasure ref="aws-tier-5.10-5.11" mitigation="12"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                    <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                    <countermeasure ref="aws-tier-6.9" mitigation="6"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-02">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-NET-03">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Network-5.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-Network-5.4" mitigation="6"/>
                <countermeasure ref="Hydras-AWS-Network-5.5" mitigation="6"/>
                <countermeasure ref="Hydras-AWS-Network-5.6" mitigation="6"/>
                <countermeasure ref="aws-tier-6.10" mitigation="6"/>
                <countermeasure ref="aws-tier-6.11" mitigation="6"/>
                <countermeasure ref="aws-tier-6.12" mitigation="6"/>
                <countermeasure ref="aws-tier-6.14-6.15" mitigation="6"/>
                <countermeasure ref="aws-tier-6.16" mitigation="6"/>
                <countermeasure ref="aws-tier-6.20-6.23" mitigation="6"/>
                <countermeasure ref="aws-tier-6.24" mitigation="6"/>
                <countermeasure ref="aws-tier-6.25" mitigation="6"/>
                <countermeasure ref="aws-tier-6.27-6.28-6.29" mitigation="6"/>
                <countermeasure ref="aws-tier-6.31" mitigation="6"/>
                <countermeasure ref="aws-tier-6.6-6.7-6.8" mitigation="6"/>
                <countermeasure ref="aws-tier-6.9" mitigation="6"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                    <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                    <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW9" mitigation="34"/>
                <countermeasure ref="aws-tier-6.3" mitigation="33"/>
                <countermeasure ref="aws-tier-6.32-6.33" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-8" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="bcf6d830-8260-48e3-a96d-c509e58b5789" diagramComponentId="d077f2ce-8f51-4eed-b9e8-29c33c1c901e" ref="85488534-b4b9-4b7f-837b-1d895fd6a673" name="Overflow / Cold Storage" desc="" library="Hydras-AWS-Foundation" parentComponentRef="bb23eb31-51d2-42fd-9350-d4db18531e34" componentDefinitionRef="s3">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-S3-7.2" name="Data is easily removed" state="0" impact="100" issueId="" issueLink="">
          <desc>Someone without credentials can remove sensitive data, the remove function is not protected
                        for an MFA.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="misconfigured-s3-access-policies" name="Misconfigured S3 access policies" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Amazon S3 buckets use misconfigured policies that allow unauthorized users to:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt; Read sensitive information. &lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Add malicious content to a bucket and overwrite content.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-15T13:16:12.065">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:13.595">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards>
            <standard ref="1.22" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.3" name="Apply IAM roles" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications that run on an Amazon EC2/S3 instance need credentials in order to access other AWS services. To provide credentials to the application in a secure way, use IAM roles. A role is an entity that has its own set of permissions, but that isn't a user or group. Roles also don't have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2/S3, IAM dynamically provides temporary credentials to the EC2/S3 instance, and these credentials are automatically rotated for you. 
&lt;br /&gt; 
&lt;br /&gt;When you launch an EC2/S3 instance, you can specify a role for the instance as a launch parameter. Applications that run on the EC2/S3 instance can use the role's credentials when they access AWS resources. The role's permissions determine what the application is allowed to do. It is recommended that all EC2/S3 instances are launched with a role, even if the role has no permissions (as they can be added later if desired). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt; 
  &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Complete the wizard until step 3 at which point ensure an IAM role is selected for the &amp;quot;IAM role&amp;quot; option (note the role must already exist).&lt;/li&gt; 
  &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt; 
 &lt;/ol&gt;NB: You cannot add a role to an instance that has been launched without one. In these cases create an AMI from an existing instance and launch a new instance, assigning an IAM role as detailed above. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.18" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has an &amp;quot;IAM Role&amp;quot;
                            assigned (if a hyphen &amp;quot;-&amp;quot; is shown then your instance has no role
                            assigned).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.11" name="Configure S3 bucket versioning for sensitive data" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To add an extra layer of security to data stored within S3 it is possible to enable object versioning. Object versioning enables the recovery of objects from accidental overwrite or accidental deletion. If an object is deleted, instead of being removed, S3 write a delete marker which becomes the current version that means previous versions can always be recovered. It is recommended that versioning be enabled for buckets storing sensitive data. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled 
 &lt;/div&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-versioning.html"/>
            <reference name="List buckets" url="http://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-versioning.html"/>
            <reference name="S3 Versioning" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html"/>
          </references>
          <standards>
            <standard ref="3.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;If you don't see &amp;quot;Status&amp;quot;: &amp;quot;Enabled&amp;quot;
                            then your bucket has no versioning enabled.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-1" name="Discover, classify and secure all data" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon S3 buckets can contain sensitive data, that for security purposes should be discovered, monitored, classified and protected. Macie along with other 3rd party tools can automatically provide an inventory of Amazon S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Using a Cloud service or 3rd Party software to continuously monitor and automate the process of data discovery and classification for S3 buckets using machine learning and pattern matching is a strong defense in protecting that information.&lt;/p&gt;&lt;p&gt;Amazon Macie is a fully managed data security and data privacy service that uses machine learning and pattern matching to discover and protect your sensitive data in AWS.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the steps below to enable and configure Amazon Macie From Console:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log on to the Macie console at https://console.aws.amazon.com/macie/&lt;/li&gt;&lt;li&gt;Click Get started.&lt;/li&gt;&lt;li&gt;Click Enable Macie.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Setup a repository for sensitive data discovery results&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the Left pane, under Settings, click Discovery results.&lt;/li&gt;&lt;li&gt;Make sure Create bucket is selected.&lt;/li&gt;&lt;li&gt;Create a bucket, enter a name for the bucket. The name must be unique across all S3 buckets. In addition, the name must start with a lowercase letter or a number.&lt;/li&gt;&lt;li&gt;Click on Advanced.&lt;/li&gt;&lt;li&gt;Block all public access, make sure Yes is selected.&lt;/li&gt;&lt;li&gt;KMS encryption, specify the AWS KMS key that you want to use to encrypt the results. The key must be a symmetric, customer master key (CMK) that's in the same Region as the S3 bucket.&lt;/li&gt;&lt;li&gt;Click on Save&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Create a job to discover sensitive data&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click S3 buckets. Macie displays a list of all the S3 buckets for your account.&lt;/li&gt;&lt;li&gt;Select the check box for each bucket that you want Macie to analyze as part of the job&lt;/li&gt;&lt;li&gt;Click Create job.&lt;/li&gt;&lt;li&gt;Click Quick create.&lt;/li&gt;&lt;li&gt;For the Name and description step, enter a name and, optionally, a description of the job.&lt;/li&gt;&lt;li&gt;Then click Next.&lt;/li&gt;&lt;li&gt;For the Review and create step, click Submit.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Review your findings&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click Findings.&lt;/li&gt;&lt;li&gt;To view the details of a specific finding, choose any field other than the check box for the finding.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If you are using a 3rd Party tool to manage and protect your s3 data, follow the Vendor documentation for implementing and configuring that tool.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following steps to determine if Macie is running: From Console:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the Macie console at https://console.aws.amazon.com/macie/&amp;nbsp;&lt;/li&gt;&lt;li&gt;In the left hand pane click on By job under findings.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Confirm that you have a Job setup for your S3 Buckets&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;When you log into the Macie console if you aren't taken to the summary page and you don't have a job setup and running then refer to the remediation procedure below. If you are using a 3rd Party tool to manage and protect your s3 data you meet this recommendation.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.388">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-2" name="Enable Object-level logging for read and write events" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Enabling object-level logging will help you meet data compliance requirements within your organization, perform comprehensive security analysis, monitor specific patterns of user behavior in your AWS account or take immediate actions on any object-level API activity within your S3 Buckets using Amazon CloudWatch Events.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;Click on the Object-level logging setting, enter the CloudTrail name for the recording activity. You can choose an existing Cloudtrail or create a new one by navigating to the Cloudtrail console link https://console.aws.amazon.com/cloudtrail/&lt;/li&gt;&lt;li&gt;Once the Cloudtrail is selected, check the Write event checkbox, so that object-level logging for Write events is enabled.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to enable object-level logging of write events for other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;To enable object-level data events logging for S3 buckets within your AWS account, run put-event-selectors command using the name of the trail that you want to reconfigure as identifier: aws cloudtrail put-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --event-selectors '[{ "ReadWriteType": "WriteOnly", "IncludeManagementEvents":true, "DataResources": [{ "Type": "AWS::S3::Object", "Values": ["arn:aws:s3:::&amp;lt;s3-bucket-name&amp;gt;/"] }] }]'&lt;/li&gt;&lt;li&gt;The command output will be object-level event trail configuration.&lt;/li&gt;&lt;li&gt;If you want to enable it for all buckets at once then change Values parameter to ["arn:aws:s3"] in command given above.&lt;/li&gt;&lt;li&gt;Repeat step 1 for each s3 bucket to update object-level logging of write events.&lt;/li&gt;&lt;li&gt;Change the AWS region by updating the --region command parameter and perform the process for other regions.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.10" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.11" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Disabled, then object-level logging of read/write events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Enabled, but the Read event check-box is unchecked, then object-level logging of read events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to verify object level logging status of other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run list-trails command to list the names of all Amazon CloudTrail trails currently available in the selected AWS region:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail list-trails --region &amp;lt;region-name&amp;gt; --query Trails[*].Name&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. The command output will be a list of the requested trail names.&lt;/p&gt;&lt;p&gt;3. Run get-event-selectors command using the name of the trail returned at the previous step and custom query filters to determine if Data events logging feature is enabled within the selected CloudTrail trail configuration for s3bucket resources:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --query EventSelectors[*].DataResources[]&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. The command output should be an array that contains the configuration of the AWS resource(S3 bucket) defined for the Data events selector.&lt;/p&gt;&lt;p&gt;5. If the get-event-selectors command returns an empty array '[]', the Data events are not included into the selected AWS Cloudtrail trail logging configuration, therefore the S3 object-level API operations performed within your AWS account are not recorded.&lt;/p&gt;&lt;p&gt;6. Repeat steps 1 to 5 for auditing each s3 bucket to identify other trails that are missing the capability to log Data events.&lt;/p&gt;&lt;p&gt;7. Change the AWS region by updating the --region command parameter and perform the audit process for other regions.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.402">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest with KMS" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. &lt;/p&gt; 
&lt;p&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. &lt;/p&gt; 
&lt;p&gt;To ensure that sensitive data is encrypted at rest you can use AWS KMS-managed keys (SSE-KMS). This provides several advantages: &lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across all regions.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail log files. You can assign permissions for the key to the users in your organization according to your requirements.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now need to meet two conditions: 1) you must have S3 read permission on the bucket, and 2) you must be granted decrypt permission by the CMK policy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;It is recommended to encrypt all sensitive data with SSE-KMS to avoid undue disclosure of information and provide an extra layer of security.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation: &lt;/b&gt;&lt;br /&gt; The following example shows how to upload data using AWS KMS Encryption: &lt;br /&gt; aws s3api put-object --bucket --server-side-encryption aws:kms --ssekms-key-id --key &lt;/p&gt; 
</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Storing Lambda function encrypted secrets using environment variables and KMS" url="https://docs.aws.amazon.com/lambda/latest/dg/tutorial-env_console.html"/>
            <reference name="Storing and Retrieving a Secret (AWS Tutorial)" url="https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-audit-s3" name="Identify and audit all your Amazon S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Identification of your IT assets is a crucial aspect of governance and security. You need to have visibility of all your Amazon S3 resources to assess their security posture and take action on potential areas of weakness. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Use Tag Editor to identify security-sensitive or audit-sensitive resources, then use those tags when you need to search for these resources. For more information, see Searching for Resources to Tag. 
&lt;/div&gt; 
&lt;br /&gt;Use Amazon S3 inventory to audit and report on the replication and encryption status of your objects for business, compliance, and regulatory needs. For more information, see Amazon S3 Inventory. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Create resource groups for your Amazon S3 resources. For more information, see What Is AWS Resource Groups? 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            <reference name="Searching for Resources to Tag" url="https://docs.aws.amazon.com/ARG/latest/userguide/tag-editor.html"/>
            <reference name="What Is AWS Resource Groups?" url="https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Use Amazon S3 inventory tool to review the replication and encryption status of your S3 buckets. 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-15T15:40:07.036">
              <output/>
            </source>
            <references>
              <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.16" name="Require server-side and in transit encryption" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Data in transit is data being accessed over the network, and therefore could be intercepted by someone else on the network or with access to the physical media the network uses. On an ethernet network, that could be someone with the ability to tap a cable, configure a switch to mirror traffic, or fool your client or a router into directing traffic to them before it moves on to the final destination. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Server-side encryption (SSE) is about data encryption at rest-that is, Amazon S3 encrypts your data at the object level as it writes it to disks in its data centers and decrypts it for you when you access it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Amazon S3 offers 3 options of encrypting data at rest, depending on how you choose to manage the encryption keys: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use SSE with Amazon S3-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with AWS KMS-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with Customer-Provided Keys&lt;/li&gt; 
 &lt;/ul&gt; At the time of object creation-that is, when you are uploading a new object or making a copy of an existing object-you can specify if you want Amazon S3 to encrypt your data by adding the "x-amz-server-side-encryptionheader" to the request. Set the value of the header to the encryption algorithm AES256 that Amazon S3 supports. Amazon S3 confirms that your object is stored using server-side encryption by returning the response header "x-amz-server-side-encryption". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; No matter which of the three options you choose, you can create and attach a S3 bucket policy, that will deny any object creation S3 API (PUT Object, PUT Object - Copy, POST Object, Initiate Multipart Upload), if the request does not include the "x-amz-server-sideencryption" header requesting server-side encryption, and if the request was not done using SSL\TLS. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; When it comes to data at rest, if kept unencrypted, there are a few threats that one can think of, especially when the data is stored in the cloud: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;the threat that attackers are able to compromise Amazon S3 and gain access to the data that is stored in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the "insider threat" where a malicious or rogue administrator steals a physical disk drive or server that contains data a customer has in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the threat that a government uses a subpoena or warrant to get access to a customer's data in Amazon S3 without their knowledge.&lt;/li&gt; 
 &lt;/ul&gt; If data in transit is kept unencrypted: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Malicious users may intercept or monitor plaintext data transmitting across unencrypted network and gain unauthorized access to that jeopardize the confidentiality of the sensitive data.&lt;/li&gt; 
 &lt;/ul&gt; In all of these scenarios, encrypting data at rest and in transit, and properly managing the encryption keys can help mitigate the risk of unauthorized access to that data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     Perform the following to ensure all objects placed in S3 are encrypted in transit and at rest: 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Create a new file, add the following to it, and save it as policy.json:&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Version":"2012-10-17", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Id":"PutObjPolicy", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Statement":{ 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Sid":"DenyUnEncryptedObjectUploads", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Effect":"Deny", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Principal":"*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Action":"s3:PutObject", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Resource":"arn:aws:s3:::&amp;lt;s3_bucket_name&amp;gt;/*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Condition":{ 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Null":{ "s3:x-amz-server-side-encryption":"true" }, 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Bool": { "aws:SecureTransport": "false" } 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;} 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;} 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Attach the above bucket policy to each S3 bucket:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws s3api put-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --policy file://policy.json 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket policy" url="http://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-policy.html"/>
            <reference name="List buckets" url="http://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket policy" url="http://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html"/>
            <reference name="Using Server-side Encryption" url="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all the S3 buckets from the AWS account:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api list-buckets --output table
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;For each S3 bucket, list the bucket policy and verify that a policy exists, the policy contains a statement to deny PutObject calls that do not require server-side encryption, and the policy denies requests that do not occur over a secure transport:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api get-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --query 'Policy'
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            ...
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;{
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Sid": "DenyUnEncryptedObjectUploads",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Effect": "Deny",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Principal": "*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Action": "s3:PutObject",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Resource": "arn:aws:s3:::/*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Condition": {
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Null": { "s3:x-amz-server-side-encryption": "true",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Bool": { "aws:SecureTransport": "false" }
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T11:46:08.089">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="restrict-s3-bucket-access" name="Restrict Amazon S3 Bucket Access" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Unless you explicitly require anyone on the Internet to be able to read or write to your S3 bucket, you shall ensure that your S3 bucket is not public. The following are some of the steps you can take: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use Amazon S3 block public access. Account administrators and bucket owners can easily set up centralized controls to limit public access to their Amazon S3 resources that are enforced regardless of how the resources are created. For more information, see Using Amazon S3 Block Public Access.&lt;/li&gt; 
  &lt;li&gt;Identify Amazon S3 bucket policies that allow a wildcard identity such as Principal "*" (which effectively means "anyone") or allows a wildcard action "*" (which effectively allows the user to perform any action in the Amazon S3 bucket).&lt;/li&gt; 
  &lt;li&gt;Similarly, note Amazon S3 bucket access control lists (ACLs) that provide read, write, or full-access to "Everyone" or "Any authenticated AWS user."&lt;/li&gt; 
  &lt;li&gt;Use the ListBuckets API to scan all of your Amazon S3 buckets. Then use GetBucketAcl, GetBucketWebsite, and GetBucketPolicy to determine whether the bucket has compliant access controls and configuration.&lt;/li&gt; 
  &lt;li&gt;Use AWS Trusted Advisor to inspect your Amazon S3 implementation.&lt;/li&gt; 
  &lt;li&gt;Consider implementing on-going detective controls using the s3-bucket-public-read-prohibited and s3-bucket-public-write-prohibited managed AWS Config Rules.&lt;br&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;br&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Checklist" url="https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Checklist.pdf"/>
            <reference name="Amazon S3 Security Best Practices" url="https://github.com/awsdocs/amazon-s3-developer-guide/blob/master/doc_source/security-best-practices.md"/>
            <reference name="Introduction to Managing Access Permissions to Your Amazon S3 Resources" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-managing-access-s3-resources.html"/>
            <reference name="Setting Bucket and Object Access Permissions" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-permissions.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.1.5" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Prowler is a command line tool for AWS Security Best Practices Assessment, Auditing, Hardening and Forensics Readiness Tool.
                            It follows guidelines of the CIS Amazon Web Services Foundations Benchmark (49 checks) and has 40 additional checks including related to GDPR and HIPAA.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            If you'd like to check there are no S3 buckets open to the Everyone or Any AWS user you can run the tool with the following arguments:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            ./prowler -c extra73
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-11-15T14:10:10.879">
              <output/>
            </source>
            <references>
              <reference name="Prowler: AWS CIS Benchmark Tool" url="https://github.com/toniblyx/prowler"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.3" name="Set HTTPS for sensitive information" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To ensure that data is only accessible via HTTPS (as opposed to both HTTP and HTTPS) it is possible to add a condition to the S3 bucket policy. It is recommended to enable this for any bucket containing sensitive data to ensure that data is encrypted in transit. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;The following is an example of how to create an S3 bucket policy that enforces HTTPS/SSL only 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Go to the S3 Service on the AWS Console&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select a bucket under "All buckets"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Click the properties tab&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Under the permissions select "Add a bucket policy"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Add the following policy to ensure all objects are accessed via https only&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; {&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; "Statement":[&lt;/i&gt; 
   &lt;i&gt;{&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; "Action": "s3:*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Effect":"Allow",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Principal": "*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Resource":"arn:aws:s3:::bucketname/*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Condition":{&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;div&gt; 
       &lt;i&gt;"Bool":&lt;/i&gt; 
      &lt;/div&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;{&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;"aws:SecureTransport": true&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;}&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;i&gt;}&lt;/i&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; }&lt;/i&gt; 
     &lt;i&gt;]&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt;} &lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click ""Save"&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that HTTPS is forced on a bucket policy:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Go to the S3 Service on the AWS Console.&lt;/li&gt;
                            &lt;li&gt;Select the S3 bucket under &amp;quot;All buckets&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the &amp;quot;properties&amp;quot; tab.&lt;/li&gt;
                            &lt;li&gt;Click &amp;quot;edit bucket policy&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:SecureTransport&amp;quot;: &amp;quot;true&amp;quot;}}&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the same statement as &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-4" name="Use AWS Macie to scan for sensitive data on S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Macie findings flow to AWS Security Hub for review and analysis. Macie also integrates with Amazon EventBridge to facilitate automated responses to findings such as alerts, feeds to security information and event management (SIEM) systems, and automated remediation.&lt;/p&gt;&lt;p&gt;If S3 objects are encrypted with an AWS Key Management Service (AWS KMS) customer master key (CMK) that you manage, you can add the Macie service-linked role as a key user to that CMK to enable Macie to scan the data.&lt;/p&gt;&lt;p&gt;Macie is optimized for scanning objects in Amazon S3. As a result, any Macie-supported object type that can be placed in Amazon S3 (permanently or temporarily) can be scanned for sensitive data. This means that data from other sources-for example, periodic snapshot exports of Amazon Relational Database Service (Amazon RDS) or Amazon Aurora databases, exported Amazon DynamoDB tables, or extracted text files from native or third-party applications-can be moved to Amazon S3 and evaluated by Macie.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure Macie is used to scan S3 buckets.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:12.943">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:12.957">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.2" name="Use S3 MFA to delete sensitive information" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br /&gt; 
&lt;br /&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br /&gt; 
&lt;br /&gt;To add an extra layer of security to data stored within S3 the account owner (root) can enable MFA Delete which means that buckets and the objects within them can only be deleted with the use of Multi-factor authentication device. It is recommended to enable MFA Delete on any buckets containing sensitive data to protect against accidental deletion 
&lt;br /&gt;Remediation 
&lt;br /&gt;1. aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled,MFADelete=Enabled 
&lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If you don't see &amp;quot;MFADelete&amp;quot;: &amp;quot;Enabled&amp;quot; then your bucket
                            has no MFA delete enabled.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.3" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-3.11" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-2" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-2" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="50"/>
                <countermeasure ref="aws-tier-3.11" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-1" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                    <countermeasure ref="identify-audit-s3" mitigation="10"/>
                    <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-1" mitigation="10"/>
                <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                <countermeasure ref="identify-audit-s3" mitigation="10"/>
                <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="29b3dab5-6ff0-4719-a871-637e3a1e8e5b" diagramComponentId="12c72ec7-9b87-436e-b190-69f05654a0af" ref="8bf78537-3cdd-4c79-88be-e341adba0b30" name="CloudWatch" desc="" library="Hydras-AWS-Foundation" parentComponentRef="88ead499-6db6-4ecb-96d9-363b587ed0d5" componentDefinitionRef="cloudwatch">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.048">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.027">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.015">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.042">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:14.021">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-CLOUDWATCH7" name="Connect to CloudWatch using Interface VPC Endpoints" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Connect to CloudWatch using Interface VPC Endpoints&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; If you use Amazon Virtual Private Cloud (Amazon VPC) to host your AWS resources, you can establish a private connection between your VPC, CloudWatch, and CloudWatch Synthetics. You can use these connections to enable CloudWatch and CloudWatch Synthetics to communicate with your resources on your VPC without going through the public internet.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Creating a VPC Endpoint for CloudWatch&lt;/p&gt; 
&lt;p&gt;To start using CloudWatch with your VPC, create an interface VPC endpoint for CloudWatch. The service name to choose is com.amazonaws.region.monitoring.&lt;/p&gt; 
&lt;p&gt;You do not need to change the settings for CloudWatch. CloudWatch calls other AWS services using either public endpoints or private interface VPC endpoints, whichever are in use. For example, if you create an interface VPC endpoint for CloudWatch, and you already have metrics flowing to CloudWatch from resources located on your VPC, these metrics begin flowing through the interface VPC endpoint by default.&lt;/p&gt; 
&lt;p&gt;Controlling Access to Your CloudWatch VPC Endpoint&lt;/p&gt; 
&lt;p&gt;A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or modify the endpoint. If you don't attach a policy when you create an endpoint, Amazon VPC attaches a default policy for you that allows full access to the service. An endpoint policy doesn't override or replace IAM user policies or service-specific policies. It's a separate policy for controlling access from the endpoint to the specified service.&lt;/p&gt; 
&lt;p&gt;Endpoint policies must be written in JSON format.&lt;/p&gt; 
&lt;p&gt;To edit the VPC endpoint policy for CloudWatch&lt;/p&gt; 
&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Endpoints.&lt;/p&gt; 
&lt;p&gt;3. If you have not already created the endpoint for CloudWatch, choose Create Endpoint. Select com.amazonaws.region.monitoring, and then choose Create endpoint.&lt;/p&gt; 
&lt;p&gt;4. Select the com.amazonaws.region.monitoring endpoint, and then choose the Policy tab.&lt;/p&gt; 
&lt;p&gt;5. Choose Edit Policy, and then make your changes.&lt;/p&gt; 
&lt;p&gt;Creating a VPC Endpoint for CloudWatch Synthetics&lt;/p&gt; 
&lt;p&gt;To start using CloudWatch Synthetics with your VPC, create an interface VPC endpoint for CloudWatch Synthetics. The service name to choose is com.amazonaws.region.synthetics. For more information, see Creating an Interface Endpoint in the Amazon VPC User Guide.&lt;/p&gt; 
&lt;p&gt;You do not need to change the settings for CloudWatch Synthetics. CloudWatch Synthetics communicates with other AWS services using either public endpoints or private interface VPC endpoints, whichever are in use. For example, if you create an interface VPC endpoint for CloudWatch Synthetics, and you already have an interface endpoint for Amazon S3, CloudWatch Synthetics begins communicating with Amazon S3 through the interface VPC endpoint by default.&lt;/p&gt; 
&lt;p&gt;Controlling Access to Your CloudWatch Synthetics VPC Endpoint&lt;/p&gt; 
&lt;p&gt;A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or modify the endpoint. If you don't attach a policy when you create an endpoint, we attach a default policy for you that allows full access to the service. An endpoint policy doesn't override or replace IAM user policies or service-specific policies. It's a separate policy for controlling access from the endpoint to the specified service.&lt;/p&gt; 
&lt;p&gt;Endpoint policies must be written in JSON format.&lt;/p&gt; 
&lt;p&gt;To edit the VPC endpoint policy for CloudWatch Synthetics&lt;/p&gt; 
&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Endpoints.&lt;/p&gt; 
&lt;p&gt;3. If you have not already created the endpoint for CloudWatch Synthetics, choose Create Endpoint. Select com.amazonaws.region.synthetics and then choose Create endpoint.&lt;/p&gt; 
&lt;p&gt;4. Select the com.amazonaws.region.synthetics endpoint and then choose the Policy tab.&lt;/p&gt; 
&lt;p&gt;5. Choose Edit Policy, and then make your changes.&lt;/p&gt; 
&lt;p&gt;The following are the general steps for setting up an interface endpoint:&lt;/p&gt; 
&lt;p&gt;1. Choose the VPC in which to create the interface endpoint, and provide the name of the AWS service, endpoint service, or AWS Marketplace service to which you're connecting.&lt;/p&gt; 
&lt;p&gt;2. Choose a subnet in your VPC to use the interface endpoint. We create an endpoint network interface in the subnet. You can specify more than one subnet in different Availability Zones (as supported by the service) to help ensure that your interface endpoint is resilient to Availability Zone failures. In that case, we create an endpoint network interface in each subnet that you specify.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; An endpoint network interface is a requester-managed network interface. You can view it in your account, but you cannot manage it yourself. For more information, see Elastic Network Interfaces.&lt;/p&gt; 
&lt;p&gt;3. Specify the security groups to associate with the endpoint network interface. The security group rules control the traffic to the endpoint network interface from resources in your VPC. If you do not specify a security group, we associate the default security group for the VPC.&lt;/p&gt; 
&lt;p&gt;4. (Optional, AWS services and AWS Marketplace Partner services only) Enable private DNS for the endpoint to enable you to make requests to the service using its default DNS hostname.&lt;/p&gt; 
&lt;p&gt;Important&lt;br&gt; Private DNS is enabled by default for endpoints created for AWS services and AWS Marketplace Partner services.&lt;/p&gt; 
&lt;p&gt;Private DNS is enabled in the other subnets which are in the same VPC and Availability Zone or Local Zone.&lt;/p&gt; 
&lt;p&gt;5. When the service provider and the consumer are in different accounts, see Interface endpoint Availability Zone considerations for information about how to use Availability Zone IDs to identify the interface endpoint Availability Zone.&lt;/p&gt; 
&lt;p&gt;6. After you create the interface endpoint, it's available to use when it's accepted by the service provider. The service provider must configure the service to accept requests automatically or manually. AWS services and AWS Marketplace services generally accept all endpoint requests automatically.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using CloudWatch and CloudWatch Synthetics with Interface VPC Endpoints" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-and-interface-VPC.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Viewing your interface endpoint&lt;br /&gt;
After you've created an interface endpoint, you can view information about it using the Console or the Command line.&lt;/p&gt;

	&lt;p&gt;To view information about an interface endpoint using the console:&lt;/p&gt;

	&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Endpoints and select your interface endpoint.&lt;/p&gt;

	&lt;p&gt;3. To view information about the interface endpoint, choose Details. The DNS Names field displays the DNS names to use to access the service.&lt;/p&gt;

	&lt;p&gt;4. To view the subnets in which the interface endpoint has been created, and the ID of the endpoint network interface in each subnet, choose Subnets.&lt;/p&gt;

	&lt;p&gt;5. To view the security groups that are associated with the endpoint network interface, choose Security Groups.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.310">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDWATCH1" name="Control access to Amazon CloudWatch resources" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to Amazon CloudWatch resources&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Every AWS resource is owned by an AWS account, and permissions to create or access a resource are governed by permissions policies. An account administrator can attach permissions policies to IAM identities (that is, users, groups, and roles), and some services (such as AWS Lambda) also support attaching permissions policies to resources.&lt;br&gt; Policies attached to an IAM identity are referred to as identity-based policies (IAM policies) and policies attached to a resource are referred to as resource-based policies. CloudWatch supports only identity-based policies.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following shows an example of a permissions policy.&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", &lt;a&gt;Statement&lt;/a&gt; &lt;a&gt;Effect&lt;/a&gt;"Allow", &lt;a&gt;Action&lt;/a&gt;"cloudwatch:GetMetricStatistics","cloudwatch:ListMetrics"], &lt;a&gt;Resource&lt;/a&gt;"*", &lt;a&gt;Condition&lt;/a&gt; &lt;a&gt;Bool&lt;/a&gt; &lt;a&gt;aws:SecureTransport&lt;/a&gt;"true" } } } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;This sample policy has one statement that grants permissions to a group for two CloudWatch actions (cloudwatch:GetMetricStatistics, and cloudwatch:ListMetrics), but only if the group uses SSL with the request (&lt;a&gt;aws:SecureTransport&lt;/a&gt;"true").&lt;/p&gt; 
&lt;p&gt;For further information please see Reference URLs.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Overview of Managing Access Permissions to Your CloudWatch Resources" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/iam-access-control-overview-cw.html"/>
            <reference name="Sharing CloudWatch Dashboards" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-dashboard-sharing.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for CloudWatch" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/iam-identity-based-access-control-cw.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.270">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.1" name="Create a SNS topic for sending out notifications from Cloudtwatch Alarms" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  For the Cloudwatch alarms and Auto-Scaling Groups to be able to send out notifications, a SNS topic should be created. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  When using Amazon SNS, you (as the owner) create a topic and control access to it by defining policies that determine which publishers and subscribers can communicate with the topic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Cloudwatch alarms and certain actions inside Auto-Scaling Groups needs to be sent out to administrators, in order to be acted upon. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a new topic, and note the topic-arn value:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a subscription to the new topic:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: sns get topic attributes" url="https://docs.aws.amazon.com/cli/latest/reference/sns/get-topic-attributes.html"/>
            <reference name="Amazon docs: sns list subscriptions by topic" url="https://docs.aws.amazon.com/cli/latest/reference/sns/list-subscriptions-by-topic.html"/>
            <reference name="Amazon docs: sns set topic attributes" url="https://docs.aws.amazon.com/cli/latest/reference/sns/create-topic.html"/>
            <reference name="Amazon docs: sns subscribe" url="https://docs.aws.amazon.com/cli/latest/reference/sns/subscribe.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all cloudwatch alarms and filter by alarm action (review &amp;quot;AlarmActions&amp;quot;: []):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudwatch describe-alarms --query 'MetricAlarms[*].{AlarmName:AlarmName, AlarmActions:AlarmActions, Dimensions:Dimensions}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List SNS topic attributes:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws sns list-topic-attributes --topic-arn &amp;lt;sns_topic_arn&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List SNS topic subscriptions (endpoint which receives messages captured by the SNS topic):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.328">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDWATCH4" name="Create CloudWatch Alarms based on Anomaly Detection" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create CloudWatch Alarms based on Anomaly Detection&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; When you enable anomaly detection for a metric, CloudWatch applies statistical and machine learning algorithms. These algorithms continuously analyze metrics of systems and applications, determine normal baselines, and surface anomalies with minimal user intervention.&lt;br&gt; You can create an alarm based on CloudWatch anomaly detection, which mines past metric data and creates a model of expected values. The expected values take into account the typical hourly, daily, and weekly patterns in the metric.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; To create an alarm based on anomaly detection&lt;/p&gt; 
&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Alarms, Create Alarm.&lt;/p&gt; 
&lt;p&gt;3. Choose Select Metric and do one of the following:&lt;/p&gt; 
&lt;p&gt;- Choose the service namespace that contains the metric that you want. To narrow the choices, continue choosing options as they appear. When a list of metrics appears, select the check box next to the metric that you want.&lt;/p&gt; 
&lt;p&gt;- In the search box, enter the name of a metric, dimension, or resource ID and press Enter. Then choose one of the results and continue until a list of metrics appears. Select the check box next to the metric that you want.&lt;/p&gt; 
&lt;p&gt;4. Choose the Graphed metrics tab.&lt;/p&gt; 
&lt;p&gt;a. Under Statistic , choose one of the statistics or predefined percentiles, or specify a custom percentile (for example, p95.45).&lt;/p&gt; 
&lt;p&gt;b. Under Period, choose the evaluation period for the alarm. When evaluating the alarm, each period is aggregated into one data point. For anomaly detection alarms, the value must be one minute or longer.&lt;/p&gt; 
&lt;p&gt;You can also choose whether the y-axis legend appears on the left or right while you're creating the alarm. This preference is used only while you're creating the alarm.&lt;/p&gt; 
&lt;p&gt;c. Choose Select metric.&lt;/p&gt; 
&lt;p&gt;The Specify metric and conditions page appears, showing a graph and other information about the metric and statistic you have selected.&lt;/p&gt; 
&lt;p&gt;5. Under Conditions, specify the following:&lt;/p&gt; 
&lt;p&gt;a. Choose Anomaly detection.&lt;/p&gt; 
&lt;p&gt;If the model for this metric and statistic already exists, CloudWatch displays the anomaly detection band in the sample graph at the top of the screen. If the model does not already exist, the model will be generated when you finish creating the alarm. It takes up to 15 minutes for the actual anomaly detection band generated by the model to appear in the graph. Before that, the band you see is an approximation of the anomaly detection band. To see the graph in a longer time frame, choose Edit at the top right of the page.&lt;/p&gt; 
&lt;p&gt;b. For Whenever metric is, specify whether the metric must be greater than, lower than, or outside (in either direction) the band to trigger the alarm.&lt;/p&gt; 
&lt;p&gt;c. For Anomaly detection threshold, choose the number to use for the anomaly detection threshold. A higher number creates a thicker band of "normal" values that is more tolerant of metric changes, and a lower number creates a thinner band that will go to ALARM state with smaller metric deviations. The number does not have to be a whole number.&lt;/p&gt; 
&lt;p&gt;d. Choose Additional configuration. For Datapoints to alarm, specify how many evaluation periods (data points) must be in the ALARM state to trigger the alarm. If the two values here match, you create an alarm that goes to ALARM state if that many consecutive periods are breaching.&lt;/p&gt; 
&lt;p&gt;To create an M out of N alarm, specify a lower number for the first value than you specify for the second value. For more information, see Evaluating an Alarm.&lt;/p&gt; 
&lt;p&gt;e. For Missing data treatment, choose how to have the alarm behave when some data points are missing. For more information, see Configuring How CloudWatch Alarms Treat Missing Data.&lt;/p&gt; 
&lt;p&gt;f. If the alarm uses a percentile as the monitored statistic, a Percentiles with low samples box appears. Use it to choose whether to evaluate or ignore cases with low sample rates. If you choose ignore (maintain alarm state), the current alarm state is always maintained when the sample size is too low. For more information, see Percentile-Based CloudWatch Alarms and Low Data Samples.&lt;/p&gt; 
&lt;p&gt;6. Choose Next.&lt;/p&gt; 
&lt;p&gt;7. Under Notification, select an SNS topic to notify when the alarm is in ALARM state, OK state, or INSUFFICIENT_DATA state.&lt;/p&gt; 
&lt;p&gt;To have the alarm send multiple notifications for the same alarm state or for different alarm states, choose Add notification.&lt;/p&gt; 
&lt;p&gt;To have the alarm not send notifications, choose Remove.&lt;/p&gt; 
&lt;p&gt;8. To have the alarm perform EC2 actions when it changes state or create a Systems Manager OpsItem when it goes into ALARM state, choose the appropriate button and choose the alarm state and action to perform.&lt;/p&gt; 
&lt;p&gt;9. When finished, choose Next.&lt;/p&gt; 
&lt;p&gt;10. Enter a name and description for the alarm. The name must contain only ASCII characters. Then choose Next.&lt;/p&gt; 
&lt;p&gt;11. Under Preview and create, confirm that the information and conditions are what you want, then choose Create alarm.&lt;/p&gt; 
&lt;p&gt;Modifying an Anomaly Detection Model&lt;/p&gt; 
&lt;p&gt;Once you have created an alarm, you can adjust the anomaly detection model. You can exclude certain time periods from being used in the model creation. It is critical that you exclude unusual events such as system outages, deployments, and holidays from the training data. You can also specify whether to adjust the model for daylight savings time changes.&lt;/p&gt; 
&lt;p&gt;To adjust the anomaly detection model for an alarm&lt;/p&gt; 
&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Alarms.&lt;/p&gt; 
&lt;p&gt;3. Choose the name of the alarm. Use the search box to find the alarm if necessary.&lt;/p&gt; 
&lt;p&gt;4. Choose View in metrics.&lt;/p&gt; 
&lt;p&gt;5. In the lower part of the screen, choose Edit model.&lt;/p&gt; 
&lt;p&gt;6. To exclude a time period from being used to produce the model, choose Add another time range to exclude from training. Then select or enter the days and times to exclude from training, and choose Apply.&lt;/p&gt; 
&lt;p&gt;7. If the metric is sensitive to daylight savings time changes, select the appropriate time zone in the Metric timezone box.&lt;/p&gt; 
&lt;p&gt;8. Choose Update.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Using anomaly detection models for alarms incurs charges on your AWS account.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Creating a CloudWatch Alarm Based on Anomaly Detection" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Anomaly_Detection_Alarm.html"/>
            <reference name="Using CloudWatch Anomaly Detection" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you have created Anomaly Detection alarms properly.&lt;/p&gt;

	&lt;p&gt;After you create a model, it constantly updates itself, using the latest data from the metric.&lt;/p&gt;

	&lt;p&gt;After you enable anomaly detection on a metric, you can choose to exclude specified time periods of the metric from being used to train the model. This way, you can exclude deployments or other unusual events from being used for model training, ensuring the most accurate model is created.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.286">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDWATCH2" name="Follow the security best practices for CloudWatch Synthetics Canaries" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Follow the security best practices for CloudWatch Synthetics Canaries&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; You can use Amazon CloudWatch Synthetics to create canaries, configurable scripts that run on a schedule, to monitor your endpoints and APIs. Canaries follow the same routes and perform the same actions as a customer, which makes it possible for you to continually verify your customer experience even when you don't have any customer traffic on your applications.&lt;br&gt; However, there are several security issues that you should consider when creating and running canaries in Synthetics. AWS recommends to follow the undermentioned security best practices.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following sections explain security issues that you should consider when creating and running canaries in Synthetics.&lt;/p&gt; 
&lt;p&gt;Use Secure Connections&lt;/p&gt; 
&lt;p&gt;Because canary code and the results from canary test runs can contain sensitive information, do not have your canary connect to endpoints over unencrypted connections. Always use encrypted connections, such as those that begin with https://.&lt;/p&gt; 
&lt;p&gt;Canary Naming Considerations&lt;/p&gt; 
&lt;p&gt;The Amazon Resource Name (ARN) of a canary is included in the user-agent header as a part of outbound calls made from the Puppeteer-driven Chromium browser that is included as a part of the CloudWatch Synthetics wrapper library. This helps identify CloudWatch Synthetics canary traffic and relate it back to the canaries that are making calls.&lt;/p&gt; 
&lt;p&gt;The canary ARN includes the canary name. Choose canary names that do not reveal proprietary information.&lt;/p&gt; 
&lt;p&gt;Additionally, be sure to point your canaries only at websites and endpoints that you control.&lt;/p&gt; 
&lt;p&gt;Secrets in Canary Code&lt;/p&gt; 
&lt;p&gt;AWS recommends that you don't include secrets, such as access keys or database credentials, in your canary source code.&lt;/p&gt; 
&lt;p&gt;Permissions Considerations&lt;/p&gt; 
&lt;p&gt;AWS recommends that you restrict access to resources that are created or used by CloudWatch Synthetics. Use tight permissions on the Amazon S3 buckets where canaries store test run results and other artifacts, such as logs and screenshots.&lt;/p&gt; 
&lt;p&gt;Similarly, keep tight permissions on the locations where your canary source code is stored, so that no user accidentally or maliciously deletes the Lambda layers or Lambda functions used for the canary.&lt;/p&gt; 
&lt;p&gt;To help make sure you run the canary code you intend, you can use object versioning on the Amazon S3 bucket where your canary code is stored. Then when you specify this code to run as a canary, you can include the object versionId as part of the path, as in the following examples:&lt;/p&gt; 
&lt;p&gt;https://bucket.s3.amazonaws.com/path/object.zip?versionId=version-id&lt;br&gt; https://s3.amazonaws.com/bucket/path/object.zip?versionId=version-id&lt;br&gt; https://bucket.s3-region.amazonaws.com/path/object.zip?versionId=version-id&lt;/p&gt; 
&lt;p&gt;Stack Traces and Exception Messages&lt;/p&gt; 
&lt;p&gt;By default, CloudWatch Synthetics canaries capture any exception thrown by your canary script, no matter whether the script is custom or is from a blueprint. CloudWatch Synthetics logs both the exception message and the stack trace to three locations:&lt;/p&gt; 
&lt;p&gt;- Back into the CloudWatch Synthetics service to speed up debugging when you describe test runs&lt;/p&gt; 
&lt;p&gt;- Into CloudWatch Logs according to the configuration that your Lambda functions are created with&lt;/p&gt; 
&lt;p&gt;- Into the Synthetics log file, which is a plaintext file that is uploaded to the Amazon S3 location specified by the value you set for the resultsLocation of the canary&lt;/p&gt; 
&lt;p&gt;If you want to send and store less information, you can capture exceptions before they return to the CloudWatch Synthetics wrapper library.&lt;/p&gt; 
&lt;p&gt;Scope Your IAM Roles Narrowly&lt;/p&gt; 
&lt;p&gt;AWS recommends that you do not configure your canary to visit potentially malicious URLs or endpoints. Pointing your Canary to untrusted or unknown websites or endpoints could expose your Lambda function code to malicious user's scripts. Assuming a malicious website can break out of Chromium, it could have access to your Lambda code in a similar way to if you connected to it using an internet browser.&lt;/p&gt; 
&lt;p&gt;Run your Lambda function with an IAM execution role that has scoped-down permissions. This way, if your Lambda function is compromised by a malicious script, it is limited in the actions it can take when running as your canary's AWS account.&lt;/p&gt; 
&lt;p&gt;When you use the CloudWatch console to create a canary, it is created with a scoped-down IAM execution role.&lt;/p&gt; 
&lt;p&gt;Header Logging&lt;/p&gt; 
&lt;p&gt;By default, canary header logging logs only the request URL, response code, and response status. Within your canary script, you can customize the logging to log more or less information.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Considerations for Synthetics Canaries" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you are following security best practices for CloudWatch Synthetics Canaries.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.279">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="http://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.355">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDWATCH6" name="Use CloudWatch Agent to collect system-level metrics" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use CloudWatch Agent to collect system-level metrics&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; The unified CloudWatch agent enables you to do the following:&lt;/p&gt; 
&lt;p&gt;- Collect internal system-level metrics from Amazon EC2 instances across operating systems. The metrics can include in-guest metrics, in addition to the metrics for EC2 instances. The additional metrics that can be collected are listed in Metrics Collected by the CloudWatch Agent.&lt;/p&gt; 
&lt;p&gt;- Collect system-level metrics from on-premises servers. These can include servers in a hybrid environment as well as servers not managed by AWS.&lt;/p&gt; 
&lt;p&gt;- Retrieve custom metrics from your applications or services using the StatsD and collectd protocols. StatsD is supported on both Linux servers and servers running Windows Server. collectd is supported only on Linux servers.&lt;/p&gt; 
&lt;p&gt;- Collect logs from Amazon EC2 instances and on-premises servers, running either Linux or Windows Server.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Installation Process Overview&lt;/p&gt; 
&lt;p&gt;You can download and install the CloudWatch agent manually using the command line, or you can integrate it with SSM. The general flow of installing the CloudWatch agent using either method is as follows:&lt;/p&gt; 
&lt;p&gt;1. Create IAM roles or users that enable the agent to collect metrics from the server and optionally to integrate with AWS Systems Manager.&lt;/p&gt; 
&lt;p&gt;2. Download the agent package.&lt;/p&gt; 
&lt;p&gt;3. Modify the CloudWatch agent configuration file and specify the metrics that you want to collect.&lt;/p&gt; 
&lt;p&gt;4. Install and start the agent on your servers. As you install the agent on an EC2 instance, you attach the IAM role that you created in step 1. As you install the agent on an on-premises server, you specify a named profile that contains the credentials of the IAM user that you created in step 1.&lt;/p&gt; 
&lt;p&gt;For further information please see Reference URL.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Please follow Reference URL to check for Supported Operating Systems.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Collecting Metrics and Logs from Amazon EC2 Instances and On-Premises Servers with the CloudWatch Agent" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Install-CloudWatch-Agent.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify That the CloudWatch Agent Is Running&lt;/p&gt;

	&lt;p&gt;You can query the CloudWatch agent to find whether it's running or stopped. You can use AWS Systems Manager to do this remotely. You can also use the command line, but only to check the local server.&lt;/p&gt;

	&lt;p&gt;To query the status of the CloudWatch agent using Run Command&lt;/p&gt;

	&lt;p&gt;1. Open the Systems Manager console at https://console.aws.amazon.com/systems-manager/.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Run Command.&lt;/p&gt;

	&lt;p&gt;&lt;del&gt;or&lt;/del&gt;&lt;/p&gt;

	&lt;p&gt;If the AWS Systems Manager home page opens, scroll down and choose Explore Run Command.&lt;/p&gt;

	&lt;p&gt;3. Choose Run command.&lt;/p&gt;

	&lt;p&gt;4. In the Command document list, choose the button next to AmazonCloudWatch-ManageAgent.&lt;/p&gt;

	&lt;p&gt;5. In the Action list, choose status.&lt;/p&gt;

	&lt;p&gt;6. For Optional Configuration Source choose default and keep Optional Configuration Location blank.&lt;/p&gt;

	&lt;p&gt;7. In the Target area, choose the instance to check.&lt;/p&gt;

	&lt;p&gt;8. Choose Run.&lt;/p&gt;

	&lt;p&gt;If the agent is running, the output resembles the following.&lt;/p&gt;

	&lt;p&gt;{
       "status": "running",
       "starttime": "2017-12-12T18:41:18",
       "version": "1.73.4"&lt;br /&gt;
}&lt;/p&gt;

	&lt;p&gt;If the agent is stopped, the "status" field displays "stopped".&lt;/p&gt;


	&lt;p&gt;To query the status of the CloudWatch agent locally using the command line&lt;/p&gt;

	&lt;p&gt;- On a Linux server, enter the following:&lt;/p&gt;

	&lt;p&gt;sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status&lt;/p&gt;

	&lt;p&gt;- On a server running Windows Server, enter the following in PowerShell as an administrator:&lt;/p&gt;

	&lt;p&gt;&amp;amp; $Env:ProgramFiles\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1 -m ec2 -a status&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.303">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDWATCH5" name="Use CloudWatch metric streams" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use CloudWatch metric streams&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; You can use metric streams to continually stream CloudWatch metrics to a destination of your choice, with near-real-time delivery and low latency. Supported destinations include AWS destinations such as Amazon Simple Storage Service and several third-party service provider destinations.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; How to use the CloudWatch console to set up a metric stream to another AWS service&lt;/p&gt; 
&lt;p&gt;When you use the console to set up a metric stream, you have the option of choosing the Quick S3 Setup. This method works well if want the final output as JSON or to be queried by Amazon Athena. If you want the final format to be Parquet format or Optimized Row Columnar (ORC), you should create your own Kinesis Data Firehose delivery stream and choose Select an existing Firehose owned by your account instead of choosing Quick S3 Setup.&lt;/p&gt; 
&lt;p&gt;To set up a metric stream to an AWS service&lt;/p&gt; 
&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Streams, Create stream.&lt;/p&gt; 
&lt;p&gt;3. Choose the CloudWatch metric namespaces to include in the metric stream.&lt;/p&gt; 
&lt;p&gt;- To include all or most of your metric namespaces in the metric stream, choose All metrics.&lt;/p&gt; 
&lt;p&gt;Then, if you want to exclude some metric namespaces from the stream, choose Exclude metric namespaces and select the namespaces to exclude.&lt;/p&gt; 
&lt;p&gt;- To include only a few metric namespaces in the metric stream, choose Selected namespaces and then select the namespaces to include.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; Consider carefully whether to stream all metrics, because the more metrics that you stream the higher your metric stream charges will be.&lt;/p&gt; 
&lt;p&gt;4. Choose one of the following:&lt;/p&gt; 
&lt;p&gt;- For a quick setup, choose Quick S3 setup. CloudWatch will create all necessary resources including the Kinesis Data Firehose delivery stream and the necessary IAM roles. The default format for this option is JSON, but you can change the format later in this procedure.&lt;/p&gt; 
&lt;p&gt;- To use a Kinesis Data Firehose delivery stream that already exists, choose Select an existing Firehose owned by your account. The Kinesis Data Firehose delivery stream must be in the same account. The default format for this option is OpenTelemetry, but you can change the format later in this procedure.&lt;/p&gt; 
&lt;p&gt;Then select the Kinesis Data Firehose delivery stream to use under Select your Kinesis Data Firehose delivery stream.&lt;/p&gt; 
&lt;p&gt;5. (Optional) If you're using Quick S3 Setup, you can choose Select existing resources to use an existing S3 bucket or existing IAM roles instead of having CloudWatch create new ones for you.&lt;/p&gt; 
&lt;p&gt;6. (Optional) If you're using Select an existing Firehose owned by your account, you can choose Select existing service role to use an existing IAM role instead of having CloudWatch create a new one for you.&lt;/p&gt; 
&lt;p&gt;7. (Optional) To change the output format from the default format for your scenario, choose Change output format. The supported formats are JSON and OpenTelemetry 0.7.0.&lt;/p&gt; 
&lt;p&gt;8. (Optional) Customize the name of the new metric stream under Metric stream name.&lt;/p&gt; 
&lt;p&gt;9. Choose Create metric stream.&lt;/p&gt; 
&lt;p&gt;Setting up a metric stream to a third-party solution&lt;/p&gt; 
&lt;p&gt;To set up a CloudWatch metric stream to stream metrics to a third-party solution, follow the instructions provided by that third-party provider.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Consider carefully whether to stream all metrics, because the more metrics that you stream the higher your metric stream charges will be.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Metric stream operation and maintenance" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-operation.html"/>
            <reference name="Using metric streams" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Metric streams are always in one of two states, Running or Stopped.&lt;/p&gt;

	&lt;p&gt;Running - The metric stream is running correctly. There might not be any metric data streamed to the destination because of the filters on the stream.&lt;/p&gt;

	&lt;p&gt;Stopped - The metric stream has been explicitly stopped by someone, and not because of an error. It might be useful to stop your stream to temporarily pause the streaming of data without deleting the stream.&lt;/p&gt;

	&lt;p&gt;If you stop and restart a metric stream, the metric data that was published to CloudWatch while the metric stream was stopped is not backfilled to the metric stream.&lt;/p&gt;

	&lt;p&gt;If you change the output format of a metric stream, in certain cases you might see a small amount of metric data written to the destination in both the old format and the new format. To avoid this situation, you can create a new Kinesis Data Firehose delivery stream with the same configuration as your current one, then change to the new Kinesis Data Firehose delivery stream and change the output format at the same time. This way, the Kinesis records with different output format are stored on Amazon S3 in separate objects. Later, you can direct the traffic back to the original Kinesis Data Firehose delivery stream and delete the second delivery stream.&lt;/p&gt;

	&lt;p&gt;To view, edit, stop, and start your metric streams&lt;/p&gt;

	&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Streams.&lt;/p&gt;

	&lt;p&gt;The list of streams appears, and the Status column displays whether each stream is running or stopped.&lt;/p&gt;

	&lt;p&gt;3. To stop or start a metric stream, select the stream and choose Stop or Start.&lt;/p&gt;

	&lt;p&gt;4. To see the details about a metric stream, select the stream and choose View details.&lt;/p&gt;

	&lt;p&gt;5. To change the stream's output format, filters, destination Kinesis Data Firehose stream, or roles, choose Edit and make the changes that you want.&lt;/p&gt;

	&lt;p&gt;If you change the filters, there might be some gaps in the metric data during the transition.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.295">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-06-22T08:10:13.316">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDWATCH1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDWATCH1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDWATCH2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDWATCH2" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOGGING AND MONITORING" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDWATCH4" mitigation="25"/>
                    <countermeasure ref="AWS-CLOUDWATCH5" mitigation="25"/>
                    <countermeasure ref="AWS-CLOUDWATCH6" mitigation="25"/>
                    <countermeasure ref="aws-tier-4.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDWATCH4" mitigation="25"/>
                <countermeasure ref="AWS-CLOUDWATCH5" mitigation="25"/>
                <countermeasure ref="AWS-CLOUDWATCH6" mitigation="25"/>
                <countermeasure ref="aws-tier-4.1" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDWATCH7" mitigation="33"/>
                    <countermeasure ref="AWS-VPC5" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDWATCH7" mitigation="33"/>
                <countermeasure ref="AWS-VPC5" mitigation="34"/>
                <countermeasure ref="aws-tier-5.1" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="bf5398d4-336a-4832-bfe2-db51e7e9e20c" diagramComponentId="a7371359-5908-45b4-85a8-1621e50f8dcd" ref="cb3c3a00-6887-4025-a440-4c5298fb2b0d" name="AWS API Gateway" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="api-gateway">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.413">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.927">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-295" name="Improper Certificate Validation" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not validate, or incorrectly validates, a certificate.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.929">
              <output/>
            </source>
            <references>
              <reference name="CWE-295: Improper Certificate Validation" url="https://cwe.mitre.org/data/definitions/295.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-77" name="Improper Neutralization of Special Elements used in a Command ('Command Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software constructs all or part of a command using
                    externally-influenced input from an upstream component, but it does not
                    neutralize or incorrectly neutralizes special elements that could modify the
                    intended command when it is sent to a downstream
                    component.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.928">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.929">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.415">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.928">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-522" name="Insufficiently Protected Credentials" state="0" impact="100" issueId="" issueLink="">
          <desc>This weakness occurs when the application transmits or stores
                    authentication credentials and uses an insecure method that is susceptible to
                    unauthorized interception and/or retrieval.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.414">
              <output/>
            </source>
            <references>
              <reference name="CWE-522: Insufficiently Protected Credentials" url="https://cwe.mitre.org/data/definitions/522.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-320" name="Key Management Errors" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category are related to errors in the management of cryptographic keys.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.414">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.414">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.414">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.929">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.929">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.414">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.414">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.929">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.928">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.10" name="Apply setting MFA for sensitive API calls" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>To the extent that it is practical consider enforcing MFA access for sensitive API calls. For example, you can require that a user has authenticated with an MFA device in order to be allowed to terminate an Amazon EC2 instance. This ensures that such high level changes to your AWS environment are protected with an extra layer of security thus helping to prevent accidental or malicious damage. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;The following is an example of how to create a policy that enforces MFA to terminate EC2 instances: 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Select "Policies".&lt;/li&gt; 
  &lt;li&gt;Select "Create Policy".&lt;/li&gt; 
  &lt;li&gt;Select "Create your own policy".&lt;/li&gt; 
  &lt;li&gt;Provide a policy name and description.&lt;/li&gt; 
  &lt;li&gt;In the policy document add the following:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;i&gt; {&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Version": "2012-10-17",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Statement": [{&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Effect": "Allow",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Action": [&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "ec2:StopInstances",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "ec2:TerminateInstances"&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; ],&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Resource": ["*"],&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Condition": {"Bool": {"aws:MultiFactorAuthPresent": "true"}}&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; }]&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt;}&lt;/i&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click "Create policy".&lt;/li&gt; 
  &lt;li&gt;The policy may now be added to a group by following the outlines in "Use RBAC with pre-defined policies added into groups or roles".&lt;/li&gt; 
 &lt;/ul&gt; &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configuring MFA-Protected API Access" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_configure-api-require.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that MFA is forced on a policy:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                            &lt;li&gt;Go to IAM Service on the AWS Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Policies&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;In the filter select &amp;quot;Customer Managed Policies&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select the policy to check.&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line: &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:MultiFactorAuthPresent&amp;quot;: &amp;quot;true&amp;quot;}}&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.716">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.5" name="Avoid API keys for root account" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>You use an access key (an access key ID and secret access key) to make programmatic requests to AWS. However, do not use your AWS account (root) access key. The access key for your AWS account gives full access to all your resources for all AWS services, including your billing information. You cannot restrict the permissions associated with your AWS account access key.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console as Root.&lt;/li&gt; 
  &lt;li&gt;Click on Account Name at the top left and select Security Credentials.&lt;/li&gt; 
  &lt;li&gt;On the pop up screen Click on Continue to Security Credentials.&lt;/li&gt; 
  &lt;li&gt;Click on Access Keys.&lt;/li&gt; 
  &lt;li&gt;Under the Status column if there are any Keys which are "Active".&lt;/li&gt; 
  &lt;li&gt;Click on "Make Inactive" and click "Delete".&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.4" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="2.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;Run the following command: aws iam get-credential-report --query 'Content'
                            --output text | base64 -D | egrep &amp;quot;root|access&amp;quot; | awk -F, '{print
                            $1,$9,$14}'&lt;/li&gt;
                            &lt;li&gt;For the &amp;lt;root_account&amp;gt; user ensure access_key_1_active and
                            access_key_2_active are false.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.723">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.7" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW7" name="Choose a minimum TLS version for a custom domain in API Gateway" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Choose a minimum TLS version for a custom domain in API Gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  The APIs created with Amazon API Gateway expose HTTPS endpoints only. API Gateway doesn't support unencrypted (HTTP) endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For greater security, you can choose a minimum Transport Layer Security (TLS) protocol version to be enforced for your API Gateway custom domain. You can choose either a TLS version 1.2 or TLS version 1.0 security policy. WebSocket APIs and HTTP APIs support only TLS 1.2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  When you create a custom domain, you specify the security policy for it. 
&lt;/div&gt; 
&lt;div&gt;
  You can change the security policy by updating the domain name settings. To change the minimum TLS version, use one of the following commands, specifying the new TLS version (TLS_1_0 or TLS_1_2) in the securityPolicy parameter. Allow up to 60 minutes for the update to be completed. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Choosing a minimum TLS version for a custom domain in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure when creating a custom domain name, that you specify the minimum TLS version by choosing the "Choose a minimum TLS version" option.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.723">
              <output/>
            </source>
            <references>
              <reference name="Creating an edge-optimized custom domain name" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-edge-optimized-custom-domain-name.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW1" name="Control access to an API using supported mechanisms" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control and manage access to a REST API in API Gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  API Gateway supports multiple mechanisms for controlling and managing access to your API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can use the following mechanisms for authentication and authorization: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Resource policies let you create resource-based policies to allow or deny access to your APIs and methods from specified source IP addresses or VPC endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Standard AWS IAM roles and policies offer flexible and robust access controls that can be applied to an entire API or individual methods. IAM roles and policies can be used for controlling who can create and manage your APIs, as well as who can invoke them. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. IAM tags can be used together with IAM policies to control access. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Endpoint policies for interface VPC endpoints allow you to attach IAM resource policies to interface VPC endpoints to improve the security of your private APIs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. Lambda authorizers are Lambda functions that control access to REST API methods using bearer token authentication-as well as information described by headers, paths, query strings, stage variables, or context variables request parameters. Lambda authorizers are used to control who can invoke REST API methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Amazon Cognito user pools let you create customizable authentication and authorization solutions for your REST APIs. Amazon Cognito user pools are used to control who can invoke REST API methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Controlling and managing access to a REST API in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.723">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM Policies with the IAM Policy Simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.8" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.9" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW5" name="Create Route 53 alias records for API endpoints" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Create Route 53 alias records for API endpoints 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Attackers sometimes hijack traffic to internet endpoints such as web servers by intercepting DNS queries and returning their own IP addresses to DNS resolvers in place of the actual IP addresses for those endpoints. Users are then routed to the IP addresses provided by the attackers in the spoofed response, for example, to fake websites. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can protect your domain from this type of attack, known as DNS spoofing or a man-in-the-middle attack, by configuring Domain Name System Security Extensions (DNSSEC), a protocol for securing DNS traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Amazon Route 53 offers a special type of record called an 'Alias' record that lets you map your zone apex (example.com) DNS name to your Amazon API Gateway DNS name (i.e. api-id.execute-api.region.amazonaws.com/stage). IP addresses associated with Amazon API Gateway can change at any time due to scaling up, scaling down, or software updates. Route 53 responds to each request for an Alias record with one or more IP addresses for the API Gateway. There is no additional charge for queries to Alias records that are mapped to Amazon API Gateways. These queries are listed as "Intra-AWS-DNS-Queries" on the Route 53 usage report. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Amazon API Gateway lets you create, publish, maintain, monitor, and secure APIs. You can create APIs that access AWS services or other web services, as well as data stored in the AWS Cloud. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The method that you use to route domain traffic to an API Gateway API depends on whether you created a regional API Gateway endpoint or an edge-optimized API Gateway endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Regional API endpoint: You create a Route 53 alias record that routes traffic to the regional API endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Edge-optimized API endpoint: You create a Route 53 alias record that routes traffic to the edge-optimized API. This causes traffic to be routed to the CloudFront distribution that's associated with the edge-optimized API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An alias record is a Route 53 extension to DNS that's similar to a CNAME record. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configuring Route 53 to route traffic to a regional API Gateway endpoint" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-api-gateway.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your API by using the name of the alias record that you created in this procedure.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.723">
              <output/>
            </source>
            <references>
              <reference name="Configuring Route 53 to route traffic to a regional API Gateway endpoint" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-api-gateway.html"/>
              <reference name="Routing traffic to an Amazon API Gateway API by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-api-gateway.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW12" name="Do not put sensitive data into AWS API Gateway free-form fields" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Do not put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you never put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. This includes when you work with API Gateway or other AWS services using the console, API, AWS CLI, or AWS SDKs. Any data that you enter into AWS services might get picked up for inclusion in diagnostic logs. When you provide a URL to an external server, don't include credentials information in the URL to validate your request to that server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that free-form fields do not contain sensitive data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Data protection in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/data-protection.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.723">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW16" name="Enable API Gateway X-Ray Tracing" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Ensure APIs created with Amazon API Gateway have active tracing support for AWS X-Ray enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can use AWS X-Ray to trace and analyze user requests as they travel through your Amazon API Gateway REST APIs to the underlying services. API Gateway supports X-Ray tracing for all API Gateway REST API endpoint types: Regional, edge-optimized, and private. You can use X-Ray with Amazon API Gateway in all AWS Regions where X-Ray is available. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Because X-Ray gives you an end-to-end view of an entire request, you can analyze latencies in your APIs and their backend services. You can use an X-Ray service map to view the latency of an entire request and that of the downstream services that are integrated with X-Ray. You can also configure sampling rules to tell X-Ray which requests to record and at what sampling rates, according to criteria that you specify. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you call an API Gateway API from a service that's already being traced, API Gateway passes the trace through, even if X-Ray tracing isn't enabled on the API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable X-Ray for an API stage by using the API Gateway console, or by using the API Gateway API or CLI. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Tracing user requests to REST APIs using X-Ray" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-xray.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Once you've enabled X-Ray for your API stage, you can use the X-Ray management console to view the traces and service maps.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.723">
              <output/>
            </source>
            <references>
              <reference name="Setting up AWS X-Ray with API Gateway REST APIs" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enabling-xray.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW14" name="Enable APIs CloudWatch Logs" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Ensure APIs created with Amazon API Gateway have AWS CloudWatch logging enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  To help debug issues related to request execution or client access to your API, you can enable Amazon CloudWatch Logs to log API calls. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To set up CloudWatch API logging, you must have deployed the API to a stage. You must also have configured an appropriate CloudWatch Logs role ARN for your account. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the API Gateway console at https://console.aws.amazon.com/apigateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose a REST API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Settings from the primary navigation panel and enter an ARN of an IAM role with appropriate permissions in CloudWatch log role ARN. You need to do this once. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Do one of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose an existing API and then choose a stage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Create an API and deploy it to a stage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Logs/Tracing in the Stage Editor. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable execution logging: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Enable CloudWatch Logs under CloudWatch Settings. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Error or Info from the dropdown menu. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If desired, choose Enable Detailed CloudWatch Metrics. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For more information about CloudWatch metrics, see Monitoring REST API execution with Amazon CloudWatch metrics. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable access logging: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Enable Access Logging under Custom Access Logging. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Enter the ARN of a log group in Access Log Destination ARN. The ARN format is arn:aws:logs:{region}:{account-id}:log-group:log-group-name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Enter a log format in Log Format. You can choose CLF, JSON, XML, or CSV to use one of the provided examples as a guide. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Save Changes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  You can enable execution logging and access logging independent of each other. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  API Gateway is now ready to log requests to your API. You don't need to redeploy the API when you update the stage settings, logs, or stage variables. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Setting up CloudWatch logging for a REST API in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Test your logging setup&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Send a new request to your API using your client application or a tool such as the Postman app or wscat (for WebSocket APIs). 
&lt;/div&gt; 
&lt;div&gt;
  2. In the CloudWatch console, in the left navigation pane, under Logs, choose Log Groups. 
&lt;/div&gt; 
&lt;div&gt;
  3. In the list of Log Groups, choose the log group of the API that you're debugging. 
&lt;/div&gt; 
&lt;div&gt;
  For a REST API, the log group's name is in this format: API-Gateway-Execution-Logs_apiId/stageName. 
&lt;/div&gt; 
&lt;div&gt;
  For a WebSocket API, the log group's name is in this format: /aws/apigateway/apiId/stageName. 
&lt;/div&gt; 
&lt;div&gt;
  Note: The access logs are located in the log group whose ARN you specified when you enabled access logging. 
&lt;/div&gt; 
&lt;div&gt;
  4. In the list of Log Streams, choose the logs stream with the latest Last Event Time to see messages with the execution or access details of your request. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.724">
              <output/>
            </source>
            <references>
              <reference name="How do I enable CloudWatch Logs for troubleshooting my API Gateway REST API or WebSocket API?" url="https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-cloudwatch-logs/"/>
              <reference name="View API Gateway log events in the CloudWatch console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/view-cloudwatch-log-events-in-cloudwatch-console.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW15" name="Enable APIs CloudWatch Metrics" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Monitor REST API execution with Amazon CloudWatch metrics 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can monitor API execution by using CloudWatch, which collects and processes raw data from API Gateway into readable, near-real-time metrics. These statistics are recorded for a period of 15 months so you can access historical information and gain a better perspective on how your web application or service is performing. By default, API Gateway metric data is automatically sent to CloudWatch in one-minute periods.The metrics reported by API Gateway provide information that you can analyze in different ways. The following list shows some common uses for the metrics that are suggestions to get you started: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Monitor the IntegrationLatency metrics to measure the responsiveness of the backend. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Monitor the Latency metrics to measure the overall responsiveness of your API calls. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Monitor the CacheHitCount and CacheMissCount metrics to optimize cache capacities to achieve a desired performance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can access CloudWatch using any of the following methods: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Amazon CloudWatch console 
&lt;/div&gt; 
&lt;div&gt;
  AWS CLI&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  CloudWatch API 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that detailed CloudWatch metrics are enabled for all APIs created with AWS API Gateway service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring REST API execution with Amazon CloudWatch metrics" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/monitoring-cloudwatch.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>You can use the API dashboard in the API Gateway Console to display the CloudWatch metrics of your deployed API in API Gateway. These are shown as a summary of API activity over time. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Examine API activities in the dashboard&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   1. Sign in to the API Gateway console at https://console.aws.amazon.com/apigateway. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   2. Choose the name of the API. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   3. Under the selected API, choose Dashboard. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   4. To display a summary of API activity over time, for Stage, choose the desired stage. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   5. Use From and To to enter the date range. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   6. Refresh, if needed, and view individual metrics displayed in separate graphs titled API Calls, Integration Latency, Latency, 4xx Error and 5xx Error. The CacheHitCount and CacheMissCount graphs will be displayed only if API caching has been enabled. 
 &lt;/div&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.724">
              <output/>
            </source>
            <references>
              <reference name="View CloudWatch metrics with the API dashboard in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-api-dashboard.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="12.10.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.1.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="3.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW6" name="Enable Content Encoding for API Responses" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Ensure APIs created with Amazon API Gateway have Content Encoding feature enabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Content encoding allows API clients to request content to be compressed before being sent back in the response to an API request. This reduces the amount of data that is sent from API Gateway to API clients and decreases the time it takes to transfer the data. You can enable content encoding in the API definition. You can also set the minimum response size that triggers compression. By default, APIs do not have content encoding support enabled.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To enable payload compression by using the API Gateway console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the API Gateway console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose an existing API or create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the primary navigation pane, choose Settings under the API you chose or the one you created. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under the Content Encoding section in the Settings pane, select the Content Encoding enabled option to enable payload compression. Enter a number for the minimum compression size (in bytes) next to Minimum body size required for compression. To disable the compression, clear the Content Encoding enabled option. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Save Changes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Another way is to use AWS CLI to create a new API and enable compression. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The compression types supported by Amazon API Gateway service are gzip, deflate and identity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Enable payload compression for an API" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-enable-compression.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that Content Encoding enable option is selected into the API Gateway console. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you want the compression applied on a payload of any size, set the minimumCompressionSize value to zero. However, compressing data of a small size might actually increase the final data size. Furthermore, compression in API Gateway and decompression in the client might increase overall latency and require more computing times. You should run test cases against your API to determine an optimal value. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Test a method with the API Gateway console&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   1. Sign in to the API Gateway console. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   2. Choose a REST API. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   3. In the Resources pane, choose the method you want to test. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   4. In the Method Execution pane, in the Client box, choose TEST. Type values in any of the displayed boxes (such as Query Strings, Headers, and Request Body). The console includes these values in the method request in default application/json form. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   For additional options you may need to specify, contact the API owner. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   5. Choose Test. The following information will be displayed: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Request is the resource's path that was called for the method.&lt;/li&gt; 
   &lt;li&gt;Status is the response's HTTP status code.&lt;/li&gt; 
   &lt;li&gt;Latency is the time between the receipt of the request from the caller and the returned response.&lt;/li&gt; 
   &lt;li&gt;Response Body is the HTTP response body.&lt;/li&gt; 
   &lt;li&gt;Response Headers are the HTTP response headers.&lt;/li&gt; 
   &lt;li&gt;Logs are the simulated Amazon CloudWatch Logs entries that would have been written if this method were called outside of the API Gateway console.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.724">
              <output/>
            </source>
            <references>
              <reference name="Enable payload compression for an API" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-enable-compression.html"/>
              <reference name="Use the API Gateway console to test a REST API method" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-test-method.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW11" name="Enable data encryption at rest in AWS API Gateway" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  If you choose to enable caching for a REST API, you can enable cache encryption. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  If you anticipate that a method that you are caching will receive sensitive data in its responses, in Cache Settings, choose Encrypt cache data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To configure API caching for individual methods using the console: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the API Gateway console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Go to the API Gateway console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose the API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Stages. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the Stages list for the API, expand the stage and choose a method in the API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Override for this method in Settings. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the Cache Settings area, you can set or clear Enable Method Cache or customize any other desired options. (This section is shown only if stage-level caching is enabled.) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Data encryption in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/data-protection-encryption.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Ensure that in Cache Settings, "Encrypt cache data" option is enabled into the API Gateway console. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.724">
              <output/>
            </source>
            <references>
              <reference name="Enabling API caching to enhance responsiveness" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="1.6" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="8.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW8" name="Enable request validation in API Gateway" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable request validation in API Gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  API Gateway can be configured to perform basic validation of an API request before proceeding with the integration request. When the validation fails, API Gateway immediately fails the request, returns a 400 error response to the caller, and publishes the validation results in CloudWatch Logs. This reduces unnecessary calls to the backend. More importantly, it lets you focus on the validation efforts specific to your application. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can set up request validators in an API's OpenAPI definition file and then import the OpenAPI definitions into API Gateway. You can also set them up in the API Gateway console or by calling the API Gateway REST API, the AWS CLI, or one of the AWS SDKs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Enable Request Validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html"/>
            <reference name="Enable request validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html"/>
            <reference name="Set up basic request validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-validation-set-up.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Test basic request validation using the API Gateway console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The following steps describe how to test basic request validation in the API Gateway console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test the request validation on a method using TestInvoke in the API Gateway console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  While signed in to the API Gateway console, do the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Resources for the API that you've configured a request validators map for. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose a method for which you have enabled the request validation with a specified request validator. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Method Execution, in the Client box, choose Test. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Try different values for required request parameter or applicable body, and then choose Test to see the response. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When the method call passes validation, you should get expected responses. If validation fails, the following error message returns if the payload is not the correct format: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; "message": "Invalid request body" 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt; 
&lt;div&gt;
  If the request parameters aren't valid, the following error message returns: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; "message": "Missing required request parameters: [p1]" 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.724">
              <output/>
            </source>
            <references>
              <reference name="Test basic request validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-validation-test.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW17" name="Review the use of stars in Lambda Authorizer's policyDocument objects" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;These are a few of our recommendations in decreasing order of priority to ensure your serverless APIs in AWS are not vulnerable to the problems described in this blog post:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the use of stars in the&amp;nbsp;&lt;i&gt;policyDocument&amp;nbsp;&lt;/i&gt;object. The rule of thumb is that if a star is used at all at the last part of the ARN, it should be in the form of a "/*" at the very end of the resource string (i.e.: "arn:aws:execute-api:us-west-1:12345678:myApiId/test/GET/foo/bar/*"). You can obtain the API ID, stage name and HTTP method dynamically from the input provided to the lambda authorizer. Create one resource string in the policy for each allowed HTTP method.&lt;/li&gt;&lt;li&gt;Consider adding Deny statements that help limit the impact or scope of star expansions on the&amp;nbsp;&lt;i&gt;policyDocument.&amp;nbsp;&lt;/i&gt;Remember that AWS IAM always gives precedence to Deny over Allow if multiple statements match an operation.&lt;/li&gt;&lt;li&gt;Whenever feasible, use defense in depth and check again that the user is authorized to call an endpoint in the lambda that implements it. Don't rely on the lambda authorizer policy as your only method of authorization unless you are sure you can do it securely.&lt;/li&gt;&lt;li&gt;Make sure any code imported from the previous version of the lambda authorizer blueprints is updated to the latest version.&lt;/li&gt;&lt;li&gt;If you use URL path parameters in your APIs, avoid cases where the valid values expected to be submitted to them can be chosen by potential attackers. Prefer backend-generated IDs instead of user-chosen names for entities, for example.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Implications of AWS API Gateway Lambda Authorizers and IAM Wildcard Expansion" url="https://www.tenchisecurity.com/blog/thefaultinourstars"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Imagine an API that needs to allow a user to access any HTTP verb on a single endpoint "/business/op". The developer might be tempted to write the &lt;i&gt;policyDocument&lt;/i&gt; as follows: "arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/*/business/op"&lt;/p&gt;&lt;p&gt;All of the following ARNs would be allowed by the example policy. But item 6 most likely would not be expected by a developer that read this part of the documentation.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/GET/business/op&lt;/li&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/PATCH/business/op&lt;/li&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/DELETE/business/op&lt;/li&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/PUT/business/op&lt;/li&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/POST/business/op&lt;/li&gt;&lt;li&gt;arn:aws:execute-api:us-west-1:12345678:myApiId/myStage/GET/foo/bar/business/op&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So having the HTTP verb as a star makes it so that the endpoint resource is no longer anchored to the beginning of the URL path.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.725">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW4" name="Rotate Expiring SSL Client Certificates" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Ensure that SSL certificates associated with API Gateway REST APIs are rotated periodically. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  The client certificate generated by API Gateway is valid for 365 days. You must rotate the certificate before a client certificate on an API stage expires to avoid any downtime for the API. You can check the expiration date of certificate by calling clientCertificate:by-id of the API Gateway REST API or the AWS CLI command of get-client-certificate and inspecting the returned expirationDate property. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To rotate a client certificate, do the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Generate a new client certificate by calling clientcertificate:generate of the API Gateway REST API or the AWS CLI command of generate-client-certificate. In this tutorial, we assume that the new client certificate ID is ndiqef. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Update the backend server to include the new client certificate. Don't remove the existing client certificate yet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Some servers might require a restart to finish the update. Consult the server documentation to see if you must restart the server during the update. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Update the API stage to use the new client certificate by calling stage:update of the API Gateway REST API, with the new client certificate ID (ndiqef): 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  PATCH /restapis/{restapi-id}/stages/stage1 HTTP/1.1 
&lt;/div&gt; 
&lt;div&gt;
  Content-Type: application/json 
&lt;/div&gt; 
&lt;div&gt;
  Host: apigateway.us-east-1.amazonaws.com 
&lt;/div&gt; 
&lt;div&gt;
  X-Amz-Date: 20170603T200400Z 
&lt;/div&gt; 
&lt;div&gt;
  Authorization: AWS4-HMAC-SHA256 Credential=... 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; "patchOperations" : [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "op" : "replace", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "path" : "/clientCertificateId", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "value" : "ndiqef" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; } 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; ] 
&lt;/div&gt; 
&lt;div&gt;
  }&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  or by calling the CLI command of update-stage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Update the backend server to remove the old certificate. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Delete the old certificate from API Gateway by calling the clientcertificate:delete of the API Gateway REST API, specifying the clientCertificateId (a1b2c3) of the old certificate: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  DELETE /clientcertificates/a1b2c3&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  or by calling the CLI command of delete-client-certificate: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  aws apigateway delete-client-certificate --client-certificate-id a1b2c3 
&lt;/div&gt; 
&lt;div&gt;
  To rotate a client certificate in the console for a previously deployed API, do the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the main navigation pane, choose Client Certificates. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  From the Client Certificates pane, choose Generate Client Certificate. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the API for which you want to use the client certificate. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Stages under the selected API and then choose a stage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the Stage Editor panel, select the new certificate under the Client Certificate section. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To save the settings, choose Save Changes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You need to redeploy the API for the changes to take effect. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Rotate an expiring client certificate" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>You can check the expiration date of certificate by calling clientCertificate:by-id of the API Gateway REST API or the AWS CLI command of get-client-certificate and inspecting the returned expirationDate property.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.724">
              <output/>
            </source>
            <references>
              <reference name="Rotate an expiring client certificate" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW13" name="Set up a stage for a REST API" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Set up a stage for a REST API 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  A stage is a named reference to a deployment, which is a snapshot of the API. You use a Stage to manage and optimize a particular deployment. For example, you can configure stage settings to enable caching, customize request throttling, configure logging, define stage variables, or attach a canary release for testing. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Create a new stage 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  After the initial deployment, you can add more stages and associate them with existing deployments. You can use the API Gateway console to create a new stage, or you can choose an existing stage while deploying an API. In general, you can add a new stage to an API deployment before redeploying the API. To create a new stage using the API Gateway console, follow these steps:. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the API Gateway console at https://console.aws.amazon.com/apigateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  From the APIs navigation pane, choose Stages under an API. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  From the Stages navigation pane, choose Create. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Create Stage, enter a stage name, for example, prod, for Stage name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Optionally, enter a stage description for Stage description. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  From the Deployment drop-down list, choose the date and time of the existing API deployment you want to associate with this stage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Setting up a stage for a REST API" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-stages.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  To see your Stages follow the steps below: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Sign in to the API Gateway console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the APIs pane, choose the API, and then choose Stages. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. In the Stages pane, choose the name of the stage. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.724">
              <output/>
            </source>
            <references>
              <reference name="Setting up a stage using the API Gateway console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/stages.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW2" name="Use AWS Secrets Manager to securely rotate, manage, and retrieve database credentials, API keys, and other secrets" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Securely rotate, manage, and retrieve database credentials, API keys, and other secrets. AWS recommends to use AWS Secrets Manager for this purpose.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;AWS Secrets Manager is a secrets management service that helps you protect access to your applications, services, and IT resources. This service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Using Secrets Manager, you can secure and manage secrets used to access resources in the AWS Cloud, on third-party services, and on-premises.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To get started with AWS Secrets Manager:&lt;/p&gt;&lt;p&gt;1. Identify your secrets and locate where they are used in your applications.&lt;/p&gt;&lt;p&gt;2. Sign in to the AWS Management Console using your AWS credentials and navigate to the Secrets Manager console.&lt;/p&gt;&lt;p&gt;3. Use the Secrets Manager console to upload the secret you identified. Alternatively, you can use the AWS SDK or AWS CLI to upload a secret (once per secret). You can also write a script to upload multiple secrets.&lt;/p&gt;&lt;p&gt;4. If your secret is not in use yet, follow the instructions on the console to configure automatic rotation. If applications are using your secret, complete steps (5) and (6) before configuring automatic rotation.&lt;/p&gt;&lt;p&gt;5. If other users or applications need to retrieve the secret, write an IAM policy to grant permissions to the secret.&lt;/p&gt;&lt;p&gt;6. Update your applications to retrieve secrets from Secrets Manager.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;You can configure Amazon CloudWatch Events to receive a notification when AWS Secrets Manager rotates a secret. You can also see when Secrets Manager last rotated a secret using the Secrets Manager console or APIs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.249">
              <output/>
            </source>
            <references>
              <reference name="AWS Secrets Manager FAQs" url="https://aws.amazon.com/secrets-manager/faqs/"/>
              <reference name="Get started with AWS Secrets Manager" url="https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW9" name="Use AWS Shield for DDoS protection" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS Shield for protection against most common DDoS attacks, and access to tools and best practices to build a DDoS resilient architecture. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield is a managed Distributed Denial of Service (DDoS) protection service that safeguards applications running on AWS. AWS Shield provides always-on detection and automatic inline mitigations that minimize application downtime and latency, so there is no need to engage AWS Support to benefit from DDoS protection. There are two tiers of AWS Shield - Standard and Advanced. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  All AWS customers benefit from the automatic protections of AWS Shield Standard, at no additional charge. AWS Shield Standard defends against most common, frequently occurring network and transport layer DDoS attacks that target your web site or applications. When you use AWS Shield Standard with Amazon CloudFront and Amazon Route 53, you receive comprehensive availability protection against all known infrastructure (Layer 3 and 4) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For higher levels of protection against attacks targeting your applications running on Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 resources, you can subscribe to AWS Shield Advanced. In addition to the network and transport layer protections that come with Standard, AWS Shield Advanced provides additional detection and mitigation against large and sophisticated DDoS attacks, near real-time visibility into attacks, and integration with AWS WAF, a web application firewall. AWS Shield Advanced also gives you 24x7 access to the AWS DDoS Response Team (DRT) and protection against DDoS related spikes in your Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), Amazon CloudFront, AWS Global Accelerator and Amazon Route 53 charges. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Shield Advanced is available globally on all Amazon CloudFront, AWS Global Accelerator, and Amazon Route 53 edge locations. You can protect your web applications hosted anywhere in the world by deploying Amazon CloudFront in front of your application. Your origin servers can be Amazon S3, Amazon Elastic Compute Cloud (EC2), Elastic Load Balancing (ELB), or a custom server outside of AWS. You can also enable AWS Shield Advanced directly on an Elastic IP or Elastic Load Balancing (ELB) in the following AWS Regions - Northern Virginia, Ohio, Oregon, Northern California, Montreal, Sao Paulo, Ireland, Frankfurt, London, Paris, Stockholm, Singapore, Tokyo, Sydney, Seoul, and Mumbai. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Enable AWS Shield. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Shield Managed DDoS protection" url="https://aws.amazon.com/shield/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How can I test AWS Shield?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Acceptable Use Policy describes permitted and prohibited behavior on AWS, and it includes descriptions of prohibited security violations and network abuse. However, because penetration testing and other simulated events are frequently indistinguishable from these activities, AWS has established a policy for customers to request permission to conduct penetration tests and vulnerability scans to or originating from the AWS environment. Visit AWS Penetration testing page to request permissions (see link in References). 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.724">
              <output/>
            </source>
            <references>
              <reference name="AWS Shield FAQs" url="https://aws.amazon.com/shield/faqs/"/>
              <reference name="Penetration Testing - Test the AWS environment against defined security standards" url="https://aws.amazon.com/security/penetration-testing/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.249">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW10" name="Use AWS WAF to protect APIs" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use AWS WAF to protect Amazon API Gateway APIs from common web exploits. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS WAF is a web application firewall that helps protect your web applications or APIs against common web exploits that may affect availability, compromise security, or consume excessive resources. AWS WAF gives you control over how traffic reaches your applications by enabling you to create security rules that block common attack patterns, such as SQL injection or cross-site scripting, and rules that filter out specific traffic patterns you define. You can get started quickly using Managed Rules for AWS WAF, a pre-configured set of rules managed by AWS or AWS Marketplace Sellers. The Managed Rules for WAF address issues like the OWASP Top 10 security risks. These rules are regularly updated as new issues emerge. AWS WAF includes a full-featured API that you can use to automate the creation, deployment, and maintenance of security rules. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that AWS Web Application Firewall (WAF) is integrated with Amazon API Gateway to protect your APIs from common web exploits such as SQL injection attacks, cross-site scripting (XSS) attacks and Cross-Site Request Forgery (CSRF) attacks that could affect API availability and performance, compromise API data security or consume excessive resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using AWS WAF to protect your APIs" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>To ensure that you don't accidentally configure AWS WAF to block web requests that you want to allow or allow requests that you want to block, AWS recommends that you test your web ACL thoroughly before you start using it on your website or web application. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can do this by: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Counting the web requests that match the rules in a web ACL&amp;nbsp;in an Amazon CloudWatch graph.&lt;/li&gt; 
  &lt;li&gt;Viewing a sample of web requests in the AWS WAF console.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.724">
              <output/>
            </source>
            <references>
              <reference name="Testing web ACLs" url="https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-testing.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW3" name="Use client-side SSL certificates for HTTP backend authentication" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use client-side SSL certificates for HTTP backend authentication within AWS API Gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Client-side SSL certificates can be used to verify that HTTP requests to your backend system are from API Gateway. It is strongly recommended to use client-side SSL certificates to verify the requester's authenticity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can use API Gateway to generate an SSL certificate and then use its public key in the backend to verify that HTTP requests to your backend system are from API Gateway. This allows your HTTP backend to control and accept only requests that originate from Amazon API Gateway, even if the backend is publicly accessible. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  Some backend servers might not support SSL client authentication as API Gateway does and could return an SSL certificate error. For a list of incompatible backend servers, see Amazon API Gateway important notes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The SSL certificates that are generated by API Gateway are self-signed, and only the public key of a certificate is visible in the API Gateway console or through the APIs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Generate and configure an SSL certificate for backend authentication" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
            <reference name="Rotate an expiring client certificate" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Test invoke to verify the client certificate configuration&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Choose an API method. In Client, choose Test. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. From Client Certificate, choose Test to invoke the method request. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  API Gateway presents the chosen SSL certificate for the HTTP backend to authenticate the API. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.724">
              <output/>
            </source>
            <references>
              <reference name="Rotate an expiring client certificate" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
              <reference name="Test invoke to verify the client certificate configuration" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.1-1.2-1.3" name="Use the principle of least privilege on key ownership and usage" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&amp;nbsp;&lt;br&gt;AWS Key Management Service (KMS) by default provides service Customer Managed Keys (CMK). Customers also have the ability to create CMKs, which allows for configuration of key rotation and key policy which is applied to the customer created CMK. You can use the key policy by itself to control who has access to the CMK and what actions each identity can perform. Controlling access this way specifies the full scope of access to the CMK in a single document (the key policy).Customer created CMKs can be used for:&amp;nbsp;&lt;br&gt;- AWS Service level encryption(e.g. EBS, RDS, S3).&amp;nbsp;&lt;br&gt;- Key management for file/application level encryption.&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Rationale&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Ensures principle of least privilege on key ownership and usage.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;Using the Amazon unified command line interface:&amp;nbsp;&lt;br&gt;- If there is no alias listed for Web tier, create a new KMS key and note the "KeyId" element:&lt;/p&gt; 
&lt;p&gt;aws kms create-key&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;- Create an alias for the Web tier key using the above KeyId:&amp;nbsp;&lt;br&gt;aws kms create-alias --alias-name &amp;lt;tier_kms_alias&amp;gt; --target-key-id &amp;lt;tier_kms_key&amp;gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI Command Reference:create-alias" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-alias.html"/>
            <reference name="AWS CLI Command Reference:create-key" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-key.html"/>
            <reference name="AWS CLI Command Reference:list-aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Run the following command via the Amazon unified command line interface to determine if a web-tier KMS key exists: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  aws kms list-aliases --query 'Aliases[?AliasName == '&amp;lt;web_tier_kms_alias&amp;gt;']' 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;If such a key exists, an AliasArnproperty will be displayed in the output.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:28.245">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authentication" name="Authentication" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authorization" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="CAPEC-39" name="Attacker gains access by manipulation of an authentication token or other sensitive data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;In circumstances in which an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) this data could potentially be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW17" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW17" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW1" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.10" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW1" mitigation="33"/>
                <countermeasure ref="AWS-API-GW2" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-IAM-2.10" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-ENCRYPTION-KEYS" name="Attackers obtain access to encryption keys and are able to decrypt ciphertext" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Cryptography is intrinsically related to the secure management of cryptographic keys which need to be protected and securely stored by applications. Leaking cryptographic keys diminishes any advantage of cryptography, allowing attackers to break message confidentiality and integrity, and to authenticate as legitimate users or impersonate legitimate services.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW13" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW13" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW11" mitigation="33"/>
                    <countermeasure ref="AWS-API-GW12" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-522">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW11" mitigation="33"/>
                <countermeasure ref="AWS-API-GW12" mitigation="33"/>
                <countermeasure ref="AWS-API-GW2" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW14" mitigation="34"/>
                    <countermeasure ref="AWS-API-GW15" mitigation="33"/>
                    <countermeasure ref="AWS-API-GW16" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW14" mitigation="34"/>
                <countermeasure ref="AWS-API-GW15" mitigation="33"/>
                <countermeasure ref="AWS-API-GW16" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-295">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW3" mitigation="25"/>
                    <countermeasure ref="AWS-API-GW4" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW6" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-326">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW7" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW3" mitigation="25"/>
                <countermeasure ref="AWS-API-GW4" mitigation="25"/>
                <countermeasure ref="AWS-API-GW6" mitigation="25"/>
                <countermeasure ref="AWS-API-GW7" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-248" name="An attacker injects new items into an existing command to execute a command of their choosing" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-77">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW8" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW10" mitigation="33"/>
                    <countermeasure ref="AWS-API-GW9" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW5" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW10" mitigation="33"/>
                <countermeasure ref="AWS-API-GW5" mitigation="34"/>
                <countermeasure ref="AWS-API-GW9" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="45e29082-ac55-486b-91c5-96cf1cf7e024" diagramComponentId="c1a1276f-411a-4aeb-818c-a4b605112c51" ref="88ead499-6db6-4ecb-96d9-363b587ed0d5" name="AWS Account Environment" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="amazon-web-services-environment">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-Logging-3.3" name="Audit logs are accesible" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The audit logs are not encrypted and they can be accessed by attackers and obtain sensitive data
                        in clear text.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.5" name="Brute force attempts on the Amazon management console cannot be detected" state="0" impact="100" issueId="" issueLink="">
          <desc>The failure connection attempts (brute force) must be audited and monitored and the
                        correspondent personnel must be alerted and informed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.12" name="Changes in the network configuration cannot be detected" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The changes in the network configurations (NACLs, route and gateway tables) are not detected
                        because the monitorization and alerts of the network configuration are not configured to detect
                        these changes.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.4" name="Changes in the security configurations can be not detected" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Monitoring and alerting for security configurations are not configured and changes cannot be
                        detected.&amp;nbsp;
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.10" name="Changes in the security groups cannot be detected" state="0" impact="100" issueId="" issueLink="">
          <desc>The changes in the security groups must be audited and monitored and the correspondent
                        personnel must approve these changes. If the situation is not the correct, attackers can access
                        to security systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="cloudwatch-misconfig" name="Cloudwatch is misconfigured" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-25T13:52:40.866">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Monitoring-4.3" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Login to the console without using the Multi-factor Authentication (MFA) and they are not
                        detected. The connection without the MFA must be audited and monitored, the correct security
                        group must be informed and they must validate this connection.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="LOST-SECURITY-ALERTS" name="Misconfigured Security contact details" state="0" impact="100" issueId="" issueLink="">
          <desc>The security contact details for the Azure subscription are not properly configured.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Access &amp;quot;Azure Security Center&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the &amp;quot;Recommendations&amp;quot; tab choose &amp;quot;Provide security
                            contact details&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that all fields are filled.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-24T14:48:15.193">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.1" name="Non-auditable API calls in all regions" state="0" impact="100" issueId="" issueLink="">
          <desc>The API call to the resources is not audited and the actions are not recorded into the logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.4" name="Non-auditable actions in the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The actions in the resources are not audited and not recorded in the logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.8" name="Non-centrality audit logs" state="0" impact="100" issueId="" issueLink="">
          <desc>The audit logs are not stored in a central system. Therefore, the audit logs cannot be
                        exploited correctly by the security personnel.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="LOST-ACCESS-ROOT-01" name="The Root Account is mis-configured" state="0" impact="100" issueId="" issueLink="">
          <desc>The administrator account is not configured. The security question to recover or reset the
                        password and the authentication method are not configured.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-24T14:48:26.301">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-1.21" name="The access keys are generated when the setup of the users is started" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The system doesn't require additional steps to create access keys, the access keys are
                        generating when the process to create an user is starting. The problem is that these keys can be
                        in use somewhere in the organization and maybe these keys are not necessary for the user.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.8" name="The access to the routing tables are not restricted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Being highly selective in peering routing tables is a very effective way of minimizing the
                        impact of breach as resources outside of these routes are inaccessible to the peered VPC.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-EXPIRATION-DATE" name="The password expiration is not established" state="0" impact="100" issueId="" issueLink="">
          <desc>The password expiration is not configured and users are not obliged to change their passwords.
                        Not change frequently the passwords gives facilities to attackers to obtain them.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.9" name="The security policies are exposed in the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The security policies are not configured and the security configurations are exposed for the
                        attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.7" name="Unaudited connections with the resources" state="0" impact="100" issueId="" issueLink="">
          <desc>The connections with the applications and with the databases cannot be audited and not
                        detected.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Logging-3.9" name="Unaudited resources changes" state="0" impact="100" issueId="" issueLink="">
          <desc>The changes in the applications and in the databases and these changes are not detected and
                        not audited.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards>
            <standard ref="1.22" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.685">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.12" name="Apply an AWS Managed Config Rule for EIPs attached to EC2 instances within VPC" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  AWS Config provides you with a detailed inventory of your AWS resources and their current configuration, and continuously records configuration changes to these resources. You can evaluate these configurations and changes for compliance with ideal configurations as defined by AWS Config Rules. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create locally a json file (similar with the below sample) with the configuration of the Config Rule, and save it as /tmp/ConfigRule.json:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Description": "Checks whether all EIP addresses allocated to a VPC are attached to 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    EC2 instances or in-use ENIs.", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "ConfigRuleName": "eip-attached", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Source": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Owner": "AWS", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "SourceIdentifier": "EIP_ATTACHED" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    }, 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Scope": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "ComplianceResourceTypes": [ 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "AWS::EC2::EIP" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    ] 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    } 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    } 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a Config Rule using the configuration saved earlier:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws configservice put-config-rule --config-rule file:///tmp/ConfigRule.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe config rules" url="https://docs.aws.amazon.com/cli/latest/reference/configservice/describe-config-rules.html"/>
            <reference name="Put config rule" url="https://docs.aws.amazon.com/cli/latest/reference/configservice/put-config-rule.html"/>
            <reference name="What is Config" url="https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html"/>
          </references>
          <standards>
            <standard ref="5.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Search for a Config Rule that checks whether all EIP addresses allocated to a VPC are attached to EC2 instances or in-use ENIs:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws configservice describe-config-rules --query "ConfigRules[?Source.SourceIdentifier== 'EIP_ATTACHED']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T16:48:26.094">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.3-2.4" name="Apply an IAM Role for Amazon EC2 Tier" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  An IAM role is similar to a user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Also, a role does not have any credentials (password or access keys) associated with it. Instead, if a user is assigned to a role, access keys are created dynamically and provided to the user.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use roles to delegate access to users, applications, or services that don't normally have access to your AWS resources. Applications must sign their API requests with AWS credentials. Therefore, if you are an application developer, you need a strategy for managing credentials for your applications that run on EC2 instances. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  IAM Roles for EC2 allow application running within an EC2 instance assume the role applied to the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If doesn't exist, create an instance profile for Web tier instances:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   aws iam create-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If doesn't exist, create an IAM role for the instance profile:&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Create a trust relationship policy document and save it locally as /tmp/TrustPolicy.json:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      { 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Version": "2012-10-17", 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Statement": [ 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Effect": "Allow", 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Principal": { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        "Service": "ec2.amazonaws.com" 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       }, 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Action": "sts:AssumeRole" 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      ] 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      } 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Create the IAM role using the above trust policy:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam create-role --role-name &amp;lt;web_tier_iam_role&amp;gt; --assume-role-policydocument file:///tmp/TrustPolicy.json 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Add the IAM role created to the Instance profile:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam add-role-to-instance-profile --role-name &amp;lt;web_tier_iam_role&amp;gt; --instanceprofile-name &amp;lt;web_tier_instance_profile&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Add role to instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/add-role-to-instance-profile.html"/>
            <reference name="Create instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-instance-profile.html"/>
            <reference name="Create role" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-role.html"/>
            <reference name="Describe instances" url="https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"/>
            <reference name="Get instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-instance-profile.html"/>
          </references>
          <standards>
            <standard ref="2.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all the Web tier EC2 instances, check if and which IAM instance profile they have attached, and note the name of the instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 describe-instances --filters Name=tag:&amp;lt;web_tier_tag&amp;gt;,Values=&amp;lt;web_tier_tag_value&amp;gt; --query "Reservations[*].Instances[*].{IamInstanceProfile:IamInstanceProfile, InstanceId:InstanceId}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the IAM role name used by the Web tier instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; --query "InstanceProfile.Roles[*].RoleName" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T13:47:29.298">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.1-2.2" name="Apply IAM Policy for EC2 IAM Roles for tier" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  By default, IAM users, groups, and roles have no access to AWS resources. IAM policies are the means by which privileges are granted to users, groups, or roles defined with AWS Identity Access Management. An IAM policy is a document that formally states one or more permissions using the following structure:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Actions: what actions are allowed (each AWS service has its own set of actions)&lt;/li&gt; 
  &lt;li&gt;Resources: which resources will be affected by the action&lt;/li&gt; 
  &lt;li&gt;Effect: what effect will be when the subject (user/group/roles) requests access Policies are documents that are created using JSON. A policy consists of one or more statements, each of which describes one set of permissions.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;b&gt;Remediation&lt;/b&gt;: 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    *Note: references to Web tier are also applicable to App tier 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt;
    Using the Amazon unified command line interface: 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If doesn't exist, create an instance profile for Web tier instances:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam create-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If doesn't exist, create an IAM role for the instance profile:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Create a trust relationship policy document and save it locally as /tmp/TrustPolicy.json:&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      { 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Version": "2012-10-17", 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      "Statement": [ 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Effect": "Allow", 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Principal": { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        "Service": "ec2.amazonaws.com" 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       }, 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       "Action": "sts:AssumeRole" 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      ] 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     } 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Create the IAM role using the above trust policy:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       aws iam create-role --role-name &amp;lt;web_tier_iam_role&amp;gt; --assume-role-policydocument file:///tmp/TrustPolicy.json 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Add the IAM role created to the Instance profile:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam add-role-to-instance-profile --role-name &amp;lt;web_tier_iam_role&amp;gt; --instanceprofile-name &amp;lt;web_tier_instance_profile&amp;gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If doesn't exist, create an IAM managed policy for Web tier instances, and note the policy ARN:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam create-policy --policy-name &amp;lt;iam_policy_name&amp;gt; --policy-document file://policy 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Attach the IAM policy created to the Web tier IAM role:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws iam attach-role-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; --rolename &amp;lt;web_tier_iam_role&amp;gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Add role to instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/add-role-to-instance-profile.html"/>
            <reference name="Attach role policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html"/>
            <reference name="Create instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-instance-profile.html"/>
            <reference name="Create policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-policy.html"/>
            <reference name="Create role" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-role.html"/>
            <reference name="Get instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-instance-profile.html"/>
            <reference name="Get policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-policy.html"/>
            <reference name="Get policy version" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-policy-version.html"/>
            <reference name="List attached role policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-attached-role-policies.html"/>
          </references>
          <standards>
            <standard ref="2.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the IAM role name used by the Web tier instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; --query "InstanceProfile.Roles[*].RoleName" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check managed policies attached to the IAM role, and note the policies ARN:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-attached-role-policies --role-name &amp;lt;web_tier_iam_role&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the version of the IAM policies attached to the IAM role:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; --query "Policy.DefaultVersionId" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the document policy:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-policy-version --policy-arn &amp;lt;iam_policy_arn&amp;gt; --version-id &amp;lt;iam_policy_version&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T13:34:12.746">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.3" name="Apply IAM roles" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications that run on an Amazon EC2/S3 instance need credentials in order to access other AWS services. To provide credentials to the application in a secure way, use IAM roles. A role is an entity that has its own set of permissions, but that isn't a user or group. Roles also don't have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2/S3, IAM dynamically provides temporary credentials to the EC2/S3 instance, and these credentials are automatically rotated for you. 
&lt;br /&gt; 
&lt;br /&gt;When you launch an EC2/S3 instance, you can specify a role for the instance as a launch parameter. Applications that run on the EC2/S3 instance can use the role's credentials when they access AWS resources. The role's permissions determine what the application is allowed to do. It is recommended that all EC2/S3 instances are launched with a role, even if the role has no permissions (as they can be added later if desired). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt; 
  &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Complete the wizard until step 3 at which point ensure an IAM role is selected for the &amp;quot;IAM role&amp;quot; option (note the role must already exist).&lt;/li&gt; 
  &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt; 
 &lt;/ol&gt;NB: You cannot add a role to an instance that has been launched without one. In these cases create an AMI from an existing instance and launch a new instance, assigning an IAM role as detailed above. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.18" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has an &amp;quot;IAM Role&amp;quot;
                            assigned (if a hyphen &amp;quot;-&amp;quot; is shown then your instance has no role
                            assigned).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.8" name="Apply RBAC with pre-defined policies added into groups or roles" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Instead of defining permissions for individual IAM users, it's usually more convenient to create groups that relate to job functions (administrators, developers, accounting, etc.), define the relevant permissions for each group, and then assign IAM users to those groups. All the users in an IAM group inherit the permissions assigned to the group. That way, you can make changes for everyone in a group in just one place. As people move around in your company, you can simply change what IAM group their IAM user belongs to. This method is know as Role Based Access Control (RBAC). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;Remove privilege granted directly to a user: 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Click on Users.&lt;/li&gt; 
  &lt;li&gt;For each user complete the following:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Select the user.&lt;/li&gt; 
   &lt;li&gt;Click on the Permissions tab.&lt;/li&gt; 
   &lt;li&gt;Expand &amp;quot;Managed Policies&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Click &amp;quot;Detach Policy&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Expand &amp;quot;Inline Policies&amp;quot;.&lt;/li&gt; 
   &lt;li&gt;Click &amp;quot;Remove Policy&amp;quot;.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ol&gt;Create a Group and add a user: 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Select Groups and click Create New Group.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Group Name box, type the name of the group and click Next Step.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the list of policies, select the check box for each policy that you want to apply to all members of the group. Click Next Step.&lt;/li&gt; 
  &lt;li&gt;Click Create Group.&lt;/li&gt; 
  &lt;li&gt;Click the new Group and select the &amp;quot;Users&amp;quot; tab.&lt;/li&gt; 
  &lt;li&gt;Click &amp;quot;Add Users to Group&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Select the users and click &amp;quot;Add Users&amp;quot;.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.15" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain a list of IAM users by: aws iam list-users --query 'Users[*].UserName'
                            --output text&lt;/li&gt;
                            &lt;li&gt;Run the following to determine if they have policies directly attached:&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws iam list-attached-user-policies --user-name user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            aws iam list-user-policies --user-name user
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.10" name="Apply setting MFA for sensitive API calls" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>To the extent that it is practical consider enforcing MFA access for sensitive API calls. For example, you can require that a user has authenticated with an MFA device in order to be allowed to terminate an Amazon EC2 instance. This ensures that such high level changes to your AWS environment are protected with an extra layer of security thus helping to prevent accidental or malicious damage. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;The following is an example of how to create a policy that enforces MFA to terminate EC2 instances: 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Select "Policies".&lt;/li&gt; 
  &lt;li&gt;Select "Create Policy".&lt;/li&gt; 
  &lt;li&gt;Select "Create your own policy".&lt;/li&gt; 
  &lt;li&gt;Provide a policy name and description.&lt;/li&gt; 
  &lt;li&gt;In the policy document add the following:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;i&gt; {&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Version": "2012-10-17",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Statement": [{&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Effect": "Allow",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Action": [&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "ec2:StopInstances",&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "ec2:TerminateInstances"&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; ],&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Resource": ["*"],&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; "Condition": {"Bool": {"aws:MultiFactorAuthPresent": "true"}}&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt; }]&lt;/i&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;i&gt;}&lt;/i&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click "Create policy".&lt;/li&gt; 
  &lt;li&gt;The policy may now be added to a group by following the outlines in "Use RBAC with pre-defined policies added into groups or roles".&lt;/li&gt; 
 &lt;/ul&gt; &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configuring MFA-Protected API Access" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_configure-api-require.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that MFA is forced on a policy:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                            &lt;li&gt;Go to IAM Service on the AWS Console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Policies&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;In the filter select &amp;quot;Customer Managed Policies&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select the policy to check.&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line: &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:MultiFactorAuthPresent&amp;quot;: &amp;quot;true&amp;quot;}}&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.5" name="Avoid API keys for root account" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>You use an access key (an access key ID and secret access key) to make programmatic requests to AWS. However, do not use your AWS account (root) access key. The access key for your AWS account gives full access to all your resources for all AWS services, including your billing information. You cannot restrict the permissions associated with your AWS account access key.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console as Root.&lt;/li&gt; 
  &lt;li&gt;Click on Account Name at the top left and select Security Credentials.&lt;/li&gt; 
  &lt;li&gt;On the pop up screen Click on Continue to Security Credentials.&lt;/li&gt; 
  &lt;li&gt;Click on Access Keys.&lt;/li&gt; 
  &lt;li&gt;Under the Status column if there are any Keys which are "Active".&lt;/li&gt; 
  &lt;li&gt;Click on "Make Inactive" and click "Delete".&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;Run the following command: aws iam get-credential-report --query 'Content'
                            --output text | base64 -D | egrep &amp;quot;root|access&amp;quot; | awk -F, '{print
                            $1,$9,$14}'&lt;/li&gt;
                            &lt;li&gt;For the &amp;lt;root_account&amp;gt; user ensure access_key_1_active and
                            access_key_2_active are false.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.3" name="Avoid publishing CloudTrail logs publicly" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Since cloudtrail logs capture all API calls for the AWS account they should be stored in an S3 bucket that is not accessible to the public. Applying the correct bucket policy helps ensure the confidentiality of the data. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with s3 update privileges).&lt;/li&gt; 
  &lt;li&gt;Select s3 from the services list.&lt;/li&gt; 
  &lt;li&gt;Right-click on the bucket you have used for "cloudtrail" and click "Properties".&lt;/li&gt; 
  &lt;li&gt;In the Properties pane, click the Permissions tab.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select the row that grants permission to "Everyone" or "Any Authenticated User".&lt;/li&gt; 
  &lt;li&gt;Uncheck all the permissions granted to Everyone or Any Authenticated User.&lt;/li&gt; 
  &lt;li&gt;Click Save to save the ACL.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If the Edit bucket policy button is present, click it.&lt;/li&gt; 
  &lt;li&gt;Remove any Statement having an Effect set to Allow and a Principal set to *.&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain the bucket name of the cloudtrail:&amp;nbsp;aws cloudtrail describe-trails
                            --query 'trailList[*].S3BucketName'&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;AllUsers&amp;quot; is not granted access to the bucket:&amp;nbsp;aws
                            s3api get-bucket-acl --bucket &amp;lt;bucket_name&amp;gt; --query
                            'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers`]'&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;Authenticated Users&amp;quot; is not granted access to the
                            bucket: aws s3api get-bucket-acl --bucket &amp;lt;bucket_name&amp;gt; --query
                            'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/Authenticated Users`]'&lt;/li&gt;
                            &lt;li&gt;Validate the bucket policy does not grant access to all:&amp;nbsp;aws s3api
                            get-bucket-policy --bucket &amp;lt;bucket_name&amp;gt;&lt;/li&gt;
                            &lt;li&gt;Check that the above command does not provide a principal of *, with EFFECT set to
                            ALLOW.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.703">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.5-2.6" name="Configure AutoScaling Group Launch Configuration for Tier to use a customer created IAM Role" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;An IAM role is similar to a user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Also, a role does not have any credentials (password or access keys) associated with it. Instead, if a user is assigned to a role, access keys are created dynamically and provided to the user.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use roles to delegate access to users, applications, or services that don't normally have access to your AWS resources. Applications must sign their API requests with AWS credentials. Therefore, if you are an application developer, you need a strategy for managing credentials for your applications that run on EC2 instances.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  IAM Roles for EC2 allow application running within an EC2 instance assume the role applied to the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  *Note: references to Web tier are also applicable to App tier. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create new launch configuration for the Web tier using the Web tier IAM instance profile :&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="Get instance profile" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-instance-profile.html"/>
          </references>
          <standards>
            <standard ref="2.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="2.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if your Web tier autoscaling group is using a launch configuration with an IAM instance profile configured:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt; --query "LaunchConfigurations[*].IamInstanceProfile" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check and note the IAM role name used by the Web tier instance profile:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-instance-profile --instance-profile-name &amp;lt;web_tier_instance_profile&amp;gt; --query "InstanceProfile.Roles[*].RoleName" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T13:55:23.427">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM1" name="Configure contact email and telephone details on AWS accounts" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organization.&lt;/p&gt;&lt;p&gt;An AWS account supports a number of contact details, and AWS will use these to contact the account owner if activity judged to be in breach of Acceptable Use Policy or indicative of likely security compromise is observed by the AWS Abuse team. Contact details should not be for a single individual, as circumstances may arise where that individual is unavailable. Email contact details should point to a mail alias which forwards email to multiple individuals within the organization; where feasible, phone contact details should point to a PABX hunt group or other call-forwarding system.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;If an AWS account is observed to be behaving in a prohibited or suspicious manner, AWS will attempt to contact the account owner by email and phone using the contact details listed. If this is unsuccessful and the account behavior needs urgent mitigation, proactive measures may be taken, including throttling of traffic between the account exhibiting suspicious behavior and the AWS API endpoints and the Internet. This will result in impaired service to and from the account in question, so it is in both the customers' and AWS' best interests that prompt contact can be established. This is best achieved by setting AWS account contact details to point to resources which have multiple individuals as recipients, such as email aliases and PABX hunt groups.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:*Billing ).&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.&lt;/li&gt;&lt;li&gt;On the navigation bar, choose your account name, and then choose My Account.&lt;/li&gt;&lt;li&gt;On the Account Settings page, next to Account Settings, choose Edit.&lt;/li&gt;&lt;li&gt;Next to the field that you need to update, choose Edit.&lt;/li&gt;&lt;li&gt;After you have entered your changes, choose Save changes.&lt;/li&gt;&lt;li&gt;After you have made your changes, choose Done.&lt;/li&gt;&lt;li&gt;To edit your contact information, under Contact Information, choose Edit.&lt;/li&gt;&lt;li&gt;For the fields that you want to change, type your updated information, and then choose Update.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:*Billing )&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.&lt;/li&gt;&lt;li&gt;On the navigation bar, choose your account name, and then choose My Account.&lt;/li&gt;&lt;li&gt;On the Account Settings page, review and verify the current details.&lt;/li&gt;&lt;li&gt;Under Contact Information, review and verify the current details.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.232">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.11" name="Configure password expiration" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Change access keys regularly, and make sure that all IAM users in your account do as well. That way, if an access key is compromised without your knowledge, you limit how long the credentials can be used to access your resources. Credential reports can be used to determine how long access keys have been active for. 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt; 
  &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt; 
  &lt;li&gt;Click on Users.&lt;/li&gt; 
  &lt;li&gt;Select the user you wish to rotate the key for.&lt;/li&gt; 
  &lt;li&gt;Under access keys click &amp;quot;Create Access Key&amp;quot; (do not touch the existing key yet).&lt;/li&gt; 
  &lt;li&gt;Click &amp;quot;Download credentials&amp;quot; or &amp;quot;Show credentials&amp;quot; so that you have a record of them.&lt;/li&gt; 
  &lt;li&gt;Update any applications with the new credentials and test (we recommend to leave a few days or a week for testing).&lt;/li&gt; 
  &lt;li&gt;Once complete complete 1-4 above and for the key which needs rotating click &amp;quot;Make Inactive | Delete&amp;quot; and click &amp;quot;Deactive&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Once you are confident you will no longer need the key (wait several more days) repeat 1-4 and select &amp;quot;Delete&amp;quot; for the inactive key.&lt;/li&gt; 
 &lt;/ol&gt; 
  &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;Check the access keys created time: aws iam get-credential-report --query
                            'Content' --output text | base64 -D | awk -F, '{print $1,$9,$10,$14,$15}'&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each access_key_1_active and access_key_9_active that is set to True ensure
                            the created date is within the last 90 days.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Gov-1.1" name="Configure the security challenge questions within the AWS Account" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When an AWS account is initially created it is configured with a top level account known as the &amp;quot;root&amp;quot; account that has full administration access to all resources. In the event that the password or MFA device associated with this account is lost AWS support may recover it by asking you to answer the security questions. 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt; 
  &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Scroll down to &amp;quot;Configure Security Challenge Questions&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Click on Edit.&lt;/li&gt; 
  &lt;li&gt;For each question:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Select an appropriate question.&lt;/li&gt; 
   &lt;li&gt;Enter an appropriate answer.&lt;/li&gt; 
   &lt;li&gt;Follow the above process for all 3 questions.&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;Click Update when complete.&lt;/li&gt; 
  &lt;li&gt;We recommend to store the questions and answers in a secure location such as a safe where they can be used in case recovery is required.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt;
                            &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Scroll down to &amp;quot;Configure Security Challenge Questions&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Confirm whether questions and answers have been saved.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.7" name="Create a Cloudwatch Alarm and its action for the &quot;VPC Flow Logs&quot; metric filter" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;div&gt;
   A Cloudwatch alarm watches a single metric over a time period you specify, and performs one or more actions based on the value of the metric relative to a given threshold over a number of time periods. The action is a notification sent to an Amazon SNS topic.&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   The Cloudwatch Alarm will trigger a notification being sent to the administrators every time the "REJECT packets" specified threshold is reached. The alarm should be created for the "VPC Flow Logs" metric, and the action should have a SNS topic configured.&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a Cloudwatch alarm for the VPC Flow Logs metric, and configure an Alarm Action:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws cloudwatch put-metric-alarm --alarm-name &amp;lt;vpc_flow_log_alarm_name&amp;gt; --alarm-actions &amp;lt;sns_topic_arn&amp;gt; --metric-name &amp;lt;vpc_flow_log_metric_name&amp;gt; --namespace LogMetrics --statistic &amp;lt;desired_statistic&amp;gt; --period &amp;lt;desired_period&amp;gt; --evaluation-periods &amp;lt;desired_evaluation_periods&amp;gt; --threshold &amp;lt;desired_threshold&amp;gt; --comparison-operator &amp;lt;desired_operator&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe alarms" url="https://docs.aws.amazon.com/cli/latest/reference/cloudwatch/describe-alarms.html"/>
            <reference name="Put metric alarm" url="https://docs.aws.amazon.com/cli/latest/reference/cloudwatch/put-metric-alarm.html"/>
          </references>
          <standards>
            <standard ref="4.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all the Cloudwatch alarms configured for the VPC Flow Logs metric, and check if an Alarm Action is configured:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudwatch describe-alarms --query "MetricAlarms[?MetricName =='&amp;lt;vpc_flow_log_metric_name&amp;gt;'].{MetricName:MetricName,AlarmActions:AlarmActions,AlarmName:AlarmName}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T15:51:42.064">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.6" name="Create a log metric filter for the Cloudwatch group assigned to the &quot;VPC Flow Logs&quot;" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Description:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  This recommendation builds upon the Foundation benchmark recommendation: "Ensure VPC Flow Logging is Enabled in all Applicable Regions"&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  VPC flow logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. Flow log data is stored using Amazon CloudWatch Logs. VPC flow logs can capture accepted traffic, rejected traffic, or all traffic.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Metric filters can be used to express how the service would extract metric observations from ingested events and transform them to data points in a CloudWatch metric. Metric filters are assigned to log groups, and all of the filters assigned to a log group are applied to their log streams.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A metric filter should be created for counting how many IP packets are rejected in the VPC flow logs.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a metric filter for the Cloudwatch Log group assigned to the "VPC Flow Logs":&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws logs put-metric-filter --log-group-name &amp;lt;vpc_flow_log_group_name&amp;gt; --filter-name &amp;lt;vpc_flow_log_filter_name&amp;gt; --filter-pattern "{ $.errorCode =\"AccessDenied\" }" --metric-transformations metricName= &amp;lt;vpc_flow_log_metric_name&amp;gt;,metricNamespace=LogMetrics,metricValue=1 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe metric filter" url="https://docs.aws.amazon.com/cli/latest/reference/logs/describe-metric-filters.html"/>
            <reference name="Filter log events" url="https://docs.aws.amazon.com/cli/latest/reference/logs/filter-log-events.html"/>
            <reference name="Put metric filter" url="https://docs.aws.amazon.com/cli/latest/reference/logs/put-metric-filter.html"/>
          </references>
          <standards>
            <standard ref="4.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface to check if the log metric filter: 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   aws logs describe-metric-filters --region &amp;lt;application_region&amp;gt; --log-group-name &amp;lt;vpc_flow_log_group_name&amp;gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T15:48:32.261">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.7" name="Create an IAM group for administration purposes" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;: 
&lt;div&gt; 
 &lt;br&gt; 
  An IAM group is a collection of IAM users. You can use groups to specify permissions for a collection of users, which can make those permissions easier to manage for those users. For example, you could have a group called Admins and give that group the types of permissions that administrators typically need. Any user in that group automatically has the permissions that are assigned to the group. If a new user joins your organization and should have administrator privileges, you can assign the appropriate permissions by adding the user to that group. Similarly, if a person changes jobs in your organization, instead of editing that user's permissions, you can remove him or her from the old groups and add him or her to the appropriate new groups. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a new IAM group for administration purposes:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam create-group --group-name &amp;lt;iam_admin_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Attach the Admin policy to the administration IAM group:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam attach-group-policy --policy-arn &amp;lt;admin_policy_arn&amp;gt; --group-name &amp;lt;iam_admin_group_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Impact&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  The name of the IAM admin group name should be known prior to auditing this recommendation. For a sample admin policy arn see recommendation 2.1. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Attach group policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-group-policy.html"/>
            <reference name="Create groups" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-group.html"/>
            <reference name="List groups" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-groups.html"/>
          </references>
          <standards>
            <standard ref="2.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the IAM groups created for administration purposes:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-groups --query "Groups[?GroupName == '&amp;lt;iam_admin_group_name&amp;gt;']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T13:59:51.981">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-2.8" name="Create an IAM policy that allows admin privileges for all services used" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  A policy is a document that formally states one or more permissions.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Managed policies are standalone policies that you can attach to multiple users, groups, and roles in your AWS account. Managed policies apply only to identities (users, groups, and roles) - not resources. You must ensure that you have an IAM managed policy created with admin permissions for all the AWS services used by the application. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create an IAM managed admin policy for all AWS services used:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws iam create-policy --policy-name &amp;lt;admin_policy_name&amp;gt; --policy-document file://policy 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;br&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;b&gt;Impact&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  The admin policy should be defined prior to auditing and remediating this recommendation. For a sample admin policy see recommendation 2.1. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/create-policy.html"/>
            <reference name="Get policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/get-policy.html"/>
            <reference name="List policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html"/>
          </references>
          <standards>
            <standard ref="2.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the IAM admin policies and note the policy ARN and DefaultVersionId:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam list-policies --query "Policies[?PolicyName == '&amp;lt;admin_policy_name&amp;gt;']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;If the policy exists, check the policy document:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws iam get-policy-version --policy-arn &amp;lt;admin_policy_arn&amp;gt; --version-id &amp;lt;admin_policy_version&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T14:02:44.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-1.20" name="Create an IAM role for managing incidents with AWS" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>WS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;b&gt;Remediation:&lt;/b&gt; 
&lt;br /&gt;Using the Amazon unified command line interface, create an IAM role for managing incidents with AWS: 
&lt;br /&gt; 
&lt;br /&gt;Create a trust relationship policy document that allows &amp;lt;iam_user&amp;gt; to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json: 
&lt;br /&gt; 
&lt;br /&gt;{ 
&lt;br /&gt;&amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, 
&lt;br /&gt;&amp;quot;Statement&amp;quot;: [{ 
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, 
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;Principal&amp;quot;: { 
&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;AWS&amp;quot;: &amp;quot;&amp;lt;iam_user&amp;gt;&amp;quot; 
&lt;br /&gt;&amp;nbsp; }, 
&lt;br /&gt;&amp;nbsp; &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRole&amp;quot; 
&lt;br /&gt;&amp;nbsp; }] 
&lt;br /&gt;} 
&lt;br /&gt; 
&lt;br /&gt;Create the IAM role using the above trust policy: 
&lt;br /&gt; 
&lt;br /&gt;aws iam create-role --role-name &amp;lt;aws_support_iam_role&amp;gt; --assume-role-policy-document file:///tmp/TrustPolicy.json 
&lt;br /&gt; 
&lt;br /&gt;Attach 'AWSSupportAccess' managed policy to the created IAM role: 
&lt;br /&gt; 
&lt;br /&gt;aws iam attach-role-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; --role-name &amp;lt;aws_support_iam_role&amp;gt; 
&lt;br /&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: attach role policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html"/>
            <reference name="Amazon docs: list entities for policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-entities-for-policy.html"/>
            <reference name="Amazon docs: list policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html"/>
            <reference name="Amazon docs: managed policies and inline policies" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html"/>
            <reference name="Attach role policy" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html"/>
            <reference name="List policies" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html"/>
          </references>
          <standards>
            <standard ref="1.17" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface: 
            &lt;br /&gt; 
            &lt;div&gt; 
             &lt;ul&gt; 
              &lt;li&gt;List IAM policies, filter for the 'AWSSupportAccess' managed policy, and note the &amp;quot;Arn&amp;quot; element value: &lt;/li&gt; 
             &lt;/ul&gt; 
            &lt;/div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; aws iam list-policies --query &amp;quot;Policies[?PolicyName == 'AWSSupportAccess']&amp;quot; 
            &lt;br /&gt; 
            &lt;div&gt; 
             &lt;ul&gt; 
              &lt;li&gt;Check if the 'AWSSupportAccess' is attached to any IAM user, group or role: &lt;/li&gt; 
             &lt;/ul&gt; 
            &lt;/div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; aws iam list-entities-for-policy --policy-arn &amp;lt;iam_policy_arn&amp;gt; 
            &lt;span style=" , Arial;"&gt;&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.720">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.026">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Monitoring-3" name="Create AWS Organizations change alerts" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for AWS Organizations changes made in the master AWS Account.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Monitoring AWS Organizations changes can help you prevent any unwanted, accidental or intentional modifications that may lead to unauthorized access or other security breaches. This monitoring technique helps you to ensure that any unexpected changes performed within your AWS Organizations can be investigated and any unwanted changes can be rolled back.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the following to setup the metric filter, alarm, SNS topic, and subscription:&lt;/p&gt;&lt;p&gt;1. Create a metric filter based on filter pattern provided which checks for AWS Organizations changes and the &amp;lt;cloudtrail_log_group_name&amp;gt; taken from audit step 1:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs put-metric-filter --log-group-name &amp;lt;cloudtrail_log_group_name&amp;gt; --filter-name `&amp;lt;organizations_changes&amp;gt;` --metric-transformations metricName= `&amp;lt;organizations_changes&amp;gt;` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = organizations.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = "AcceptHandshake") || ($.eventName = "AttachPolicy") || ($.eventName = "CreateAccount") || ($.eventName = "CreateOrganizationalUnit") || ($.eventName = "CreatePolicy") || ($.eventName = "DeclineHandshake") || ($.eventName = "DeleteOrganization") || ($.eventName = "DeleteOrganizationalUnit") || ($.eventName = "DeletePolicy") || ($.eventName = "DetachPolicy") || ($.eventName = "DisablePolicyType") || ($.eventName = "EnablePolicyType") || ($.eventName = "InviteAccountToOrganization") || ($.eventName = "LeaveOrganization") || ($.eventName = "MoveAccount") || ($.eventName = "RemoveAccountFromOrganization") || ($.eventName = "UpdatePolicy") || ($.eventName = "UpdateOrganizationalUnit")) }'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.&lt;/p&gt;&lt;p&gt;2. Create an SNS topic that the alarm will notify:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the same topic for all monitoring alarms.&lt;/p&gt;&lt;p&gt;3. Create an SNS subscription to the topic created in step 2:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.&lt;/p&gt;&lt;p&gt;4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch put-metric-alarm --alarm-name `&amp;lt;organizations_changes&amp;gt;` --metric-name `&amp;lt;organizations_changes&amp;gt;` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.15" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:&lt;/p&gt;&lt;p&gt;1. Identify the log group name configured for use with active multi-region CloudTrail:&lt;/p&gt;&lt;p&gt;List all CloudTrails:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail describe-trails&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Identify Multi region Cloudtrails: Trails with "IsMultiRegionTrail" set to true&lt;/p&gt;&lt;p&gt;From value associated with CloudWatchLogsLogGroupArn note &amp;lt;cloudtrail_log_group_name&amp;gt;&lt;/p&gt;&lt;p&gt;Example: for CloudWatchLogsLogGroupArn that looks like arn:aws:logs:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:log-group:NewGroup:*, &amp;lt;cloudtrail_log_group_name&amp;gt; would be NewGroup&lt;/p&gt;&lt;p&gt;Ensure Identified Multi region CloudTrail is active&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-trail-status --name &amp;lt;Name of a Multi-region CloudTrail&amp;gt; ensure IsLogging is set to TRUE&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure identified Multi-region Cloudtrail captures all Management Events&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --trail-name &amp;lt;trailname shown in describe-trails&amp;gt; Ensure there is at least one Event Selector for a Trail with IncludeManagementEvents set to true and ReadWriteType set to All&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Get a list of all associated metric filters for this &amp;lt;cloudtrail_log_group_name&amp;gt;:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs describe-metric-filters --log-group-name "&amp;lt;cloudtrail_log_group_name&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. Ensure the output from the above command contains the following:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Filter = {(($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")) &amp;amp;&amp;amp; (($.sourceIPAddress!="delivery.logs.amazonaws.com") &amp;amp;&amp;amp; ($.eventName!="HeadBucket"))}"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. Note the &amp;lt;unauthorized_api_calls_metric&amp;gt; value associated with the filterPattern found in step 3.&lt;/p&gt;&lt;p&gt;5. Get a list of CloudWatch alarms and filter on the &amp;lt;unauthorized_api_calls_metric&amp;gt; captured in step 4.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== `&amp;lt;unauthorized_api_calls_metric&amp;gt;`]'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;6. Note the AlarmActions value - this will provide the SNS topic ARN value.&lt;/p&gt;&lt;p&gt;7. Ensure there is at least one active subscriber to the SNS topic&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;at least one subscription should have "SubscriptionArn" with valid aws ARN.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Example of valid "SubscriptionArn": "arn:aws:sns:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:&amp;lt;SnsTopicName&amp;gt;:&amp;lt;SubscriptionID&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.359">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.8" name="Create billing alerts to identify unusual spend" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By setting billing alarms you can monitor your AWS spend and be alerted if it exceeds certain thresholds thus protecting you from accruing unnecessary charges. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;On the navigation pane, choose Preferences.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select the Receive Billing Alerts check box.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Choose Save preferences.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;If necessary, change the region on the navigation bar to US East (N. Virginia). The billing metric data is stored in this region, even for resources in other regions.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;On the navigation pane, under "Metrics", choose "Billing".&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the list of billing metrics, select the check box next to Currency USD, for the metric named EstimatedCharges. Define the alarm as follows:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;If you want the alarm to trigger as soon as you go over the free tier, set "When my total AWS charges for the month exceed" to $.01. This means that you'll receive a notification as soon as you incur a charge. Otherwise, set it to the amount you want to trigger the alarm, and you will be notified when you go over that amount.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Choose the "New list" link next to the "send a notification to" box.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;When prompted, enter your email address or choose your Amazon SNS notification from the drop down.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Choose "Create Alarm".&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;In the "Confirm new email addresses" dialog box, confirm the email address or choose "I will do it later". If you don't confirm the email address now, the alarm remains in the Pending confirmation status until you do so, and does not send an alert. To view the status of your alarm, choose "Alarms" in the navigation panel.&lt;/li&gt; 
 &lt;/ol&gt; &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console and open the Billing and Cost Management
                            console at https://console.aws.amazon.com/billing/home#/.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the navigation pane, choose Preferences.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the &amp;quot;Receive Billing Alerts&amp;quot; check box is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If necessary, change the region on the navigation bar to US East (N. Virginia).
                            The billing metric data is stored in this region, even for resources in other regions.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the navigation pane, under &amp;quot;Alarms&amp;quot;, check for one called
                            &amp;quot;Billing&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on the alert if it exists and select the checkbox in the first column.&lt;/li&gt;
                            &lt;li&gt;In the preview pane check that the &amp;quot;EstimatedCharges&amp;quot; threshold
                            is set to the correct value and that the &amp;quot;Actions&amp;quot; is send an alarm to a
                            valid email address.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.4" name="Create cloudtrail configuration changes alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is changes to
                        cloudtrail. Since cloudtrail is the actual utility logging API calls it's security is paramount
                        to ensuring that this continues. Therefore alerting on changes to cloudtrail activity can
                        prevent a malicious user switching off the logging in order to carry out untracked activities.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&amp;nbsp;&amp;nbsp;&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                        &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;aws
                        logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                        ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) ||
                        ($.eventName = StartLogging) || ($.eventName = StopLogging) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4: aws
                        cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                        &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                        list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.5" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName =
                            DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.4-5.5" name="Create Cloudwatch Log Group for tier" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  AWS CloudWatch Log groups define groups of log streams that share the same retention, monitoring, and access control settings. Each log stream has to belong to one log group.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.&lt;/li&gt; 
  &lt;li&gt;The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation&lt;/b&gt;: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Using the Amazon unified command line interface: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a Cloudwatch log group for the Web tier:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws logs create-log-group --log-group-name &amp;lt;web_tier_log_group&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create log groups" url="https://docs.aws.amazon.com/cli/latest/reference/logs/create-log-group.html"/>
            <reference name="Describe log groups" url="https://docs.aws.amazon.com/cli/latest/reference/logs/describe-log-groups.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.5" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Search for your Web tier Cloudwatch log group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws logs describe-log-groups --query "logGroups[?logGroupName =='&amp;lt;web_tier_log_group&amp;gt;']" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T16:24:18.287">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.6" name="Create IAM Policy change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried to identify suspicious API activity. One such activity that should be monitored is management IAM policy changes. IAM manages authorization and authentication controls with AWS and therefore it is vital that unauthorized changes are detected. Enabling monitoring of these changes ensures that these policies remain intact and as desired. 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a metric filter that checks for IAM policy changes: aws logs put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=Delete UserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=P utUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=Cr eatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)| |($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUs erPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an SNS subscription to the topic created above:aws sns subscribe --topic-arn &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt; 
 &lt;/ol&gt; &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource
                            = kms.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))} }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.713">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.3" name="Create management console login alerts when MFA is not used" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is login on the
                        console without MFA. Since logging on at the console should be restricted to only those users
                        with an active MFA this alert will highlight those with password only access. This helps to
                        capture weaker login procedures (password only) as they occur.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for console login without MFA: aws logs
                        put-metric-filter --log-group-name &amp;lt;cloudwatch-logs-group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{
                        $.userIdentity.sessionContext.attributes.mfaAuthenticated != &amp;quot;true&amp;quot; }'&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;
                            aws logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ $.userIdentity.sessionContext.attributes.mfaAuthenticated != &amp;quot;true&amp;quot;
                            }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.5" name="Create management console login failure alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is management
                        console login failures. The management console is the AWS account GUI where administration
                        activity is performed and is therefore a primary target for brute force attempts. To identify
                        these attempts alerts for login failures should be enabled as this can highlight suspicious
                        activity.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for console login failures: aws logs
                        put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = ConsoleLogin)
                        &amp;amp;&amp;amp; ($.errorMessage = &amp;quot;Failed authentication&amp;quot;) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.6" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = ConsoleLogin) &amp;amp;&amp;amp; ($.errorMessage = \&amp;quot;Failed
                            authentication\&amp;quot;) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Monitoring-2" name="Create network gateways change alerts" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.&lt;/p&gt;&lt;p&gt;Perform the following to setup the metric filter, alarm, SNS topic, and subscription:&lt;/p&gt;&lt;p&gt;1. Create a metric filter based on filter pattern provided which checks for network gateways changes and the &amp;lt;cloudtrail_log_group_name&amp;gt; taken from audit step 1.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs put-metric-filter --log-group-name &amp;lt;cloudtrail_log_group_name&amp;gt; --filter-name `&amp;lt;network_gw_changes_metric&amp;gt;` --metric-transformations metricName= `&amp;lt;network_gw_changes_metric&amp;gt;` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) ||($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.&lt;/p&gt;&lt;p&gt;2. Create an SNS topic that the alarm will notify&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the same topic for all monitoring alarms.&lt;/p&gt;&lt;p&gt;3. Create an SNS subscription to the topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.&lt;/p&gt;&lt;p&gt;4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch put-metric-alarm --alarm-name `&amp;lt;network_gw_changes_alarm&amp;gt;` --metric-name `&amp;lt;network_gw_changes_metric&amp;gt;` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.12" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:&lt;/p&gt;&lt;p&gt;1. Identify the log group name configured for use with active multi-region CloudTrail:&lt;/p&gt;&lt;p&gt;List all CloudTrails:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail describe-trails&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Identify Multi region Cloudtrails: Trails with "IsMultiRegionTrail" set to true&lt;/p&gt;&lt;p&gt;From value associated with CloudWatchLogsLogGroupArn note &amp;lt;cloudtrail_log_group_name&amp;gt;&lt;/p&gt;&lt;p&gt;Example: for CloudWatchLogsLogGroupArn that looks like arn:aws:logs:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:log-group:NewGroup:*, &amp;lt;cloudtrail_log_group_name&amp;gt; would be NewGroup&lt;/p&gt;&lt;p&gt;Ensure Identified Multi region CloudTrail is active&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-trail-status --name &amp;lt;Name of a Multi-region CloudTrail&amp;gt; ensure IsLogging is set to TRUE&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure identified Multi-region Cloudtrail captures all Management Events&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --trail-name &amp;lt;trailname shown in describe-trails&amp;gt; Ensure there is at least one Event Selector for a Trail with IncludeManagementEvents set to true and ReadWriteType set to All&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Get a list of all associated metric filters for this &amp;lt;cloudtrail_log_group_name&amp;gt;:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs describe-metric-filters --log-group-name "&amp;lt;cloudtrail_log_group_name&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. Ensure the output from the above command contains the following:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Filter = {(($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")) &amp;amp;&amp;amp; (($.sourceIPAddress!="delivery.logs.amazonaws.com") &amp;amp;&amp;amp; ($.eventName!="HeadBucket"))}"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. Note the &amp;lt;unauthorized_api_calls_metric&amp;gt; value associated with the filterPattern found in step 3.&lt;/p&gt;&lt;p&gt;5. Get a list of CloudWatch alarms and filter on the &amp;lt;unauthorized_api_calls_metric&amp;gt; captured in step 4.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== `&amp;lt;unauthorized_api_calls_metric&amp;gt;`]'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;6. Note the AlarmActions value - this will provide the SNS topic ARN value.&lt;/p&gt;&lt;p&gt;7. Ensure there is at least one active subscriber to the SNS topic&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;at least one subscription should have "SubscriptionArn" with valid aws ARN.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Example of valid "SubscriptionArn": "arn:aws:sns:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:&amp;lt;SnsTopicName&amp;gt;:&amp;lt;SubscriptionID&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.344">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.2" name="Create root account usage alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is usage of the
                        root account. This account should not be used on a day to day basis due to its full unrestricted
                        privilege therefore usage should be by exception. Monitoring this usage should capture any
                        suspicious activity used on the account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                        &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                        &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws logs
                        describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                        &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                        $.userIdentity.type = \&amp;quot;Root\&amp;quot; &amp;amp;&amp;amp; $.userIdentity.invokedBy NOT
                        EXISTS &amp;amp;&amp;amp; $.eventType != \&amp;quot;AwsServiceEvent\&amp;quot; } &amp;quot;&lt;/li&gt;
                        &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4: aws
                        cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                        &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                        list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            $.userIdentity.type = \&amp;quot;Root\&amp;quot; &amp;amp;&amp;amp; $.userIdentity.invokedBy
                            NOT EXISTS &amp;amp;&amp;amp; $.eventType != \&amp;quot;AwsServiceEvent\&amp;quot; } &amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.8" name="Create s3 bucket policy change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried to identify suspicious API activity. One such activity that should be monitored is S3 bucket policy changes. S3 bucket policies are a resource based policy that provide authorizations on S3 buckets. 
&lt;div&gt; 
 &lt;br /&gt; 
  Making sure that their integrity remains intact is vital in ensuring the data within the S3 bucket remains secure and authorizations intact. Therefore s3 bucket policy changes should be alerted upon 
 &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a metric filter that checks for S3 Bucket policy changes:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws logs put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;value&amp;gt; --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventSource = s3.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an SNS topic for notifications:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws sns create-topic --name &amp;lt;topic_name&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an SNS subscription to the topic created above&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws sns subscribe --topic-arn &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudwatch put-metric-alarm --alarm-name &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/blockquote&gt; 
&lt;div&gt;
  &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.8" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;:&amp;nbsp;
                            aws logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventSource = s3.amazonaws.com) &amp;amp;&amp;amp; (($.eventName = PutBucketAcl) ||
                            ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName =
                            PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName =
                            DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName =
                            DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.10" name="Create security group change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried to identify suspicious API activity. One such activity that should be monitored is security group changes. Security groups are analogous to firewalls and therefore protect inbound and outbound access to &amp;amp; from AWS resources such as ec2 instances and RDS databases (amongst other things. Therefore alerting on changes to security groups helps ensure that the resources protected by them are not exposed.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Create a metric filter that checks for security group changes: aws logs put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup)}'&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt; 
  &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.10" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName =
                            AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName
                            = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName =
                            DeleteSecurityGroup)}&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Monitoring-1" name="Create unauthorized API calls alerts" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.&lt;/p&gt;&lt;p&gt;If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.&lt;/p&gt;&lt;p&gt;In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the following to setup the metric filter, alarm, SNS topic, and subscription:&lt;/p&gt;&lt;p&gt;1. Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the &amp;lt;cloudtrail_log_group_name&amp;gt; taken from audit step 1.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs put-metric-filter --log-group-name &amp;lt;cloudtrail_log_group_name&amp;gt; --filter-name `&amp;lt;unauthorized_api_calls_metric&amp;gt;` --metric-transformations metricName= `&amp;lt;unauthorized_api_calls_metric&amp;gt;` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") || ($.sourceIPAddress!="delivery.logs.amazonaws.com") || ($.eventName!="HeadBucket") }'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.&lt;/p&gt;&lt;p&gt;2. Create an SNS topic that the alarm will notify&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the same topic for all monitoring alarms.&lt;/p&gt;&lt;p&gt;3. Create an SNS subscription to the topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.&lt;/p&gt;&lt;p&gt;4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch put-metric-alarm --alarm-name `&amp;lt;unauthorized_api_calls_alarm&amp;gt;` --metric-name `&amp;lt;unauthorized_api_calls_metric&amp;gt;` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:&lt;/p&gt;&lt;p&gt;1. Identify the log group name configured for use with active multi-region CloudTrail:&lt;/p&gt;&lt;p&gt;List all CloudTrails:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail describe-trails&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Identify Multi region Cloudtrails: Trails with "IsMultiRegionTrail" set to true&lt;/p&gt;&lt;p&gt;From value associated with CloudWatchLogsLogGroupArn note &amp;lt;cloudtrail_log_group_name&amp;gt;&lt;/p&gt;&lt;p&gt;Example: for CloudWatchLogsLogGroupArn that looks like arn:aws:logs:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:log-group:NewGroup:*, &amp;lt;cloudtrail_log_group_name&amp;gt; would be NewGroup&lt;/p&gt;&lt;p&gt;Ensure Identified Multi region CloudTrail is active&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-trail-status --name &amp;lt;Name of a Multi-region CloudTrail&amp;gt; ensure IsLogging is set to TRUE&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure identified Multi-region Cloudtrail captures all Management Events&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --trail-name &amp;lt;trailname shown in describe-trails&amp;gt; Ensure there is at least one Event Selector for a Trail with IncludeManagementEvents set to true and ReadWriteType set to All&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Get a list of all associated metric filters for this &amp;lt;cloudtrail_log_group_name&amp;gt;:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws logs describe-metric-filters --log-group-name "&amp;lt;cloudtrail_log_group_name&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. Ensure the output from the above command contains the following:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;"Filter = {(($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")) &amp;amp;&amp;amp; (($.sourceIPAddress!="delivery.logs.amazonaws.com") &amp;amp;&amp;amp; ($.eventName!="HeadBucket"))}"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. Note the &amp;lt;unauthorized_api_calls_metric&amp;gt; value associated with the filterPattern found in step 3.&lt;/p&gt;&lt;p&gt;5. Get a list of CloudWatch alarms and filter on the &amp;lt;unauthorized_api_calls_metric&amp;gt; captured in step 4.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== `&amp;lt;unauthorized_api_calls_metric&amp;gt;`]'&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;6. Note the AlarmActions value - this will provide the SNS topic ARN value.&lt;/p&gt;&lt;p&gt;7. Ensure there is at least one active subscriber to the SNS topic&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;at least one subscription should have "SubscriptionArn" with valid aws ARN.&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Example of valid "SubscriptionArn": "arn:aws:sns:&amp;lt;region&amp;gt;:&amp;lt;aws_account_number&amp;gt;:&amp;lt;SnsTopicName&amp;gt;:&amp;lt;SubscriptionID&amp;gt;"&lt;/p&gt;&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.329">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.13" name="Create VPC gateway change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC gateway
                        changes. VPC gateways are used as a means of sending traffic outside of a VPC (ie to the
                        internet) and are vital in ensuring traffic flows to the correct destination. Therefore alerting
                        on changes to VPC gateways ensuring traffic continues to flow as expected via the correct
                        gateway.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for VPC gateway changes: aws logs put-metric-filter
                        --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric-
                        transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateCustomerGateway)
                        || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) ||
                        ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName =
                        DetachInternetGateway) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.14" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following: &amp;quot;filterPattern&amp;quot;: &amp;quot;{
                            ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) ||
                            ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) ||
                            ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.11" name="Create VPC NACL change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC NACL
                        changes. Network Access Control Lists (NACLS) control inbound and outbound access to &amp;amp;
                        from AWS subnets and work like packet filters to protect the network. Therefore alerting on
                        changes to NACLS helps ensure that the subnets protected by them are not exposed.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for NACL changes: aws logs put-metric-filter
                        --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt; --metric-
                        transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateNetworkAcl) ||
                        ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =
                        DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName =
                        ReplaceNetworkAclAssociation) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.11" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) ||
                            ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName =
                            ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.12" name="Create VPC route table change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is VPC route
                        table changes. VPC route tables provide a means of routing network traffic between subnets and
                        via gateways and ensures traffic flows via the correct path. Therefore alerting on changes to
                        route tables ensuring traffic continues to flow as expected.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Create a metric filter that checks for VPC route table changes: aws logs
                        put-metric-filter --log-group-name &amp;lt;group&amp;gt; --filter-name &amp;lt;name&amp;gt;
                        --metric- transformations &amp;lt;value&amp;gt; --filter-pattern '{ ($.eventName = CreateRoute)
                        || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName =
                        ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute)
                        || ($.eventName = DisassociateRouteTable) }'&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps: aws cloudwatch put-metric-alarm --alarm-name
                        &amp;lt;value&amp;gt; --metric-name &amp;lt;metric_filter_name&amp;gt; --statistic Sum --period
                        300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt; --alarm-actions &amp;lt;topic_arn&amp;gt;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.13" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&amp;nbsp;&amp;quot;filterPattern&amp;quot;:
                            &amp;quot;{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName
                            = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName =
                            DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:&amp;nbsp;aws
                            cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.6-5.7" name="Define a retention period for Cloudwatch log group in tier" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;b&gt;Description&lt;/b&gt;:&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
  Retention period should be used to specify how long log events are kept in CloudWatch Logs. Expired log events get deleted automatically. Just like metric filters, retention settings are also assigned to log groups, and the retention assigned to a log group is applied to their log streams.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Put a retention policy for your Web tier Cloudwatch log group:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws logs put-retention-policy --log-group-name &amp;lt;web_tier_log_group&amp;gt; --retention-indays &amp;lt;log_retention_period&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;b&gt;Impact&lt;/b&gt;:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  If the retention period is not configured then logs will be retained indefinitely with increasing cost. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Describe log groups" url="https://docs.aws.amazon.com/cli/latest/reference/logs/describe-log-groups.html"/>
            <reference name="Put retention policy" url="https://docs.aws.amazon.com/cli/latest/reference/logs/put-retention-policy.html"/>
          </references>
          <standards>
            <standard ref="5.6" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.7" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Using the Amazon unified command line interface:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Search for your Web tier Cloudwatch log group, and check for the presence of "retentionInDays" element:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws logs describe-log-groups --query "logGroups[?logGroupName == 
   &lt;/div&gt; 
   &lt;div&gt;
     '&amp;lt;web_tier_log_group&amp;gt;']" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T16:28:27.485">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM2" name="Disable credentials unused after 45 days" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 45 or greater days be deactivated or removed.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Disabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to manage Unused Password (IAM user console access)&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console:&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click on Users&lt;/li&gt;&lt;li&gt;Click on Security Credentials&lt;/li&gt;&lt;li&gt;Select user whose Console last sign-in is greater than 45 days&lt;/li&gt;&lt;li&gt;Click Security credentials&lt;/li&gt;&lt;li&gt;In section Sign-in credentials, Console password click Manage&lt;/li&gt;&lt;li&gt;Under Console Access select Disable 10.Click Apply&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Perform the following to deactivate Access Keys:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console:&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click on Users&lt;/li&gt;&lt;li&gt;Click on Security Credentials&lt;/li&gt;&lt;li&gt;Select any access keys that are over 45 days old and that have been used and&lt;ol&gt;&lt;li&gt;Click on Make Inactive&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Select any access keys that are over 45 days old and that have not been used and&lt;ol&gt;&lt;li&gt;Click the X to Delete&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.12" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to determine if unused credentials exist:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click on Users&lt;/li&gt;&lt;li&gt;Click the Settings (gear) icon.&lt;/li&gt;&lt;li&gt;Select Console last sign-in, Access key last used, and Access Key Id&lt;/li&gt;&lt;li&gt;Click on Close&lt;/li&gt;&lt;li&gt;Check and ensure that Console last sign-in is less than 45 days ago.&lt;ol&gt;&lt;li&gt;Note - Never means the user has never logged in.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Check and ensure that Access key age is less than 45 days and that Access key last used does not say None&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If the user hasn't signed into the Console in the last 45 days or Access keys are over 45 days old refer to the remediation.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Download Credential Report:&lt;/p&gt;&lt;p&gt;1. Run the following commands:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam generate-credential-report&amp;nbsp;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,5,6,9,10,11,14,15,16&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Ensure unused credentials do not exist:&lt;/p&gt;&lt;p&gt;2. For each user having password_enabled set to TRUE , ensure password_last_used_date is less than 45 days ago.&lt;/p&gt;&lt;p&gt;When password_enabled is set to TRUE and password_last_used is set to No_Information , ensure password_last_changed is less than 45 days ago.&lt;/p&gt;&lt;p&gt;3. For each user having an access_key_1_active or access_key_2_active to TRUE , ensure the corresponding access_key_n_last_used_date is less than 45 days ago.&lt;/p&gt;&lt;p&gt;When a user having an access_key_x_active (where x is 1 or 2) to TRUE and corresponding access_key_x_last_used_date is set to N/A', ensure access_key_x_last_rotated` is less than 45 days ago.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.245">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-1.21" name="Do not setup access keys during initial user setup for all IAM users that have a console password" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS console defaults the checkbox for creating access keys to enabled. This results in many access keys being generated unnecessarily. In addition to unnecessary credentials, it also generates unnecessary management work in auditing and rotating these keys. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;b&gt;Remediation: &lt;/b&gt; 
&lt;br /&gt;Perform the following to delete access keys that do not pass the audit. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;ol&gt; 
 &lt;li&gt;Login to the AWS Management Console.Click Services.&lt;/li&gt; 
 &lt;li&gt;Click IAM&lt;/li&gt; 
 &lt;li&gt;Click on Users.Click on Security Credentials.&lt;/li&gt; 
 &lt;li&gt;As an Administrator.&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click on Delete for keys that were created at the same time as the user profile but have not been used.&lt;br /&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; As an IAM User&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click on Delete for keys that were created at the same time as the user profile but have not been used.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Via CLI:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;aws iam delete-access-key&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ol&gt; 
&lt;span style="font-weight: bold;"&gt;&lt;/span&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.11" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform the following to determine if access keys are rotated as prescribed: 
            &lt;br /&gt; 
            &lt;ol&gt; 
             &lt;li&gt;Login to the AWS Management Console&lt;/li&gt; 
             &lt;li&gt;Click Services&lt;/li&gt; 
             &lt;li&gt;Click IAM&lt;/li&gt; 
             &lt;li&gt;Click on a User&lt;/li&gt; 
             &lt;li&gt;Compare the user creation date to the key 1 creation date.&lt;/li&gt; 
             &lt;li&gt;For any that match, the key was created during initial user setup.&lt;/li&gt; 
            &lt;/ol&gt;Keys that were created at the same time as the user profile and do not have a last used date should be deleted. 
            &lt;br /&gt; 
            &lt;br /&gt;Via the CLI: 
            &lt;br /&gt; 
            &lt;ul&gt; 
             &lt;li&gt;Run the following command (OSX/Linux/UNIX) to generate a list of all IAM users along with their access keys utilization:&lt;/li&gt; 
            &lt;/ul&gt; 
            &lt;blockquote&gt; 
             &lt;blockquote&gt;
               aws iam generate-credential-report 
             &lt;/blockquote&gt; 
            &lt;/blockquote&gt; 
            &lt;br /&gt; 
            &lt;blockquote&gt; 
             &lt;blockquote&gt;
               aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,9,11,14,16 
             &lt;/blockquote&gt; 
            &lt;/blockquote&gt; 
            &lt;ul&gt; 
             &lt;li&gt;The output of this command will produce a table similar to the following:&amp;nbsp;&lt;/li&gt; 
            &lt;/ul&gt; 
            &lt;blockquote&gt; 
             &lt;blockquote&gt;
               user,password_enabled,access_key_1_active,access_key_1_last_used_date,access_ 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               key_2_active,access_key_2_last_used_date 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               elise,false,true,2015-04-16T15:14:00+00:00,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               brandon,true,true,N/A,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               rakesh,false,false,N/A,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               helene,false,true,2015-11-18T17:47:00+00:00,false,N/A 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               paras,true,true,2016-08-28T12:04:00+00:00,true,2016-03-04T10:11:00+00:00 
             &lt;/blockquote&gt; 
             &lt;blockquote&gt;
               anitha,true,true,2016-06-08T11:43:00+00:00,true,N/A 
             &lt;/blockquote&gt; 
            &lt;/blockquote&gt; 
            &lt;ul&gt; 
             &lt;li&gt;For any user having access_key_last_used_date set to N/A , ensure that access key is deleted&lt;/li&gt; 
            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.039">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.058">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.2" name="Enable CloudTrail log file validation" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Enabling log file validation will provide additional integrity checking of CloudTrail as it
                        creates a digest for each log file it writes to S3. These digests can then be used to determine
                        if a log has been modified since being written
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail update-trail --name &amp;lt;trail_name&amp;gt; --enable-log-file-validation
                        &lt;/blockquote&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.2" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws cloudtrail describe-trails&amp;nbsp;
                            &lt;/blockquote&gt;Ensure LogFileValidationEnabled = true (for each trail)
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM6" name="Enable IAM Access Analyzer for all regions" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable IAM Access analyzer for IAM policies about all resources in each region.&lt;/p&gt;&lt;p&gt;IAM Access Analyzer is a technology introduced at AWS reinvent 2019. After the Analyzer is enabled in IAM, scan results are displayed on the console showing the accessible resources. Scans show resources that other accounts and federated users can access, such as KMS keys and IAM roles. So the results allow you to determine if an unintended user is allowed, making it easier for administrators to monitor least privileges access. Access Analyzer analyzes only policies that are applied to resources in the same AWS Region.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;AWS IAM Access Analyzer helps you identify the resources in your organization and accounts, such as Amazon S3 buckets or IAM roles, that are shared with an external entity. This lets you identify unintended access to your resources and data. Access Analyzer identifies resources that are shared with external principals by using logic-based reasoning to analyze the resource-based policies in your AWS environment. IAM Access Analyzer continuously monitors all policies for S3 bucket, IAM roles, KMS(Key Management Service) keys, AWS Lambda functions, and Amazon SQS(Simple Queue Service) queues.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to enable IAM Access analyzer for IAM policies:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the IAM console at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;Choose Access analyzer.&lt;/li&gt;&lt;li&gt;Choose Create analyzer.&lt;/li&gt;&lt;li&gt;On the Create analyzer page, confirm that the Region displayed is the Region where you want to enable Access Analyzer.&lt;/li&gt;&lt;li&gt;Enter a name for the analyzer. Optional as it will generate a name for you automatically.&lt;/li&gt;&lt;li&gt;Add any tags that you want to apply to the analyzer. Optional.&lt;/li&gt;&lt;li&gt;Choose Create Analyzer.&lt;/li&gt;&lt;li&gt;Repeat these step for each active region&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Run the following command:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws accessanalyzer create-analyzer --analyzer-name &amp;lt;NAME&amp;gt; --type &amp;lt;ACCOUNT|ORGANIZATION&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Repeat this command above for each active region. Note: The IAM Access Analyzer is successfully configured only when the account you use has the necessary permissions.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.20" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the IAM console at https://console.aws.amazon.com/iam/&lt;/li&gt;&lt;li&gt;Choose Access analyzer&lt;/li&gt;&lt;li&gt;Click 'Analyzers'&lt;/li&gt;&lt;li&gt;Ensure that at least one analyzer is present&lt;/li&gt;&lt;li&gt;Ensure that the STATUS is set to Active&lt;/li&gt;&lt;li&gt;Repeat these step for each active region&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run the following command:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws accessanalyzer list-analyzers | grep status&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. Ensure that at least one Analyzer the status is set to ACTIVE&lt;/p&gt;&lt;p&gt;3. Repeat the steps above for each active region.&lt;/p&gt;&lt;p&gt;If an Access analyzer is not listed for each region or the status is not set to active refer to the remediation procedure below.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.297">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.763">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.6" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.776">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.6" name="Enable S3 Bucket logging" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>S3 Bucket Access Logging generates log files that contain access records for each request made
                        to an S3 bucket. By enabling this it is possible to capture events relating to the objects
                        within that bucket thus helping to capture potential security issues or identifying threats. It
                        is recommended to enable S3 bucket logging on any S3 bucket that contains sensitive data and
                        stored the logs in a separate bucket for security analysis.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with S3 update access).&lt;/li&gt;
                        &lt;li&gt;Select S3 from the services menu.&lt;/li&gt;
                        &lt;li&gt;Under All Buckets click on the S3 bucket you wish to enable logging.&lt;/li&gt;
                        &lt;li&gt;Click on Properties in the top right of the console.&lt;/li&gt;
                        &lt;li&gt;Under Bucket:&amp;lt;bucket_name&amp;gt; click on Logging.&lt;/li&gt;
                        &lt;li&gt;Click on the &amp;quot;Enabled&amp;quot; checkbox.&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Target Bucket&amp;quot; to store the logs.&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Target Prefix&amp;quot; for the logs.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Save&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.6" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update access).&lt;/li&gt;
                            &lt;li&gt;Select S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Under All Buckets click on the S3 bucket you wish to enable logging.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on Properties in the top right of the console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Under Bucket:&amp;lt;bucket_name&amp;gt; click on Logging.&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;Enabled&amp;quot; is checked.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.7" name="Enable VPC flow logs" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>VPC Flow logs enable the capture of IP traffic that traverses the network interfaces within a
                        VPC. These logs are captured and sent to cloudtrail logs enabling you to detect security
                        incidents that may be occurring across the network.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign into the management console.&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select a VPC.&lt;/li&gt;
                        &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create Flow Log&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Choose a role (note this must be pre-created. Follow the link provided in the text
                        underneath &amp;quot;Role&amp;quot; for help).&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Destination Log Group&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create flow Log&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Select a VPC.&lt;/li&gt;
                            &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                            &lt;li&gt;Ensure a Log Flow exists that has Active in the Status column.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.5" name="Encrypt CloudTrail logs using KMS" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By default, the log files delivered by CloudTrail to your bucket are encrypted by Amazon
                        server-side encryption with Amazon S3-managed encryption keys (SSE-S3). To provide a security
                        layer that is directly manageable, you can instead use server-side encryption with AWS
                        KMS-managed
                        keys (SSE-KMS) for your CloudTrail log files. This provides several advantages:
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;You can create and manage the CMK encryption keys yourself.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can use a single CMK to encrypt and decrypt log files for multiple accounts across
                        all regions.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You have control over who can use your key for encrypting and decrypting CloudTrail
                        log files.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;You can assign permissions for the key to the users in your organization according to
                        your requirements.&lt;/li&gt;
                        &lt;li&gt;You have enhanced security. With this feature, in order to read log files, you now
                        need to meet two conditions:&amp;nbsp;&lt;/li&gt;
                        &lt;ol&gt;
                        &lt;li&gt;you must have S3 read permission on the bucket, and&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;you must be granted decrypt permission by the CMK policy.&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;/ul&gt;Because S3 automatically decrypts the log files for requests from users authorized to
                        use the CMK, SSE-KMS encryption for CloudTrail log files is backward compatible with existing
                        applications that read CloudTrail log data.&amp;nbsp;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;&amp;nbsp;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with cloudtrail update permissions).&lt;/li&gt;
                        &lt;li&gt;Select CloudTrail from the services menu.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Trails&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click on a Trail.&lt;/li&gt;
                        &lt;li&gt;Under the S3 section click on the edit button.&lt;/li&gt;
                        &lt;li&gt;Click Advanced.&lt;/li&gt;
                        &lt;li&gt;Set &amp;quot;Encrypt Log Files&amp;quot; to &amp;quot;Yes&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Set &amp;quot;Create a new KMS key&amp;quot; to &amp;quot;Yes&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;In &amp;quot;KMS key&amp;quot; type a name for your key.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Save&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt; 
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.7" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws cloudtrail describe-trails
                            &lt;/blockquote&gt;Check that KMS is enabled if the &amp;quot;KmsKeyId&amp;quot; property is
                            set.
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.9" name="Enforce employee lifecycle policies" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Regular reviews of accounts on the system should be conducted to ensure that stale accounts
                        cannot be abused either by those former employees using them or compromised by attackers.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;&amp;nbsp;&amp;nbsp;
                        &lt;br /&gt;At least every 90 days complete the following:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with IAM update privileges).&lt;/li&gt;
                        &lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;
                        &lt;li&gt;Click on Users.&lt;/li&gt;
                        &lt;li&gt;For any user that should no longer exist:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;select the user,&lt;/li&gt;
                        &lt;li&gt;click &amp;quot;User Actions&amp;quot;,&lt;/li&gt;
                        &lt;li&gt;click &amp;quot;Delete&amp;quot;.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ol&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Obtain a list of IAM users by: aws iam list-users --query 'Users[*].UserName'
                            --output text&lt;/li&gt;
                            &lt;li&gt;Ensure all users are valid users.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM4" name="Ensure IAM policies that allow full &quot;*:*&quot; administrative privileges are not attached" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant least privilege -that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform only those tasks, instead of allowing full administrative privileges.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;It's more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later.&lt;/p&gt;&lt;p&gt;Providing full administrative privileges instead of restricting to the minimum set of permissions that the user is required to do exposes the resources to potentially unwanted actions.&lt;/p&gt;&lt;p&gt;IAM policies that have a statement with "Effect": "Allow" with "Action": "*" over "Resource": "*" should be removed.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to detach the policy that has full administrative privileges:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;In the navigation pane, click Policies and then search for the policy name found in the audit step.&lt;/li&gt;&lt;li&gt;Select the policy that needs to be deleted.&lt;/li&gt;&lt;li&gt;In the policy action menu, select first Detach&lt;/li&gt;&lt;li&gt;Select all Users, Groups, Roles that have this policy attached&lt;/li&gt;&lt;li&gt;Click Detach Policy&lt;/li&gt;&lt;li&gt;In the policy action menu, select Detach&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to detach the policy that has full administrative privileges as found in the audit step:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Lists all IAM users, groups, and roles that the specified managed policy is attached to. aws iam list-entities-for-policy --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;li&gt;Detach the policy from all IAM Users: aws iam detach-user-policy --user-name &amp;lt;iam_user&amp;gt; --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;li&gt;Detach the policy from all IAM Groups: aws iam detach-group-policy --group-name &amp;lt;iam_group&amp;gt; --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;li&gt;Detach the policy from all IAM Roles: aws iam detach-role-policy --role-name &amp;lt;iam_role&amp;gt; --policy-arn &amp;lt;policy_arn&amp;gt;&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.16" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following to determine what policies are created: From Command Line:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Run the following to get a list of IAM policies: aws iam list-policies --only-attached --output text&lt;/li&gt;&lt;li&gt;For each policy returned, run the following command to determine if any policies is allowing full administrative privileges on the account: aws iam get-policy-version --policy-arn &amp;lt;policy_arn&amp;gt; --version-id &amp;lt;version&amp;gt;&lt;/li&gt;&lt;li&gt;In output ensure policy should not have any Statement block with "Effect": "Allow" and Action set to "*" and Resource set to "*"&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.271">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-Network-1" name="Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Network Access Control List (NACL) function provide stateless filtering of ingress and egress network traffic to AWS resources. It is recommended that no NACL allows unrestricted ingress access to remote server administration ports, such as SSH to port 22 and RDP to port 3389.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Public access to remote server administration ports, such as 22 and 3389, increases resource attack surface and unnecessarily raises the risk of resource compromise.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home&lt;/li&gt;&lt;li&gt;In the left pane, click Network ACLs&lt;/li&gt;&lt;li&gt;For each network ACL to remediate, perform the following:&lt;ol&gt;&lt;li&gt;Select the network ACL&lt;/li&gt;&lt;li&gt;Click the Inbound Rules tab&lt;/li&gt;&lt;li&gt;Click Edit inbound rules&lt;/li&gt;&lt;li&gt;Either A) update the Source field to a range other than 0.0.0.0/0, or, B) Click Delete to remove the offending inbound rule&lt;/li&gt;&lt;li&gt;Click Save&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.1" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Perform the following to determine if the account is configured as prescribed:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console at https://console.aws.amazon.com/vpc/home&lt;/li&gt;&lt;li&gt;In the left pane, click Network ACLs&lt;/li&gt;&lt;li&gt;For each network ACL, perform the following:&lt;ol&gt;&lt;li&gt;Select the network ACL&lt;/li&gt;&lt;li&gt;Click the Inbound Rules tab&lt;/li&gt;&lt;li&gt;Ensure no rule exists that has a port range that includes port 22, 3389, or other remote server administration ports for your environment and has a Source of 0.0.0.0/0 and shows ALLOW&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Note: A Port value of ALL or a port range such as 0-1024 are inclusive of port 22, 3389, and other remote server administration ports&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.373">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM3" name="Ensure there is only one active access key available for any single IAM user" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API (directly or using the AWS SDK)&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Access keys are long-term credentials for an IAM user or the AWS account 'root' user. You can use access keys to sign programmatic requests to the AWS CLI or AWS API. One of the best ways to protect your account is to not allow users to have multiple access keys.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and navigate to IAM dashboard at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;In the left navigation panel, choose Users.&lt;/li&gt;&lt;li&gt;Click on the IAM user name that you want to examine.&lt;/li&gt;&lt;li&gt;On the IAM user configuration page, select Security Credentials tab.&lt;/li&gt;&lt;li&gt;In Access Keys section, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.&lt;/li&gt;&lt;li&gt;In the same Access Keys section, identify your non-operational access keys (other than the chosen one) and deactivate it by clicking the Make Inactive link.&lt;/li&gt;&lt;li&gt;If you receive the Change Key Status confirmation box, click Deactivate to switch off the selected key.&lt;/li&gt;&lt;li&gt;Repeat steps no. 3 - 7 for each IAM user in your AWS account.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Using the IAM user and access key information provided in the Audit CLI, choose one access key that is less than 90 days old. This should be the only active key used by this IAM user to access AWS resources programmatically. Test your application(s) to make sure that the chosen access key is working.&lt;/p&gt;&lt;p&gt;2. Run the update-access-key command below using the IAM user name and the non-operational access key IDs to deactivate the unnecessary key(s). Refer to the Audit section to identify the unnecessary access key ID for the selected IAM user&lt;/p&gt;&lt;p&gt;Note - the command does not return any output:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam update-access-key --access-key-id &amp;lt;access-key-id&amp;gt; --status Inactive --user-name &amp;lt;user-name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;3. To confirm that the selected access key pair has been successfully deactivated run the list-access-keys audit command again for that IAM User:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-access-keys --user-name &amp;lt;user-name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should expose the metadata for each access key associated with the IAM user. If the non-operational key pair(s) Status is set to Inactive, the key has been successfully deactivated and the IAM user access configuration adheres now to this recommendation.&lt;/p&gt;&lt;p&gt;4. Repeat steps no. 1 - 3 for each IAM user in your AWS account.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.13" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Sign in to the AWS Management Console and navigate to IAM dashboard at https://console.aws.amazon.com/iam/.&lt;/li&gt;&lt;li&gt;In the left navigation panel, choose Users.&lt;/li&gt;&lt;li&gt;Click on the IAM user name that you want to examine.&lt;/li&gt;&lt;li&gt;On the IAM user configuration page, select Security Credentials tab.&lt;/li&gt;&lt;li&gt;Under Access Keys section, in the Status column, check the current status for each access key associated with the IAM user. If the selected IAM user has more than one access key activated then the users access configuration does not adhere to security best practices and the risk of accidental exposures increases.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Repeat steps no. 3 - 5 for each IAM user in your AWS account.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run list-users command to list all IAM users within your account:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-users --query "Users[*].UserName"&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should return an array that contains all your IAM user names.&lt;/p&gt;&lt;p&gt;2. Run list-access-keys command using the IAM user name list to return the current status of each access key associated with the selected IAM user:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-access-keys --user-name &amp;lt;user-name&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should expose the metadata ("Username", "AccessKeyId", "Status", "CreateDate") for each access key on that user account.&lt;/p&gt;&lt;p&gt;3. Check the Status property value for each key returned to determine each keys current state. If the Status property value for more than one IAM access key is set to Active, the user access configuration does not adhere to this recommendation, refer to the remediation below.&lt;/p&gt;&lt;p&gt;Repeat steps no. 2 and 3 for each IAM user in your AWS account.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.257">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.8" name="Export EC2 OS logs to cloudwatch logs" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudwatch logs is an AWS service that allows you to send logs from an EC2 instance to
                        cloudwatch via an agent installed locally on the machine. The logs are then stored centrally
                        within cloudwatch logs and metric alerts can be configured so that security incidents can be
                        reported to the security team. It is recommended to enable cloudwatch log monitoring on all EC2
                        servers.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;Follow the directions provided in &amp;quot;http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html&amp;quot;
                        to install and enable Cloudwatch Logs on a new EC2 instance.
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select Cloudwatch from the services menu.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Logs&amp;quot;.&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click on your log group.&lt;/li&gt;
                            &lt;li&gt;Click on your log stream.&lt;/li&gt;
                            &lt;li&gt;Ensure event data is being captured as per the logs on your machine.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.8-5.9" name="Install an agent for AWS Cloudwatch Logs within AutoScaling Group for tier" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  You can use CloudWatch Logs to monitor, store and access log files from an Amazon EC2 instance (application or system data). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  With CloudWatch Logs, you can monitor your logs, in near real-time, for specific phrases, values or patterns (metrics). For example, you could set an alarm on the number of errors that occur in your system logs or view graphs of web request latency from your application logs. Log data can be stored and accessed for as long as you need using highly durable, lowcost storage so you don't have to worry about filling up hard drives. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  A Cloudwatch agent needs to run within the Guest Operating System of each EC2 instance you wish to ship logs from. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Note: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can also use any third party log management tools (like Splunk, Loggly, AlertLogic Log Manager, etc.) as long as the recommendation goal is achieved.&lt;/li&gt; 
  &lt;li&gt;The below Audit and Remediation steps need to be modified for your specific log management tool, as they are provided in the benchmark only for Amazon Cloudwatch&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   *Note: references to Web tier are also applicable to App tier. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a sample agent configuration file for Amazon Linux and save it as a text file (for example, awslogs.cfg) either on the AMI's filesystem, in a publicly accessible http/https location, or an Amazon S3 location (for example, s3://&amp;lt;s3_bucket_name&amp;gt;/&amp;lt;cloudwatch_agent_config_file&amp;gt;):&lt;/li&gt; 
 &lt;/ul&gt; 
  [general] 
  state_file = /var/awslogs/state/agent-state 
  [/var/log/messages] 
  file = /var/log/messages 
  log_group_name = /var/log/messages 
  log_stream_name = {instance_id} 
  datetime_format = %b %d %H:%M:%S 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new Web tier Autoscaling Launch Configuration with UserData populated for installing Cloudwatch Logs agent:&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create and save locally a file containing the UserData, for example /tmp/UserData.txt:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     #!/bin/bashcurl https://s3.amazonaws.com/awscloudwatch/downloads/latest/awslogs-agent-setup.py -Ochmod +x ./awslogs-agentsetup.py./awslogs-agent-setup.py -n -r us-east-1 -c s3://&amp;lt;s3_bucket_name&amp;gt;/&amp;lt;cloudwatch_agent_config_file&amp;gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Note: You can install the CloudWatch Logs agent by specifying the us-east-1, uswest-1, us-west-2, eu-west-1, eu-central-1, ap-southeast-1, ap-southeast-2, ap-northeast-1, or sa-east-1 regions.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     aws autoscaling create-launch-configuration --launch-configurationname &amp;lt;web_tier_launch_config&amp;gt; --image-id &amp;lt;web_tier_ami&amp;gt; --key-name &amp;lt;your_key_pair&amp;gt; --security-groups &amp;lt;web_tier_security_group&amp;gt; --instance-type &amp;lt;desired_instance_type&amp;gt; --iam-instance-profile &amp;lt;web_tier_instance_profile&amp;gt; -- user-data file:///tmp/UserData.txt 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: describe launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/describe-launch-configurations.html"/>
            <reference name="Create launch configuration" url="https://docs.aws.amazon.com/cli/latest/reference/autoscaling/create-launch-configuration.html"/>
            <reference name="EC2 New Instance CWL" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html"/>
          </references>
          <standards>
            <standard ref="5.8" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.9" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check if the Cloudwatch Logs agent is installed through UserData in the Web tier Autoscaling Launch Configuration:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws autoscaling describe-launch-configurations --launch-configuration-names &amp;lt;web_tier_launch_config&amp;gt;--query "LaunchConfigurations[*].UserData" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Output should be similar with:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    #!/bin/bash 
  &lt;/div&gt; 
  &lt;div&gt;
    curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -Ochmod +x ./awslogs-agent-setup.py ./awslogs-agent-setup.py -n -r us-east-1 -c s3://&amp;lt;s3_bucket_name&amp;gt;/&amp;lt;cloudwatch_agent_config_file&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-03-17T16:37:37.654">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.4" name="Integrate the CloudTrail logs into CloudWatch logs" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>One way to work with cloudtrail logs is to send them to cloudwatch logs which allows you to
                        define metric filters for alerting and monitoring. This allows you to take immediate action if a
                        certain threshold has been met. Enabling this provides the opportunity to monitor for sensitive
                        account activity.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with cloudtrail update permission).&lt;/li&gt;
                        &lt;li&gt;Select Cloudtrail from the services list.&lt;/li&gt;
                        &lt;li&gt;Under All Buckets select the target bucket you want to check.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Properties&amp;quot; then &amp;quot;Trails&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click on each trail where no CloudWatch Logs are defined.&lt;/li&gt;
                        &lt;li&gt;Go to the &amp;quot;CloudWatch Logs&amp;quot; section and click on &amp;quot;Configure&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Define a new or select an existing log group and click &amp;quot;Continue&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Configure the IAM Role which will deliver CloudTrail events to CloudWatch Logs.&lt;/li&gt;
                        &lt;li&gt;Create/Select an IAM Role and Policy Name.&lt;/li&gt;
                        &lt;li&gt;Click Allow.&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.4" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws cloudtrail get-trail-status --name &amp;lt;trail_name&amp;gt;
                            &lt;/blockquote&gt;Ensure the &amp;quot;LatestcloudwatchLogdDeliveryTime&amp;quot; property
                            is set to a recent time (ie within the latest day or so).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.1" name="Launch EC2 instances into a VPC" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACLs) and routing. However, the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is recommended to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure. &amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;&lt;li&gt;Select "Launch Instance".&lt;/li&gt;&lt;li&gt;Complete the wizard until step 3. At this point, ensure a VPC ID is selected for the "Network" option, choose an appropriate "Subnet" and "Auto-assign Public IP" option.&lt;/li&gt;&lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;NB: If you want to migrate an already running instance you will need to convert the image into an AMI and then launch a new instance using the AMI and placing in a VPC, as per the steps above&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Log in to the AWS Management Console.&lt;/li&gt;&lt;li&gt;Select EC2 from the services menu.&lt;/li&gt;&lt;li&gt;Select "Instances" from the left hand menu.&lt;/li&gt;&lt;li&gt;For each instance in the list:&lt;ul&gt;&lt;li&gt;select the instance&lt;/li&gt;&lt;li&gt;in the preview pane confirm the instance has a "VPC ID". If a hyphen "-" is shown then your instance is running in EC2-Classic mode.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM7" name="Manage IAM users centrally via identity federation or AWS Organizations for multi-account environments" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In multi-account environments, IAM user centralization facilitates greater user control. User access beyond the initial account is then provided via role assumption. Centralization of users can be accomplished through federation with an external identity provider or through the use of AWS Organizations.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Centralizing IAM user management to a single identity store reduces complexity and thus the likelihood of access management errors.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;The remediation procedure will vary based on the individual organization's implementation of identity federation and/or AWS Organizations with the acceptance criteria that no non-service IAM users, and non-root accounts, are present outside the account providing centralized IAM user management.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.21" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For multi-account AWS environments with an external identity provider...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Determine the master account for identity federation or IAM user management&lt;/li&gt;&lt;li&gt;Login to that account through the AWS Management Console&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click Identity providers&lt;/li&gt;&lt;li&gt;Verify the configuration&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Then..., determine all accounts that should not have local users present. For each account...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Determine all accounts that should not have local users present&lt;/li&gt;&lt;li&gt;Log into the AWS Management Console&lt;/li&gt;&lt;li&gt;Switch role into each identified account&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click Users&lt;/li&gt;&lt;li&gt;Confirm that no IAM users representing individuals are present&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For multi-account AWS environments implementing AWS Organizations without an external identity provider...&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Determine all accounts that should not have local users present&lt;/li&gt;&lt;li&gt;Log into the AWS Management Console&lt;/li&gt;&lt;li&gt;Switch role into each identified account&lt;/li&gt;&lt;li&gt;Click Services&lt;/li&gt;&lt;li&gt;Click IAM&lt;/li&gt;&lt;li&gt;Click Users&lt;/li&gt;&lt;li&gt;Confirm that no IAM users representing individuals are present&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.314">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.8" name="Reduce routing tables entries for VPC peering" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
  Being highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
  Remove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Via CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For each &amp;lt;route_table_id&amp;gt; containing routes non compliant with your routing policy (which grants more than desired ""least access""), delete the non compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;non_compliant_destination_CIDR&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;compliant_destination_CIDR&amp;gt; --vpc-peering-connection-id &amp;lt;peering_connection_id&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configurations with Specific Routes" url="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review routing tables of peered VPCs for whether they route
                            all subnets of each VPC and whether that is necessary to accomplish the intended purposes
                            for peering the VPCs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Via CLI:&lt;/b&gt;&lt;br /&gt;List all
                            the route tables from a VPC and check if &amp;quot;GatewayId&amp;quot; is pointing to a
                            &amp;lt;peering_connection_id&amp;gt; (e.g. pcx-1a2b3c4d) and if &amp;quot;DestinationCidrBlock&amp;quot;
                            is as specific as desired.&lt;br /&gt;
                            &lt;blockquote&gt;
                            aws ec2 describe-route-tables --filter &amp;quot;Name=vpc-id,Values=&amp;lt;vpc_id&amp;gt;&amp;quot;
                            --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,
                            AssociatedSubnets:Associations[*].SubnetId}&amp;quot;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Gov-1.2" name="Register a Security contact for your AWS account" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS will occasionally send security advisories and alerts to the account holder. By default this will go to the email address that the account is registered under. However if a security contact is specified these alerts will be sent here instead. Therefore this provides the means of ensuring these advisories are routed to the security team, especially if a distribution email address is used.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt; 
  &lt;li&gt;Click account name on the top right of the management console.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Scroll down to &amp;quot;Alternate Contacts&amp;quot; section.&lt;/li&gt; 
  &lt;li&gt;Click on Edit.&lt;/li&gt; 
  &lt;li&gt;In the &amp;quot;Security&amp;quot; section complete the requested contact information.&lt;/li&gt; 
  &lt;li&gt;Click update when complete.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Account as root.&lt;/li&gt;
                            &lt;li&gt;Click account name on the top right of the management console.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;My Account&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Scroll down to &amp;quot;Alternate Contacts&amp;quot; section.&lt;/li&gt;
                            &lt;li&gt;Confirm whether a contact has been set for &amp;quot;Security&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-IAM5" name="Remove expired SSL/TLS certificates stored in AWS IAM" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To enable HTTPS connections to your website or application in AWS, you need an SSL/TLS server certificate. You can use ACM or IAM to store and deploy server certificates. Use IAM as a certificate manager only when you must support HTTPS connections in a region that is not supported by ACM. IAM securely encrypts your private keys and stores the encrypted version in IAM SSL certificate storage. IAM supports deploying server certificates in all regions, but you must obtain your certificate from an external provider for use with AWS. You cannot upload an ACM certificate to IAM. Additionally, you cannot manage your certificates from the IAM Console.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Removing expired SSL/TLS certificates eliminates the risk that an invalid certificate will be deployed accidentally to a resource such as AWS Elastic Load Balancer (ELB), which can damage the credibility of the application/website behind the ELB. As a best practice, it is recommended to delete expired certificates.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Removing expired certificates via AWS Management Console is not currently supported. To delete SSL/TLS certificates stored in IAM via the AWS API use the Command Line Interface (CLI).&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;To delete Expired Certificate run following command by replacing &amp;lt;CERTIFICATE_NAME&amp;gt; with the name of the certificate to delete:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam delete-server-certificate --server-certificate-name &amp;lt;CERTIFICATE_NAME&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;When the preceding command is successful, it does not return any output.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.19" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Getting the certificates expiration information via AWS Management Console is not currently supported. To request information about the SSL/TLS certificates stored in IAM via the AWS API use the Command Line Interface (CLI).&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Run list-server-certificates command to list all the IAM-stored server certificates:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws iam list-server-certificates&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The command output should return an array that contains all the SSL/TLS certificates currently stored in IAM and their metadata (name, ID, expiration date, etc):&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;{ "ServerCertificateMetadataList": [ { "ServerCertificateId": "EHDGFRW7EJFYTE88D", "ServerCertificateName": "MyServerCertificate", "Expiration": "2018-07-10T23:59:59Z", "Path": "/", "Arn": "arn:aws:iam::012345678910:server-certificate/MySSLCertificate", "UploadDate": "2018-06-10T11:56:08Z" } ] }&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Verify the ServerCertificateName and Expiration parameter value (expiration date) for each SSL/TLS certificate returned by the list-server-certificates command and determine if there are any expired server certificates currently stored in AWS IAM. If so, use the AWS API to remove them. If this command returns:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;{ { "ServerCertificateMetadataList": [] }&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This means that there are no expired certificates, It DOES NOT mean that no certificates exist.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-08-05T06:56:59.283">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.2" name="Separate VPC into zones by function" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. It is recommended that resources be placed into VPC's according to use case (ie dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such resources accordingly ensures that a resource of a higher security level is not exposed by the security settings of a lower labeled VPC.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Identify the resources that exist within an incorrect VPC.&lt;/li&gt; 
  &lt;li&gt;Migrate or move them to the correct VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
   &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.071">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="API LOGGING AND AUDITING" name="API Logging and Auditing" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUDITABLE-CHANGES-AWS" name="Attackers make undetected and unaudited changes to system configurations" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                If audit trails are not properly protected, an attacker could gain access to the system,
                                modify the status of the resources or exfiltrate sensitive data without being noticed.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Logging-3.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.3" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.5" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.2" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.4" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.2" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.3" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.4" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.5" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.5" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="LOST-ACCESS-ROOT-01">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Gov-1.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="LOST-SECURITY-ALERTS">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Gov-1.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Gov-1.1" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Gov-1.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-IAM-2.5" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="AWS-IAM5" mitigation="10"/>
                    <countermeasure ref="AWS-IAM6" mitigation="10"/>
                    <countermeasure ref="AWS-IAM7" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="AWS-IAM2" mitigation="10"/>
                    <countermeasure ref="AWS-IAM3" mitigation="10"/>
                    <countermeasure ref="AWS-IAM4" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.9">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.9" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="LOST-SECURITY-ALERTS">
                  <countermeasures>
                    <countermeasure ref="AWS-IAM1" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-IAM1" mitigation="10"/>
                <countermeasure ref="AWS-IAM2" mitigation="10"/>
                <countermeasure ref="AWS-IAM3" mitigation="10"/>
                <countermeasure ref="AWS-IAM4" mitigation="10"/>
                <countermeasure ref="AWS-IAM5" mitigation="10"/>
                <countermeasure ref="AWS-IAM6" mitigation="10"/>
                <countermeasure ref="AWS-IAM7" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.9" mitigation="10"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-EXPIRATION-DATE">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.11" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-1.21">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-1.21" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="12"/>
                    <countermeasure ref="Hydras-AWS-IAM-1.20" mitigation="8"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="8"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.8" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.1-2.2" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.3-2.4" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.5-2.6" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.7" mitigation="8"/>
                    <countermeasure ref="aws-tier-2.8" mitigation="8"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.10" mitigation="8"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="12"/>
                <countermeasure ref="Hydras-AWS-IAM-1.20" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-1.21" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.10" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.11" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="8"/>
                <countermeasure ref="Hydras-AWS-IAM-2.8" mitigation="8"/>
                <countermeasure ref="aws-tier-2.1-2.2" mitigation="8"/>
                <countermeasure ref="aws-tier-2.3-2.4" mitigation="8"/>
                <countermeasure ref="aws-tier-2.5-2.6" mitigation="8"/>
                <countermeasure ref="aws-tier-2.7" mitigation="8"/>
                <countermeasure ref="aws-tier-2.8" mitigation="8"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AWS RESOURCE LOGGING" name="AWS Resource Logging" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUDITABLE-CHANGES-RESOURCES-AWS" name="Attackers make undetected and unaudited changes in the resources" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                If audit trails in the resources are not enabled or not protected, attackers could gain
                                access to the system and modify or delete data from the resources and the changes are
                                not detected.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Logging-3.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.6" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="16"/>
                    <countermeasure ref="aws-tier-4.6" mitigation="16"/>
                    <countermeasure ref="aws-tier-4.7" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Logging-3.9">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.6" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Logging-3.8" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="16"/>
                <countermeasure ref="aws-tier-4.6" mitigation="16"/>
                <countermeasure ref="aws-tier-4.7" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="CLOUDWATCH METRIC ALERTS" name="Cloudwatch Metric Alerts" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED_ACCESS_SYSTEMS_AWS" name="Attackers access to the systems without being detected" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers gain access to the systems and they are not detected and the changes of the
                                attackers could not be detected and audited.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Monitoring-4.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.2" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.3" mitigation="11"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.4" mitigation="11"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="11"/>
                    <countermeasure ref="aws-tier-4.8" mitigation="11"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.5">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.5" mitigation="11"/>
                  </countermeasures>
                </weakness>
                <weakness ref="cloudwatch-misconfig">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.4-5.5" mitigation="11"/>
                    <countermeasure ref="aws-tier-5.6-5.7" mitigation="11"/>
                    <countermeasure ref="aws-tier-5.8-5.9" mitigation="11"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Monitoring-4.2" mitigation="12"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.3" mitigation="11"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.4" mitigation="11"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.5" mitigation="11"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="11"/>
                <countermeasure ref="aws-tier-4.8" mitigation="11"/>
                <countermeasure ref="aws-tier-5.4-5.5" mitigation="11"/>
                <countermeasure ref="aws-tier-5.6-5.7" mitigation="11"/>
                <countermeasure ref="aws-tier-5.8-5.9" mitigation="11"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-SECURITY-SYSTEMS-AWS" name="Attackers gain undetected access to the security system configurations" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers gain undetected access to the security configurations and changes made by the attackers are undetected and unaudited.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Monitoring-4.10">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.10" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Monitoring-4.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.6" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.8" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Monitoring-4.10" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.6" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.8" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-NETWORK-AWS" name="Sensitive data is compromised through undetected network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers gain undetected access to the network systems and the changes of the attackers
                                could not be audited or detected.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Monitoring-4.12">
                  <countermeasures>
                    <countermeasure ref="AWS-Monitoring-1" mitigation="16"/>
                    <countermeasure ref="AWS-Monitoring-2" mitigation="16"/>
                    <countermeasure ref="AWS-Monitoring-3" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.11" mitigation="20"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.12" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.13" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-Monitoring-1" mitigation="16"/>
                <countermeasure ref="AWS-Monitoring-2" mitigation="16"/>
                <countermeasure ref="AWS-Monitoring-3" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.11" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.12" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.13" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="VIRTUAL PRIVATE CLOUD (VPC) NETWORK" name="Virtual Private Cloud (VPC) Network" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="AWS-Network-1" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-EC2-6.1" mitigation="16"/>
                    <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                    <countermeasure ref="aws-tier-5.12" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-Network-1" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-EC2-6.1" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="20"/>
                <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                <countermeasure ref="aws-tier-5.12" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="53209bc4-bd2a-432a-913b-53da5d5022e1" diagramComponentId="08ae241f-04eb-4dd6-b61a-f0c560092b87" ref="5fabbae7-9089-4bc6-beb9-9a432631c9d2" name="User" desc="" library="unece-wp-29-csms" parentComponentRef="" componentDefinitionRef="end-user">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CSMS-4.3.4-15.2" name="Defined security procedures are not followed" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt; &lt;b&gt;Defined security procedures&lt;/b&gt; are not followed&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:25.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CSMS-4.3.4-15.1" name="Social engineering" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt; Innocent victim (e.g. owner, operator or maintenance engineer) being &lt;b&gt;tricked into taking an action&lt;/b&gt; to&lt;b&gt; &lt;/b&gt;unintentionally load malware or enable an attack&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:25.617">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CSMS-M19" name="Define security procedures" issueId="" issueLink="" platform="" cost="0" risk="94" state="Recommended" owner="jonnytennyson@gmail.com" library="unece-wp-29-csms" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt; Organizations shall ensure security procedures are defined and followed including logging of actions and access related to the management of the security functions&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-53 PS-1 Personnel Security Policy and Procedures" url="https://nvd.nist.gov/800-53/Rev4/control/PS-1"/>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="10.4.2" supportedStandardRef="iso-sae-21434"/>
            <standard ref="10.4.3" supportedStandardRef="iso-sae-21434"/>
            <standard ref="M19" supportedStandardRef="unece-wp29-csms"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:25.525">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSMS-M18" name="Define user roles and access privileges" issueId="" issueLink="" platform="" cost="0" risk="94" state="Recommended" owner="jonnytennyson@gmail.com" library="unece-wp-29-csms" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt; Measures shall be implemented for defining and controlling user roles and access privileges, based on the principle of least access privilege&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP WSTG: Testing Role Definitions" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/01-Test_Role_Definitions"/>
          </references>
          <standards>
            <standard ref="10.4.2" supportedStandardRef="iso-sae-21434"/>
            <standard ref="10.4.3" supportedStandardRef="iso-sae-21434"/>
            <standard ref="M18" supportedStandardRef="unece-wp29-csms"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-04-13T12:05:25.526">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="general" name="General" desc="" library="unece-wp-29-csms">
          <threats>
            <threat ref="CSMS-4.3.4-15" name="Unintended human actions carried out from outside of vehicles" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="unece-wp-29-csms" editable="true">
              <desc>This threat include: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Legitimate actors are able to take actions that would unwittingly facilitate a cyber-attack&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CSMS-4.3.4-15.1">
                  <countermeasures>
                    <countermeasure ref="CSMS-M18" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CSMS-4.3.4-15.2">
                  <countermeasures>
                    <countermeasure ref="CSMS-M19" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSMS-M18" mitigation="50"/>
                <countermeasure ref="CSMS-M19" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="01389eec-4ec1-4d9e-bde9-f91bf903a3ab" diagramComponentId="dfb2631f-d959-4a19-ace4-62fb552b6773" ref="bb23eb31-51d2-42fd-9350-d4db18531e34" name="VPC - Customer Instance" desc="" library="Hydras-AWS-Foundation" parentComponentRef="88ead499-6db6-4ecb-96d9-363b587ed0d5" componentDefinitionRef="vpc">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-03-13T16:00:45.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.2" name="Excessive use of administrator accounts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The administrator accounts are used for all actions, not only for administrative actions. This
                        is because these users have not got a personal or a user account to do the daily actions.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.104">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.110">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-522" name="Insufficiently Protected Credentials" state="0" impact="100" issueId="" issueLink="">
          <desc>This weakness occurs when the application transmits or stores
                    authentication credentials and uses an insecure method that is susceptible to
                    unauthorized interception and/or retrieval.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.115">
              <output/>
            </source>
            <references>
              <reference name="CWE-522: Insufficiently Protected Credentials" url="https://cwe.mitre.org/data/definitions/522.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-320" name="Key Management Errors" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category are related to errors in the management of cryptographic keys.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.119">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.8" name="Lack of 2FA" state="0" impact="100" issueId="" issueLink="">
          <desc>Access to sensitive systems without using MFA to log into the systems.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.125">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.136">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.2" name="Networks for Amazon resources are not properly segmented" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.1" name="The Authentication Method for Administrator Accounts is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The authentication method &amp;quot;Multi-factor Authentication&amp;quot; for the Administrator
                        accounts are not configured.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.129">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.6" name="The User Account is not configured" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Key security settings such as the resetting of the password and other password controls are not configured.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:25.133">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.8" name="The access to the routing tables are not restricted" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Being highly selective in peering routing tables is a very effective way of minimizing the
                        impact of breach as resources outside of these routes are inaccessible to the peered VPC.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards>
            <standard ref="1.22" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.861">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.1" name="Avoid the use of the root account unless absolutely necessary" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The root account is the one which was used to open the AWS account with Amazon. Therefore it has full unrestricted access to all resources within the account including billing information. Reducing the use of this account and instead using personalized accounts with restricted permissions ensures the principles of least privilege and can help prevent accidental disclosure of credentials or unintended changes. 
&lt;br&gt; 
&lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt;Follow the remediation in "Create Individual Accounts". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.7" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws iam create-credential-report
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            aws iam get-credential-report --query 'Content' --output text | base64 -D | cut -d,
                            -f1,5,11,16 | grep -B1 '&amp;lt;root_account&amp;gt;'&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;From the above determine the &amp;quot;password_last_used&amp;quot; time In
                            addition to the above set up a metric filter as described elsewhere in this library to
                            determine ad-hoc use of root.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.878">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC2" name="Connect to VPC using an AWS Site-to-Site VPN connection" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Connect to VPC using an AWS Site-to-Site VPN connection&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  By default, instances that you launch into an Amazon VPC can't communicate with your own (remote) network. You can enable access to your remote network from your VPC by creating an AWS Site-to-Site VPN (Site-to-Site VPN) connection, and configuring routing to pass traffic through the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your Site-to-Site VPN resources using any of the following interfaces: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your Site-to-Site VPN resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC, and is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs and takes care of many of the connection details, such as calculating signatures, handling request retries, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC, but it requires that your application handle low-level details such as generating the hash to sign the request, and error handling. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS VPC - VPN connections" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpn-connections.html"/>
            <reference name="What is AWS Site-to-Site VPN?" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  After you create the AWS Site-to-Site VPN connection and configure the customer gateway, you can launch an instance and test the connection by pinging the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Before you begin, make sure of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use an AMI that responds to ping requests. AWS recommends that you use one of the Amazon Linux AMIs.&lt;/li&gt; 
  &lt;li&gt;Configure any security group or network ACL in your VPC that filters traffic to the instance to allow inbound and outbound ICMP traffic.&lt;/li&gt; 
  &lt;li&gt;If you are using instances running Windows Server, connect to the instance and enable inbound ICMPv4 on the Windows firewall in order to ping the instance.&lt;/li&gt; 
  &lt;li&gt;(Static routing) Ensure that the customer gateway device has a static route to your VPC, and that your VPN connection has a VPN connection has a static route so that traffic can get back to your customer gateway device.&lt;/li&gt; 
  &lt;li&gt;(Dynamic routing) Ensure that the BGP status on your customer gateway device is established. It takes approximately 30 seconds for a BGP peering session to be established. Ensure that routes are advertised with BGP correctly and showing in the subnet route table, so that traffic can get back to your customer gateway. Make sure that both tunnels are configured with BGP routing.&lt;/li&gt; 
  &lt;li&gt;Ensure that you have configured routing in your subnet route tables for the VPN connection.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test end-to-end connectivity 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon EC2 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. On the dashboard, choose Launch Instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the Choose an Amazon Machine Image (AMI) page, choose an AMI, and then choose Select. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Choose an instance type, and then choose Next: Configure Instance Details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. On the Configure Instance Details page, for Network, select your VPC. For Subnet, select your subnet. Choose Next until you reach the Configure Security Group page. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Select the Select an existing security group option, and then select the group that you configured earlier. Choose Review and Launch. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Review the settings that you've chosen. Make any changes that you need, and then choose Launch to select a key pair and launch the instance. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  8. After the instance is running, get its private IP address (for example, 10.0.0.4). The Amazon EC2 console displays the address as part of the instance's details. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  9. From a computer in your network that is behind the customer gateway device, use the ping command with the instance's private IP address. A successful response is similar to the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  ping 10.0.0.4 
&lt;/div&gt; 
&lt;div&gt;
  Pinging 10.0.0.4 with 32 bytes of data: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt;
  Reply from 10.0.0.4: bytes=32 time&amp;lt;1ms TTL=128 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ping statistics for 10.0.0.4: 
&lt;/div&gt; 
&lt;div&gt;
  Packets: Sent = 3, Received = 3, Lost = 0 (0% loss), 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Approximate round trip times in milliseconds: 
&lt;/div&gt; 
&lt;div&gt;
  Minimum = 0ms, Maximum = 0ms, Average = 0ms 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To test tunnel failover, you can temporarily disable one of the tunnels on your customer gateway device, and repeat the above step. You cannot disable a tunnel on the AWS side of the VPN connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can use SSH or RDP to connect to your instances in the VPC. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T12:31:55.971">
              <output/>
            </source>
            <references>
              <reference name="Testing the Site-to-Site VPN connection" url="https://docs.aws.amazon.com/vpn/latest/s2svpn/HowToTestEndToEnd_Linux.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC1" name="Control access to VPC resources with IAM identities and policies" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to VPC resources with IAM identities and policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Identity and Access Management (IAM) is an AWS service that helps an administrator securely control access to AWS resources. IAM administrators control who can be authenticated (signed in) and authorized (have permissions) to use Amazon VPC resources. IAM is an AWS service that you can use with no additional charge. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Control access to VPC resources by using: 
&lt;/div&gt; 
&lt;div&gt;
  1. Identities: 
&lt;/div&gt; 
&lt;div&gt;
  Authentication is how you sign in to AWS using your identity credentials. 
&lt;/div&gt; 
&lt;div&gt;
  You must be authenticated (signed in to AWS) as the AWS account root user, an IAM user, or by assuming an IAM role. You can also use your company's single sign-on authentication, or even sign in using Google or Facebook. In these cases, your administrator previously set up identity federation using IAM roles. When you access AWS using credentials from another company, you are assuming a role indirectly. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. Identity-based policies: 
&lt;/div&gt; 
&lt;div&gt;
  Identity-based policies are JSON permissions policy documents that you can attach to an identity, such as an IAM user, role, or group. These policies control what actions that identity can perform, on which resources, and under what conditions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Resource-based policies: 
&lt;/div&gt; 
&lt;div&gt;
  Resource-based policies are JSON policy documents that you attach to a resource such as an Amazon S3 bucket. Service administrators can use these policies to define what actions a specified principal (account member, user, or role) can perform on that resource and under what conditions. Resource-based policies are inline policies. There are no managed resource-based policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Access control lists (ACLs): 
&lt;/div&gt; 
&lt;div&gt;
  Access control lists (ACLs) are a type of policy that controls which principals (account members, users, or roles) have permissions to access a resource. ACLs are similar to resource-based policies, although they do not use the JSON policy document format. Amazon S3, AWS WAF, and Amazon VPC are examples of services that support ACLs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Identity and access management for Amazon VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/security-iam.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:12.899">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.6" name="Create a Password Policy enforcing strong passwords" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enforcing a strong password policy increases resiliency and reduces the chances of the password being compromised either through brute force attempts, keystroke logging tools or stolen credentials amongst others.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to AWS Console (ensure you have permissions to update IAM).&lt;/li&gt;&lt;li&gt;Go to IAM Service on the AWS Console.&lt;/li&gt;&lt;li&gt;Click on Account Settings.&lt;/li&gt;&lt;li&gt;Set "Minimum password length" to 14 or greater.&lt;/li&gt;&lt;li&gt;Check "Require at least one uppercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one lowercase letter".&lt;/li&gt;&lt;li&gt;Check "Require at least one number".&lt;/li&gt;&lt;li&gt;Check "Require at least one non-alphanumeric character"&lt;/li&gt;&lt;li&gt;Check "Enable password expiration" and set the period to at least 90 days.&lt;/li&gt;&lt;li&gt;Check "Prevent password reuse" and set the number to at least 10.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.8" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.9" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Validate that mechanisms exist to ensure that created passwords are strong enough.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.903">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Monitoring-4.9" name="Create AWS Config configuration change alerts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When cloudtrail is configured and sending alerts to cloudwatch logs these logs can be queried
                        to identify suspicious API activity. One such activity that should be monitored is AWS Config
                        changes. AWS config tracks configuration changes within the environment and is a useful change
                        management tool. Therefore alerting on config changes ensures the continued visibility of AWS
                        configuration items.
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create a metric filter that checks for AWS Config changes:&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws logs put-metric-filter&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --log-group-name &amp;lt;group&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-name &amp;lt;name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric- transformations &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --filter-pattern '{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                        (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                        tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Create an SNS topic for notifications: aws sns create-topic --name &amp;lt;topic_name&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an SNS subscription to the topic created above: aws sns subscribe --topic-arn
                        &amp;lt;topic_arn&amp;gt; --protocol email --notification-endpoint &amp;lt;email@example.com&amp;gt;&lt;/li&gt;
                        &lt;li&gt;Create an alarm based on the above steps:&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        aws cloudwatch put-metric-alarm&amp;nbsp;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        --alarm-name &amp;lt;value&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --metric-name &amp;lt;metric_filter_name&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --statistic Sum&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --period 300&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --threshold 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --comparison-operator GreaterThanOrEqualToThreshold&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --evaluation-periods 1&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --namespace &amp;lt;CloudTrailMetrics&amp;gt;&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        --alarm-actions &amp;lt;topic_arn&amp;gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/blockquote&gt;
                        &lt;/blockquote&gt;
                        &lt;div&gt;
                        
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Identify the log group name: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Note the &amp;lt;group&amp;gt; value associated with CloudWatchLogsLogGroupArn.&lt;/li&gt;
                            &lt;li&gt;Get a list of all associated metric filters for this &amp;lt;group&amp;gt;: aws
                            logs describe-metric-filters --log-group-name &amp;quot;&amp;lt;group&amp;gt;&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the output contains the following:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;quot;filterPattern&amp;quot;: &amp;quot;{($.eventSource = config.amazonaws.com) &amp;amp;&amp;amp;
                            (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even
                            tName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}&amp;quot;&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Note the metricName value associated with the filterPattern found in step 4.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Get a list of CloudWatch alarms and filter on the metricName captured in step 4:
                            aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName==`&amp;lt;metricName&amp;gt;`]'&lt;/li&gt;
                            &lt;li&gt;Note the AlarmActions value - this will provide the SNS topic ARN value.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure there is at least one subscriber to the SNS topic: aws sns
                            list-subscriptions-by-topic --topic-arn &amp;lt;topic_arm&amp;gt;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.888">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC8" name="Create CloudWatch alarms to monitor a NAT gateway" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Creating CloudWatch alarms to monitor a NAT gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  You can monitor your NAT gateway using CloudWatch, which collects information from your NAT gateway and creates readable, near real-time metrics. You can use this information to monitor and troubleshoot your NAT gateway. NAT gateway metric data is provided at 1-minute intervals, and statistics are recorded for a period of 15 months. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create a CloudWatch alarm that sends an Amazon SNS message when the alarm changes state. An alarm watches a single metric over a time period that you specify. It sends a notification to an Amazon SNS topic based on the value of the metric relative to a given threshold over a number of time periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example, you can create an alarm that monitors the amount of traffic coming in or leaving the NAT gateway. The following alarm monitors the amount of outbound traffic from clients in your VPC through the NAT gateway to the internet. It sends a notification when the number of bytes reaches a threshold of 5,000,000 during a 15-minute period. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm for outbound traffic through the NAT gateway 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Alarms, Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose NAT gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Select the NAT gateway and the BytesOutToDestination metric and choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Configure the alarm as follows, and choose Create Alarm when you are done: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;gt;= and enter 5000000. Enter 1 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Preview, select a period of 15 minutes and specify a statistic of Sum. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can create an alarm that monitors the ErrorPortAllocation metric and sends a notification when the value is greater than zero (0) for three consecutive 5-minute periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To create an alarm to monitor port allocation errors 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the CloudWatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Alarms, Create Alarm. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose NAT Gateway. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Select the NAT gateway and the ErrorPortAllocation metric and choose Next. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Configure the alarm as follows, and choose Create Alarm when you are done: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Threshold, enter a name and description for your alarm. For Whenever, choose &amp;gt; and enter 0. Enter 3 for the consecutive periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Actions, select an existing notification list or choose New list to create a new one. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Under Alarm Preview, select a period of 5 minutes and specify a statistic of Maximum. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Monitoring NAT gateways using Amazon CloudWatch" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway-cloudwatch.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  You can test an alarm by setting it to any state using the SetAlarmState API action or the set-alarm-state command in the AWS CLI. This temporary state change lasts only until the next alarm comparison occurs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T12:58:07.550">
              <output/>
            </source>
            <references>
              <reference name="Using Amazon CloudWatch Alarms" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.3" name="Create Individual Accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>By creating individual IAM users for people accessing your account, you can give each IAM user a unique set of security credentials. You can also grant different permissions to each IAM user. If necessary, you can change or revoke an IAM user's permissions any time. (If you give out your AWS root credentials, it can be difficult to revoke them, and it is impossible to restrict their permissions.). 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
  &lt;li&gt;Select IAM.&lt;/li&gt; 
  &lt;li&gt;Select Users.&lt;/li&gt; 
  &lt;li&gt;Click "Create New Users".&lt;/li&gt; 
  &lt;li&gt;Complete the required information.&lt;/li&gt; 
  &lt;li&gt;Uncheck "Create access key for users".&lt;/li&gt; 
  &lt;li&gt;Click "Create".&lt;/li&gt; 
  &lt;li&gt;Select the user.&lt;/li&gt; 
  &lt;li&gt;Click "Manage Password".&lt;/li&gt; 
  &lt;li&gt;Select the required options and click "apply".&lt;/li&gt; 
  &lt;li&gt;Select "Show User Security Credentials".&lt;/li&gt; 
  &lt;li&gt;Securely supply the password to your user.&lt;/li&gt; 
 &lt;/ol&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that each user has got the corresponding account with the corresponding
                            credentials.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.898">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC3" name="Create Route 53 alias records for VPC endpoints" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Create Route 53 alias records for VPC endpoints 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Attackers sometimes hijack traffic to internet endpoints such as web servers by intercepting DNS queries and returning their own IP addresses to DNS resolvers in place of the actual IP addresses for those endpoints. Users are then routed to the IP addresses provided by the attackers in the spoofed response, for example, to fake websites. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can protect your domain from this type of attack, known as DNS spoofing or a man-in-the-middle attack, by configuring Domain Name System Security Extensions (DNSSEC), a protocol for securing DNS traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An Amazon Virtual Private Cloud (Amazon VPC) interface endpoint lets you use AWS PrivateLink to access selected services. These services include some AWS services, services that are hosted by other AWS customers and partners in their own VPCs, and supported AWS Marketplace partner services. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To route domain traffic to an interface endpoint, use Amazon Route 53 to create an alias record. An alias record is a Route 53 extension to DNS. It's similar to a CNAME record, but you can create an alias record both for the root domain, such as example.com, and for subdomains, such as www.example.com. (You can create CNAME records only for subdomains.) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To route traffic to an Amazon VPC interface endpoint 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you created the Route 53 hosted zone and the Amazon VPC interface endpoint using the same account, skip to step 2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you created the hosted zone and the interface endpoint using different accounts, get the service name for the interface endpoint: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the AWS Management Console and open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the right pane, choose the endpoint that you want to route internet traffic to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the bottom pane, get the value of DNS name, for example, vpce-0fd00dd593example-dexample.cloudtrail.us-west-2.vpce.amazonaws.com. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Open the Route 53 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In the navigation pane, choose Hosted Zones. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose the name of the hosted zone that has the domain name that you want to use to route traffic to your interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create Record Set. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Specify the following values: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Name 
&lt;/div&gt; 
&lt;div&gt;
  Enter the domain name that you want to use to route traffic to your Amazon VPC interface endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Type 
&lt;/div&gt; 
&lt;div&gt;
  Choose A - IPv4 address. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alias 
&lt;/div&gt; 
&lt;div&gt;
  Choose Yes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alias Target 
&lt;/div&gt; 
&lt;div&gt;
  How you specify the value for Alias Target depends on whether you created the hosted zone and the interface endpoint using the same AWS account or different accounts: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Same account - Choose the list, and find the category Amazon VPC Endpoints. Then choose the DNS name of the interface endpoint that you want to route internet traffic to. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Different accounts - Enter the value that you got in step 1 of this procedure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Routing Policy 
&lt;/div&gt; 
&lt;div&gt;
  Choose the applicable routing policy. For more information, see Choosing a routing policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Evaluate Target Health 
&lt;/div&gt; 
&lt;div&gt;
  Accept the default value of No. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Choose Create. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your interface endpoint by using the name of the alias record that you created in this procedure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Routing traffic to an Amazon Virtual Private Cloud interface endpoint by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-vpc-interface-endpoint.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Changes generally propagate to all Route 53 servers within 60 seconds. When propagation is done, you'll be able to route traffic to your interface endpoint by using the name of the alias record that you created in this procedure.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T12:39:59.223">
              <output/>
            </source>
            <references>
              <reference name="Routing traffic to an Amazon Virtual Private Cloud interface endpoint by using your domain name" url="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-vpc-interface-endpoint.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC7" name="Do not put sensitive data into VPC free-form fields" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Do not put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS strongly recommends that you never put sensitive identifying information, such as your customers' account numbers, into free-form fields such as a Name field. This includes when you work with Amazon VPC or other AWS services using the console, API, AWS CLI, or AWS SDKs. Any data that you enter into Amazon VPC or other services might get picked up for inclusion in diagnostic logs. When you provide a URL to an external server, don't include credentials information in the URL to validate your request to that server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that free-form fields do not contain sensitive data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Data protection in Amazon Virtual Private Cloud" url="https://docs.aws.amazon.com/vpc/latest/userguide/data-protection.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T12:54:35.989">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.9" name="Enable AWS Config across all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS Config tracks configuration changes to resources as they occur and is therefore a good
                        source of identifying whether unintentional or malicious changes have occurred to resources with
                        the AWS account.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions).&lt;/li&gt;
                        &lt;li&gt;Select Config from the services menu.&lt;/li&gt;
                        &lt;li&gt;Define which resources you want to record in the selected region.&lt;/li&gt;
                        &lt;li&gt;Choose to include global resources (IAM resources).&lt;/li&gt;
                        &lt;li&gt;Specify an S3 bucket.&lt;/li&gt;
                        &lt;li&gt;Create an SNS Topic&amp;nbsp;&amp;nbsp;&lt;/li&gt;
                        &lt;/ol&gt;
                        &lt;br /&gt;&amp;nbsp;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with Config update permissions)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Select Config from the services menu&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;If presented with Setup AWS Config follow the procedure highlighted in the
                            remediation section&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;On the Resource inventory page, Click on &amp;quot;edit&amp;quot;&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure 1 or both check-boxes under &amp;quot;All Resources&amp;quot; is checked.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Include global resources related to IAM resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;which needs to be enabled in 1 region only.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure the correct S3 bucket has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Ensure the correct SNS topic has been defined.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Repeat steps 2 to 7 for each region (you'll need to change region in the top right
                            corner of the AWS management console to do this).&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.925">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.1" name="Enable Cloudtrail in all regions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Cloudtrail records events of all API calls made within a AWS account. This enables security
                        analysis, resource change tracking, and compliance auditing. Cloudtrail should be enabled in all
                        regions, even if they are not being used, to identify unintended or accidental changes.
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;:
                        &lt;br /&gt;Create a global trail using a previously created S3 bucket:
                        &lt;br /&gt;
                        &lt;blockquote&gt;
                        aws cloudtrail create-trail --name &amp;lt;trail_name&amp;gt; --s3-bucket-name &amp;lt;s3-bucket-name&amp;gt;
                        --is-multi-region-trail
                        &lt;/blockquote&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;
                        &lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.1" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws cloudtrail describe-trails&lt;/li&gt;
                            &lt;li&gt;Ensure &amp;quot;IsMultiRegionTrail&amp;quot; = TRUE&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.934">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.4" name="Enable MFA for IAM console users" issueId="" issueLink="" platform="" cost="1" risk="51" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for all console login accounts is to use MFA to increase the level of security of the login process. 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
   &lt;b&gt;Remediation:&lt;/b&gt; 
   &lt;br&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Login to the AWS Management Console as an administrator.&lt;/li&gt; 
    &lt;li&gt;Select IAM.&lt;/li&gt; 
    &lt;li&gt;Select Users.&lt;/li&gt; 
    &lt;li&gt;For each user:&lt;/li&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Select the user.&lt;/li&gt; 
     &lt;li&gt;Under "Sign-In Credentials" if "Password" is set to "Yes".&lt;/li&gt; 
     &lt;li&gt;Select "Manage MFA Device".&lt;/li&gt; 
     &lt;li&gt;Choose the type of MFA.&lt;/li&gt; 
     &lt;li&gt;Either scan the code or enter your device secret key.&lt;/li&gt; 
     &lt;li&gt;Enter the Authentication code in "Authentication Code 1" box.&lt;/li&gt; 
     &lt;li&gt;Wait for the code to change and enter the next code in "Authentication Code 2" box.&lt;/li&gt; 
     &lt;li&gt;Click Activate MFA.&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/ol&gt;
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.10" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Generate a credential report with the command: aws iam generate-credential-report&lt;/li&gt;
                            &lt;li&gt;The following command displays a list of all IAM users along with their password
                            and MFA status: aws iam get-credential-report --output text | base64 -D | cut - d, -f1,4,8&lt;/li&gt;
                            &lt;li&gt;For any column having password_enabled set to true ensure mfa_active is also set
                            to true.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.946">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-IAM-2.2" name="Enable MFA for root accounts" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Root is highly privileged and therefore using a multi-factor authentication (MFA) device enhances the security of the login process. With MFA, users have a device that generates a unique authentication code (a one-time password, or OTP) and users must provide both their normal credentials (like their username and password) and the OTP. The MFA device can either be a special piece of hardware, or it can be a virtual device. The recommendation for the root account is to use a hardware based device as it has a smaller attack surface and cannot be duplicated. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console as root.&lt;/li&gt; 
  &lt;li&gt;Select "Dashboard" and under "Security Status" choose "Activate MFA" on your root account.&lt;/li&gt; 
  &lt;li&gt;Select Activate MFA".&lt;/li&gt; 
  &lt;li&gt;In the wizard, choose "A hardware MFA" device and then select Next Step.&lt;/li&gt; 
  &lt;li&gt;In the Serial Number box, enter the serial number that is found on the back of the MFA device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;In the Authentication Code 1 box, enter the six-digit number displayed by the MFA device.&lt;/li&gt; 
  &lt;li&gt;Wait until the device refreshes the code, and then enter the next six-digit number into the Authentication Code 2 box.&lt;/li&gt; 
  &lt;li&gt;Select "Next Step".&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;The MFA device is now associated with the AWS account.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="1.6" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Run: aws iam get-account-summary&lt;/li&gt;
                            &lt;li&gt;Ensure the AccountMFAEnabled property is 1.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.955">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Logging-3.7" name="Enable VPC flow logs" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>VPC Flow logs enable the capture of IP traffic that traverses the network interfaces within a
                        VPC. These logs are captured and sent to cloudtrail logs enabling you to detect security
                        incidents that may be occurring across the network.
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;br /&gt;
                        &lt;ol&gt;
                        &lt;li&gt;Sign into the management console.&lt;/li&gt;
                        &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                        &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Select a VPC.&lt;/li&gt;
                        &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                        &lt;li&gt;Select &amp;quot;Create Flow Log&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Choose a role (note this must be pre-created. Follow the link provided in the text
                        underneath &amp;quot;Role&amp;quot; for help).&lt;/li&gt;
                        &lt;li&gt;Select a &amp;quot;Destination Log Group&amp;quot;.&lt;/li&gt;
                        &lt;li&gt;Click &amp;quot;Create flow Log&amp;quot;.&lt;/li&gt;
                        &lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3.9" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Sign into the management console.&lt;/li&gt;
                            &lt;li&gt;Select VPC from the services menu.&lt;/li&gt;
                            &lt;li&gt;In the left pane click &amp;quot;Your VPCs&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Select a VPC.&lt;/li&gt;
                            &lt;li&gt;Select the Flow Logs tab from the preview panel.&lt;/li&gt;
                            &lt;li&gt;Ensure a Log Flow exists that has Active in the Status column.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC9" name="Enable VPC Traffic Mirroring" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Enable VPC Traffic Mirroring 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  Traffic Mirroring is an Amazon VPC feature that you can use to copy network traffic from an elastic network interface of Amazon EC2 instances. You can then send the traffic to out-of-band security and monitoring appliances for: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Content inspection 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Threat monitoring 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Troubleshooting 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The security and monitoring appliances can be deployed as individual instances, or as a fleet of instances behind a Network Load Balancer with a UDP listener. Traffic Mirroring supports filters and packet truncation, so that you only extract the traffic of interest to monitor by using monitoring tools of your choice. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can create, access, and manage your traffic mirror resources using any of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Management Console- Provides a web interface that you can use to access your traffic mirror resources. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS Command Line Interface (AWS CLI) - Provides commands for a broad set of AWS services, including Amazon VPC. The AWS CLI is supported on Windows, macOS, and Linux. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  AWS SDKs - Provide language-specific APIs. The AWS SDKs take care of many of the connection details, such as calculating signatures, handling request retries, and handling errors. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Query API- Provides low-level API actions that you call using HTTPS requests. Using the Query API is the most direct way to access Amazon VPC. However, it requires that your application handle low-level details such as generating the hash to sign the request and handling errors. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is Traffic Mirroring?" url="https://docs.aws.amazon.com/vpc/latest/mirroring/what-is-traffic-mirroring.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  You can review your traffic mirror targets, filters and sessions from Amazon VPC console:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the Region selector, choose the AWS Region that you used when you created the VPCs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. On the navigation pane, choose Traffic Mirroring, Mirror Targets/Mirror Filters/Mirror Sessions. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T13:00:52.965">
              <output/>
            </source>
            <references>
              <reference name="Getting started with Traffic Mirroring" url="https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-getting-started.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDTRAIL2" name="Log to a dedicated and centralized Amazon S3 bucket" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Log to a dedicated and centralized Amazon S3 bucket&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; CloudTrail log files are an audit log of actions taken by a user, role or an AWS service. The integrity, completeness and availability of these logs is crucial for forensic and auditing purposes. By logging to a dedicated and centralized Amazon S3 bucket, you can enforce strict security controls, access, and segregation of duties.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following are some steps you can take:&lt;/p&gt; 
&lt;p&gt;- Create a separate AWS account as a log archive account. If you use AWS Organizations, enroll this account in the organization, and consider creating an organization trail to log data for all AWS accounts in your organization.&lt;/p&gt; 
&lt;p&gt;- If you do not use Organizations but want to log data for multiple AWS accounts, create a trail to log activity in this log archive account. Restrict access to this account to only trusted administrative users who should have access to account and auditing data.&lt;/p&gt; 
&lt;p&gt;- As part of creating a trail, whether it is an organization trail or a trail for a single AWS account, create a dedicated Amazon S3 bucket to store log files for this trail.&lt;/p&gt; 
&lt;p&gt;- If you want to log activity for more than one AWS account, modify the bucket policy to allow logging and storing log files for all AWS accounts that you want to log AWS account activity.&lt;/p&gt; 
&lt;p&gt;- If you are not using an organization trail, create trails in all of your AWS accounts, specifying the Amazon S3 bucket in the log archive account.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Best Practices in AWS CloudTrail" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/best-practices-security.html"/>
            <reference name="Security OU - Log Archive account" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/log-archive.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you are using a dedicated and centralized Amazon S3 bucket for CloudTrail log files.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-12-01T15:05:12.909">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.8" name="Reduce routing tables entries for VPC peering" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Once a VPC peering connection is established, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
  Being highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
  Remove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Via CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For each &amp;lt;route_table_id&amp;gt; containing routes non compliant with your routing policy (which grants more than desired ""least access""), delete the non compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 delete-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;non_compliant_destination_CIDR&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Create a new compliant route:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws ec2 create-route --route-table-id &amp;lt;route_table_id&amp;gt; --destination-cidr-block &amp;lt;compliant_destination_CIDR&amp;gt; --vpc-peering-connection-id &amp;lt;peering_connection_id&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configurations with Specific Routes" url="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html"/>
          </references>
          <standards>
            <standard ref="5.4" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review routing tables of peered VPCs for whether they route
                            all subnets of each VPC and whether that is necessary to accomplish the intended purposes
                            for peering the VPCs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Via CLI:&lt;/b&gt;&lt;br /&gt;List all
                            the route tables from a VPC and check if &amp;quot;GatewayId&amp;quot; is pointing to a
                            &amp;lt;peering_connection_id&amp;gt; (e.g. pcx-1a2b3c4d) and if &amp;quot;DestinationCidrBlock&amp;quot;
                            is as specific as desired.&lt;br /&gt;
                            &lt;blockquote&gt;
                            aws ec2 describe-route-tables --filter &amp;quot;Name=vpc-id,Values=&amp;lt;vpc_id&amp;gt;&amp;quot;
                            --query &amp;quot;RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,
                            AssociatedSubnets:Associations[*].SubnetId}&amp;quot;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.2" name="Separate VPC into zones by function" issueId="" issueLink="" platform="" cost="1" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. It is recommended that resources be placed into VPC's according to use case (ie dev/test/prod) and that appropriate security levels be set on these VPC's. Placing such resources accordingly ensures that a resource of a higher security level is not exposed by the security settings of a lower labeled VPC.&amp;nbsp; 
&lt;div&gt;
  &amp;nbsp; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Identify the resources that exist within an incorrect VPC.&lt;/li&gt; 
  &lt;li&gt;Migrate or move them to the correct VPC.&lt;/li&gt; 
 &lt;/ol&gt; 
   &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource added to a VPC is isolated according to its designation (ie
                            test/dev/prod).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-04-01T07:51:15.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-API-GW2" name="Use AWS Secrets Manager to securely rotate, manage, and retrieve database credentials, API keys, and other secrets" issueId="" issueLink="" platform="" cost="0" risk="67" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Securely rotate, manage, and retrieve database credentials, API keys, and other secrets. AWS recommends to use AWS Secrets Manager for this purpose. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  AWS Secrets Manager is a secrets management service that helps you protect access to your applications, services, and IT resources. This service enables you to easily rotate, manage, and retrieve database credentials, API keys, and other secrets throughout their lifecycle. Using Secrets Manager, you can secure and manage secrets used to access resources in the AWS Cloud, on third-party services, and on-premises. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To get started with AWS Secrets Manager: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Identify your secrets and locate where they are used in your applications. 
&lt;/div&gt; 
&lt;div&gt;
  Sign in to the AWS Management Console using your AWS credentials and navigate to the Secrets Manager console. 
&lt;/div&gt; 
&lt;div&gt;
  Use the Secrets Manager console to upload the secret you identified. Alternatively, you can use the AWS SDK or AWS CLI to upload a secret (once per secret). You can also write a script to upload multiple secrets. 
&lt;/div&gt; 
&lt;div&gt;
  If your secret is not in use yet, follow the instructions on the console to configure automatic rotation. If applications are using your secret, complete steps (5) and (6) before configuring automatic rotation. 
&lt;/div&gt; 
&lt;div&gt;
  If other users or applications need to retrieve the secret, write an IAM policy to grant permissions to the secret. 
&lt;/div&gt; 
&lt;div&gt;
  Update your applications to retrieve secrets from Secrets Manager. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Secrets Manager" url="https://aws.amazon.com/secrets-manager/"/>
          </references>
          <standards>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;How do I know when AWS Secrets Manager rotates a database credential?&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You can configure Amazon CloudWatch Events to receive a notification when AWS Secrets Manager rotates a secret. You can also see when Secrets Manager last rotated a secret using the Secrets Manager console or APIs. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.969">
              <output/>
            </source>
            <references>
              <reference name="AWS Secrets Manager FAQs" url="https://aws.amazon.com/secrets-manager/faqs/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-Network-5.1" name="Use AWS VPC for networking" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>AWS virtual private cloud is the de-facto standard for networking AWS as it provides additional security controls such as Security Groups, Network Access Control Lists (NACL's) and routing. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  However the use of VPC is not compulsory and resources such as EC2 can be created outside of VPC (usingEC2 Classic). It is the recommendation to make all resources a member of a VPC if possible to benefit from the increased security controls they offer and reduce undue network exposure.&amp;nbsp; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt; 
  &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;Move or migrate the resources to a VPC. 
 &lt;/div&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that each AWS resource you own that is able to exist in a VPC does so.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.837">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC6" name="Use Network ACLs for VPC" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use Network ACLs for VPC as an additional layer of security 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  A network access control list (ACL) is an optional layer of security for your VPC that acts as a firewall for controlling traffic in and out of one or more subnets. You might set up network ACLs with rules similar to your security groups in order to add an additional layer of security to your VPC. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  You can add or remove rules from the default network ACL, or create additional network ACLs for your VPC. When you add or remove rules from a network ACL, the changes are automatically applied to the subnets that it's associated with. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The following are the parts of a network ACL rule: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rule number. Rules are evaluated starting with the lowest numbered rule. As soon as a rule matches traffic, it's applied regardless of any higher-numbered rule that might contradict it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Type. The type of traffic; for example, SSH. You can also specify all traffic or a custom range. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Protocol. You can specify any protocol that has a standard protocol number. For more information, see Protocol Numbers. If you specify ICMP as the protocol, you can specify any or all of the ICMP types and codes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Port range. The listening port or port range for the traffic. For example, 80 for HTTP traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Source. [Inbound rules only] The source of the traffic (CIDR range). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Destination. [Outbound rules only] The destination for the traffic (CIDR range). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Allow/Deny. Whether to allow or deny the specified traffic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Network ACLs" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Review your Network ACLs using the console:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the Amazon VPC console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the navigation pane, choose Network ACLs. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Select a Network ACL to see details. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T12:43:47.241">
              <output/>
            </source>
            <references>
              <reference name="Network ACLs" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.1-1.2-1.3" name="Use the principle of least privilege on key ownership and usage" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&amp;nbsp;&lt;br&gt;AWS Key Management Service (KMS) by default provides service Customer Managed Keys (CMK). Customers also have the ability to create CMKs, which allows for configuration of key rotation and key policy which is applied to the customer created CMK. You can use the key policy by itself to control who has access to the CMK and what actions each identity can perform. Controlling access this way specifies the full scope of access to the CMK in a single document (the key policy).Customer created CMKs can be used for:&amp;nbsp;&lt;br&gt;- AWS Service level encryption(e.g. EBS, RDS, S3).&amp;nbsp;&lt;br&gt;- Key management for file/application level encryption.&amp;nbsp;&lt;br&gt;&lt;br&gt;&lt;strong&gt;Rationale&lt;/strong&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Ensures principle of least privilege on key ownership and usage.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;Using the Amazon unified command line interface:&amp;nbsp;&lt;br&gt;- If there is no alias listed for Web tier, create a new KMS key and note the "KeyId" element:&lt;/p&gt; 
&lt;p&gt;aws kms create-key&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;- Create an alias for the Web tier key using the above KeyId:&amp;nbsp;&lt;br&gt;aws kms create-alias --alias-name &amp;lt;tier_kms_alias&amp;gt; --target-key-id &amp;lt;tier_kms_key&amp;gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI Command Reference:create-alias" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-alias.html"/>
            <reference name="AWS CLI Command Reference:create-key" url="https://docs.aws.amazon.com/cli/latest/reference/kms/create-key.html"/>
            <reference name="AWS CLI Command Reference:list-aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
            <reference name="Amazon docs: list aliases" url="https://docs.aws.amazon.com/cli/latest/reference/kms/list-aliases.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.2" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Run the following command via the Amazon unified command line interface to determine if a web-tier KMS key exists: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  aws kms list-aliases --query 'Aliases[?AliasName == '&amp;lt;web_tier_kms_alias&amp;gt;']' 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;If such a key exists, an AliasArnproperty will be displayed in the output.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.843">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC4" name="Use VPC endpoint policies" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use VPC endpoint policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  When you create an endpoint, you can attach an endpoint policy to it that controls access to the service to which you are connecting. Endpoint policies must be written in JSON format. Not all services support endpoint policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or modify the endpoint. If you do not attach a policy when you create an endpoint, AWS attaches a default policy for you that allows full access to the service. If a service does not support endpoint policies, the endpoint allows full access to the service. An endpoint policy does not override or replace IAM user policies or service-specific policies (such as S3 bucket policies). It is a separate policy for controlling access from the endpoint to the specified service. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  You cannot attach more than one policy to an endpoint. However, you can modify the policy at any time. If you do modify a policy, it can take a few minutes for the changes to take effect. For more information about writing policies, see Overview of IAM Policies in the IAM User Guide. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Your endpoint policy can be like any IAM policy; however, take note of the following: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Only the parts of the policy that relate to the specified service will work. You cannot use an endpoint policy to allow resources in your VPC to perform other actions; for example, if you add EC2 actions to an endpoint policy for an endpoint to Amazon S3, they will have no effect. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Your policy must contain a Principal element. For additional information related gateway endpoints, see Endpoint policies for gateway endpoints. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The size of an endpoint policy cannot exceed 20,480 characters (including white space). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Controlling access to services with VPC endpoints" url="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-06-19T12:41:32.102">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM Policies with the IAM Policy Simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="57" state="Recommended" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2021-03-15T08:08:24.653">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="50"/>
                    <countermeasure ref="AWS-VPC1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDTRAIL2" mitigation="50"/>
                <countermeasure ref="AWS-VPC1" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-ROOT" name="Attackers gain unauthorized access to the root account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;div&gt;
                                Attackers could gain unauthorized access to the administrator account due to the lack of
                                the account and its security mechanisms, like modifying credentials and adding/removing
                                user accounts.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.1">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.1" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-IAM-2.2" mitigation="34"/>
                <countermeasure ref="Hydras-AWS-IAM-2.3" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LOST-ACCESS-USER" name="Attackers gain unauthorized access to the user account due to the lack of configuration of the account" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the user account due to a lack of configuration of the account, such as an incorrect configuration of the security question to reset the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.6">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-IAM-2.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-IAM-2.4" mitigation="50"/>
                <countermeasure ref="Hydras-AWS-IAM-2.6" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-ENCRYPTION-KEYS" name="Attackers obtain access to encryption keys and are able to decrypt ciphertext" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Cryptography is intrinsically related to the secure management of cryptographic keys which need to be protected and securely stored by applications. Leaking cryptographic keys diminishes any advantage of cryptography, allowing attackers to break message confidentiality and integrity, and to authenticate as legitimate users or impersonate legitimate services.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-320">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.1-1.2-1.3" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                    <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-Logging-3.1" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Logging-3.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Monitoring-4.9" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-Network-5.1" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC7" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-522">
                  <countermeasures>
                    <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-API-GW2" mitigation="100"/>
                <countermeasure ref="AWS-VPC7" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC8" mitigation="33"/>
                    <countermeasure ref="AWS-VPC9" mitigation="33"/>
                    <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC8" mitigation="33"/>
                <countermeasure ref="AWS-VPC9" mitigation="33"/>
                <countermeasure ref="Hydras-AWS-Logging-3.7" mitigation="34"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="EAVESDROPPING-COMMUNICATIONS" name="An attacker eavesdrops on the communication between the client and server and decrypts the data" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Eavesdropping on communication is a network attack that captures network packets transmitted by other computers and reads the data content. This type of network attack is most effective when weak encryption services are used. An attacker could eavesdrop on the communication between the client and server and decrypt the encrypted data.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC2" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC4" mitigation="17"/>
                    <countermeasure ref="AWS-VPC5" mitigation="17"/>
                    <countermeasure ref="AWS-VPC6" mitigation="17"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="AWS-VPC3" mitigation="17"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.8">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-VPC3" mitigation="17"/>
                <countermeasure ref="AWS-VPC4" mitigation="17"/>
                <countermeasure ref="AWS-VPC5" mitigation="17"/>
                <countermeasure ref="AWS-VPC6" mitigation="17"/>
                <countermeasure ref="Hydras-AWS-Network-5.2" mitigation="16"/>
                <countermeasure ref="Hydras-AWS-Network-5.8" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="899a22b7-e9b1-4ad0-a88b-8c529d2fe7fa" diagramComponentId="014badac-374f-4d89-8c27-42530ecd947e" ref="c489bf07-0b51-45f9-b4f8-5cc2d83e6a81" name="User - Web UI" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="web-ui">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-798, CWE-603" name="Client side code stores secret keys, sensitive business logic or other proprietary information" state="0" impact="100" issueId="" issueLink="">
          <desc>When client side code is fully controlled by the user, a malicious user may be able to read the code or reverse engineer it if it is compiled in any form. If the client side code includes secret keys, sensitive business logic (like client authentication) or proprietary information, all of this is directly exposed to the user, allowing them to get the sensitive information or study the business logic with the aim of bypassing it.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Some examples of this vulnerability are:&amp;nbsp; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Performing an authentication on the client side without server side validation.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Making privileged calls from the client based solely on client side conditions (i.e. a cash check on the client side to place an order on an e-commerce platform).&lt;/li&gt; 
   &lt;li&gt;&amp;nbsp;Hard-coding keys and secrets on the client side to make client-to-client calls without a proxy.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-28T12:50:39.802">
              <output/>
            </source>
            <references>
              <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="https://cwe.mitre.org/data/definitions/602.html"/>
              <reference name="CWE-603: Use of client-side Authentication" url="https://cwe.mitre.org/data/definitions/603.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-05-29T09:16:00.986">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-79" name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes user-controllable input before it
                        is placed in output that is used as a web page that is served to other users. Cross-site
                        scripting (XSS) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;There are three main kinds of XSS:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 1: Reflected XSS (or Non-Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The server reads data directly from the HTTP request and reflects it back in the HTTP response.
                        Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a
                        vulnerable web application, which is then reflected back to the victim and executed by the web
                        browser. The most common mechanism for delivering malicious content is to include it as a
                        parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed
                        in this manner constitute the core of many phishing schemes, whereby an attacker convinces a
                        victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's
                        content back to the victim, the content is executed by the victim's browser.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 2: Stored XSS (or Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The application stores dangerous data in a database, message forum, visitor log, or other
                        trusted data store. At a later time, the dangerous data is subsequently read back into the
                        application and included in dynamic content. From an attacker's perspective, the optimal place
                        to inject malicious content is in an area that is displayed to either many users or particularly
                        interesting users. Interesting users typically have elevated privileges in the application or
                        interact with sensitive data that is valuable to the attacker. If one of these users executes
                        malicious content, the attacker may be able to perform privileged operations on behalf of the
                        user or gain access to sensitive data belonging to the user. For example, the attacker might
                        inject XSS into a log message, which might not be handled properly when an administrator views
                        the logs.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 0: DOM-Based XSS&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        In DOM-based XSS, the client performs the injection of XSS into the page; in the other types,
                        the server performs the injection. DOM-based XSS generally involves server-controlled, trusted
                        script that is sent to the client, such as Javascript that performs sanity checks on a form
                        before the user submits it. If the server-supplied script processes user-supplied data and then
                        injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is
                        possible.Once the malicious script is injected, the attacker can perform a variety of malicious
                        activities. The attacker could transfer private information, such as cookies that may include
                        session information, from the victim's machine to the attacker. The attacker could send
                        malicious requests to a web site on behalf of the victim, which could be especially dangerous to
                        the site if the victim has administrator privileges to manage that site. Phishing attacks could
                        be used to emulate trusted web sites and trick the victim into entering a password, allowing the
                        attacker to compromise the victim's account on that web site. Finally, the script could exploit
                        a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes
                        referred to as &amp;quot;drive-by hacking&amp;quot;.
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;br /&gt;
                        &lt;/blockquote&gt;In many cases, the attack can be launched without the victim even being aware
                        of it. Even with careful users, attackers frequently use a variety of methods to encode the
                        malicious portion of the attack, such as URL encoding or Unicode, so the request looks less
                        suspicious.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.752">
              <output/>
            </source>
            <references>
              <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-830" name="Inclusion of Web Functionality from an Untrusted Source" state="0" impact="100" issueId="" issueLink="">
          <desc>The software includes web functionality (such as a web widget)
                        from another domain, which causes it to operate within the domain of the
                        software, potentially granting total access and control of the software to the
                        untrusted source.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-11-18T14:51:05.701">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-07T14:11:14.917">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693-NOSNIFF" name="Internet Explorer could allow Cross Site Scripting attacks through content sniffing" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The product does not use - or incorrectly uses - a protection mechanism providing defense against attacks on the product. This weakness covers three distinct situations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A "missing" protection mechanism occurs when the application does not define any mechanism against a certain class of attack.&lt;/li&gt;&lt;li&gt;An "insufficient" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended.&lt;/li&gt;&lt;li&gt;An "ignored" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.862">
              <output/>
            </source>
            <references>
              <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-84-HTTP-ONLY" name="Lack of 'HttpOnly' flag on session cookie" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The web application improperly neutralizes user-controlled input for executable scripts disguised with URI encodings.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.944">
              <output/>
            </source>
            <references>
              <reference name="CWE-84: Improper Neutralization of Encoded URI Schemes in a Web Page" url="https://cwe.mitre.org/data/definitions/84.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="WEB-CSP" name="Lack of Content Security Policy version 2 (CSPv2)" state="0" impact="100" issueId="" issueLink="">
          <desc>Content Security Policy (CSP) is a computer security standard introduced to prevent cross-site
                        scripting (XSS), click jacking and other code injection attacks resulting from execution of
                        malicious content in the trusted web page context.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:20:27.783">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2020-05-06T09:23:20.012">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T09:56:18.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-05-30T14:52:04.610">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693-CLICKJACK" name="The page can be included in an iframe" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection mechanism that provides sufficient
                        defense against directed attacks against the product. This weakness covers three distinct
                        situations:
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;A &amp;quot;missing&amp;quot; protection mechanism occurs when the application does
                        not define any mechanism against a certain class of attack.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;An &amp;quot;insufficient&amp;quot; protection mechanism might provide some defenses -
                        for example, against the most common attacks - but it does not protect against everything that
                        is intended.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Finally, an &amp;quot;ignored&amp;quot; mechanism occurs when a mechanism is available
                        and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.807">
              <output/>
            </source>
            <references>
              <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-477" name="Use of Obsolete Function" state="0" impact="75" issueId="" issueLink="">
          <desc>The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.
&lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T09:48:50.678">
              <output/>
            </source>
            <references>
              <reference name="CWE-477: Use of Obsolete Function" url="https://cwe.mitre.org/data/definitions/477.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T10:04:19.860">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="WEB-CSP" name="Define a restrictive 'least privilege' Content Security Policy" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Content-Security-Policy instructs compliant browsers on how they may interact with external sites while in the current context. This enables the server to control interactive code and content from third parties, mitigating some client-side code injection attacks. The policy allows the server to specify what connections are permitted for each type of resource.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example, the following policy tells the browser to allow connections (including websockets) to the same domain to which the page was served: *.iriusrisk.com.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src 'self' wss://*.iriusrisk.com; img-src 'self' data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define and set a Content-Security-Policy with least-privileges to allow only those interactions which are explicitly required.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to determine if a&amp;nbsp;&lt;i&gt;Content-Security-Policy&amp;nbsp;&lt;/i&gt;header is returned, and if so, that it follows the security practice of least-privilege.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component's end-points.&lt;/li&gt;&lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;ul&gt;&lt;li&gt;Browse the site through the proxy&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For more information on &lt;i&gt;Content-Security-Policy&lt;/i&gt; policy setup, see:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-30T12:25:46.844">
              <output/>
            </source>
            <references>
              <reference name="Mozilla Developer Documentation - CSP" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and server, terminating within a secure environment on the server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-low-baseline" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:18.133">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASSETS-HOSTED-BY-APP" name="Ensure that all application assets are hosted by the application" issueId="" issueLink="" platform="" cost="0" risk="74" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Review periodically all assets which are accessed by the application and ensure that these
                        assets are hosted by the application. If this is not the case and there are assets in external
                        providers or a CDN, you shall move these assets to be hosted by the application and remove them
                        from external providers or CDNs.
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA SI-07 Software And Information Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/45-08_02_SI-07"/>
          </references>
          <standards>
            <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-8" supportedStandardRef="nist-csf"/>
            <standard ref="SI-7" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all assets are hosted by the application, and not by external providers.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2018-08-07T11:44:50.541">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="INS-CLIENT" name="Ensure the application does not use unsupported, insecure, or deprecated client-side technologies" issueId="" issueLink="" platform="" cost="0" risk="63" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure the application does not use unsupported, insecure, or deprecated client-side technologies such as: NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
 &lt;li&gt;Test the presence of any client side applet such as Flash, ActiveX and Silverlight.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-06-27T10:10:41.554">
              <output/>
            </source>
            <references>
              <reference name="Testing Information Gathering" url="https://www.owasp.org/index.php/Testing_Information_Gathering"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CS-CLIENT-SECRET" name="Implement sensitive logic and data validation on the server-side" issueId="" issueLink="" platform="" cost="1" risk="88" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data and functionalities on the client-side must be considered tainted and subject to manipulation by a malicious actor, regardless of the controls in place (e.g. encryption or obfuscation of client-side code or content). &lt;/p&gt; This includes application logic decisions, such as access controls, and data considered sensitive or secret, such as encryption keys. While controls may be duplicated on the client-side to improve the user experience, it is important to have these enforced on the server-side.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Business logic, in particular access controls, must be implemented on the server-side.&lt;/li&gt; 
  &lt;li&gt;Secret data should be stored on the server-side, and only what is explicitly required should be duplicated on the client-side.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;All data provided from the client-side (even from binary clients) should be considered tainted, and security decisions should not be made solely on this data. For example, an insecure implementation could include a compiled application (e.g. Flash!) performing authentication on the client-side against a stored password. The decompilation of the binary (in this case flv file) or the interception and modification of controls between the client and server could expose the password or allow unauthorized access to the authenticated application content. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-low-baseline" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify where critical decisions are made on the application. Key areas include:&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;authentication&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;input validation&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;access to resources&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;state bypasses&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Ensure those decisions are made or validated on the server side, particularly where client-side controls are implemented.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that sensitive data passed to the client side is appropriate, and ensure no inappropriate data is stored or hard-coded into client-side components, for example&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Personally Identifiable Information.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Financial data, in particular cardholder data (as defined by the &lt;span class="caps"&gt;PCI&lt;/span&gt; Council).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Application secrets - such as symmetric encryption keys or passwords.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-28T12:52:08.060">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-79-ENCODE" name="Perform contextual HTML encoding of all user submitted data" issueId="" issueLink="" platform=".NET" cost="1" risk="56" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk. If handled properly at the point of input, this untrusted tainted data should have been sanitized and encoded safely. The context when returning the data to the user is important, however, as this will affect what metacharacters have significance, and how they will be interpreted at the client-side. &lt;/p&gt;

 For example, if data is inserted into the &lt;span class="caps"&gt;HTML&lt;/span&gt; body then &lt;span class="caps"&gt;HTML&lt;/span&gt; Entity encoding should be performed, but if the data is inserted into a JavaScript block, then JavaScript escaping should be performed. Similarly, while JavaScript code should not be executed in the browser when returned in an application/json response, it may then be rendered in an unsafe manner. 
 - Apply contextual encoding to all tainted data when returned to the users (including secondary users if the application has multiple interfaces - e.g. an internal user viewing data entered by an external customer).
 - This should be in addition to, and in conjunction with, sanitization and encoding applied at the time of data acquisition.</desc>
          <implementations>
            <implementation platform=".NET">
              <desc>ClJlc3BvbnNlLldyaXRlKEh0dHBVdGlsaXR5Lkh0bWxFbmNvZGUoUmVxdWVzdC5Gb3JtWyJuYW1lIl0pKTs=</desc>
            </implementation>
            <implementation platform="Spring MVC">
              <desc>
                                CkluIHdlYi54bWwKCjxjb250ZXh0LXBhcmFtPgogICAgPHBhcmFtLW5hbWU+ZGVmYXVsdEh0bWxFc2NhcGU8L3BhcmFtLW5hbWU+CiAgICA8cGFyYW0tdmFsdWU+dHJ1ZTwvcGFyYW0tdmFsdWU+CjwvY29udGV4dC1wYXJhbT4=
                            </desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: XSS" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the areas of the application in which tainted data acquired from outside the application presented back (e.g. user input, uploaded files, third party content)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Review the encoding and sanitization applied to the data before presentation.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;If possible, pass metacharacters and other unexpected content through the application to review the efficacy of the encoding.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:21.033">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="excessive-permissions" name="Request only the minimum required permissions" issueId="" issueLink="" platform="" cost="0" risk="74" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Security best practice dictates the practice of least-privilege is followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
  Request only the minimum required permissions. For example, if there is no requirement to use the camera then the application should not request this permission.
&lt;/div&gt;
&lt;div&gt;
  Review features and functionality present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them and associated OS permissions.
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that the application only request the necessary permissions to work correctly.
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-09-30T09:11:03.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-CLIENT-SECRET" name="Review code, configuration, and online repositories for secrets and sensitive information systemically" issueId="" issueLink="" platform="" cost="0" risk="88" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secret or sensitive information should not be exposed in source-code or client-side software.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Code and online repositories must not contain secrets or sensitive information.&lt;/li&gt;&lt;li&gt;Configuration files on the client- and server-side must not contain hard-coded credentials or other sensitive data.&lt;/li&gt;&lt;li&gt;Online repositories, services, and other associated restricted content must have appropriate access controls in place.&lt;/li&gt;&lt;li&gt;Where sensitive information must be stored on the server side, it should be in memory for transient data, or encrypted if persistent. &amp;nbsp;Depending on the use case, this encryption may be asymmetric or public key, or symmetric using a shared secret. Note however that reversible encryption on the client-side and in-memory storage are still susceptible to client-side attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Use automated tools to regularly search for keywords or regular expression patterns within the code, configuration and other files exposed on the client and server-side, and any remote repositories.&lt;/li&gt;&lt;li&gt;The scanning process must be triggered before the code is published (in particular for public/open source code) as once published it is likely to be archived (and any disclosed secrets would be exposed and/or have to be changed)&lt;/li&gt;&lt;li&gt;Review criteria and requirements for any temporary or persistent storage of sensitive or secret data on the client-side, and the protections in place.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2016-11-29T17:54:26.128">
              <output/>
            </source>
            <references>
              <reference name="Amazon git-secrets" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Microsoft Exchange 2016 Sensitive Information Patterns" url="https://technet.microsoft.com/en-us/library/jj150541(v=exchg.160).aspx"/>
              <reference name="Prevents you from committing secrets and credentials into git repositories" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Seekret" url="https://github.com/apuigsech/seekret"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="94" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-10-17T12:53:45.100">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-attributes-of-cookies" name="Secure Cookies with their attributes" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID exchange mechanism based on cookies provides multiple security features in the form of cookie attributes that can be used to protect the exchange of the session ID:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Secure and HttpOnly Attribute:&lt;/strong&gt;&amp;nbsp;a secure cookie is only sent to the server with an encrypted request over the HTTPS protocol. Even with Secure, sensitive information should never be stored in cookies, as they are inherently insecure and this flag doesn't offer robust protection. Starting with Chrome 52 and Firefox 52, insecure sites (http:) can't set cookies with the Secure directive.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To mitigate cross-site scripting (XSS) attacks, HttpOnly cookies are inaccessible to JavaScript's Document.cookie API; they are only sent to the server. For example, cookies that persist server-side sessions don't need to be available to JavaScript, and so the HttpOnlyflag should be set.&lt;/p&gt;&lt;p&gt;Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SameSite Attribute: &amp;nbsp;&lt;/strong&gt;The SameSite attribute should be configured to limit exposure against cross-site request forgery attacks. There are two possibilities:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Strict:&lt;/strong&gt; the browser will only send cookies if the request originated from the website that set the cookie. If the request originated from a different URL than the URL of the current location, none of the cookies tagged with the Strict attribute will be included.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Lax:&lt;/strong&gt; if the attribute is set to Lax, same-site cookies are withheld on cross-site subrequests, such as calls to load images or frames, but will be sent when a user navigates to the URL from an external site, for example, by following a link.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;By default SameSite is not configured, we need to configure it with one of the above types, as shown below:&lt;/p&gt;&lt;p&gt;Set-Cookie: key=value; SameSite=Strict&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Domain and Path Attributes:&lt;/strong&gt; The session token value issued after users have successfully identified and authenticated themselves is of equivalent value to the secrets the user presents to login, and must be protected accordingly.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the cookie domain attribute is too liberal, the cookie may be accessible to other hosts within the parent domain. This is a particular issue in multi-tenanted hosting, or where applications are delivered as subdomains of a third party parent domain.&lt;/li&gt;&lt;li&gt;If the cookie path attribute is not appropriately restricted, the session token may be accessible from other applications or content on the server.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The domain and the path attributes for the session cookie should be restricted to the fully qualified hostname on which the application is running.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example:&lt;/p&gt;&lt;p&gt;Set-Cookie: session=token; Path=/theapp/; Domain=myapp.example.com; secure; HTTPOnly&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;__Host- prefix:&lt;/strong&gt; ensure that all Cookies with a name starting with __Host- are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;set with the secure flag,&lt;/li&gt;&lt;li&gt;from a secure page (HTTPS),&lt;/li&gt;&lt;li&gt;does not have a domain specified (and therefore aren't sent to subdomains)&lt;/li&gt;&lt;li&gt;and the path must be "/".&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="HttpOnly" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"/>
            <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"/>
            <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="__Host-Prefix" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"/>
          </references>
          <standards>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1" supportedStandardRef="nist-800-63"/>
            <standard ref="7.1.1" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Using a browser, open the Web Developer tools.&lt;/li&gt;&lt;li&gt;Load the Network inspection tab.&lt;/li&gt;&lt;li&gt;Load the endpoints of the application which set cookies (send the Set-Cookie HTTP header).&lt;/li&gt;&lt;li&gt;Check that within the HTTP response, the Set-Cookie has:&lt;ul&gt;&lt;li&gt;the path and domain attributes set to the most restrictive path and domain respectively.&lt;/li&gt;&lt;li&gt;'HttpOnly' and 'secure' flag set and configured&lt;/li&gt;&lt;li&gt;'SameSite' attribute configured.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check that all Cookies with a name starting with __Host- are:&lt;ul&gt;&lt;li&gt;set with the secure flag,&lt;/li&gt;&lt;li&gt;from a secure page (HTTPS),&lt;/li&gt;&lt;li&gt;does not have a domain specified (and therefore aren't sent to subdomains)&lt;/li&gt;&lt;li&gt;and the path is"/".&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-08-30T15:19:22.428">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-693-NOSNIFF" name="Set the HTTP security header 'X-Content-Type-Options' from the server" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of browser-based attacks rely on incorrectly stating MIME types on content in an attempt to bypass server and browser controls to render malicious content to the user.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set the &lt;i&gt;X-Content-Type-Options: nosniff&lt;/i&gt;&amp;nbsp;header on any page that displays previously uploaded content to prevent some XSS and related attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the HTTP Server responses to ensure the&amp;nbsp;&lt;i&gt;&lt;i&gt;X-Content-Type-Options:
                            nosniff&lt;/i&gt;&amp;nbsp;&lt;/i&gt;header is returned.&lt;/li&gt;
                            &lt;li&gt;Using a browser:&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the Web Developer Console.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Make requests to the different component's endpoints.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy&lt;/li&gt;
                            &lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:20.974">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="@cwe-693-clickjack" name="Set the HTTP security header 'X-Frame-Options header' from the server" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Prevent the page from being framed by setting the X-Frame-Options header&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Set the X-Frame-Options header to the value: SAMEORIGIN or DENY. &amp;nbsp;This header is honored by the following browser versions:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Chrome 4.1.249.1042&lt;/li&gt;&lt;li&gt;Firefox (Gecko) 3.6.9&lt;/li&gt;&lt;li&gt;Internet Explorer 8.0 9.0&lt;/li&gt;&lt;li&gt;Opera 10.50Safari 4.0&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Newer versions may also support the additional value: ALLOW-FROM which allows specifying URLs that are permitted to frame the page.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to ensure the&lt;i&gt;&amp;nbsp;X-Frame-Options: DENY &lt;/i&gt;header is returned.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the component's endpoints.&lt;/li&gt;&lt;li&gt;Verify the following header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;ul&gt;&lt;li&gt;Browse the site through the proxy&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:21.007">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), should be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
&lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity that issues security tokens or electronic credentials to subscribers. A CSP forms part of an authentication system, most typically identified as a separate entity in a Federated authentication system. A CSP may be an independent third party, or may issue credentials for its own use. Credential Service Provider is typically also the Identity Provider (IDP). An example of a CSP would be an online site whose primary purpose may be, for example, internet banking - but whose users may be subsequently authenticated to other sites, applications or services without further action on their part.&lt;/p&gt;
&lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
&lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying the claimant's possession and control of one or two authenticators, using an authentication protocol.&lt;/p&gt;
&lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically to process a transaction or grant access to information or a system.&lt;/p&gt;
&lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and identity proofing.&lt;/p&gt;
&lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more authentication protocols.&lt;/p&gt;
&lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2019-07-30T08:44:22.165">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Serialized Java objects&lt;/li&gt; 
 &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt; 
 &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt;To test data validation:&amp;nbsp; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp, Fiddler, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-07T14:11:14.845">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-295-CLIENT" name="Validate the certificate presented by the server" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Certificates presented by the server must be valid, provable, and cryptographically secure in order to derive the benefits of TLS encrypted communications.&amp;nbsp; Invalid certificates expose the application and its users to spoofing attacks such as Man In The Middle (MITM) where data may be intercepted or redirected to a malicious site, and undermine confidence in the site.&lt;/p&gt;&lt;p&gt;Validate the certificate presented by the server is signed by a trusted Certificate Authority.&lt;/p&gt;&lt;p&gt;Ensure the certificate chain of trust is legitimate and secure.&lt;/p&gt;&lt;p&gt;Verify cryptographically secure ciphers are in use throughout the chain, in particular strong hashing algorithms for certificate signatures.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-11 Trusted Path" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/71-08_02_SC-11"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
          </references>
          <standards>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify the client is conducting appropriate checks and receives a positive response regarding the validity and quality of the site certificate.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the server certificate, and those in the trust chain.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2015-08-15T17:17:13.775">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-327" name="Validate the TLS implementation in use" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="jonnytennyson@gmail.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There are a number of established open- and closed- source TLS implementations in use, which have undergone extensive review and testing by the developers, as well as third-parties in the development, security, and cryptography space. Typically, these widely used implementations have a lower risk of exploitation compared with privately developed - or less known - implementations (although vulnerabilities such as Heartbleed highlight this is not universally true) due to this additional scrutiny scrutiny.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify the TLS and other cryptographic libraries, implementations, and technologies in use.&lt;/li&gt;&lt;li&gt;Verify the veracity of the implementations, and review third party validations together with security advisories or best-practices relating to them.&lt;/li&gt;&lt;li&gt;Some well-known TLS libraries are NSS from Mozilla, and OpenSSL.&lt;/li&gt;&lt;li&gt;Where an unknown or unproven implementation is in use, consider use of an established option.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Compatibility" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="fedramp-high-baseline" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="fedramp-moderate-baseline" supportedStandardRef="fedramp-moderate-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm the TLS layer in use is a secure, stable, release of a publicly published implementation that has been subject to expert analysis and review.&lt;ul&gt;&lt;li&gt;If not, assurance of the security of the implementation should be sought, or the risk quantified.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that a client connecting to the server will only be able to negotiate cryptographically strong, secure ciphers.&lt;/li&gt;&lt;li&gt;Confirm that a client can not downgrade to a weaker cipher after initial negotiation.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the TLS/SSL ciphers, protocols, and security mechanisms.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2017-03-22T10:05:11.074">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-63" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-937-WEB" name="Attackers gain unauthorised access to data by compromising third party web resources" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>Web applications typically make extensive use of 3rd party web resources such as
                                JavaScript and CSS files.&amp;nbsp; Should attackers gain access to the source code
                                repositories, or even Content Delivery Networks that host these libraries, then they
                                could gain access to applications that use this content.
                                &lt;div&gt;
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-830">
                  <countermeasures>
                    <countermeasure ref="ASSETS-HOSTED-BY-APP" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSETS-HOSTED-BY-APP" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CSD-CLIENT-SECRET" name="Attackers gain unauthorised access to data or services by accessing a client side secret" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>Secrets stored in any client side components, such as a mobile application, thick
                                client application or in JavaScript used by a browser, can be accessed by
                                users/attackers who have access to this client.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Attackers could then gain access to the data or services that are protected by this
                                secret, if no other credentials are required.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-798, CWE-603">
                  <countermeasures>
                    <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="DEP-CLIENT-TECH" name="Attackers gain unauthorised access to the application by the use of deprecated client-side technologies" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  As programming languages evolve, functions occasionally become obsolete due to:
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;Advances in the language.&lt;/li&gt;
 &lt;li&gt;Improved understanding of how operations should be performed effectively and securely.&lt;/li&gt;
 &lt;li&gt;Changes in the conventions that govern certain operations. &lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-477">
                  <countermeasures>
                    <countermeasure ref="INS-CLIENT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="INS-CLIENT" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-63" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693-NOSNIFF">
                  <countermeasures>
                    <countermeasure ref="CWE-693-NOSNIFF" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-79">
                  <countermeasures>
                    <countermeasure ref="CWE-79-ENCODE" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-84-HTTP-ONLY">
                  <countermeasures>
                    <countermeasure ref="secure-attributes-of-cookies" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="WEB-CSP">
                  <countermeasures>
                    <countermeasure ref="WEB-CSP" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-693-NOSNIFF" mitigation="33"/>
                <countermeasure ref="CWE-79-ENCODE" mitigation="34"/>
                <countermeasure ref="WEB-CSP" mitigation="33"/>
                <countermeasure ref="secure-attributes-of-cookies" mitigation="10"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed to the other component as if it were never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-295-CLIENT" mitigation="34"/>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="33"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="CWE-327" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-295-CLIENT" mitigation="34"/>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="33"/>
                <countermeasure ref="CWE-327" mitigation="33"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="10"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="excessive-permissions" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="excessive-permissions" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="TRANSACTION AUTHENTICATION" name="Transaction Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-103" name="Attackers cause users to peform arbitrary clicks on the site through ClickJacking attacks" state="Expose" source="RULES" edited="false" owner="jonnytennyson@gmail.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from a seemingly different system.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers actions in the transparent overlaying layer.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Depending on what that action is, the attacker may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;The basic problem here is that there is a dichotomy between what the victim thinks he's clicking versus what he or she is actually clicking on.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693-CLICKJACK">
                  <countermeasures>
                    <countermeasure ref="@cwe-693-clickjack" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="@cwe-693-clickjack" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>
