<?xml version="1.0" encoding="UTF-8"?>
<template ref="sample-system-template" name="sample-system template" tags="Community">
  <desc/>
  <diagram draft="false">
    <schema>PG14R3JhcGhNb2RlbCBkeD0iMTE0MCIgZHk9IjgxOCIgZ3JpZD0iMCIgZ3JpZFNpemU9IjEwIiBndWlkZXM9IjEiIHRvb2x0aXBzPSIxIiBjb25uZWN0PSIxIiBhcnJvd3M9IjEiIGZvbGQ9IjEiIHBhZ2U9IjAiIHBhZ2VTY2FsZT0iMSIgcGFnZVdpZHRoPSI4NTAiIHBhZ2VIZWlnaHQ9IjExMDAiIG1hdGg9IjAiIHNoYWRvdz0iMCIgaXJEcmF3aW9WZXJzaW9uPSI1LjEuMCI+PHJvb3Q+PG14Q2VsbCBpZD0iMCIvPjxteENlbGwgaWQ9IjEiIHBhcmVudD0iMCIvPjxteENlbGwgaWQ9InRlbXBsYXRlLTE2NTQyMDY1LWYwYmE3NzIyLTM5YjYtNGM4MS04MjkwLWEzMGEyNDhiYjhkOS05IiB2YWx1ZT0iSW50ZXJuZXQiIHN0eWxlPSJpci5yZWY9ZjBiYTc3MjItMzliNi00YzgxLTgyOTAtYTMwYTI0OGJiOGQ5O3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7cmVjdXJzaXZlUmVzaXplPTA7aHRtbD0xO3ZlcnRpY2FsQWxpZ249dG9wO2FsaWduPWxlZnQ7ZGFzaGVkPTE7c3Ryb2tlV2lkdGg9MTthcmNTaXplPTM7YWJzb2x1dGVBcmNTaXplPTE7c3BhY2luZ1RvcD0xO3NwYWNpbmdMZWZ0PTMyO3N0cm9rZUNvbG9yPSM3NTc1RUI7ZmlsbENvbG9yPSNGMEYwRkY7ZmlsbE9wYWNpdHk9MzA7Zm9udENvbG9yPSM1NjUxRTA7Y29ubmVjdGFibGU9MDtjb250YWluZXI9MTtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9VFJVU1RaT05FOyIgcGFyZW50PSIxIiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiPjxteEdlb21ldHJ5IHg9Ii0yNDYiIHk9Ii00IiB3aWR0aD0iMjMwIiBoZWlnaHQ9IjM1MSIgYXM9Imdlb21ldHJ5Ii8+PC9teENlbGw+PG14Q2VsbCBpZD0idGVtcGxhdGUtMTY1NDIwNjUtYTNjNjczMWMtMzUzYy00YjUzLTgxZDEtYjM1OGJlZTYxYWRjLTMiIHZhbHVlPSJXZWIgQ2xpZW50IiBzdHlsZT0iaXIucmVmPWEzYzY3MzFjLTM1M2MtNGI1My04MWQxLWIzNThiZWU2MWFkYztyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1jZW50ZXI7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTkwO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTI7c291cmNlPWlyaXVzcmlzaztpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj13ZWItY2xpZW50O2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BITjBlV3hsUGlZamVHRTdJQ0FnSUM1cFkyOXVMV1pwYkd3Z2V5WWplR0U3SUNBZ0lDQWdJQ0JtYVd4c09pQWpNVEZCT0VOR095WWplR0U3SUNBZ0lIMG1JM2hoT3p3dmMzUjViR1UrSmlONFlUczhaeUJqYkdsd0xYQmhkR2c5SW5WeWJDZ2pZMnhwY0RBcElqNG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqWTFNRE01T0NBd0xqWTVOREk1TWtNd0xqWTBOamszTmlBd0xqWTVORE01T0NBd0xqWTBNelUwTVNBd0xqWTVORFExTWlBd0xqWTBNREE1TXlBd0xqWTVORFExTWtNd0xqWXpOalkwTmlBd0xqWTVORFExTWlBd0xqWXpNekl4TVNBd0xqWTVORE01T0NBd0xqWXlPVGM0T1NBd0xqWTVOREk1TWtnd0xqSTFOakE1TTBNd0xqSXlNelEyTmlBd0xqWTVOREk1TWlBd0xqRTVOekF4TmlBd0xqWTJOemcxT0NBd0xqRTVOekF4TmlBd0xqWXpOVEkxTVZZd0xqSTRNVEUyTjBNd0xqRTVOekF4TmlBd0xqSTBPRFUySURBdU1qSXpORFkySURBdU1qSXlNVEkzSURBdU1qVTJNRGt6SURBdU1qSXlNVEkzU0RBdU16VXdOVGs1UXpBdU16WXhOREEwSURBdU1qQXhNREF6SURBdU16YzBORFUySURBdU1UZ3hNakU0SURBdU16ZzVORE01SURBdU1UWXpNRGcyU0RBdU1qVTJNRGt6UXpBdU1Ua3dPRE01SURBdU1UWXpNRGcySURBdU1UTTNPVE01SURBdU1qRTFPVFV6SURBdU1UTTNPVE01SURBdU1qZ3hNVFkzVmpBdU5qTTFNalV4UXpBdU1UTTNPVE01SURBdU56QXdORFkySURBdU1Ua3dPRE01SURBdU56VXpNek15SURBdU1qVTJNRGt6SURBdU56VXpNek15U0RBdU16YzBOVFF6VmpBdU9ERXpNREEwVERBdU1qZzFPVGcxSURBdU9ERXpNREExUXpBdU1qWTVOamN4SURBdU9ERXpNREExSURBdU1qVTJORFEzSURBdU9ESTJNakl5SURBdU1qVTJORFEzSURBdU9EUXlOVEkyUXpBdU1qVTJORFEzSURBdU9EVTRPREk1SURBdU1qWTVOamN5SURBdU9EY3lNRFEySURBdU1qZzFPVGcySURBdU9EY3lNRFEyVERBdU5qazVNamsySURBdU9EY3lNRFF6UXpBdU56RTFOakVnTUM0NE56SXdORElnTUM0M01qZzRNelFnTUM0NE5UZzRNallnTUM0M01qZzRNelFnTUM0NE5ESTFNakpETUM0M01qZzRNelFnTUM0NE1qWXlNVGdnTUM0M01UVTJNRGtnTUM0NE1UTXdNRElnTUM0Mk9Ua3lPVFVnTUM0NE1UTXdNREpNTUM0Mk1UQTNNamdnTUM0NE1UTXdNRE5XTUM0M05UTXpNekpJTUM0M01qZzNNRGxETUM0M09UTTVOak1nTUM0M05UTXpNeklnTUM0NE5EWTROaklnTUM0M01EQTBOallnTUM0NE5EWTROaklnTUM0Mk16VXlOVEZXTUM0Mk1qQXlNamhETUM0NE1qWTROVGNnTUM0Mk16WTNNemtnTUM0NE1EUTROREVnTUM0Mk5UQTVNRE1nTUM0M09ERXlNellnTUM0Mk5qSXlPVGhETUM0M056RTBNVGtnTUM0Mk9ERXpJREF1TnpVeE5UZ3lJREF1TmprME1qa3lJREF1TnpJNE56QTVJREF1TmprME1qa3lTREF1TmpVd016azRXazB3TGpVMU1UWTFNU0F3TGpneE16QXdNMHd3TGpRek16WXlJREF1T0RFek1EQTBWakF1TnpVek16TXlTREF1TlRVeE5qVXhWakF1T0RFek1EQXpXaUlnWTJ4aGMzTTlJbWxqYjI0dFptbHNiQ0l2UGlZamVHRTdQSEJoZEdnZ1ptbHNiQzF5ZFd4bFBTSmxkbVZ1YjJSa0lpQmpiR2x3TFhKMWJHVTlJbVYyWlc1dlpHUWlJR1E5SWswd0xqWXlPVEF5TVNBd0xqWTBNekk1TmtNd0xqYzNOVEkwTmlBd0xqWTBNekk1TmlBd0xqZzVNemM0TkNBd0xqVXlORGMxTnlBd0xqZzVNemM0TkNBd0xqTTNPRFV6TWtNd0xqZzVNemM0TkNBd0xqSXpNak13T0NBd0xqYzNOVEkwTmlBd0xqRXhNemMzSURBdU5qSTVNREl4SURBdU1URXpOemRETUM0ME9ESTNPVFlnTUM0eE1UTTNOeUF3TGpNMk5ESTFPQ0F3TGpJek1qTXdPQ0F3TGpNMk5ESTFPQ0F3TGpNM09EVXpNa013TGpNMk5ESTFPQ0F3TGpVeU5EYzFOeUF3TGpRNE1qYzVOaUF3TGpZME16STVOaUF3TGpZeU9UQXlNU0F3TGpZME16STVObHBOTUM0M09EVTBOVFlnTUM0ek56ZzFNVFpETUM0M09EVTBOVFlnTUM0ME5qUTVNakVnTUM0M01UVTBNU0F3TGpVek5EazJOaUF3TGpZeU9UQXdOU0F3TGpVek5EazJOa013TGpVME1qWXdNU0F3TGpVek5EazJOaUF3TGpRM01qVTFOU0F3TGpRMk5Ea3lNU0F3TGpRM01qVTFOU0F3TGpNM09EVXhOa013TGpRM01qVTFOU0F3TGpJNU1qRXhNU0F3TGpVME1qWXdNU0F3TGpJeU1qQTJOaUF3TGpZeU9UQXdOU0F3TGpJeU1qQTJOa013TGpjeE5UUXhJREF1TWpJeU1EWTJJREF1TnpnMU5EVTJJREF1TWpreU1URXhJREF1TnpnMU5EVTJJREF1TXpjNE5URTJXazB3TGpZMk5qSTNNU0F3TGpJNE1EUTNORU13TGpZMU5EVXhPQ0F3TGpJMU5UQXhJREF1TmpRd05UTTFJREF1TWpRME5ERTJJREF1TmpJNU1EQTFJREF1TWpRME5ERTJRekF1TmpFM05EYzJJREF1TWpRME5ERTJJREF1TmpBek5Ea3pJREF1TWpVMU1ERWdNQzQxT1RFM05DQXdMakk0TURRM05FTXdMalU0TnpVMk5DQXdMakk0T1RVeU15QXdMalU0TXprek5TQXdMakk1T1RrMU15QXdMalU0TVRBeE9DQXdMak14TVRRMk5rZ3dMalkzTmprNU1rTXdMalkzTkRBM05pQXdMakk1T1RrMU15QXdMalkzTURRME5pQXdMakk0T1RVeU15QXdMalkyTmpJM01TQXdMakk0TURRM05GcE5NQzQxTlRnd01qa2dNQzR6TVRFME5qWkRNQzQxTmpFME5ETWdNQzR5T1RZMU56UWdNQzQxTmpVNU56a2dNQzR5T0RJNU5UY2dNQzQxTnpFME5EY2dNQzR5TnpFeE1EaERNQzQxTnpRek9ERWdNQzR5TmpRM05UUWdNQzQxTnpjM0lEQXVNalU0TmpnMUlEQXVOVGd4TXprZ01DNHlOVE14TVRaRE1DNDFOVEl6T0RjZ01DNHlOalF4TXpRZ01DNDFNamd4T1RnZ01DNHlPRFE1TWpVZ01DNDFNVEk0TkRZZ01DNHpNVEUwTmpaSU1DNDFOVGd3TWpsYVRUQXVOVFV3TnpneElEQXVNemM0TlRFMlF6QXVOVFV3TnpneElEQXVNell6TURJNUlEQXVOVFV4T0RZeklEQXVNelE0TURFMElEQXVOVFV6T0RrMklEQXVNek16T0RFMlNEQXVOVEF5TlRNMVF6QXVORGszTlRrMUlEQXVNelEzTnprM0lEQXVORGswT1RBMUlEQXVNell5T0RReklEQXVORGswT1RBMUlEQXVNemM0TlRFMlF6QXVORGswT1RBMUlEQXVNemswTVRrZ01DNDBPVGMxT1RVZ01DNDBNRGt5TXpVZ01DNDFNREkxTXpVZ01DNDBNak15TVRaSU1DNDFOVE00T1RaRE1DNDFOVEU0TmpNZ01DNDBNRGt3TVRrZ01DNDFOVEEzT0RFZ01DNHpPVFF3TURRZ01DNDFOVEEzT0RFZ01DNHpOemcxTVRaYVRUQXVOVGN4TkRRM0lEQXVORGcxT1RJMFF6QXVOVFkxT1RjNUlEQXVORGMwTURjMklEQXVOVFl4TkRReklEQXVORFl3TkRVNUlEQXVOVFU0TURJNUlEQXVORFExTlRZM1NEQXVOVEV5T0RRMlF6QXVOVEk0TVRrNElEQXVORGN5TVRBNElEQXVOVFV5TXpnM0lEQXVORGt5T0RrNElEQXVOVGd4TXprZ01DNDFNRE01TVRkRE1DNDFOemMzSURBdU5EazRNelE0SURBdU5UYzBNemd4SURBdU5Ea3lNamM1SURBdU5UY3hORFEzSURBdU5EZzFPVEkwV2swd0xqWTJOakkzTVNBd0xqUTNOalUxT1VNd0xqWTNNRFEwTmlBd0xqUTJOelV4SURBdU5qYzBNRGMySURBdU5EVTNNRGdnTUM0Mk56WTVPVElnTUM0ME5EVTFOamRJTUM0MU9ERXdNVGhETUM0MU9ETTVNelVnTUM0ME5UY3dPQ0F3TGpVNE56VTJOQ0F3TGpRMk56VXhJREF1TlRreE56UWdNQzQwTnpZMU5UbERNQzQyTURNME9UTWdNQzQxTURJd01qSWdNQzQyTVRjME56WWdNQzQxTVRJMk1UY2dNQzQyTWprd01EVWdNQzQxTVRJMk1UZERNQzQyTkRBMU16VWdNQzQxTVRJMk1UY2dNQzQyTlRRMU1UZ2dNQzQxTURJd01qSWdNQzQyTmpZeU56RWdNQzQwTnpZMU5UbGFUVEF1TlRjek1UTWdNQzR6TnpnMU1UWkRNQzQxTnpNeE15QXdMak01TkRJek9DQXdMalUzTkRNeU5DQXdMalF3T1RJMk9DQXdMalUzTmpRNU1pQXdMalF5TXpJeE5rZ3dMalk0TVRVeE9VTXdMalk0TXpZNE55QXdMalF3T1RJMk9DQXdMalk0TkRnNE1TQXdMak01TkRJek9DQXdMalk0TkRnNE1TQXdMak0zT0RVeE5rTXdMalk0TkRnNE1TQXdMak0yTWpjNU5TQXdMalk0TXpZNE55QXdMak0wTnpjMk5TQXdMalk0TVRVeE9TQXdMak16TXpneE5rZ3dMalUzTmpRNU1rTXdMalUzTkRNeU5DQXdMak0wTnpjMk5TQXdMalUzTXpFeklEQXVNell5TnprMUlEQXVOVGN6TVRNZ01DNHpOemcxTVRaYVRUQXVOelExTVRZMUlEQXVORFExTlRZM1NEQXVOams1T1RneVF6QXVOamsyTlRZNElEQXVORFl3TkRVNUlEQXVOamt5TURNeUlEQXVORGMwTURjMklEQXVOamcyTlRZeklEQXVORGcxT1RJMFF6QXVOamd6TmpNZ01DNDBPVEl5TnprZ01DNDJPREF6TVRNZ01DNDBPVGd6TkRnZ01DNDJOelkyTWpJZ01DNDFNRE01TVRkRE1DNDNNRFUyTWpRZ01DNDBPVEk0T1RnZ01DNDNNams0TVRNZ01DNDBOekl4TURnZ01DNDNORFV4TmpVZ01DNDBORFUxTmpkYVRUQXVOekEwTVRFMUlEQXVOREl6TWpFMlNEQXVOelUxTkRjMlF6QXVOell3TkRFMklEQXVOREE1TWpNMUlEQXVOell6TVRBMUlEQXVNemswTVRrZ01DNDNOak14TURVZ01DNHpOemcxTVRaRE1DNDNOak14TURVZ01DNHpOakk0TkRNZ01DNDNOakEwTVRZZ01DNHpORGMzT1RjZ01DNDNOVFUwTnpZZ01DNHpNek00TVRaSU1DNDNNRFF4TVRWRE1DNDNNRFl4TkRnZ01DNHpORGd3TVRRZ01DNDNNRGN5TXpJZ01DNHpOak13TWprZ01DNDNNRGN5TXpJZ01DNHpOemcxTVRaRE1DNDNNRGN5TXpJZ01DNHpPVFF3TURRZ01DNDNNRFl4TkRnZ01DNDBNRGt3TVRrZ01DNDNNRFF4TVRVZ01DNDBNak15TVRaYVRUQXVOelExTVRZMUlEQXVNekV4TkRZMlF6QXVOekk1T0RFeklEQXVNamcwT1RJMUlEQXVOekExTmpJMElEQXVNalkwTVRNMElEQXVOamMyTmpJeUlEQXVNalV6TVRFMlF6QXVOamd3TXpFeklEQXVNalU0TmpnMUlEQXVOamd6TmpNZ01DNHlOalEzTlRRZ01DNDJPRFkxTmpNZ01DNHlOekV4TURoRE1DNDJPVEl3TXpJZ01DNHlPREk1TlRjZ01DNDJPVFkxTmpnZ01DNHlPVFkxTnpRZ01DNDJPVGs1T0RJZ01DNHpNVEUwTmpaSU1DNDNORFV4TmpWYUlpQmpiR0Z6Y3owaWFXTnZiaTFtYVd4c0lpOCtKaU40WVRzOEwyYytKaU40WVRzOFpHVm1jejRtSTNoaE96eGpiR2x3VUdGMGFDQnBaRDBpWTJ4cGNEQWlQaVlqZUdFN1BISmxZM1FnZDJsa2RHZzlJakF1T1RnME5qRTFJaUJvWldsbmFIUTlJakF1T1RnME5qRTFJaUJtYVd4c1BTSjNhR2wwWlNJZ2RISmhibk5tYjNKdFBTSjBjbUZ1YzJ4aGRHVW9NQ0F3TGpBeE5UTTRNRGtwSWk4K0ppTjRZVHM4TDJOc2FYQlFZWFJvUGlZamVHRTdQQzlrWldaelBpWWplR0U3UEM5emRtYys7dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTsiIHBhcmVudD0idGVtcGxhdGUtMTY1NDIwNjUtZjBiYTc3MjItMzliNi00YzgxLTgyOTAtYTMwYTI0OGJiOGQ5LTkiIHZlcnRleD0iMSIgaXNUaHVtYj0iMCI+PG14R2VvbWV0cnkgeD0iNzAiIHk9IjIwOCIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS1kZTFkZDE1ZC01MjQyLTRkMGUtOTEzYy0wOWQyZDM4MWRmYjctMjUiIHZhbHVlPSJNb2JpbGUgRGV2aWNlIENsaWVudCIgc3R5bGU9ImlyLnJlZj1kZTFkZDE1ZC01MjQyLTRkMGUtOTEzYy0wOWQyZDM4MWRmYjc7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9bW9iaWxlLWRldmljZS1jbGllbnQ7aW1hZ2U9ZGF0YTppbWFnZS9zdmcreG1sLFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUhacFpYZENiM2c5SWpBZ01DQXhJREVpSUdacGJHdzlJbTV2Ym1VaVBpWWplR0U3UEhOMGVXeGxQaVlqZUdFN0lDQWdJQzVwWTI5dUxXWnBiR3dnZXlZamVHRTdJQ0FnSUNBZ0lDQm1hV3hzT2lBak1URkJPRU5HT3lZamVHRTdJQ0FnSUgwbUkzaGhPend2YzNSNWJHVStKaU40WVRzOFp5QmpiR2x3TFhCaGRHZzlJblZ5YkNnalkyeHBjREFwSWo0bUkzaGhPenh3WVhSb0lHWnBiR3d0Y25Wc1pUMGlaWFpsYm05a1pDSWdZMnhwY0MxeWRXeGxQU0psZG1WdWIyUmtJaUJrUFNKTk1DNHpOVEEyTWpjZ01DNHhNamsyTXpsRE1DNHlPVGcwTWpNZ01DNHhNamsyTXprZ01DNHlOVFl4TURRZ01DNHhOekU1TlRnZ01DNHlOVFl4TURRZ01DNHlNalF4TmpGV01DNDNPVEV5T1RkRE1DNHlOVFl4TURRZ01DNDRORE0xTURFZ01DNHlPVGcwTWpNZ01DNDRPRFU0TWlBd0xqTTFNRFl5TnlBd0xqZzROVGd5U0RBdU5qTTBNVGsyUXpBdU5qZzJNems1SURBdU9EZzFPRElnTUM0M01qZzNNVGtnTUM0NE5ETTFNREVnTUM0M01qZzNNVGtnTUM0M09URXlPVGRXTUM0eU1qUXhOakZETUM0M01qZzNNVGtnTUM0eE56RTVOVGdnTUM0Mk9EWXpPVGtnTUM0eE1qazJNemtnTUM0Mk16UXhPVFlnTUM0eE1qazJNemxJTUM0ek5UQTJNamRhVFRBdU16STJPVGsySURBdU1qRXlNelEyUXpBdU16STJPVGsySURBdU1UazVNamsxSURBdU16TTNOVGMySURBdU1UZzROekUxSURBdU16VXdOakkzSURBdU1UZzROekUxU0RBdU5qTTBNVGsyUXpBdU5qUTNNalEzSURBdU1UZzROekUxSURBdU5qVTNPREkzSURBdU1UazVNamsxSURBdU5qVTNPREkzSURBdU1qRXlNelEyVmpBdU56TXlNakl4UXpBdU5qVTNPREkzSURBdU56UTFNamN4SURBdU5qUTNNalEzSURBdU56VTFPRFV4SURBdU5qTTBNVGsySURBdU56VTFPRFV4U0RBdU16VXdOakkzUXpBdU16TTNOVGMySURBdU56VTFPRFV4SURBdU16STJPVGsySURBdU56UTFNamN4SURBdU16STJPVGsySURBdU56TXlNakl4VmpBdU1qRXlNelEyV2swd0xqUTJORGcwTWlBd0xqZzFNRE0zTkVNd0xqUTBPVFl4TmlBd0xqZzFNRE0zTkNBd0xqUXpOekkzTXlBd0xqZ3pPREF6SURBdU5ETTNNamN6SURBdU9ESXlPREEwUXpBdU5ETTNNamN6SURBdU9EQTNOVGM0SURBdU5EUTVOakUySURBdU56azFNak0xSURBdU5EWTBPRFF5SURBdU56azFNak0xU0RBdU5URTVPVGhETUM0MU16VXlNRFlnTUM0M09UVXlNelVnTUM0MU5EYzFOU0F3TGpnd056VTNPQ0F3TGpVME56VTFJREF1T0RJeU9EQTBRekF1TlRRM05UVWdNQzQ0TXpnd015QXdMalV6TlRJd05pQXdMamcxTURNM05DQXdMalV4T1RrNElEQXVPRFV3TXpjMFNEQXVORFkwT0RReVdpSWdZMnhoYzNNOUltbGpiMjR0Wm1sc2JDSXZQaVlqZUdFN1BDOW5QaVlqZUdFN1BHUmxabk0rSmlONFlUczhZMnhwY0ZCaGRHZ2dhV1E5SW1Oc2FYQXdJajRtSTNoaE96eHlaV04wSUhkcFpIUm9QU0l3TGprNE5EWXhOU0lnYUdWcFoyaDBQU0l3TGprNE5EWXhOU0lnWm1sc2JEMGlkMmhwZEdVaUlIUnlZVzV6Wm05eWJUMGlkSEpoYm5Oc1lYUmxLREF1TURBd01qUTBNVFF4SURBdU1ERTFNemd3T1NraUx6NG1JM2hoT3p3dlkyeHBjRkJoZEdnK0ppTjRZVHM4TDJSbFpuTStKaU40WVRzOEwzTjJaejQ9O3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207dmVydGljYWxBbGlnbj10b3A7aXIuc3luY2hyb25pemVkPTE7IiBwYXJlbnQ9InRlbXBsYXRlLTE2NTQyMDY1LWYwYmE3NzIyLTM5YjYtNGM4MS04MjkwLWEzMGEyNDhiYjhkOS05IiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiPjxteEdlb21ldHJ5IHg9IjY2IiB5PSI0NyIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS0yYWI0ZWZmYS00MGI3LTRjZDItYmE4MS04MjQ3ZDI5YTZmMmQtMTAiIHZhbHVlPSJQcml2YXRlIFNlY3VyZWQiIHN0eWxlPSJpci5yZWY9MmFiNGVmZmEtNDBiNy00Y2QyLWJhODEtODI0N2QyOWE2ZjJkO3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7cmVjdXJzaXZlUmVzaXplPTA7aHRtbD0xO3ZlcnRpY2FsQWxpZ249dG9wO2FsaWduPWxlZnQ7ZGFzaGVkPTE7c3Ryb2tlV2lkdGg9MTthcmNTaXplPTM7YWJzb2x1dGVBcmNTaXplPTE7c3BhY2luZ1RvcD0xO3NwYWNpbmdMZWZ0PTMyO3N0cm9rZUNvbG9yPSM3NTc1RUI7ZmlsbENvbG9yPSNGMEYwRkY7ZmlsbE9wYWNpdHk9MzA7Zm9udENvbG9yPSM1NjUxRTA7Y29ubmVjdGFibGU9MDtjb250YWluZXI9MTtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9VFJVU1RaT05FOyIgcGFyZW50PSIxIiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiPjxteEdlb21ldHJ5IHg9Ijc1IiB5PSItMzUiIHdpZHRoPSI3OTUiIGhlaWdodD0iNDI5IiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS0xOCIgc3R5bGU9ImlyLmFzc2V0cz07aXIudGFncz07ZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzb3VyY2VQZXJpbWV0ZXJTcGFjaW5nPTk7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yOyIgcGFyZW50PSJ0ZW1wbGF0ZS0xNjU0MjA2NS0yYWI0ZWZmYS00MGI3LTRjZDItYmE4MS04MjQ3ZDI5YTZmMmQtMTAiIHNvdXJjZT0idGVtcGxhdGUtMTY1NDIwNjUtYzM1YWRjOTYtMzk2OC00MjQ4LTg0MjItYjM2ZjY4MDVlOGY2LTciIHRhcmdldD0idGVtcGxhdGUtMTY1NDIwNjUtMTIiIGVkZ2U9IjEiPjxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS1jMzVhZGM5Ni0zOTY4LTQyNDgtODQyMi1iMzZmNjgwNWU4ZjYtNyIgdmFsdWU9IlJFU1RmdWwgV2ViIFNlcnZpY2UiIHN0eWxlPSJpci5yZWY9YzM1YWRjOTYtMzk2OC00MjQ4LTg0MjItYjM2ZjY4MDVlOGY2O3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWNlbnRlcjtpbWFnZUFsaWduPWNlbnRlcjtpbWFnZVdpZHRoPTgyO2ltYWdlSGVpZ2h0PTgyO2FyY1NpemU9OTA7YWJzb2x1dGVBcmNTaXplPTE7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDtmb250U2l6ZT0xMjtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9Q09NUE9ORU5UO2lyLmNvbXBvbmVudERlZmluaXRpb24ucmVmPXJlc3QtZnVsbC13ZWItc2VydmljZTtpbWFnZT1kYXRhOmltYWdlL3N2Zyt4bWwsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlJSFpwWlhkQ2IzZzlJakFnTUNBeElERWlJR1pwYkd3OUltNXZibVVpUGlZamVHRTdQSE4wZVd4bFBpWWplR0U3SUNBZ0lDNXBZMjl1TFdacGJHd2dleVlqZUdFN0lDQWdJQ0FnSUNCbWFXeHNPaUFqTVRGQk9FTkdPeVlqZUdFN0lDQWdJSDBtSTNoaE96d3ZjM1I1YkdVK0ppTjRZVHM4WnlCamJHbHdMWEJoZEdnOUluVnliQ2dqWTJ4cGNEQXBJajRtSTNoaE96eG5JR05zYVhBdGNHRjBhRDBpZFhKc0tDTmpiR2x3TVNraVBpWWplR0U3UEhCaGRHZ2dabWxzYkMxeWRXeGxQU0psZG1WdWIyUmtJaUJqYkdsd0xYSjFiR1U5SW1WMlpXNXZaR1FpSUdROUlrMHdMak00TmpFNE1pQXdMakkwT1RNME5rTXdMak00TmpFNE1pQXdMakl6TlRnNE5DQXdMak01TnpBNU5TQXdMakl5TkRrM01TQXdMalF4TURVMU55QXdMakl5TkRrM01VZ3dMalU0T1RNd04wTXdMall3TWpjMk9TQXdMakl5TkRrM01TQXdMall4TXpZNE1pQXdMakl6TlRnNE5DQXdMall4TXpZNE1pQXdMakkwT1RNME5rTXdMall4TXpZNE1pQXdMakkyTWpnd09DQXdMall3TWpjMk9TQXdMakkzTXpjeU1TQXdMalU0T1RNd055QXdMakkzTXpjeU1VZ3dMalF4TURVMU4wTXdMak01TnpBNU5TQXdMakkzTXpjeU1TQXdMak00TmpFNE1pQXdMakkyTWpnd09DQXdMak00TmpFNE1pQXdMakkwT1RNME5scE5NQzQwTVRBMU5UY2dNQzQxT0RJME56RkRNQzR6T1Rjd09UVWdNQzQxT0RJME56RWdNQzR6T0RZeE9ESWdNQzQxT1RNek9EUWdNQzR6T0RZeE9ESWdNQzQyTURZNE5EWkRNQzR6T0RZeE9ESWdNQzQyTWpBek1EY2dNQzR6T1Rjd09UVWdNQzQyTXpFeU1qRWdNQzQwTVRBMU5UY2dNQzQyTXpFeU1qRklNQzQxTXpJNU5UTkRNQzQxTXpZMk5EY2dNQzQyTVRNMU1UTWdNQzQxTkRNMk9EWWdNQzQxT1Rjd016SWdNQzQxTlRNek9DQXdMalU0TWpRM01VZ3dMalF4TURVMU4xcE5NQzQyTkRZeE9ESWdNQzQxTWpFNU4xWXdMakU1TWpRM01VTXdMalkwTmpFNE1pQXdMakUyTlRVME55QXdMall5TkRNMU5TQXdMakUwTXpjeU1TQXdMalU1TnpRek1TQXdMakUwTXpjeU1VZ3dMalF3TWpRek1VTXdMak0zTlRVd055QXdMakUwTXpjeU1TQXdMak0xTXpZNE1pQXdMakUyTlRVME55QXdMak0xTXpZNE1pQXdMakU1TWpRM01WWXdMalkwTnpRM1F6QXVNelV6TmpneUlEQXVOamMwTXprMElEQXVNemMxTlRBM0lEQXVOamsyTWpJeElEQXVOREF5TkRNeElEQXVOamsyTWpJeFNEQXVOVE0wTnpRMlF6QXVOVE01TlRNNUlEQXVOekUwTVRReUlEQXVOVFEzT0RBeElEQXVOek13TmpRMklEQXVOVFU0TnpZMUlEQXVOelEwT1RjeFNEQXVOREF5TkRNeFF6QXVNelE0TlRnMElEQXVOelEwT1RjeElEQXVNekEwT1RNeUlEQXVOekF4TXpFNElEQXVNekEwT1RNeUlEQXVOalEzTkRkV01DNHhPVEkwTnpGRE1DNHpNRFE1TXpJZ01DNHhNemcyTWpNZ01DNHpORGcxT0RRZ01DNHdPVFE1TnpBM0lEQXVOREF5TkRNeElEQXVNRGswT1Rjd04wZ3dMalU1TnpRek1VTXdMalkxTVRJM09TQXdMakE1TkRrM01EY2dNQzQyT1RRNU16SWdNQzR4TXpnMk1qTWdNQzQyT1RRNU16SWdNQzR4T1RJME56RldNQzQxTWpJeE5qVkRNQzQyT0RZNE5ETWdNQzQxTWpBM01URWdNQzQyTnpnMU1USWdNQzQxTVRrNU5USWdNQzQyTnpBd01EUWdNQzQxTVRrNU5USkRNQzQyTmpFNE9ETWdNQzQxTVRrNU5USWdNQzQyTlRNNU1qUWdNQzQxTWpBMk5ETWdNQzQyTkRZeE9ESWdNQzQxTWpFNU4xcE5NQzR6T0RZeE9ESWdNQzQxTURrek5EWkRNQzR6T0RZeE9ESWdNQzQwT1RVNE9EUWdNQzR6T1Rjd09UVWdNQzQwT0RRNU56RWdNQzQwTVRBMU5UY2dNQzQwT0RRNU56RklNQzQxT0Rrek1EZERNQzQyTURJM05qa2dNQzQwT0RRNU56RWdNQzQyTVRNMk9ESWdNQzQwT1RVNE9EUWdNQzQyTVRNMk9ESWdNQzQxTURrek5EWkRNQzQyTVRNMk9ESWdNQzQxTWpJNE1EZ2dNQzQyTURJM05qa2dNQzQxTXpNM01pQXdMalU0T1RNd055QXdMalV6TXpjeVNEQXVOREV3TlRVM1F6QXVNemszTURrMUlEQXVOVE16TnpJZ01DNHpPRFl4T0RJZ01DNDFNakk0TURnZ01DNHpPRFl4T0RJZ01DNDFNRGt6TkRaYUlpQmpiR0Z6Y3owaWFXTnZiaTFtYVd4c0lpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDJNemc0T0RFZ01DNDNNRFV3TkRkSU1DNDNNREEzT1RSRE1DNDJPVFExT1RVZ01DNDNNemMzTmlBd0xqWTRNakU0TVNBd0xqYzJNREF5T0NBd0xqWTJPVGd6T0NBd0xqYzJNREF5T0VNd0xqWTFOemcyT0NBd0xqYzJNREF5T0NBd0xqWTBOVGd6TWlBd0xqY3pPVEE0T1NBd0xqWXpPVFEyTVNBd0xqY3dOems1TVV3d0xqWXpPRGc0TVNBd0xqY3dOVEEwTjBnd0xqY3dNRGM1TkVnd0xqWXpPRGc0TVZwTk1DNDFPREEwT1RnZ01DNDNNRFV3TkRoTU1DNDJNak0xTlRNZ01DNDNNRFV3TkRaRE1DNDJNamN5TURFZ01DNDNNalU0TmpnZ01DNDJNek16T0RNZ01DNDNORE0xT0RNZ01DNDJOREUwTnpVZ01DNDNOVFU1T0VNd0xqWXhOVGcwTnlBd0xqYzBPRFF4TVNBd0xqVTVORFV4TVNBd0xqY3pNRGcyTkNBd0xqVTRNVGsyTVNBd0xqY3dOemd6TjB3d0xqVTRNRFE1T0NBd0xqY3dOVEEwT0ZwTk1DNDNNVFl4TWpJZ01DNDNNRFV3TkRaTU1DNDNOVGt4TnpnZ01DNDNNRFV3TkRoRE1DNDNORFk0TmpVZ01DNDNNamswTkRRZ01DNDNNalE0TlRRZ01DNDNORGd4TURrZ01DNDJPVGd5TVRFZ01DNDNOVFU1TnpkRE1DNDNNRFUzTlRZZ01DNDNORFEwSURBdU56RXhOalF6SURBdU56STRNakF4SURBdU56RTFNelU1SURBdU56QTVNVFkzVERBdU56RTJNVEl5SURBdU56QTFNRFEyVERBdU56VTVNVGM0SURBdU56QTFNRFE0VERBdU56RTJNVEl5SURBdU56QTFNRFEyV2swd0xqY3hPVEUxTVNBd0xqWTBNREEwTjB3d0xqYzJOemcxSURBdU5qUXdNRFF4UXpBdU56WTVNVFl5SURBdU5qUTJOVEEwSURBdU56WTVPRFV4SURBdU5qVXpNVGt6SURBdU56WTVPRFV4SURBdU5qWXdNRFF6UXpBdU56WTVPRFV4SURBdU5qY3dORGszSURBdU56WTRNalEzSURBdU5qZ3dOVGMxSURBdU56WTFNamN6SURBdU5qa3dNRFEzU0RBdU56RTRNalEzUXpBdU56RTVNeUF3TGpZNE1EUTNNU0F3TGpjeE9UZzFNaUF3TGpZM01EUXhJREF1TnpFNU9EVXlJREF1TmpZd01EUXpRekF1TnpFNU9EVXlJREF1TmpVMU5TQXdMamN4T1RjME5pQXdMalkxTVRBeE5pQXdMamN4T1RVek9DQXdMalkwTmpZd05Vd3dMamN4T1RFMU1TQXdMalkwTURBME4wd3dMamMyTnpnMUlEQXVOalF3TURReFREQXVOekU1TVRVeElEQXVOalF3TURRM1drMHdMalUzTVRneU5TQXdMalkwTURBME1Vd3dMall5TURVeU5DQXdMalkwTURBME4wTXdMall5TURBMk1pQXdMalkwTmpVME5pQXdMall4T1RneU15QXdMalkxTXpJeU9TQXdMall4T1RneU15QXdMalkyTURBME0wTXdMall4T1RneU15QXdMalkyT0RNek55QXdMall5TURFM05pQXdMalkzTmpRek5TQXdMall5TURnMU55QXdMalk0TkRJME5Vd3dMall5TVRReU9DQXdMalk1TURBME4wZ3dMalUzTkRRd01rTXdMalUzTVRReU9DQXdMalk0TURVM05TQXdMalUyT1RneU5DQXdMalkzTURRNU55QXdMalUyT1RneU5DQXdMalkyTURBME0wTXdMalUyT1RneU5DQXdMalkxTXpFNU15QXdMalUzTURVeE15QXdMalkwTmpVd05DQXdMalUzTVRneU5TQXdMalkwTURBME1WcE5NQzQyTXpVMU9UTWdNQzQyTkRBd05ERklNQzQzTURRd09ESkRNQzQzTURRMU9EUWdNQzQyTkRZME9UY2dNQzQzTURRNE5USWdNQzQyTlRNeE9EWWdNQzQzTURRNE5USWdNQzQyTmpBd05ETkRNQzQzTURRNE5USWdNQzQyTmpnME1pQXdMamN3TkRRMU15QXdMalkzTmpVME5DQXdMamN3TXpjeE5DQXdMalk0TkRNd01Vd3dMamN3TXpBNU55QXdMalk1TURBME9FZ3dMall6TmpVM09FTXdMall6TlRRME55QXdMalk0TURVNUlEQXVOak0wT0RJeklEQXVOamN3TlRFMElEQXVOak0wT0RJeklEQXVOall3TURRelF6QXVOak0wT0RJeklEQXVOalUwT1NBd0xqWXpORGszTkNBd0xqWTBPVGcxTWlBd0xqWXpOVEkyTVNBd0xqWTBORGt5Tmt3d0xqWXpOVFU1TXlBd0xqWTBNREEwTVVnd0xqY3dOREE0TWtnd0xqWXpOVFU1TTFwTk1DNDJPVGt5T0NBd0xqVTJOVGd4VERBdU5qazRNakF4SURBdU5UWTBNVEEzUXpBdU56STRNemd6SURBdU5UY3pNREUzSURBdU56VXlOakl6SURBdU5UazFOemd6SURBdU56WXpOVFUxSURBdU5qSTFNRFJNTUM0M01UYzJORGNnTUM0Mk1qVXdORE5ETUM0M01UUTBPVElnTUM0Mk1EQTROelFnTUM0M01EZ3dPRElnTUM0MU9EQXhNVGNnTUM0Mk9Ua3lPQ0F3TGpVMk5UZ3hUREF1TmprNE1qQXhJREF1TlRZME1UQTNUREF1TmprNU1qZ2dNQzQxTmpVNE1WcE5NQzQyTkRBeU5UWWdNQzQxTmpRME56Wk1NQzQyTkRFME56UWdNQzQxTmpReE1EaERNQzQyTXpJMk5qWWdNQzQxTnpjMk1ETWdNQzQyTWpZeE1pQXdMalU1TnpNNU9TQXdMall5TWpZME5DQXdMall5TURZME5Vd3dMall5TWpBeU9DQXdMall5TlRBME0wd3dMalUzTmpFeUlEQXVOakkxTURSRE1DNDFPRFk1TURVZ01DNDFPVFl4TnpnZ01DNDJNVEEyTkNBd0xqVTNNell6TXlBd0xqWTBNREkxTmlBd0xqVTJORFEzTmt3d0xqWTBNVFEzTkNBd0xqVTJOREV3T0V3d0xqWTBNREkxTmlBd0xqVTJORFEzTmxwTk1DNDJOams0TXpnZ01DNDFOakF3TlRsRE1DNDJPRE13TWpVZ01DNDFOakF3TlRrZ01DNDJPVFl5T1RNZ01DNDFPRFUwTnpZZ01DNDNNREU1TnpjZ01DNDJNakU0T1ROTU1DNDNNREkwTkRVZ01DNDJNalV3TkRGSU1DNDJNemN5TTBNd0xqWTBNall5TkNBd0xqVTROamswT1NBd0xqWTFOakkzTXlBd0xqVTJNREExT1NBd0xqWTJPVGd6T0NBd0xqVTJNREExT1ZvaUlHTnNZWE56UFNKcFkyOXVMV1pwYkd3aUx6NG1JM2hoT3p3dlp6NG1JM2hoT3p4eVpXTjBJSGc5SWpBdU1UazVPVFV4SWlCNVBTSXdMamd5T1RrMU5pSWdkMmxrZEdnOUlqQXVOakF5TmpZaUlHaGxhV2RvZEQwaU1DNHhOREl5TXpjaUlISjRQU0l3TGpBM01URXhPRFFpSUdOc1lYTnpQU0pwWTI5dUxXWnBiR3dpTHo0bUkzaGhPenh3WVhSb0lHUTlJazB3TGpJM05URTFJREF1T1RVeU1qRXpRekF1TWpZMk9URWdNQzQ1TlRJd05UTWdNQzR5TmpBME15QXdMamswT1RVM015QXdMakkxTlRjeElEQXVPVFEwTnpjelF6QXVNalV4TURjZ01DNDVOREF3TlRRZ01DNHlORGczTlNBd0xqa3pNekUzTkNBd0xqSTBPRGMxSURBdU9USTBNVE0wVmpBdU9URTJOamswUXpBdU1qUTROelVnTUM0NU1UTTVOelFnTUM0eU5EZ3lNeUF3TGpreE1UZzFOQ0F3TGpJME56RTVJREF1T1RFd016TTBRekF1TWpRMk1UVWdNQzQ1TURnM016UWdNQzR5TkRRMk55QXdMamt3Tnprek5DQXdMakkwTWpjMUlEQXVPVEEzT1RNMFNEQXVNak01T1RsV01DNDRPVFV6TXpWSU1DNHlOREkzTlVNd0xqSTBORFkzSURBdU9EazFNek0xSURBdU1qUTJNVFVnTUM0NE9UUTFNelVnTUM0eU5EY3hPU0F3TGpnNU1qa3pOVU13TGpJME9ESXpJREF1T0RreE16TTFJREF1TWpRNE56VWdNQzQ0T0RreU1UVWdNQzR5TkRnM05TQXdMamc0TmpVM05WWXdMamczT1RJMU5VTXdMakkwT0RjMUlEQXVPRGN3TWpFMUlEQXVNalV4TURjZ01DNDROak16TXpVZ01DNHlOVFUzTVNBd0xqZzFPRFl4TlVNd0xqSTJNRFF6SURBdU9EVXpPRGsxSURBdU1qWTJPVEVnTUM0NE5URTBNVFlnTUM0eU56VXhOU0F3TGpnMU1URTNObFl3TGpnMk16YzNOVU13TGpJMk5qa3hJREF1T0RZME1qVTFJREF1TWpZeU56a2dNQzQ0TmpnMk9UVWdNQzR5TmpJM09TQXdMamczTnpBNU5WWXdMamc0TlRNM05VTXdMakkyTWpjNUlEQXVPRGt3TkRFMUlEQXVNall4T1RVZ01DNDRPVFF5TVRVZ01DNHlOakF5TnlBd0xqZzVOamMzTlVNd0xqSTFPRFkzSURBdU9EazVNalUwSURBdU1qVTJNak1nTUM0NU1EQTRPVFFnTUM0eU5USTVOU0F3TGprd01UWTVORU13TGpJMU9UVXhJREF1T1RBek16YzBJREF1TWpZeU56a2dNQzQ1TURnNE1UUWdNQzR5TmpJM09TQXdMamt4T0RBeE5GWXdMamt5TmpJNU5FTXdMakkyTWpjNUlEQXVPVE0wT0RVMElEQXVNalkyT1RFZ01DNDVNemt5T1RRZ01DNHlOelV4TlNBd0xqa3pPVFl4TkZZd0xqazFNakl4TTFvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzR5T1RBeE5UWWdNQzQ1TXpZMk1UUldNQzQ0TlRJMk1UWklNQzR6TWpjek5UWkRNQzR6TXpjd016WWdNQzQ0TlRJMk1UWWdNQzR6TkRRd016WWdNQzQ0TlRVd01UVWdNQzR6TkRnek5UWWdNQzQ0TlRrNE1UVkRNQzR6TlRJM05UWWdNQzQ0TmpRMk1UVWdNQzR6TlRRNU5UWWdNQzQ0TnpBM016VWdNQzR6TlRRNU5UWWdNQzQ0TnpneE56VkRNQzR6TlRRNU5UWWdNQzQ0T0RNek56VWdNQzR6TlRNME56WWdNQzQ0T0RneU5UVWdNQzR6TlRBMU1UWWdNQzQ0T1RJNE1UVkRNQzR6TkRjMU5UWWdNQzQ0T1Rjek56VWdNQzR6TkRNeU56WWdNQzQ1TURBME9UUWdNQzR6TXpjMk56WWdNQzQ1TURJeE56Uk1NQzR6TlRRME56WWdNQzQ1TXpZMk1UUklNQzR6TXpneU56Wk1NQzR6TWpJd056WWdNQzQ1TURNM016UklNQzR6TURRMU5UWldNQzQ1TXpZMk1UUklNQzR5T1RBeE5UWmFUVEF1TXpBME5UVTJJREF1T0Rrd01EVTFTREF1TXpJM05UazJRekF1TXpNeE9URTJJREF1T0Rrd01EVTFJREF1TXpNMU1EYzJJREF1T0RnNE9UTTFJREF1TXpNM01EYzJJREF1T0RnMk5qazFRekF1TXpNNU1EYzJJREF1T0RnME5EVTFJREF1TXpRd01EYzJJREF1T0RneE5qRTFJREF1TXpRd01EYzJJREF1T0RjNE1UYzFRekF1TXpRd01EYzJJREF1T0RjME9ERTFJREF1TXpNNU1URTJJREF1T0RjeU1ERTFJREF1TXpNM01UazJJREF1T0RZNU56YzFRekF1TXpNMU1qYzJJREF1T0RZM05EVTFJREF1TXpNeU1EYzJJREF1T0RZMk1qazFJREF1TXpJM05UazJJREF1T0RZMk1qazFTREF1TXpBME5UVTJWakF1T0Rrd01EVTFXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqTTNNak13TkNBd0xqa3pOall4TkZZd0xqZzFNall4Tmtnd0xqUXlOekF5TkZZd0xqZzJOakUzTlVnd0xqTTROamN3TkZZd0xqZzROalExTlVnd0xqUXhNVFUwTkZZd0xqa3dNREF4TkVnd0xqTTROamN3TkZZd0xqa3lNekExTkVnd0xqUXlPVFkyTkZZd0xqa3pOall4TkVnd0xqTTNNak13TkZvaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQwTnpJM056Z2dNQzQ1TXpnd05UUkRNQzQwTmpVd09UZ2dNQzQ1TXpnd05UUWdNQzQwTlRnME5UZ2dNQzQ1TXpZeE16UWdNQzQwTlRJNE5UZ2dNQzQ1TXpJeU9UUkRNQzQwTkRjek16Z2dNQzQ1TWpnek56UWdNQzQwTkRNME1UZ2dNQzQ1TWpNd05UUWdNQzQwTkRFd09UZ2dNQzQ1TVRZek16Uk1NQzQwTlRRME1UZ2dNQzQ1TVRFME1UUkRNQzQwTlRZeE56Z2dNQzQ1TVRVek16UWdNQzQwTlRnMk9UZ2dNQzQ1TVRnME9UUWdNQzQwTmpFNU56Z2dNQzQ1TWpBNE9UUkRNQzQwTmpVeU5UZ2dNQzQ1TWpNeU1UUWdNQzQwTmprd01UZ2dNQzQ1TWpRek56UWdNQzQwTnpNeU5UZ2dNQzQ1TWpRek56UkRNQzQwTnpjMk5UZ2dNQzQ1TWpRek56UWdNQzQwT0RFeE16Z2dNQzQ1TWpNek56UWdNQzQwT0RNMk9UZ2dNQzQ1TWpFek56UkRNQzQwT0RZek16Z2dNQzQ1TVRrek56UWdNQzQwT0RjMk5UZ2dNQzQ1TVRZME9UUWdNQzQwT0RjMk5UZ2dNQzQ1TVRJM016UkRNQzQwT0RjMk5UZ2dNQzQ1TVRFeU1UUWdNQzQwT0RjeU9UZ2dNQzQ1TURrNE1UUWdNQzQwT0RZMU56Z2dNQzQ1TURnMU16UkRNQzQwT0RVNE5UZ2dNQzQ1TURjeE56UWdNQzQwT0RVd01UZ2dNQzQ1TURZd05UUWdNQzQwT0RRd05UZ2dNQzQ1TURVeE56UkRNQzQwT0RNeE56Z2dNQzQ1TURReU9UUWdNQzQwT0RFNE1UZ2dNQzQ1TURNME1UUWdNQzQwTnprNU56Z2dNQzQ1TURJMU16UkRNQzQwTnpneE16Z2dNQzQ1TURFMk5UUWdNQzQwTnpZMU56Z2dNQzQ1TURBNU56UWdNQzQwTnpVeU9UZ2dNQzQ1TURBME9UUkRNQzQwTnpRd01UZ2dNQzQ0T1RrNU16UWdNQzQwTnpJeE16Z2dNQzQ0T1RreU5UUWdNQzQwTmprMk5UZ2dNQzQ0T1RnME5UUkRNQzQwTmpZME5UZ2dNQzQ0T1Rjek16VWdNQzQwTmpNNU56Z2dNQzQ0T1RZME5UVWdNQzQwTmpJeU1UZ2dNQzQ0T1RVNE1UVkRNQzQwTmpBMU16Z2dNQzQ0T1RVeE56VWdNQzQwTlRnek16Z2dNQzQ0T1RReE16VWdNQzQwTlRVMk1UZ2dNQzQ0T1RJMk9UVkRNQzQwTlRJNU56Z2dNQzQ0T1RFeE56VWdNQzQwTlRBNU16Z2dNQzQ0T0RrMk5UVWdNQzQwTkRrME9UZ2dNQzQ0T0RneE16VkRNQzQwTkRneE16Z2dNQzQ0T0RZMk1UVWdNQzQwTkRZNE9UZ2dNQzQ0T0RRMk1UVWdNQzQwTkRVM056Z2dNQzQ0T0RJeE16VkRNQzQwTkRRM016Z2dNQzQ0TnprMU56VWdNQzQwTkRReU1UZ2dNQzQ0TnpZM056VWdNQzQwTkRReU1UZ2dNQzQ0TnpNM016VkRNQzQwTkRReU1UZ2dNQzQ0Tmpjek16VWdNQzQwTkRZMk9UZ2dNQzQ0TmpFNU56VWdNQzQwTlRFMk5UZ2dNQzQ0TlRjMk5UVkRNQzQwTlRZMk1UZ2dNQzQ0TlRNek16WWdNQzQwTmpNek16Z2dNQzQ0TlRFeE56WWdNQzQwTnpFNE1UZ2dNQzQ0TlRFeE56WkRNQzQwTnpnNE5UZ2dNQzQ0TlRFeE56WWdNQzQwT0RRMk9UZ2dNQzQ0TlRJNE5UWWdNQzQwT0Rrek16Z2dNQzQ0TlRZeU1UVkRNQzQwT1RNNU56Z2dNQzQ0TlRrME9UVWdNQzQwT1Rjd09UZ2dNQzQ0TmpNNE1UVWdNQzQwT1RnMk9UZ2dNQzQ0TmpreE56Vk1NQzQwT0RVM016Z2dNQzQ0TnpNME9UVkRNQzQwT0RNeE56Z2dNQzQ0TmpjM016VWdNQzQwTnpneU1UZ2dNQzQ0TmpRNE5UVWdNQzQwTnpBNE5UZ2dNQzQ0TmpRNE5UVkRNQzQwTmpjd09UZ2dNQzQ0TmpRNE5UVWdNQzQwTmpReE16Z2dNQzQ0TmpVMk5UVWdNQzQwTmpFNU56Z2dNQzQ0TmpjeU5UVkRNQzQwTlRrNE9UZ2dNQzQ0TmpnM056VWdNQzQwTlRnNE5UZ2dNQzQ0TnpBNU56VWdNQzQwTlRnNE5UZ2dNQzQ0TnpNNE5UVkRNQzQwTlRnNE5UZ2dNQzQ0TnpVM056VWdNQzQwTlRrMk5UZ2dNQzQ0TnpjME9UVWdNQzQwTmpFeU5UZ2dNQzQ0Tnprd01UVkRNQzQwTmpJNU16Z2dNQzQ0T0RBMU16VWdNQzQwTmpRMk9UZ2dNQzQ0T0RFMk9UVWdNQzQwTmpZMU16Z2dNQzQ0T0RJME9UVkRNQzQwTmpnME5UZ2dNQzQ0T0RNeU1UVWdNQzQwTnpFeU5UZ2dNQzQ0T0RReE56VWdNQzQwTnpRNU16Z2dNQzQ0T0RVek56VkRNQzQwTnpjek16Z2dNQzQ0T0RZeU5UVWdNQzQwTnpreE16Z2dNQzQ0T0RZNU16VWdNQzQwT0RBek16Z2dNQzQ0T0RjME1UVkRNQzQwT0RFMk1UZ2dNQzQ0T0RjNE1UVWdNQzQwT0RNek56Z2dNQzQ0T0RnMU16VWdNQzQwT0RVMk1UZ2dNQzQ0T0RrMU56VkRNQzQwT0RjNE5UZ2dNQzQ0T1RBMk1UVWdNQzQwT0RrMk1UZ2dNQzQ0T1RFMU56VWdNQzQwT1RBNE9UZ2dNQzQ0T1RJME5UVkRNQzQwT1RJeE56Z2dNQzQ0T1RNeU5UVWdNQzQwT1RNMk1UZ2dNQzQ0T1RRek56VWdNQzQwT1RVeU1UZ2dNQzQ0T1RVNE1UVkRNQzQwT1RZNE9UZ2dNQzQ0T1RjeU5UVWdNQzQwT1RneE56Z2dNQzQ0T1RnM056UWdNQzQwT1Rrd05UZ2dNQzQ1TURBek56UkRNQzQwT1RrNU16Z2dNQzQ1TURFNE9UUWdNQzQxTURBMk9UZ2dNQzQ1TURNM016UWdNQzQxTURFek16Z2dNQzQ1TURVNE9UUkRNQzQxTURFNU56Z2dNQzQ1TURjNU56UWdNQzQxTURJeU9UZ2dNQzQ1TVRBeU5UUWdNQzQxTURJeU9UZ2dNQzQ1TVRJM016UkRNQzQxTURJeU9UZ2dNQzQ1TWpBMU56UWdNQzQwT1RrME9UZ2dNQzQ1TWpZM056UWdNQzQwT1RNNE9UZ2dNQzQ1TXpFek16UkRNQzQwT0Rnek56Z2dNQzQ1TXpVNE1UUWdNQzQwT0RFek16Z2dNQzQ1TXpnd05UUWdNQzQwTnpJM056Z2dNQzQ1TXpnd05UUmFJaUJtYVd4c1BTSjNhR2wwWlNJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU5UVXlNRElnTUM0NE5qWTBNVFZXTUM0NU16WTJNVFJJTUM0MU16YzJNbFl3TGpnMk5qUXhOVWd3TGpVeE16YzBWakF1T0RVeU5qRTJTREF1TlRjMU9WWXdMamcyTmpReE5VZ3dMalUxTWpBeVdpSWdabWxzYkQwaWQyaHBkR1VpTHo0bUkzaGhPenh3WVhSb0lHUTlJazB3TGpZd05UUXpOU0F3TGpnNE56VXpOVll3TGprek5qWXhORWd3TGpVNU1UTTVOVll3TGpnNE56VXpOVWd3TGpVNE1qVXhOVll3TGpnM05USTVOVWd3TGpVNU1UTTVOVll3TGpnMk5UWTVOVU13TGpVNU1UTTVOU0F3TGpnMU5qQXhOU0F3TGpVNU5qSXpOU0F3TGpnMU1URTNOaUF3TGpZd05Ua3hOU0F3TGpnMU1URTNOa013TGpZeE1EYzVOU0F3TGpnMU1URTNOaUF3TGpZeE5URXhOU0F3TGpnMU1qRXpOaUF3TGpZeE9EZzNOU0F3TGpnMU5EQTFOVll3TGpnMk5UVTNOVU13TGpZeE5UVTVOU0F3TGpnMk5ESXhOU0F3TGpZeE1qWTNOU0F3TGpnMk16VXpOU0F3TGpZeE1ERXhOU0F3TGpnMk16VXpOVU13TGpZd05qazVOU0F3TGpnMk16VXpOU0F3TGpZd05UUXpOU0F3TGpnMk5URXpOU0F3TGpZd05UUXpOU0F3TGpnMk9ETXpOVll3TGpnM05USTVOVWd3TGpZeE9EZzNOVll3TGpnNE56VXpOVWd3TGpZd05UUXpOVm9pSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOGNHRjBhQ0JrUFNKTk1DNDJOall6TlRRZ01DNDVNelkyTVRSV01DNDVNekEzTXpSRE1DNDJOakkxTVRRZ01DNDVNelUyTVRRZ01DNDJOVGN4TlRRZ01DNDVNemd3TlRRZ01DNDJOVEF5TnpRZ01DNDVNemd3TlRSRE1DNDJORE00TnpRZ01DNDVNemd3TlRRZ01DNDJNemcyTXpRZ01DNDVNell3TlRRZ01DNDJNelExTlRRZ01DNDVNekl3TlRSRE1DNDJNekEwTnpRZ01DNDVNamM1TnpRZ01DNDJNamcwTXpRZ01DNDVNakUxTnpRZ01DNDJNamcwTXpRZ01DNDVNVEk0TlRSV01DNDROelV5T1RWSU1DNDJOREkwTnpSV01DNDVNVEF6TXpSRE1DNDJOREkwTnpRZ01DNDVNVGs0TlRRZ01DNDJORFl6TVRRZ01DNDVNalEyTVRRZ01DNDJOVE01T1RRZ01DNDVNalEyTVRSRE1DNDJOakl5TXpRZ01DNDVNalEyTVRRZ01DNDJOall6TlRRZ01DNDVNVGs1TXpRZ01DNDJOall6TlRRZ01DNDVNVEExTnpSV01DNDROelV5T1RWSU1DNDJPREF6T1RSV01DNDVNelkyTVRSSU1DNDJOall6TlRSYUlpQm1hV3hzUFNKM2FHbDBaU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TmprNU1EQTVJREF1T1RNMk5qRTBWakF1T0RVMk5UYzFUREF1TnpFek1EUTVJREF1T0RRNU9UYzJWakF1T1RNMk5qRTBTREF1TmprNU1EQTVXaUlnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqY3lOelE1SURBdU9UVXlNakV6VmpBdU9UTTVOakUwUXpBdU56TTFPREVnTUM0NU16a3lNVFFnTUM0M016azVOeUF3TGprek5EYzNOQ0F3TGpjek9UazNJREF1T1RJMk1qazBWakF1T1RFNE1ERTBRekF1TnpNNU9UY2dNQzQ1TURnNE1UUWdNQzQzTkRNeU5TQXdMamt3TXpNM05DQXdMamMwT1RneElEQXVPVEF4TmprMFF6QXVOelEyTlRNZ01DNDVNREE0T1RRZ01DNDNORFF3TlNBd0xqZzVPVEkxTkNBd0xqYzBNak0zSURBdU9EazJOemMxUXpBdU56UXdOemNnTUM0NE9UUXlNVFVnTUM0M016azVOeUF3TGpnNU1EUXhOU0F3TGpjek9UazNJREF1T0RnMU16YzFWakF1T0RjM01EazFRekF1TnpNNU9UY2dNQzQ0TmpnMk9UVWdNQzQzTXpVNE1TQXdMamcyTkRJMU5TQXdMamN5TnpRNUlEQXVPRFl6TnpjMVZqQXVPRFV4TVRjMlF6QXVOek0xTnpNZ01DNDROVEUwTVRZZ01DNDNOREl5TVNBd0xqZzFNemt6TlNBd0xqYzBOamt6SURBdU9EVTROek0xUXpBdU56VXhOalVnTUM0NE5qTTBOVFVnTUM0M05UUXdNU0F3TGpnM01ESTVOU0F3TGpjMU5EQXhJREF1T0RjNU1qVTFWakF1T0RnMk5UYzFRekF1TnpVME1ERWdNQzQ0T0RreU1UVWdNQzQzTlRRMU15QXdMamc1TVRNek5TQXdMamMxTlRVM0lEQXVPRGt5T1RNMVF6QXVOelUyTmpFZ01DNDRPVFExTXpVZ01DNDNOVGd3T1NBd0xqZzVOVE16TlNBd0xqYzJNREF4SURBdU9EazFNek0xU0RBdU56WXlOalZXTUM0NU1EYzVNelJJTUM0M05qQXdNVU13TGpjMU9EQTVJREF1T1RBM09UTTBJREF1TnpVMk5qRWdNQzQ1TURnM016UWdNQzQzTlRVMU55QXdMamt4TURNek5FTXdMamMxTkRVeklEQXVPVEV4T0RVMElEQXVOelUwTURFZ01DNDVNVE01TnpRZ01DNDNOVFF3TVNBd0xqa3hOalk1TkZZd0xqa3lOREV6TkVNd0xqYzFOREF4SURBdU9UTXpNVGMwSURBdU56VXhOalVnTUM0NU5EQXdOVFFnTUM0M05EWTVNeUF3TGprME5EYzNNME13TGpjME1qSXhJREF1T1RRNU5UY3pJREF1TnpNMU56TWdNQzQ1TlRJd05UTWdNQzQzTWpjME9TQXdMamsxTWpJeE0xb2lJR1pwYkd3OUluZG9hWFJsSWk4K0ppTjRZVHM4TDJjK0ppTjRZVHM4WkdWbWN6NG1JM2hoT3p4amJHbHdVR0YwYUNCcFpEMGlZMnhwY0RBaVBpWWplR0U3UEhKbFkzUWdkMmxrZEdnOUlqRWlJR2hsYVdkb2REMGlNU0lnWm1sc2JEMGlkMmhwZEdVaUx6NG1JM2hoT3p3dlkyeHBjRkJoZEdnK0ppTjRZVHM4WTJ4cGNGQmhkR2dnYVdROUltTnNhWEF4SWo0bUkzaGhPenh5WldOMElIZHBaSFJvUFNJd0xqYzRJaUJvWldsbmFIUTlJakF1TnpnaUlHWnBiR3c5SW5kb2FYUmxJaUIwY21GdWMyWnZjbTA5SW5SeVlXNXpiR0YwWlNnd0xqRXdPVGcyTXlBd0xqQXpNREF5T1RNcElpOCtKaU40WVRzOEwyTnNhWEJRWVhSb1BpWWplR0U3UEM5a1pXWnpQaVlqZUdFN1BDOXpkbWMrO3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207dmVydGljYWxBbGlnbj10b3A7aXIuc3luY2hyb25pemVkPTE7IiBwYXJlbnQ9InRlbXBsYXRlLTE2NTQyMDY1LTJhYjRlZmZhLTQwYjctNGNkMi1iYTgxLTgyNDdkMjlhNmYyZC0xMCIgdmVydGV4PSIxIiBpc1RodW1iPSIwIj48bXhHZW9tZXRyeSB4PSIyNTkiIHk9IjIwIiB3aWR0aD0iOTAiIGhlaWdodD0iOTAiIGFzPSJnZW9tZXRyeSIvPjwvbXhDZWxsPjxteENlbGwgaWQ9InRlbXBsYXRlLTE2NTQyMDY1LTE5IiBzdHlsZT0iaXIuYXNzZXRzPTtpci50YWdzPTtlZGdlU3R5bGU9bm9uZTtjdXJ2ZWQ9MTtodG1sPTE7aXIuc3luY2hyb25pemVkPTE7ZW50cnlYPTA7ZW50cnlZPTAuNTtlbnRyeUR4PTA7ZW50cnlEeT0wO2VudHJ5UGVyaW1ldGVyPTA7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7IiBwYXJlbnQ9InRlbXBsYXRlLTE2NTQyMDY1LTJhYjRlZmZhLTQwYjctNGNkMi1iYTgxLTgyNDdkMjlhNmYyZC0xMCIgc291cmNlPSJ0ZW1wbGF0ZS0xNjU0MjA2NS1kMjYwNDg2Zi01MmIzLTQ5NDYtYmFlMS1iOTY3YmVhOTM2YzMtNiIgdGFyZ2V0PSJ0ZW1wbGF0ZS0xNjU0MjA2NS0xMiIgZWRnZT0iMSI+PG14R2VvbWV0cnkgcmVsYXRpdmU9IjEiIGFzPSJnZW9tZXRyeSIvPjwvbXhDZWxsPjxteENlbGwgaWQ9InRlbXBsYXRlLTE2NTQyMDY1LWQyNjA0ODZmLTUyYjMtNDk0Ni1iYWUxLWI5NjdiZWE5MzZjMy02IiB2YWx1ZT0iV2ViIEFwcGxpY2F0aW9uIC0gU2VydmVyIHNpZGUiIHN0eWxlPSJpci5yZWY9ZDI2MDQ4NmYtNTJiMy00OTQ2LWJhZTEtYjk2N2JlYTkzNmMzO3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWNlbnRlcjtpbWFnZUFsaWduPWNlbnRlcjtpbWFnZVdpZHRoPTgyO2ltYWdlSGVpZ2h0PTgyO2FyY1NpemU9OTA7YWJzb2x1dGVBcmNTaXplPTE7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDtmb250U2l6ZT0xMjtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9Q09NUE9ORU5UO2lyLmNvbXBvbmVudERlZmluaXRpb24ucmVmPXdlYi1hcHBsaWNhdGlvbi1zZXJ2ZXItc2lkZTtpbWFnZT1kYXRhOmltYWdlL3N2Zyt4bWwsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlJSFpwWlhkQ2IzZzlJakFnTUNBeElERWlJR1pwYkd3OUltNXZibVVpUGlZamVHRTdQSE4wZVd4bFBpWWplR0U3SUNBZ0lDNXBZMjl1TFdacGJHd2dleVlqZUdFN0lDQWdJQ0FnSUNCbWFXeHNPaUFqTVRGQk9FTkdPeVlqZUdFN0lDQWdJSDBtSTNoaE96d3ZjM1I1YkdVK0ppTjRZVHM4WnlCamJHbHdMWEJoZEdnOUluVnliQ2dqWTJ4cGNEQXBJajRtSTNoaE96eG5JR05zYVhBdGNHRjBhRDBpZFhKc0tDTmpiR2x3TVNraVBpWWplR0U3UEhCaGRHZ2dabWxzYkMxeWRXeGxQU0psZG1WdWIyUmtJaUJqYkdsd0xYSjFiR1U5SW1WMlpXNXZaR1FpSUdROUlrMHdMak0yTlRnMU15QXdMakk1T0RZMk1VTXdMak0yTlRnMU15QXdMakk0TWpjNE1pQXdMak0zT0RjeU5TQXdMakkyT1RreE1TQXdMak01TkRZd015QXdMakkyT1RreE1VZ3dMall3TlRRek5rTXdMall5TVRNeE5DQXdMakkyT1RreE1TQXdMall6TkRFNE5pQXdMakk0TWpjNE1pQXdMall6TkRFNE5pQXdMakk1T0RZMk1VTXdMall6TkRFNE5pQXdMak14TkRVek9TQXdMall5TVRNeE5DQXdMak15TnpReE1TQXdMall3TlRRek5pQXdMak15TnpReE1VZ3dMak01TkRZd00wTXdMak0zT0RjeU5TQXdMak15TnpReE1TQXdMak0yTlRnMU15QXdMak14TkRVek9TQXdMak0yTlRnMU15QXdMakk1T0RZMk1WcE5NQzR6T1RRMk1ETWdNQzQyT1RFMU56aERNQzR6TnpnM01qVWdNQzQyT1RFMU56Z2dNQzR6TmpVNE5UTWdNQzQzTURRME5TQXdMak0yTlRnMU15QXdMamN5TURNeU9FTXdMak0yTlRnMU15QXdMamN6TmpJd05pQXdMak0zT0RjeU5TQXdMamMwT1RBM09DQXdMak01TkRZd015QXdMamMwT1RBM09FZ3dMalUxTURBeE9WWXdMalk1TVRVM09FZ3dMak01TkRZd00xcE5NQzQyTWpBek5URWdNQzQyTWprNU1URklNQzQyTURRMU5qVkRNQzQxT1RjeE5EUWdNQzQyTWprNU1URWdNQzQxT1RBd05qZ2dNQzQyTXpFek9UTWdNQzQxT0RNMk1Ua2dNQzQyTXpRd056aElNQzR6T1RRMk1ETkRNQzR6TnpnM01qVWdNQzQyTXpRd056Z2dNQzR6TmpVNE5UTWdNQzQyTWpFeU1EWWdNQzR6TmpVNE5UTWdNQzQyTURVek1qaERNQzR6TmpVNE5UTWdNQzQxT0RrME5Ea2dNQzR6TnpnM01qVWdNQzQxTnpZMU56Z2dNQzR6T1RRMk1ETWdNQzQxTnpZMU56aElNQzQyTURVME16WkRNQzQyTWpFek1UUWdNQzQxTnpZMU56Z2dNQzQyTXpReE9EWWdNQzQxT0RrME5Ea2dNQzQyTXpReE9EWWdNQzQyTURVek1qaERNQzQyTXpReE9EWWdNQzQyTVRVM05EVWdNQzQyTWpnMk5EWWdNQzQyTWpRNE5qZ2dNQzQyTWpBek5URWdNQzQyTWprNU1URmFUVEF1TmpjeU5URTVJREF1TmpJNU9URXhWakF1TWpNeE5UYzNRekF1TmpjeU5URTVJREF1TVRrNU9ESXhJREF1TmpRMk56YzJJREF1TVRjME1EYzNJREF1TmpFMU1ERTVJREF1TVRjME1EYzNTREF1TXpnMU1ESkRNQzR6TlRNeU5qTWdNQzR4TnpRd056Y2dNQzR6TWpjMU1pQXdMakU1T1RneU1TQXdMak15TnpVeUlEQXVNak14TlRjM1ZqQXVOelk0TWpRMVF6QXVNekkzTlRJZ01DNDRNREF3TURFZ01DNHpOVE15TmpNZ01DNDRNalUzTkRVZ01DNHpPRFV3TWlBd0xqZ3lOVGMwTlVnd0xqVTFNREF4T1ZZd0xqZzNOVE0yTmtNd0xqVTFNREF4T1NBd0xqZzNPREEwTWlBd0xqVTFNREl4TWlBd0xqZzRNRFkzTWlBd0xqVTFNRFU0TkNBd0xqZzRNekkwTlVnd0xqTTROVEF5UXpBdU16SXhOVEEzSURBdU9EZ3pNalExSURBdU1qY3dNRElnTUM0NE16RTNOVGNnTUM0eU56QXdNaUF3TGpjMk9ESTBOVll3TGpJek1UVTNOME13TGpJM01EQXlJREF1TVRZNE1EWTBJREF1TXpJeE5UQTNJREF1TVRFMk5UYzNJREF1TXpnMU1ESWdNQzR4TVRZMU56ZElNQzQyTVRVd01UbERNQzQyTnpnMU16SWdNQzR4TVRZMU56Y2dNQzQzTXpBd01Ua2dNQzR4Tmpnd05qUWdNQzQzTXpBd01Ua2dNQzR5TXpFMU56ZFdNQzQyTWprNU1URklNQzQyTnpJMU1UbGFJaUJqYkdGemN6MGlhV052YmkxbWFXeHNJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQzTnpjMU1qUWdNQzQyTmpJM01rd3dMamMzT1RrMU9TQXdMalkyTWpjNE9FTXdMamd3TVRjek5pQXdMalkyTkRBd05TQXdMamd4T1RFMk9DQXdMalk0TVRRek55QXdMamd5TURNNE5pQXdMamN3TXpFNU9Fd3dMamd5TURRMU15QXdMamN3TlRZek0xWXdMamcxTnpRNE1rd3dMamd5TURNNE5pQXdMamcxT1RreE4wTXdMamd4T1RFMk9DQXdMamc0TVRZM09DQXdMamd3TVRjek55QXdMamc1T1RFeElEQXVOemM1T1RjMUlEQXVPVEF3TXpJNFREQXVOemMzTlRRZ01DNDVNREF6T1RaSU1DNDJNalUyTnpkRE1DNDJNREkzT1RRZ01DNDVNREF6T1RZZ01DNDFPRFF3T1RRZ01DNDRPREkwT0RRZ01DNDFPREk0TXpJZ01DNDROVGs1TVRkTU1DNDFPREkzTmpRZ01DNDROVGMwT0RKV01DNDNNRFUyTXpORE1DNDFPREkzTmpRZ01DNDJPREkzTlNBd0xqWXdNRFkzTkNBd0xqWTJOREExSURBdU5qSXpNalF5SURBdU5qWXlOemc0VERBdU5qSTFOamMzSURBdU5qWXlOekpJTUM0M056YzFNalJhVFRBdU56azBNREk1SURBdU56STROelF4U0RBdU5qQTVNVGc0VERBdU5qQTVNVGN5SURBdU9EVTNORGd5UXpBdU5qQTVNVGN5SURBdU9EWTJNREk0SURBdU5qRTFOalkzSURBdU9EY3pNRFUySURBdU5qSXpPVGc1SURBdU9EY3pPVEF4VERBdU5qSTFOamMzSURBdU9EY3pPVGczU0RBdU56YzNOVFJNTUM0M056a3lNamdnTUM0NE56TTVNREZETUM0M09EWTVPVFlnTUM0NE56TXhNVE1nTUM0M09UTXhOekVnTUM0NE5qWTVNemNnTUM0M09UTTVOaUF3TGpnMU9URTNUREF1TnprME1EUTFJREF1T0RVM05EZ3lUREF1TnprME1ESTVJREF1TnpJNE56UXhXazB3TGpZM09EUTVNeUF3TGpjME9EVTBOME13TGpZNE16VXdOeUF3TGpjME9EVTBOeUF3TGpZNE56WTFJREF1TnpVeU1qY3pJREF1TmpnNE16QTJJREF1TnpVM01UQTNUREF1TmpnNE16azNJREF1TnpVNE5EVldNQzQ0TlRBNE9FTXdMalk0T0RNNU55QXdMamcxTlRnNU15QXdMalk0TkRZM01TQXdMamcyTURBek55QXdMalkzT1Rnek55QXdMamcyTURZNU0wd3dMalkzT0RRNU15QXdMamcyTURjNE0wZ3dMall6TWpJM09VTXdMall5TnpJMk5pQXdMamcyTURjNE15QXdMall5TXpFeU1pQXdMamcxTnpBMU55QXdMall5TWpRMk5pQXdMamcxTWpJeU5Fd3dMall5TWpNM05pQXdMamcxTURnNFZqQXVOelU0TkRWRE1DNDJNakl6TnpZZ01DNDNOVE0wTXpjZ01DNDJNall4TURJZ01DNDNORGt5T1RNZ01DNDJNekE1TXpVZ01DNDNORGcyTXpoTU1DNDJNekl5TnprZ01DNDNORGcxTkRkSU1DNDJOemcwT1ROYVRUQXVOalk0TlRrZ01DNDNOamd6TlRSSU1DNDJOREl4T0RKV01DNDROREE1TnpkSU1DNDJOamcxT1ZZd0xqYzJPRE0xTkZwTk1DNDNOVGMzTVRnZ01DNDNPRGd4T1RsRE1DNDNOak14T0RjZ01DNDNPRGd4T1RrZ01DNDNOamMyTWpFZ01DNDNPVEkyTXpNZ01DNDNOamMyTWpFZ01DNDNPVGd4TURORE1DNDNOamMyTWpFZ01DNDRNRE14TVRZZ01DNDNOak00T1RZZ01DNDRNRGN5TmlBd0xqYzFPVEEyTWlBd0xqZ3dOemt4TlV3d0xqYzFOemN4T0NBd0xqZ3dPREF3Tmtnd0xqY3hNVFUyTWtNd0xqY3dOakE1TXlBd0xqZ3dPREF3TmlBd0xqY3dNVFkxT1NBd0xqZ3dNelUzTWlBd0xqY3dNVFkxT1NBd0xqYzVPREV3TTBNd0xqY3dNVFkxT1NBd0xqYzVNekE0T1NBd0xqY3dOVE00TkNBd0xqYzRPRGswTmlBd0xqY3hNREl4T0NBd0xqYzRPREk1VERBdU56RXhOVFl5SURBdU56ZzRNVGs1U0RBdU56VTNOekU0V2swd0xqYzNNRGt5TWlBd0xqYzBPRFUwTjBNd0xqYzNOak01TWlBd0xqYzBPRFUwTnlBd0xqYzRNRGd5TlNBd0xqYzFNams0TVNBd0xqYzRNRGd5TlNBd0xqYzFPRFExUXpBdU56Z3dPREkxSURBdU56WXpORFkwSURBdU56YzNNU0F3TGpjMk56WXdOeUF3TGpjM01qSTJOaUF3TGpjMk9ESTJNMHd3TGpjM01Ea3lNaUF3TGpjMk9ETTFORWd3TGpjeE1UVTJNa013TGpjd05qQTVNeUF3TGpjMk9ETTFOQ0F3TGpjd01UWTFPU0F3TGpjMk16a3lJREF1TnpBeE5qVTVJREF1TnpVNE5EVkRNQzQzTURFMk5Ua2dNQzQzTlRNME16Y2dNQzQzTURVek9EUWdNQzQzTkRreU9UTWdNQzQzTVRBeU1UZ2dNQzQzTkRnMk16aE1NQzQzTVRFMU5qSWdNQzQzTkRnMU5EZElNQzQzTnpBNU1qSmFJaUJqYkdGemN6MGlhV052YmkxbWFXeHNJaTgrSmlONFlUczhMMmMrSmlONFlUczhMMmMrSmlONFlUczhaR1ZtY3o0bUkzaGhPenhqYkdsd1VHRjBhQ0JwWkQwaVkyeHBjREFpUGlZamVHRTdQSEpsWTNRZ2QybGtkR2c5SWpFaUlHaGxhV2RvZEQwaU1TSWdabWxzYkQwaWQyaHBkR1VpTHo0bUkzaGhPend2WTJ4cGNGQmhkR2crSmlONFlUczhZMnhwY0ZCaGRHZ2dhV1E5SW1Oc2FYQXhJajRtSTNoaE96eHlaV04wSUhkcFpIUm9QU0l3TGpreUlpQm9aV2xuYUhROUlqQXVPVElpSUdacGJHdzlJbmRvYVhSbElpQjBjbUZ1YzJadmNtMDlJblJ5WVc1emJHRjBaU2d3TGpBME1EQXpPVEVnTUM0d05EQXdNemt4S1NJdlBpWWplR0U3UEM5amJHbHdVR0YwYUQ0bUkzaGhPend2WkdWbWN6NG1JM2hoT3p3dmMzWm5QZz09O3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207dmVydGljYWxBbGlnbj10b3A7aXIuc3luY2hyb25pemVkPTE7IiBwYXJlbnQ9InRlbXBsYXRlLTE2NTQyMDY1LTJhYjRlZmZhLTQwYjctNGNkMi1iYTgxLTgyNDdkMjlhNmYyZC0xMCIgdmVydGV4PSIxIiBpc1RodW1iPSIwIj48bXhHZW9tZXRyeSB4PSIyNTkiIHk9IjE3OSIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS0xZDU2ZWMyYS04YTY2LTRmZTMtOTI5My1hMzc5YTQ0NzA0ZWItMjEiIHZhbHVlPSJXZWIgU2VydmljZSAtPiBPdGhlciBkYXRhYmFzZSIgc3R5bGU9ImlyLnJlZj1jNDcyZmUxNC1hOTUzLTRiOGYtYmJkNy1lN2E3MTNiZjY5MTE7ZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzb3VyY2VQZXJpbWV0ZXJTcGFjaW5nPTk7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yOyIgcGFyZW50PSJ0ZW1wbGF0ZS0xNjU0MjA2NS0yYWI0ZWZmYS00MGI3LTRjZDItYmE4MS04MjQ3ZDI5YTZmMmQtMTAiIHNvdXJjZT0idGVtcGxhdGUtMTY1NDIwNjUtYzFiOWI0MWQtNzhhNi00YzU3LTkzYzItM2VmYThjNTZlZDU3LTgiIHRhcmdldD0idGVtcGxhdGUtMTY1NDIwNjUtZDMxODkxODctZDJlZS00YjVjLTgzYTItZmIwMjg3ZjhiNzNhLTQiIGVkZ2U9IjEiPjxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS0yYjBiOGYzZi02NGZjLTQ5MTUtOTdiOC1kMjFlMGRiZTY2MzMtMjIiIHZhbHVlPSJXZWIgU2VydmljZSAtPiBPdGhlciBkYXRhIHN0b3JlIiBzdHlsZT0iaXIucmVmPTY2NzAxY2RiLTI5NTQtNGY5ZC05YjFiLTY3YWJhYmY4MmJhZjtlZGdlU3R5bGU9bm9uZTtjdXJ2ZWQ9MTtodG1sPTE7aXIuc3luY2hyb25pemVkPTE7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7IiBwYXJlbnQ9InRlbXBsYXRlLTE2NTQyMDY1LTJhYjRlZmZhLTQwYjctNGNkMi1iYTgxLTgyNDdkMjlhNmYyZC0xMCIgc291cmNlPSJ0ZW1wbGF0ZS0xNjU0MjA2NS1jMWI5YjQxZC03OGE2LTRjNTctOTNjMi0zZWZhOGM1NmVkNTctOCIgdGFyZ2V0PSJ0ZW1wbGF0ZS0xNjU0MjA2NS1hMTFlNDg4Yi02NjQzLTRmYTYtOWE1ZS03OTk4Y2YyYzZiMWMtMTEiIGVkZ2U9IjEiPjxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS02ZDQ4NmYyMi05ZDU1LTQ0NzktODIzZS00Nzg1ZDMzN2RiY2ItMjQiIHZhbHVlPSJXZWIgU2VydmljZSAtPiBNaWNyb3NvZnQgQXp1cmUgU2VydmljZSBCdXMgTWVzc2FnaW5nIiBzdHlsZT0iaXIucmVmPTA3MjIxNzRlLTFmNzYtNDMxZC1hYzcxLWEyOTgzZGZkM2Q2NztlZGdlU3R5bGU9bm9uZTtjdXJ2ZWQ9MTtodG1sPTE7aXIuc3luY2hyb25pemVkPTE7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7IiBwYXJlbnQ9InRlbXBsYXRlLTE2NTQyMDY1LTJhYjRlZmZhLTQwYjctNGNkMi1iYTgxLTgyNDdkMjlhNmYyZC0xMCIgc291cmNlPSJ0ZW1wbGF0ZS0xNjU0MjA2NS1jMWI5YjQxZC03OGE2LTRjNTctOTNjMi0zZWZhOGM1NmVkNTctOCIgdGFyZ2V0PSJ0ZW1wbGF0ZS0xNjU0MjA2NS1lNGJjN2E2ZC05ZWMyLTQ3MTMtOGFkZC00MDFiYzcyODdhMTEtMjMiIGVkZ2U9IjEiPjxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS1jMWI5YjQxZC03OGE2LTRjNTctOTNjMi0zZWZhOGM1NmVkNTctOCIgdmFsdWU9IldlYiBTZXJ2aWNlIiBzdHlsZT0iaXIucmVmPWMxYjliNDFkLTc4YTYtNGM1Ny05M2MyLTNlZmE4YzU2ZWQ1Nztyb3VuZGVkPTE7d2hpdGVTcGFjZT13cmFwO2h0bWw9MTthbGlnbj1jZW50ZXI7aW1hZ2VBbGlnbj1jZW50ZXI7aW1hZ2VXaWR0aD04MjtpbWFnZUhlaWdodD04MjthcmNTaXplPTkwO2Fic29sdXRlQXJjU2l6ZT0xO3N0cm9rZUNvbG9yPSMyMEM5RTM7ZmlsbENvbG9yPSNFM0ZDRkM7Zm9udENvbG9yPSMwMDg0QUQ7Zm9udFNpemU9MTI7c291cmNlPWlyaXVzcmlzaztpci50eXBlPUNPTVBPTkVOVDtpci5jb21wb25lbnREZWZpbml0aW9uLnJlZj13ZWItc2VydmljZTtpbWFnZT1kYXRhOmltYWdlL3N2Zyt4bWwsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIZHBaSFJvUFNJeElpQm9aV2xuYUhROUlqRWlJSFpwWlhkQ2IzZzlJakFnTUNBeElERWlJR1pwYkd3OUltNXZibVVpUGlZamVHRTdQSE4wZVd4bFBpWWplR0U3SUNBZ0lDNXBZMjl1TFdacGJHd2dleVlqZUdFN0lDQWdJQ0FnSUNCbWFXeHNPaUFqTVRGQk9FTkdPeVlqZUdFN0lDQWdJSDBtSTNoaE96d3ZjM1I1YkdVK0ppTjRZVHM4WnlCamJHbHdMWEJoZEdnOUluVnliQ2dqWTJ4cGNEQXBJajRtSTNoaE96eG5JR05zYVhBdGNHRjBhRDBpZFhKc0tDTmpiR2x3TVNraVBpWWplR0U3UEhCaGRHZ2dabWxzYkMxeWRXeGxQU0psZG1WdWIyUmtJaUJqYkdsd0xYSjFiR1U5SW1WMlpXNXZaR1FpSUdROUlrMHdMak0yTlRnMU15QXdMakk1T0RjNE0wTXdMak0yTlRnMU15QXdMakk0TWprd05TQXdMak0zT0RjeU5TQXdMakkzTURBek15QXdMak01TkRZd015QXdMakkzTURBek0wZ3dMall3TlRRek5rTXdMall5TVRNeE5DQXdMakkzTURBek15QXdMall6TkRFNE5pQXdMakk0TWprd05TQXdMall6TkRFNE5pQXdMakk1T0RjNE0wTXdMall6TkRFNE5pQXdMak14TkRZMk1TQXdMall5TVRNeE5DQXdMak15TnpVek15QXdMall3TlRRek5pQXdMak15TnpVek0wZ3dMak01TkRZd00wTXdMak0zT0RjeU5TQXdMak15TnpVek15QXdMak0yTlRnMU15QXdMak14TkRZMk1TQXdMak0yTlRnMU15QXdMakk1T0RjNE0xcE5NQzR6T1RRMk1ETWdNQzQyT1RFM1F6QXVNemM0TnpJMUlEQXVOamt4TnlBd0xqTTJOVGcxTXlBd0xqY3dORFUzTWlBd0xqTTJOVGcxTXlBd0xqY3lNRFExUXpBdU16WTFPRFV6SURBdU56TTJNekk0SURBdU16YzROekkxSURBdU56UTVNaUF3TGpNNU5EWXdNeUF3TGpjME9USklNQzQxTXpnNU1UTkRNQzQxTkRNeU56SWdNQzQzTWpnek1UTWdNQzQxTlRFMU56a2dNQzQzTURnNE56UWdNQzQxTmpNd01UVWdNQzQyT1RFM1NEQXVNemswTmpBeldrMHdMalkzTWpVeUlEQXVOakl3TXpVeFZqQXVNak14TmprNVF6QXVOamN5TlRJZ01DNHhPVGs1TkRNZ01DNDJORFkzTnpZZ01DNHhOelF4T1RrZ01DNDJNVFV3TWlBd0xqRTNOREU1T1Vnd0xqTTROVEF4T1VNd0xqTTFNekkyTXlBd0xqRTNOREU1T1NBd0xqTXlOelV4T1NBd0xqRTVPVGswTXlBd0xqTXlOelV4T1NBd0xqSXpNVFk1T1ZZd0xqYzJPRE0yTjBNd0xqTXlOelV4T1NBd0xqZ3dNREV5TXlBd0xqTTFNekkyTXlBd0xqZ3lOVGcyTnlBd0xqTTROVEF4T1NBd0xqZ3lOVGcyTjBnd0xqVTBNVEF4T0VNd0xqVTBOalkyT0NBd0xqZzBOekF3TkNBd0xqVTFOalF3TnlBd0xqZzJOalEzSURBdU5UWTVNek0ySURBdU9EZ3pNelkzU0RBdU16ZzFNREU1UXpBdU16SXhOVEEzSURBdU9EZ3pNelkzSURBdU1qY3dNRElnTUM0NE16RTROemtnTUM0eU56QXdNaUF3TGpjMk9ETTJOMVl3TGpJek1UWTVPVU13TGpJM01EQXlJREF1TVRZNE1UZzNJREF1TXpJeE5UQTNJREF1TVRFMk5qazVJREF1TXpnMU1ERTVJREF1TVRFMk5qazVTREF1TmpFMU1ESkRNQzQyTnpnMU16TWdNQzR4TVRZMk9Ua2dNQzQzTXpBd01pQXdMakUyT0RFNE55QXdMamN6TURBeUlEQXVNak14TmprNVZqQXVOakl3TmpBeFF6QXVOekl3TkRVNUlEQXVOakU0T0RjNUlEQXVOekV3TmpFeUlEQXVOakUzT1RnZ01DNDNNREExTlRZZ01DNDJNVGM1T0VNd0xqWTVNRGs1T1NBd0xqWXhOems0SURBdU5qZ3hOak15SURBdU5qRTROemt5SURBdU5qY3lOVElnTUM0Mk1qQXpOVEZhVFRBdU16WTFPRFV6SURBdU5qQTFORFZETUM0ek5qVTROVE1nTUM0MU9EazFOekVnTUM0ek56ZzNNalVnTUM0MU56WTNJREF1TXprME5qQXpJREF1TlRjMk4wZ3dMall3TlRRek5rTXdMall5TVRNeE5DQXdMalUzTmpjZ01DNDJNelF4T0RZZ01DNDFPRGsxTnpFZ01DNDJNelF4T0RZZ01DNDJNRFUwTlVNd0xqWXpOREU0TmlBd0xqWXlNVE15T0NBd0xqWXlNVE14TkNBd0xqWXpORElnTUM0Mk1EVTBNellnTUM0Mk16UXlTREF1TXprME5qQXpRekF1TXpjNE56STFJREF1TmpNME1pQXdMak0yTlRnMU15QXdMall5TVRNeU9DQXdMak0yTlRnMU15QXdMall3TlRRMVdpSWdZMnhoYzNNOUltbGpiMjR0Wm1sc2JDSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVOall5TlRBNElEQXVPRE0wTlRnMFNEQXVOek0xTlRNMlF6QXVOekk0TWpJMElEQXVPRGN6TVRZNUlEQXVOekV6TlRneElEQXVPRGs1TkRNMElEQXVOams1TURJeUlEQXVPRGs1TkRNMFF6QXVOamcwT1RBeklEQXVPRGs1TkRNMElEQXVOamN3TnpBM0lEQXVPRGMwTnpNM0lEQXVOall6TVRreklEQXVPRE00TURVNFREQXVOall5TlRBNElEQXVPRE0wTlRnMFNEQXVOek0xTlRNMlNEQXVOall5TlRBNFdrMHdMalU1TXpZME5DQXdMamd6TkRVNE5rd3dMalkwTkRReU9DQXdMamd6TkRVNE5FTXdMalkwT0Rjek1TQXdMamcxT1RFME15QXdMalkxTmpBeU15QXdMamc0TURBek55QXdMalkyTlRVMk55QXdMamc1TkRZMlF6QXVOak0xTXpNNUlEQXVPRGcxTnpNeUlEQXVOakV3TVRjeklEQXVPRFkxTURNMUlEQXVOVGsxTXpjZ01DNDRNemM0TnpaTU1DNDFPVE0yTkRRZ01DNDRNelExT0RaYVRUQXVOelV6TmpFMUlEQXVPRE0wTlRnMFREQXVPREEwTXprNUlEQXVPRE0wTlRnMlF6QXVOemc1T0RjMklEQXVPRFl6TXpZZ01DNDNOak01TVRRZ01DNDRPRFV6TnpVZ01DNDNNekkwT0RnZ01DNDRPVFEyTlRWRE1DNDNOREV6T0RnZ01DNDRPREV3TURFZ01DNDNORGd6TXpJZ01DNDROakU0T1RRZ01DNDNOVEkzTVRVZ01DNDRNemswTkRWTU1DNDNOVE0yTVRVZ01DNDRNelExT0RSTU1DNDRNRFF6T1RrZ01DNDRNelExT0RaTU1DNDNOVE0yTVRVZ01DNDRNelExT0RSYVRUQXVOelUzTVRnNElEQXVOelUzT1RFNFREQXVPREUwTmpJNUlEQXVOelUzT1RFeFF6QXVPREUyTVRjMklEQXVOelkxTlRNMElEQXVPREUyT1RnNUlEQXVOemN6TkRJMElEQXVPREUyT1RnNUlEQXVOemd4TlRBMFF6QXVPREUyT1RnNUlEQXVOemt6T0RNeklEQXVPREUxTURrM0lEQXVPREExTnpJeElEQXVPREV4TlRnNUlEQXVPREUyT0RrelNEQXVOelUyTVRJeVF6QXVOelUzTXpZMElEQXVPREExTlRrNElEQXVOelU0TURFMElEQXVOemt6TnpNeUlEQXVOelU0TURFMElEQXVOemd4TlRBMFF6QXVOelU0TURFMElEQXVOemMyTVRRMklEQXVOelUzT0RnNUlEQXVOemN3T0RVMklEQXVOelUzTmpRMElEQXVOelkxTmpVMFREQXVOelUzTVRnNElEQXVOelUzT1RFNFREQXVPREUwTmpJNUlEQXVOelUzT1RFeFREQXVOelUzTVRnNElEQXVOelUzT1RFNFdrMHdMalU0TXpReE5DQXdMamMxTnpreE1Vd3dMalkwTURnMU5pQXdMamMxTnpreE9FTXdMalkwTURNeElEQXVOelkxTlRnMElEQXVOalF3TURJNUlEQXVOemN6TkRZMklEQXVOalF3TURJNUlEQXVOemd4TlRBMFF6QXVOalF3TURJNUlEQXVOemt4TWpnMklEQXVOalF3TkRRMklEQXVPREF3T0RNM0lEQXVOalF4TWpRNElEQXVPREV3TURRNVREQXVOalF4T1RJeUlEQXVPREUyT0RrelNEQXVOVGcyTkRVMVF6QXVOVGd5T1RRMklEQXVPREExTnpJeElEQXVOVGd4TURVMUlEQXVOemt6T0RNeklEQXVOVGd4TURVMUlEQXVOemd4TlRBMFF6QXVOVGd4TURVMUlEQXVOemN6TkRJMElEQXVOVGd4T0RZM0lEQXVOelkxTlRNMElEQXVOVGd6TkRFMElEQXVOelUzT1RFeFdrMHdMalkxT0RZeklEQXVOelUzT1RFeVNEQXVOek01TkRFelF6QXVOelF3TURBMklEQXVOelkxTlRJM0lEQXVOelF3TXpJeUlEQXVOemN6TkRFMklEQXVOelF3TXpJeUlEQXVOemd4TlRBMFF6QXVOelF3TXpJeUlEQXVOemt4TXpnMElEQXVOek01T0RVeElEQXVPREF3T1RZMklEQXVOek00T1RjNUlEQXVPREV3TVRFMVREQXVOek00TWpVeUlEQXVPREUyT0RrelNEQXVOalU1TnpreFF6QXVOalU0TkRVNElEQXVPREExTnpNNElEQXVOalUzTnpJeElEQXVOemt6T0RVMElEQXVOalUzTnpJeElEQXVOemd4TlRBMFF6QXVOalUzTnpJeElEQXVOemMxTkRNNElEQXVOalUzT0RrNUlEQXVOelk1TkRnMElEQXVOalU0TWpNNElEQXVOell6TmpjelREQXVOalU0TmpNZ01DNDNOVGM1TVRKSU1DNDNNemswTVROSU1DNDJOVGcyTTFwTk1DNDNNek0zTkRrZ01DNDJOekF6TlRoTU1DNDNNekkwTnpjZ01DNDJOamd6TlVNd0xqYzJPREEzTnlBd0xqWTNPRGcxT1NBd0xqYzVOalkyT0NBd0xqY3dOVGN4SURBdU9EQTVOVFl5SURBdU56UXdNakU1VERBdU56VTFOREUwSURBdU56UXdNakl5UXpBdU56VXhOamt5SURBdU56RXhOekUxSURBdU56UTBNVE15SURBdU5qZzNNak16SURBdU56TXpOelE1SURBdU5qY3dNelU0VERBdU56TXlORGMzSURBdU5qWTRNelZNTUM0M016TTNORGtnTUM0Mk56QXpOVGhhVFRBdU5qWTBNVE1nTUM0Mk5qZzNPRFJNTUM0Mk5qVTFOallnTUM0Mk5qZ3pOVU13TGpZMU5URTNPQ0F3TGpZNE5ESTJOeUF3TGpZME56UTFOeUF3TGpjd056WXhOaUF3TGpZME16TTFOaUF3TGpjek5UQXpORXd3TGpZME1qWXpJREF1TnpRd01qSXlUREF1TlRnNE5EZ3hJREF1TnpRd01qRTVRekF1TmpBeE1qQXhJREF1TnpBMk1UYzJJREF1TmpJNU1UazRJREF1TmpjNU5UZzBJREF1TmpZME1UTWdNQzQyTmpnM09EUk1NQzQyTmpVMU5qWWdNQzQyTmpnek5Vd3dMalkyTkRFeklEQXVOalk0TnpnMFdrMHdMalk1T1RBeU1pQXdMalkyTXpVM05FTXdMamN4TkRVM055QXdMalkyTXpVM05DQXdMamN6TURJeU5pQXdMalk1TXpVMU15QXdMamN6TmpreklEQXVOek0yTlRBMlREQXVOek0zTkRneklEQXVOelF3TWpFNVNEQXVOall3TlRZeFF6QXVOalkyT1RJeklEQXVOamsxTWpreElEQXVOamd6TURJeUlEQXVOall6TlRjMElEQXVOams1TURJeUlEQXVOall6TlRjMFdpSWdZMnhoYzNNOUltbGpiMjR0Wm1sc2JDSXZQaVlqZUdFN1BDOW5QaVlqZUdFN1BDOW5QaVlqZUdFN1BHUmxabk0rSmlONFlUczhZMnhwY0ZCaGRHZ2dhV1E5SW1Oc2FYQXdJajRtSTNoaE96eHlaV04wSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlHWnBiR3c5SW5kb2FYUmxJaTgrSmlONFlUczhMMk5zYVhCUVlYUm9QaVlqZUdFN1BHTnNhWEJRWVhSb0lHbGtQU0pqYkdsd01TSStKaU40WVRzOGNtVmpkQ0IzYVdSMGFEMGlNQzQ1TWlJZ2FHVnBaMmgwUFNJd0xqa3lJaUJtYVd4c1BTSjNhR2wwWlNJZ2RISmhibk5tYjNKdFBTSjBjbUZ1YzJ4aGRHVW9NQzR3TkRBd016a3hJREF1TURRd01ETTVNU2tpTHo0bUkzaGhPend2WTJ4cGNGQmhkR2crSmlONFlUczhMMlJsWm5NK0ppTjRZVHM4TDNOMlp6ND07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTsiIHBhcmVudD0idGVtcGxhdGUtMTY1NDIwNjUtMmFiNGVmZmEtNDBiNy00Y2QyLWJhODEtODI0N2QyOWE2ZjJkLTEwIiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiPjxteEdlb21ldHJ5IHg9IjQ2NCIgeT0iMTQ2IiB3aWR0aD0iOTAiIGhlaWdodD0iOTAiIGFzPSJnZW9tZXRyeSIvPjwvbXhDZWxsPjxteENlbGwgaWQ9InRlbXBsYXRlLTE2NTQyMDY1LWQzMTg5MTg3LWQyZWUtNGI1Yy04M2EyLWZiMDI4N2Y4YjczYS00IiB2YWx1ZT0iT3RoZXIgZGF0YWJhc2UiIHN0eWxlPSJpci5yZWY9ZDMxODkxODctZDJlZS00YjVjLTgzYTItZmIwMjg3ZjhiNzNhO3JvdW5kZWQ9MTt3aGl0ZVNwYWNlPXdyYXA7aHRtbD0xO2FsaWduPWNlbnRlcjtpbWFnZUFsaWduPWNlbnRlcjtpbWFnZVdpZHRoPTgyO2ltYWdlSGVpZ2h0PTgyO2FyY1NpemU9OTA7YWJzb2x1dGVBcmNTaXplPTE7c3Ryb2tlQ29sb3I9IzIwQzlFMztmaWxsQ29sb3I9I0UzRkNGQztmb250Q29sb3I9IzAwODRBRDtmb250U2l6ZT0xMjtzb3VyY2U9aXJpdXNyaXNrO2lyLnR5cGU9Q09NUE9ORU5UO2lyLmNvbXBvbmVudERlZmluaXRpb24ucmVmPW90aGVyO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BITjBlV3hsUGlZamVHRTdJQ0FnSUM1cFkyOXVMV1pwYkd3Z2V5WWplR0U3SUNBZ0lDQWdJQ0JtYVd4c09pQWpNVEZCT0VOR095WWplR0U3SUNBZ0lIMG1JM2hoT3p3dmMzUjViR1UrSmlONFlUczhaeUJqYkdsd0xYQmhkR2c5SW5WeWJDZ2pZMnhwY0RBcElqNG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqVXdNREUxTmlBd0xqUXhOVGsxTmtNd0xqWTROemt5TVNBd0xqUXhOVGsxTmlBd0xqZzBNREUxTmlBd0xqTTBNRGMzTmlBd0xqZzBNREUxTmlBd0xqSTBOemsxTmtNd0xqZzBNREUxTmlBd0xqRTFOVEV6TmlBd0xqWTROemt5TVNBd0xqQTNPVGsxTmpFZ01DNDFNREF4TlRZZ01DNHdOems1TlRZeFF6QXVNekV5TXpreElEQXVNRGM1T1RVMk1TQXdMakUyTURFMU5pQXdMakUxTlRFek5pQXdMakUyTURFMU5pQXdMakkwTnprMU5rTXdMakUyTURFMU5pQXdMak0wTURjM05pQXdMak14TWpNNU1TQXdMalF4TlRrMU5pQXdMalV3TURFMU5pQXdMalF4TlRrMU5scE5NQzQzTmprd09UWWdNQzQwTWpNd09UWkRNQzQzT1RRM056Z2dNQzQwTVRBMk16TWdNQzQ0TVRnMk56UWdNQzR6T1RRNE5UY2dNQzQ0TkRBeE5UWWdNQzR6TnpZeE9ESldNQzQzTlRFNU5UWkRNQzQ0TkRBeE5UWWdNQzQ0TkRRM056WWdNQzQyT0RjNU1qRWdNQzQ1TVRrNU5UWWdNQzQxTURBeE5UWWdNQzQ1TVRrNU5UWkRNQzR6TVRJek9URWdNQzQ1TVRrNU5UWWdNQzR4TmpBeE5UWWdNQzQ0TkRRM056WWdNQzR4TmpBeE5UWWdNQzQzTlRFNU5UWldNQzR6TnpZeE9ESkRNQzR4T0RFMk16a2dNQzR6T1RRNE5UY2dNQzR5TURVMU16UWdNQzQwTVRBMk16TWdNQzR5TXpFeU1UWWdNQzQwTWpNd09UWkRNQzR6TURNek9ERWdNQzQwTlRnM01USWdNQzR6T1RnME9UWWdNQzQwTnpnNU5UWWdNQzQxTURBeE5UWWdNQzQwTnpnNU5UWkRNQzQyTURFNE1UWWdNQzQwTnpnNU5UWWdNQzQyT1RZNU16RWdNQzQwTlRnM01USWdNQzQzTmprd09UWWdNQzQwTWpNd09UWmFJaUJqYkdGemN6MGlhV052YmkxbWFXeHNJaTgrSmlONFlUczhMMmMrSmlONFlUczhaR1ZtY3o0bUkzaGhPenhqYkdsd1VHRjBhQ0JwWkQwaVkyeHBjREFpUGlZamVHRTdQSEpsWTNRZ2QybGtkR2c5SWpFaUlHaGxhV2RvZEQwaU1TSWdabWxzYkQwaWQyaHBkR1VpTHo0bUkzaGhPend2WTJ4cGNGQmhkR2crSmlONFlUczhMMlJsWm5NK0ppTjRZVHM4TDNOMlp6ND07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTsiIHBhcmVudD0idGVtcGxhdGUtMTY1NDIwNjUtMmFiNGVmZmEtNDBiNy00Y2QyLWJhODEtODI0N2QyOWE2ZjJkLTEwIiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiPjxteEdlb21ldHJ5IHg9IjY0MSIgeT0iMjUiIHdpZHRoPSI5MCIgaGVpZ2h0PSI5MCIgYXM9Imdlb21ldHJ5Ii8+PC9teENlbGw+PG14Q2VsbCBpZD0idGVtcGxhdGUtMTY1NDIwNjUtYTExZTQ4OGItNjY0My00ZmE2LTlhNWUtNzk5OGNmMmM2YjFjLTExIiB2YWx1ZT0iT3RoZXIgZGF0YSBzdG9yZSIgc3R5bGU9ImlyLnJlZj1hMTFlNDg4Yi02NjQzLTRmYTYtOWE1ZS03OTk4Y2YyYzZiMWM7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9b3RoZXItZGF0YWJhc2U7aW1hZ2U9ZGF0YTppbWFnZS9zdmcreG1sLFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUhacFpYZENiM2c5SWpBZ01DQXhJREVpSUdacGJHdzlJbTV2Ym1VaVBpWWplR0U3UEhOMGVXeGxQaVlqZUdFN0lDQWdJQzVwWTI5dUxXWnBiR3dnZXlZamVHRTdJQ0FnSUNBZ0lDQm1hV3hzT2lBak1URkJPRU5HT3lZamVHRTdJQ0FnSUgwbUkzaGhPend2YzNSNWJHVStKaU40WVRzOFp5QmpiR2x3TFhCaGRHZzlJblZ5YkNnalkyeHBjREFwSWo0bUkzaGhPenh3WVhSb0lHWnBiR3d0Y25Wc1pUMGlaWFpsYm05a1pDSWdZMnhwY0MxeWRXeGxQU0psZG1WdWIyUmtJaUJrUFNKTk1DNDFNREEyTkRVZ01DNDBNVFl3TnpoRE1DNDJPRGcwTVNBd0xqUXhOakEzT0NBd0xqZzBNRFkwTlNBd0xqTTBNRGc1T0NBd0xqZzBNRFkwTlNBd0xqSTBPREEzT0VNd0xqZzBNRFkwTlNBd0xqRTFOVEkxT0NBd0xqWTRPRFF4SURBdU1EZ3dNRGM0TVNBd0xqVXdNRFkwTlNBd0xqQTRNREEzT0RGRE1DNHpNVEk0T0NBd0xqQTRNREEzT0RFZ01DNHhOakEyTkRVZ01DNHhOVFV5TlRnZ01DNHhOakEyTkRVZ01DNHlORGd3TnpoRE1DNHhOakEyTkRVZ01DNHpOREE0T1RnZ01DNHpNVEk0T0NBd0xqUXhOakEzT0NBd0xqVXdNRFkwTlNBd0xqUXhOakEzT0ZwTk1DNDNOamsxT0RVZ01DNDBNak15TVRoRE1DNDNPVFV5TmpjZ01DNDBNVEEzTlRVZ01DNDRNVGt4TmpJZ01DNHpPVFE1TnprZ01DNDROREEyTkRVZ01DNHpOell6TURSV01DNDFNREF3TmpoRE1DNDRNVGt4TmpFZ01DNDFNVGczTkRRZ01DNDNPVFV5TmpjZ01DNDFNelExTVRrZ01DNDNOamsxT0RVZ01DNDFORFk1T0RKRE1DNDJPVGMwTVRrZ01DNDFPREkxT1RnZ01DNDJNREl6TURRZ01DNDJNREk0TkRJZ01DNDFNREEyTkRVZ01DNDJNREk0TkRKRE1DNHpPVGc1T0RVZ01DNDJNREk0TkRJZ01DNHpNRE00TmprZ01DNDFPREkxT1RnZ01DNHlNekUzTURVZ01DNDFORFk1T0RKRE1DNHlNRFl3TWpJZ01DNDFNelExTVRrZ01DNHhPREl4TWpjZ01DNDFNVGczTkRRZ01DNHhOakEyTkRVZ01DNDFNREF3TmpoV01DNHpOell6TURSRE1DNHhPREl4TWpjZ01DNHpPVFE1TnprZ01DNHlNRFl3TWpJZ01DNDBNVEEzTlRVZ01DNHlNekUzTURVZ01DNDBNak15TVRoRE1DNHpNRE00TmprZ01DNDBOVGc0TXpRZ01DNHpPVGc1T0RVZ01DNDBOemt3TnpnZ01DNDFNREEyTkRVZ01DNDBOemt3TnpoRE1DNDJNREl6TURRZ01DNDBOemt3TnpnZ01DNDJPVGMwTVRrZ01DNDBOVGc0TXpRZ01DNDNOamsxT0RVZ01DNDBNak15TVRoYVRUQXVOelk1TlRnMUlEQXVOVGc0TnpVM1F6QXVOemsxTWpZM0lEQXVOVGMyTWpreklEQXVPREU1TVRZeElEQXVOVFl3TlRFNElEQXVPRFF3TmpRMUlEQXVOVFF4T0RReVZqQXVOalV3TURZNVF6QXVPREU1TVRZeElEQXVOalk0TnpRMUlEQXVOemsxTWpZM0lEQXVOamcwTlRJZ01DNDNOamsxT0RVZ01DNDJPVFk1T0RSRE1DNDJPVGMwTVRrZ01DNDNNekkxT1RrZ01DNDJNREl6TURRZ01DNDNOVEk0TkRNZ01DNDFNREEyTkRVZ01DNDNOVEk0TkRORE1DNHpPVGc1T0RVZ01DNDNOVEk0TkRNZ01DNHpNRE00TmprZ01DNDNNekkxT1RrZ01DNHlNekUzTURVZ01DNDJPVFk1T0RSRE1DNHlNRFl3TWpJZ01DNDJPRFExTWlBd0xqRTRNakV5TnlBd0xqWTJPRGMwTlNBd0xqRTJNRFkwTlNBd0xqWTFNREEyT1ZZd0xqVTBNVGcwTWtNd0xqRTRNakV5TnlBd0xqVTJNRFV4T0NBd0xqSXdOakF5TWlBd0xqVTNOakk1TXlBd0xqSXpNVGN3TlNBd0xqVTRPRGMxTjBNd0xqTXdNemcyT1NBd0xqWXlORE0zTWlBd0xqTTVPRGs0TlNBd0xqWTBORFl4TmlBd0xqVXdNRFkwTlNBd0xqWTBORFl4TmtNd0xqWXdNak13TkNBd0xqWTBORFl4TmlBd0xqWTVOelF4T1NBd0xqWXlORE0zTWlBd0xqYzJPVFU0TlNBd0xqVTRPRGMxTjFwTk1DNHhOakEyTkRVZ01DNDJPVEU0TkRSV01DNDNOVEl3TnpoRE1DNHhOakEyTkRVZ01DNDRORFE0T1RnZ01DNHpNVEk0T0NBd0xqa3lNREEzT0NBd0xqVXdNRFkwTlNBd0xqa3lNREEzT0VNd0xqWTRPRFF4SURBdU9USXdNRGM0SURBdU9EUXdOalExSURBdU9EUTBPRGs0SURBdU9EUXdOalExSURBdU56VXlNRGM0VmpBdU5qa3hPRFEwUXpBdU9ERTVNVFl4SURBdU56RXdOVEU1SURBdU56azFNalkzSURBdU56STJNamsxSURBdU56WTVOVGcxSURBdU56TTROelU0UXpBdU5qazNOREU1SURBdU56YzBNemMwSURBdU5qQXlNekEwSURBdU56azBOakU0SURBdU5UQXdOalExSURBdU56azBOakU0UXpBdU16azRPVGcxSURBdU56azBOakU0SURBdU16QXpPRFk1SURBdU56YzBNemMwSURBdU1qTXhOekExSURBdU56TTROelU0UXpBdU1qQTJNREl5SURBdU56STJNamsxSURBdU1UZ3lNVEkzSURBdU56RXdOVEU1SURBdU1UWXdOalExSURBdU5qa3hPRFEwV2lJZ1kyeGhjM005SW1samIyNHRabWxzYkNJdlBpWWplR0U3UEM5blBpWWplR0U3UEdSbFpuTStKaU40WVRzOFkyeHBjRkJoZEdnZ2FXUTlJbU5zYVhBd0lqNG1JM2hoT3p4eVpXTjBJSGRwWkhSb1BTSXhJaUJvWldsbmFIUTlJakVpSUdacGJHdzlJbmRvYVhSbElpOCtKaU40WVRzOEwyTnNhWEJRWVhSb1BpWWplR0U3UEM5a1pXWnpQaVlqZUdFN1BDOXpkbWMrO3ZlcnRpY2FsTGFiZWxQb3NpdGlvbj1ib3R0b207dmVydGljYWxBbGlnbj10b3A7aXIuc3luY2hyb25pemVkPTE7IiBwYXJlbnQ9InRlbXBsYXRlLTE2NTQyMDY1LTJhYjRlZmZhLTQwYjctNGNkMi1iYTgxLTgyNDdkMjlhNmYyZC0xMCIgdmVydGV4PSIxIiBpc1RodW1iPSIwIj48bXhHZW9tZXRyeSB4PSI2NDEiIHk9IjE1NCIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS0yMCIgc3R5bGU9ImlyLmFzc2V0cz07aXIudGFncz07ZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzb3VyY2VQZXJpbWV0ZXJTcGFjaW5nPTk7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yOyIgcGFyZW50PSJ0ZW1wbGF0ZS0xNjU0MjA2NS0yYWI0ZWZmYS00MGI3LTRjZDItYmE4MS04MjQ3ZDI5YTZmMmQtMTAiIHNvdXJjZT0idGVtcGxhdGUtMTY1NDIwNjUtMTIiIHRhcmdldD0idGVtcGxhdGUtMTY1NDIwNjUtYzFiOWI0MWQtNzhhNi00YzU3LTkzYzItM2VmYThjNTZlZDU3LTgiIGVkZ2U9IjEiPjxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS0xMiIgdmFsdWU9IiIgc3R5bGU9Im91dGxpbmVDb25uZWN0PTA7ZGFzaGVkPTA7dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDthbGlnbj1jZW50ZXI7aHRtbD0xO3NoYXBlPW14Z3JhcGguYXdzMy5hcHBsaWNhdGlvbl9sb2FkX2JhbGFuY2VyO2ZpbGxDb2xvcj0jRjU4NTM0O2dyYWRpZW50Q29sb3I9bm9uZTtmb250Q29sb3I9IzhDOEM4QztzdHJva2VDb2xvcj0jOEM4QzhDO3N0cm9rZVdpZHRoPTM7IiBwYXJlbnQ9InRlbXBsYXRlLTE2NTQyMDY1LTJhYjRlZmZhLTQwYjctNGNkMi1iYTgxLTgyNDdkMjlhNmYyZC0xMCIgdmVydGV4PSIxIiBpc1RodW1iPSIwIj48bXhHZW9tZXRyeSB4PSI0NjkiIHk9IjI1IiB3aWR0aD0iNjkiIGhlaWdodD0iNzIiIGFzPSJnZW9tZXRyeSIvPjwvbXhDZWxsPjxteENlbGwgaWQ9InRlbXBsYXRlLTE2NTQyMDY1LTE2IiBzdHlsZT0iaXIuYXNzZXRzPTtpci50YWdzPTtlZGdlU3R5bGU9bm9uZTtjdXJ2ZWQ9MTtodG1sPTE7aXIuc3luY2hyb25pemVkPTE7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7IiBwYXJlbnQ9InRlbXBsYXRlLTE2NTQyMDY1LTJhYjRlZmZhLTQwYjctNGNkMi1iYTgxLTgyNDdkMjlhNmYyZC0xMCIgc291cmNlPSJ0ZW1wbGF0ZS0xNjU0MjA2NS0xMyIgdGFyZ2V0PSJ0ZW1wbGF0ZS0xNjU0MjA2NS1jMzVhZGM5Ni0zOTY4LTQyNDgtODQyMi1iMzZmNjgwNWU4ZjYtNyIgZWRnZT0iMSI+PG14R2VvbWV0cnkgcmVsYXRpdmU9IjEiIGFzPSJnZW9tZXRyeSIvPjwvbXhDZWxsPjxteENlbGwgaWQ9InRlbXBsYXRlLTE2NTQyMDY1LTE3IiBzdHlsZT0iaXIuYXNzZXRzPTtpci50YWdzPTtlZGdlU3R5bGU9bm9uZTtjdXJ2ZWQ9MTtodG1sPTE7aXIuc3luY2hyb25pemVkPTE7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7IiBwYXJlbnQ9InRlbXBsYXRlLTE2NTQyMDY1LTJhYjRlZmZhLTQwYjctNGNkMi1iYTgxLTgyNDdkMjlhNmYyZC0xMCIgc291cmNlPSJ0ZW1wbGF0ZS0xNjU0MjA2NS0xMyIgdGFyZ2V0PSJ0ZW1wbGF0ZS0xNjU0MjA2NS1kMjYwNDg2Zi01MmIzLTQ5NDYtYmFlMS1iOTY3YmVhOTM2YzMtNiIgZWRnZT0iMSI+PG14R2VvbWV0cnkgcmVsYXRpdmU9IjEiIGFzPSJnZW9tZXRyeSIvPjwvbXhDZWxsPjxteENlbGwgaWQ9InRlbXBsYXRlLTE2NTQyMDY1LTEzIiB2YWx1ZT0iIiBzdHlsZT0ib3V0bGluZUNvbm5lY3Q9MDtkYXNoZWQ9MDt2ZXJ0aWNhbExhYmVsUG9zaXRpb249Ym90dG9tO3ZlcnRpY2FsQWxpZ249dG9wO2FsaWduPWNlbnRlcjtodG1sPTE7c2hhcGU9bXhncmFwaC5hd3MzLmNsYXNzaWNfbG9hZF9iYWxhbmNlcjtmaWxsQ29sb3I9I0Y1ODUzNDtncmFkaWVudENvbG9yPW5vbmU7Zm9udENvbG9yPSM4QzhDOEM7c3Ryb2tlQ29sb3I9IzhDOEM4QztzdHJva2VXaWR0aD0zOyIgcGFyZW50PSJ0ZW1wbGF0ZS0xNjU0MjA2NS0yYWI0ZWZmYS00MGI3LTRjZDItYmE4MS04MjQ3ZDI5YTZmMmQtMTAiIHZlcnRleD0iMSIgaXNUaHVtYj0iMCI+PG14R2VvbWV0cnkgeD0iMTMwIiB5PSIxMTAiIHdpZHRoPSI2OSIgaGVpZ2h0PSI3MiIgYXM9Imdlb21ldHJ5Ii8+PC9teENlbGw+PG14Q2VsbCBpZD0idGVtcGxhdGUtMTY1NDIwNjUtZTRiYzdhNmQtOWVjMi00NzEzLThhZGQtNDAxYmM3Mjg3YTExLTIzIiB2YWx1ZT0iTWljcm9zb2Z0IEF6dXJlIFNlcnZpY2UgQnVzIE1lc3NhZ2luZyIgc3R5bGU9ImlyLnJlZj1lNGJjN2E2ZC05ZWMyLTQ3MTMtOGFkZC00MDFiYzcyODdhMTE7cm91bmRlZD0xO3doaXRlU3BhY2U9d3JhcDtodG1sPTE7YWxpZ249Y2VudGVyO2ltYWdlQWxpZ249Y2VudGVyO2ltYWdlV2lkdGg9ODI7aW1hZ2VIZWlnaHQ9ODI7YXJjU2l6ZT05MDthYnNvbHV0ZUFyY1NpemU9MTtzdHJva2VDb2xvcj0jMjBDOUUzO2ZpbGxDb2xvcj0jRTNGQ0ZDO2ZvbnRDb2xvcj0jMDA4NEFEO2ZvbnRTaXplPTEyO3NvdXJjZT1pcml1c3Jpc2s7aXIudHlwZT1DT01QT05FTlQ7aXIuY29tcG9uZW50RGVmaW5pdGlvbi5yZWY9Q0QtTUlDUk9TT0ZULUFaVVJFLVNFUi1CVVMtTVNHO2ltYWdlPWRhdGE6aW1hZ2Uvc3ZnK3htbCxQSE4yWnlCNGJXeHVjejBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01DOXpkbWNpSUhkcFpIUm9QU0l4SWlCb1pXbG5hSFE5SWpFaUlIWnBaWGRDYjNnOUlqQWdNQ0F4SURFaUlHWnBiR3c5SW01dmJtVWlQaVlqZUdFN1BHY2dZMnhwY0Mxd1lYUm9QU0oxY213b0kyTnNhWEF3WHpFM01EbGZNalV5TlRNcElqNG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqRTVNems1TmlBd0xqSXdOemMyTkVnd0xqSTBNemM0TTFZd0xqTTBOVFUwTmtNd0xqSTBNemM0TXlBd0xqTTBPRFV4TkNBd0xqSTBNall3TXlBd0xqTTFNVE0yTVNBd0xqSTBNRFV3TkNBd0xqTTFNelEyUXpBdU1qTTROREExSURBdU16VTFOVFU1SURBdU1qTTFOVFU1SURBdU16VTJOek00SURBdU1qTXlOVGtnTUM0ek5UWTNNemhJTUM0eE9ETXhPRGxETUM0eE9EQXlNakVnTUM0ek5UWTNNemdnTUM0eE56Y3pOelFnTUM0ek5UVTFOVGtnTUM0eE56VXlOelVnTUM0ek5UTTBOa013TGpFM016RTNOaUF3TGpNMU1UTTJNU0F3TGpFM01UazVOeUF3TGpNME9EVXhOQ0F3TGpFM01UazVOeUF3TGpNME5UVTBObFl3TGpJeU9UYzJNa013TGpFM01UazVOeUF3TGpJeU16a3lPQ0F3TGpFM05ETXhOU0F3TGpJeE9ETXpNeUF3TGpFM09EUTBJREF1TWpFME1qQTNRekF1TVRneU5UWTJJREF1TWpFd01EZ3hJREF1TVRnNE1UWXhJREF1TWpBM056WTBJREF1TVRrek9UazJJREF1TWpBM056WTBWakF1TWpBM056WTBXaUlnWm1sc2JEMGlJems1T1RrNU9TSXZQaVlqZUdFN1BIQmhkR2dnYjNCaFkybDBlVDBpTUM0MUlpQmtQU0pOTUM0eE9UTTVPVFlnTUM0eU1EYzNOalJJTUM0eU5ETTNPRE5XTUM0ek5EVTFORFpETUM0eU5ETTNPRE1nTUM0ek5EZzFNVFFnTUM0eU5ESTJNRE1nTUM0ek5URXpOakVnTUM0eU5EQTFNRFFnTUM0ek5UTTBOa013TGpJek9EUXdOU0F3TGpNMU5UVTFPU0F3TGpJek5UVTFPU0F3TGpNMU5qY3pPQ0F3TGpJek1qVTVJREF1TXpVMk56TTRTREF1TVRnek1UZzVRekF1TVRnd01qSXhJREF1TXpVMk56TTRJREF1TVRjM016YzBJREF1TXpVMU5UVTVJREF1TVRjMU1qYzFJREF1TXpVek5EWkRNQzR4TnpNeE56WWdNQzR6TlRFek5qRWdNQzR4TnpFNU9UY2dNQzR6TkRnMU1UUWdNQzR4TnpFNU9UY2dNQzR6TkRVMU5EWldNQzR5TWprM05qSkRNQzR4TnpFNU9UY2dNQzR5TWpNNU1qZ2dNQzR4TnpRek1UVWdNQzR5TVRnek16TWdNQzR4TnpnME5DQXdMakl4TkRJd04wTXdMakU0TWpVMk5pQXdMakl4TURBNE1TQXdMakU0T0RFMk1TQXdMakl3TnpjMk5DQXdMakU1TXprNU5pQXdMakl3TnpjMk5GWXdMakl3TnpjMk5Gb2lJR1pwYkd3OUlpTTVPVGs1T1RraUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqYzFOak0wT0NBd0xqSXdOemMyTkVnd0xqZ3dOakV6TkVNd0xqZ3hNVGsyT1NBd0xqSXdOemMyTkNBd0xqZ3hOelUyTkNBd0xqSXhNREE0TVNBd0xqZ3lNVFk1SURBdU1qRTBNakEzUXpBdU9ESTFPREUxSURBdU1qRTRNek16SURBdU9ESTRNVE16SURBdU1qSXpPVEk0SURBdU9ESTRNVE16SURBdU1qSTVOell5VmpBdU16UTFOVFEyUXpBdU9ESTRNVE16SURBdU16UTROVEUwSURBdU9ESTJPVFUwSURBdU16VXhNell4SURBdU9ESTBPRFUxSURBdU16VXpORFpETUM0NE1qSTNOVFlnTUM0ek5UVTFOVGtnTUM0NE1UazVNRGtnTUM0ek5UWTNNemdnTUM0NE1UWTVOREVnTUM0ek5UWTNNemhJTUM0M05qY3hOVFJETUM0M05qUXlOVE1nTUM0ek5UWTJNemdnTUM0M05qRTFNRFFnTUM0ek5UVTBNVFVnTUM0M05UazBPRGdnTUM0ek5UTXpNalpETUM0M05UYzBOeklnTUM0ek5URXlNemdnTUM0M05UWXpORFlnTUM0ek5EZzBORGdnTUM0M05UWXpORGdnTUM0ek5EVTFORFpXTUM0eU1EYzNOalJhSWlCbWFXeHNQU0lqT1RrNU9UazVJaTgrSmlONFlUczhjR0YwYUNCdmNHRmphWFI1UFNJd0xqVWlJR1E5SWswd0xqYzFOak0wT0NBd0xqSXdOemMyTkVnd0xqZ3dOakV6TkVNd0xqZ3hNVGsyT1NBd0xqSXdOemMyTkNBd0xqZ3hOelUyTkNBd0xqSXhNREE0TVNBd0xqZ3lNVFk1SURBdU1qRTBNakEzUXpBdU9ESTFPREUxSURBdU1qRTRNek16SURBdU9ESTRNVE16SURBdU1qSXpPVEk0SURBdU9ESTRNVE16SURBdU1qSTVOell5VmpBdU16UTFOVFEyUXpBdU9ESTRNVE16SURBdU16UTROVEUwSURBdU9ESTJPVFUwSURBdU16VXhNell4SURBdU9ESTBPRFUxSURBdU16VXpORFpETUM0NE1qSTNOVFlnTUM0ek5UVTFOVGtnTUM0NE1UazVNRGtnTUM0ek5UWTNNemdnTUM0NE1UWTVOREVnTUM0ek5UWTNNemhJTUM0M05qY3hOVFJETUM0M05qUXlOVE1nTUM0ek5UWTJNemdnTUM0M05qRTFNRFFnTUM0ek5UVTBNVFVnTUM0M05UazBPRGdnTUM0ek5UTXpNalpETUM0M05UYzBOeklnTUM0ek5URXlNemdnTUM0M05UWXpORFlnTUM0ek5EZzBORGdnTUM0M05UWXpORGdnTUM0ek5EVTFORFpXTUM0eU1EYzNOalJhSWlCbWFXeHNQU0lqT1RrNU9UazVJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQ0TWpneE1qVWdNQzR5TWprM05qSldNQzR5Tnpnd01EVk1NQzR4TnpJd01qUWdNQzR5Tnpnd01EVldNQzR5TWprM05qSkRNQzR4TnpJd01qUWdNQzR5TWpNNU1qZ2dNQzR4TnpRek5ESWdNQzR5TVRnek16SWdNQzR4TnpnME5qY2dNQzR5TVRReU1EZERNQzR4T0RJMU9UTWdNQzR5TVRBd09ERWdNQzR4T0RneE9EZ2dNQzR5TURjM05qUWdNQzR4T1RRd01qTWdNQzR5TURjM05qUk1NQzQ0TURZMU1USWdNQzR5TURjM05qUkRNQzQ0TVRJeU9DQXdMakl3TnpnMk5TQXdMamd4TnpjM05pQXdMakl4TURJeU55QXdMamd5TVRneE9TQXdMakl4TkRNME1rTXdMamd5TlRnMk1TQXdMakl4T0RRMU5pQXdMamd5T0RFeU5pQXdMakl5TXprNU5DQXdMamd5T0RFeU5TQXdMakl5T1RjMk1sWXdMakl5T1RjMk1sb2lJR1pwYkd3OUlpTTVORGswT1RRaUx6NG1JM2hoT3p4d1lYUm9JR1E5SWswd0xqRTRNekkxSURBdU5qUXhPRFEyU0RBdU1qTXpNRE0yUXpBdU1qTTJNREExSURBdU5qUXhPRFEySURBdU1qTTRPRFV4SURBdU5qUXpNREkxSURBdU1qUXdPVFVnTUM0Mk5EVXhNalJETUM0eU5ETXdORGtnTUM0Mk5EY3lNak1nTUM0eU5EUXlNamtnTUM0Mk5UQXdOeUF3TGpJME5ESXlPU0F3TGpZMU16QXpPRll3TGpjNU1UazNOMGd3TGpFNU5EQTFOa013TGpFNU1URTJOeUF3TGpjNU1UazNOeUF3TGpFNE9ETXdOaUF3TGpjNU1UUXdPQ0F3TGpFNE5UWXpOeUF3TGpjNU1ETXdNa013TGpFNE1qazJPQ0F3TGpjNE9URTVOeUF3TGpFNE1EVTBNeUF3TGpjNE56VTNOaUF3TGpFM09EVWdNQzQzT0RVMU16UkRNQzR4TnpRek56VWdNQzQzT0RFME1EZ2dNQzR4TnpJd05UY2dNQzQzTnpVNE1UTWdNQzR4TnpJd05UY2dNQzQzTmprNU56aFdNQzQyTlRReE9UWkRNQzR4TnpFNE9UUWdNQzQyTlRJMk16SWdNQzR4TnpJd05qTWdNQzQyTlRFd05URWdNQzR4TnpJMU5USWdNQzQyTkRrMU5UZERNQzR4TnpNd05ERWdNQzQyTkRnd05qSWdNQzR4TnpNNE5DQXdMalkwTmpZNE55QXdMakUzTkRnNU5pQXdMalkwTlRVeU1rTXdMakUzTlRrMU1pQXdMalkwTkRNMU55QXdMakUzTnpJME1pQXdMalkwTXpReU55QXdMakUzT0RZNE1TQXdMalkwTWpjNU5FTXdMakU0TURFeUlEQXVOalF5TVRZZ01DNHhPREUyTnpjZ01DNDJOREU0TXpjZ01DNHhPRE15TlNBd0xqWTBNVGcwTmxZd0xqWTBNVGcwTmxvaUlHWnBiR3c5SWlNNU9UazVPVGtpTHo0bUkzaGhPenh3WVhSb0lHOXdZV05wZEhrOUlqQXVOU0lnWkQwaVRUQXVNVGd6TWpVZ01DNDJOREU0TkRaSU1DNHlNek13TXpaRE1DNHlNell3TURVZ01DNDJOREU0TkRZZ01DNHlNemc0TlRFZ01DNDJORE13TWpVZ01DNHlOREE1TlNBd0xqWTBOVEV5TkVNd0xqSTBNekEwT1NBd0xqWTBOekl5TXlBd0xqSTBOREl5T1NBd0xqWTFNREEzSURBdU1qUTBNakk1SURBdU5qVXpNRE00VmpBdU56a3hPVGMzU0RBdU1UazBNRFUyUXpBdU1Ua3hNVFkzSURBdU56a3hPVGMzSURBdU1UZzRNekEySURBdU56a3hOREE0SURBdU1UZzFOak0zSURBdU56a3dNekF5UXpBdU1UZ3lPVFk0SURBdU56ZzVNVGszSURBdU1UZ3dOVFF6SURBdU56ZzNOVGMySURBdU1UYzROU0F3TGpjNE5UVXpORU13TGpFM05ETTNOU0F3TGpjNE1UUXdPQ0F3TGpFM01qQTFOeUF3TGpjM05UZ3hNeUF3TGpFM01qQTFOeUF3TGpjMk9UazNPRll3TGpZMU5ERTVOa013TGpFM01UZzVOQ0F3TGpZMU1qWXpNaUF3TGpFM01qQTJNeUF3TGpZMU1UQTFNU0F3TGpFM01qVTFNaUF3TGpZME9UVTFOME13TGpFM016QTBNU0F3TGpZME9EQTJNaUF3TGpFM016ZzBJREF1TmpRMk5qZzNJREF1TVRjME9EazJJREF1TmpRMU5USXlRekF1TVRjMU9UVXlJREF1TmpRME16VTNJREF1TVRjM01qUXlJREF1TmpRek5ESTNJREF1TVRjNE5qZ3hJREF1TmpReU56azBRekF1TVRnd01USWdNQzQyTkRJeE5pQXdMakU0TVRZM055QXdMalkwTVRnek55QXdMakU0TXpJMUlEQXVOalF4T0RRMlZqQXVOalF4T0RRMldpSWdabWxzYkQwaUl6azVPVGs1T1NJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU56WTNNakUxSURBdU5qUXhPRFEyU0RBdU9ERTNNREF5UXpBdU9ERTVPVGNnTUM0Mk5ERTRORFlnTUM0NE1qSTRNVGNnTUM0Mk5ETXdNalVnTUM0NE1qUTVNVFlnTUM0Mk5EVXhNalJETUM0NE1qY3dNVFVnTUM0Mk5EY3lNak1nTUM0NE1qZ3hPVFFnTUM0Mk5UQXdOeUF3TGpneU9ERTVOQ0F3TGpZMU16QXpPRll3TGpjMk9EZ3lRekF1T0RJNE1UazBJREF1TnpjME5qVTFJREF1T0RJMU9EYzNJREF1Tnpnd01qVWdNQzQ0TWpFM05URWdNQzQzT0RRek56VkRNQzQ0TVRjMk1qVWdNQzQzT0RnMU1ERWdNQzQ0TVRJd015QXdMamM1TURneE9TQXdMamd3TmpFNU5TQXdMamM1TURneE9VZ3dMamMxTmpRd09GWXdMalkxTkRFNU5rTXdMamMxTmpJME9DQXdMalkxTWpZMk5DQXdMamMxTmpRd05pQXdMalkxTVRFeE5TQXdMamMxTmpnM01pQXdMalkwT1RZME4wTXdMamMxTnpNek9DQXdMalkwT0RFM09TQXdMamMxT0RFd015QXdMalkwTmpneU1pQXdMamMxT1RFeE55QXdMalkwTlRZMk0wTXdMamMyTURFek1TQXdMalkwTkRVd05DQXdMamMyTVRNM05DQXdMalkwTXpVMk5pQXdMamMyTWpjMk9DQXdMalkwTWpreFF6QXVOelkwTVRZeElEQXVOalF5TWpVeklEQXVOelkxTmpjMUlEQXVOalF4T0RrZ01DNDNOamN5TVRVZ01DNDJOREU0TkRaV01DNDJOREU0TkRaYUlpQm1hV3hzUFNJak9UazVPVGs1SWk4K0ppTjRZVHM4Y0dGMGFDQnZjR0ZqYVhSNVBTSXdMalVpSUdROUlrMHdMamMyTnpJeE5TQXdMalkwTVRnME5rZ3dMamd4TnpBd01rTXdMamd4T1RrM0lEQXVOalF4T0RRMklEQXVPREl5T0RFM0lEQXVOalF6TURJMUlEQXVPREkwT1RFMklEQXVOalExTVRJMFF6QXVPREkzTURFMUlEQXVOalEzTWpJeklEQXVPREk0TVRrMElEQXVOalV3TURjZ01DNDRNamd4T1RRZ01DNDJOVE13TXpoV01DNDNOamc0TWtNd0xqZ3lPREU1TkNBd0xqYzNORFkxTlNBd0xqZ3lOVGczTnlBd0xqYzRNREkxSURBdU9ESXhOelV4SURBdU56ZzBNemMxUXpBdU9ERTNOakkxSURBdU56ZzROVEF4SURBdU9ERXlNRE1nTUM0M09UQTRNVGtnTUM0NE1EWXhPVFVnTUM0M09UQTRNVGxJTUM0M05UWTBNRGhXTUM0Mk5UUXhPVFpETUM0M05UWXlORGdnTUM0Mk5USTJOalFnTUM0M05UWTBNRFlnTUM0Mk5URXhNVFVnTUM0M05UWTROeklnTUM0Mk5EazJORGRETUM0M05UY3pNemdnTUM0Mk5EZ3hOemtnTUM0M05UZ3hNRE1nTUM0Mk5EWTRNaklnTUM0M05Ua3hNVGNnTUM0Mk5EVTJOak5ETUM0M05qQXhNekVnTUM0Mk5EUTFNRFFnTUM0M05qRXpOelFnTUM0Mk5ETTFOallnTUM0M05qSTNOamdnTUM0Mk5ESTVNVU13TGpjMk5ERTJNU0F3TGpZME1qSTFNeUF3TGpjMk5UWTNOU0F3TGpZME1UZzVJREF1TnpZM01qRTFJREF1TmpReE9EUTJWakF1TmpReE9EUTJXaUlnWm1sc2JEMGlJems1T1RrNU9TSXZQaVlqZUdFN1BIQmhkR2dnWkQwaVRUQXVNVGN4T1RrM0lEQXVOelk1T1RrMFZqQXVOekl4TnpVeVNEQXVPREk0TURrNVZqQXVOelk1T1RrMFF6QXVPREk0TURrNUlEQXVOemMxT0RJNElEQXVPREkxTnpneElEQXVOemd4TkRJeklEQXVPREl4TmpVMklEQXVOemcxTlRRNVF6QXVPREUzTlRNZ01DNDNPRGsyTnpRZ01DNDRNVEU1TXpVZ01DNDNPVEU1T1RJZ01DNDRNRFl4SURBdU56a3hPVGt5U0RBdU1Ua3pPVGsyUXpBdU1UZzRNVFl4SURBdU56a3hPVGt5SURBdU1UZ3lOVFkySURBdU56ZzVOamMwSURBdU1UYzRORFFnTUM0M09EVTFORGxETUM0eE56UXpNVFVnTUM0M09ERTBNak1nTUM0eE56RTVPVGNnTUM0M056VTRNamdnTUM0eE56RTVPVGNnTUM0M05qazVPVFJXTUM0M05qazVPVFJhSWlCbWFXeHNQU0lqT1RRNU5EazBJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzR5T1RJME9DQXdMak0yTURNMU1sWXdMall6TWpjNU9Vd3dMalE1TnpZd015QXdMalE1TmpZNU4wd3dMakk1TWpRNElEQXVNell3TXpVeVdpSWdabWxzYkQwaUl6TXlRa1ZFUkNJdlBpWWplR0U3UEhCaGRHZ2daRDBpVFRBdU56QXlOamd4SURBdU16WXdOREUyVERBdU5EazNOVFU1SURBdU5EazJOelpNTUM0M01ESTVNalFnTUM0Mk16STJNVGhETUM0M01ESTBNemdnTUM0Mk1qY3lOekVnTUM0M01ESTJPREVnTUM0ek5UVTFOVFVnTUM0M01ESTJPREVnTUM0ek5qQTBNVFphSWlCbWFXeHNQU0lqTVRrNFFVSXpJaTgrSmlONFlUczhjR0YwYUNCa1BTSk5NQzQwT1RZNE56VWdNQzQwT1RZNE1qWk1NQzR5T1RJME9DQXdMall6TWpZNE9FZ3dMamN3TWpRNE5WWXdMall6TWpRME5Vd3dMalE1TmpnM05TQXdMalE1TmpneU5sb2lJR1pwYkd3OUluVnliQ2dqY0dGcGJuUXdYMnhwYm1WaGNsOHhOekE1WHpJMU1qVXpLU0l2UGlZamVHRTdQSEJoZEdnZ1pEMGlUVEF1TWpreU5EZ2dNQzR6TmpBek5USklNQzQzTURJM01qWk1NQzQwT1RrM09TQXdMalV4T1RjNE5VTXdMalE1T0RVMk5pQXdMalV5TURjeE1pQXdMalE1TnpBM015QXdMalV5TVRJeE15QXdMalE1TlRVek55QXdMalV5TVRJeE0wTXdMalE1TkRBd01pQXdMalV5TVRJeE15QXdMalE1TWpVd09DQXdMalV5TURjeE1pQXdMalE1TVRJNE5DQXdMalV4T1RjNE5Vd3dMakk1TWpRNElEQXVNell3TXpVeVdpSWdabWxzYkQwaUl6VXdSVFpHUmlJdlBpWWplR0U3UEM5blBpWWplR0U3UEdSbFpuTStKaU40WVRzOGJHbHVaV0Z5UjNKaFpHbGxiblFnYVdROUluQmhhVzUwTUY5c2FXNWxZWEpmTVRjd09WOHlOVEkxTXlJZ2VERTlJakF1TkRrM05qQTBJaUI1TVQwaU1DNDBPVFk0TWpZaUlIZ3lQU0l3TGpRNU56WXdOQ0lnZVRJOUlqQXVOak15T1RNeElpQm5jbUZrYVdWdWRGVnVhWFJ6UFNKMWMyVnlVM0JoWTJWUGJsVnpaU0krSmlONFlUczhjM1J2Y0NCemRHOXdMV052Ykc5eVBTSWpNREExUWtFeElpOCtKaU40WVRzOGMzUnZjQ0J2Wm1aelpYUTlJakF1TWpZaUlITjBiM0F0WTI5c2IzSTlJaU13TURVNE9VUWlMejRtSTNoaE96eHpkRzl3SUc5bVpuTmxkRDBpTUM0MU15SWdjM1J2Y0MxamIyeHZjajBpSXpBd05FWTVNQ0l2UGlZamVHRTdQSE4wYjNBZ2IyWm1jMlYwUFNJd0xqZ2lJSE4wYjNBdFkyOXNiM0k5SWlNd01ETkdOME1pTHo0bUkzaGhPenh6ZEc5d0lHOW1abk5sZEQwaU1TSWdjM1J2Y0MxamIyeHZjajBpSXpBd016QTJOeUl2UGlZamVHRTdQQzlzYVc1bFlYSkhjbUZrYVdWdWRENG1JM2hoT3p4amJHbHdVR0YwYUNCcFpEMGlZMnhwY0RCZk1UY3dPVjh5TlRJMU15SStKaU40WVRzOGNtVmpkQ0IzYVdSMGFEMGlNQzQ0T0RBd01ERWlJR2hsYVdkb2REMGlNQzQ0T0RBd01ERWlJR1pwYkd3OUluZG9hWFJsSWlCMGNtRnVjMlp2Y20wOUluUnlZVzV6YkdGMFpTZ3dMakEyTURBMU9EWWdNQzR3TmpBd05UZzJLU0l2UGlZamVHRTdQQzlqYkdsd1VHRjBhRDRtSTNoaE96d3ZaR1ZtY3o0bUkzaGhPend2YzNablBnPT07dmVydGljYWxMYWJlbFBvc2l0aW9uPWJvdHRvbTt2ZXJ0aWNhbEFsaWduPXRvcDtpci5zeW5jaHJvbml6ZWQ9MTsiIHBhcmVudD0idGVtcGxhdGUtMTY1NDIwNjUtMmFiNGVmZmEtNDBiNy00Y2QyLWJhODEtODI0N2QyOWE2ZjJkLTEwIiB2ZXJ0ZXg9IjEiIGlzVGh1bWI9IjAiPjxteEdlb21ldHJ5IHg9IjY0NSIgeT0iMjgzIiB3aWR0aD0iOTAiIGhlaWdodD0iOTAiIGFzPSJnZW9tZXRyeSIvPjwvbXhDZWxsPjxteENlbGwgaWQ9InRlbXBsYXRlLTE2NTQyMDY1LTE1IiBzdHlsZT0iaXIuYXNzZXRzPTtpci50YWdzPTtlZGdlU3R5bGU9bm9uZTtjdXJ2ZWQ9MTtodG1sPTE7aXIuc3luY2hyb25pemVkPTE7ZW5kQXJyb3c9b3BlbjtlbmRGaWxsPTA7ZW5kU2l6ZT00O3NvdXJjZVBlcmltZXRlclNwYWNpbmc9OTtzdHJva2VDb2xvcj0jQkZCRkJGO3N0cm9rZVdpZHRoPTI7IiBwYXJlbnQ9IjEiIHNvdXJjZT0idGVtcGxhdGUtMTY1NDIwNjUtYTNjNjczMWMtMzUzYy00YjUzLTgxZDEtYjM1OGJlZTYxYWRjLTMiIHRhcmdldD0idGVtcGxhdGUtMTY1NDIwNjUtMTMiIGVkZ2U9IjEiPjxteEdlb21ldHJ5IHJlbGF0aXZlPSIxIiBhcz0iZ2VvbWV0cnkiLz48L214Q2VsbD48bXhDZWxsIGlkPSJ0ZW1wbGF0ZS0xNjU0MjA2NS0yNiIgc3R5bGU9ImlyLmFzc2V0cz07aXIudGFncz07ZWRnZVN0eWxlPW5vbmU7Y3VydmVkPTE7aHRtbD0xO2lyLnN5bmNocm9uaXplZD0xO2VuZEFycm93PW9wZW47ZW5kRmlsbD0wO2VuZFNpemU9NDtzb3VyY2VQZXJpbWV0ZXJTcGFjaW5nPTk7c3Ryb2tlQ29sb3I9I0JGQkZCRjtzdHJva2VXaWR0aD0yOyIgcGFyZW50PSIxIiBzb3VyY2U9InRlbXBsYXRlLTE2NTQyMDY1LWRlMWRkMTVkLTUyNDItNGQwZS05MTNjLTA5ZDJkMzgxZGZiNy0yNSIgdGFyZ2V0PSJ0ZW1wbGF0ZS0xNjU0MjA2NS0xMyIgZWRnZT0iMSI+PG14R2VvbWV0cnkgcmVsYXRpdmU9IjEiIGFzPSJnZW9tZXRyeSIvPjwvbXhDZWxsPjwvcm9vdD48L214R3JhcGhNb2RlbD4=</schema>
  </diagram>
  <trustZones>
    <trustZone ref="private-secured" uuid="2ab4effa-40b7-4cd2-ba81-8247d29a6f2d" name="Private Secured" desc="A secured zone within a trusted private zone" trustRating="40"/>
    <trustZone ref="internet" uuid="f0ba7722-39b6-4c81-8290-a30a248bb8d9" name="Internet" desc="Untrusted Internet public zone" trustRating="1"/>
  </trustZones>
  <questions>
    <wizardQuestion ref="template_16542065" answer="true" manuallyModified="false"/>
  </questions>
  <assets>
    <asset type="" name="Credit Card Data" desc="Card holder data including the full PAN and CVV number." identifier="">
      <classification name="Cardholder data" desc="Credit card data under the remit of PCI" confidentiality="100" integrity="100" availability="30"/>
    </asset>
    <asset type="" name="Personally Identifiable Information" desc="Any information relating to an identified or identifiable natural person ('Data Subject') an identifiable person is one who can be identified, directly or indirectly, in particular by reference to an identification number or to one or more factors specific to his physical, physiological, mental, economic, cultural or social identity." identifier="">
      <classification name="Personally Identifiable Information" desc="Any information relating to an identified or identifiable natural person ('Data Subject');&#10;                an identifiable person is one who can be identified, directly or indirectly,&#10;                in particular by reference to an identification number or to one or more factors specific to his&#10;                physical, physiological, mental, economic, cultural or social identity." confidentiality="80" integrity="80" availability="20"/>
    </asset>
  </assets>
  <settings/>
  <dataflows>
    <dataflow name="Web Service -&gt; Microsoft Azure Service Bus Messaging" ref="0722174e-1f76-431d-ac71-a2983dfd3d67" source="b4ab3358-66e5-4e92-b5a6-f2d97821a49a" target="aa19a301-3655-4958-8fa9-12f6c8f76746">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Web Service -&gt; Other data store" ref="66701cdb-2954-4f9d-9b1b-67ababf82baf" source="b4ab3358-66e5-4e92-b5a6-f2d97821a49a" target="7e40a8c4-d66d-4fda-97b0-cf32743724f1">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Web Service -&gt; Other database" ref="c472fe14-a953-4b8f-bbd7-e7a713bf6911" source="b4ab3358-66e5-4e92-b5a6-f2d97821a49a" target="972a00a0-b3ef-4a79-b494-8088f1d45f57">
      <assets/>
      <tags/>
    </dataflow>
  </dataflows>
  <customFields/>
  <components>
    <component uuid="6901d605-405e-40d3-a16c-fed2bf7325e9" diagramComponentId="a3c6731c-353c-4b53-81d1-b358bee61adc" ref="a076c1e1-f412-473c-85af-2bc811522b81" name="Web Client" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="web-client">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-798, CWE-603" name="Client side code stores secret keys, sensitive business logic or other proprietary information" state="0" impact="100" issueId="" issueLink="">
          <desc>When client side code is fully controlled by the user, a malicious user may be able to read
                        the code or reverse engineer it if it is compiled in any form. If the client side code includes
                        secret keys, sensitive business logic (like client authentication) or proprietary information,
                        all of this is directly exposed to the user, allowing them to get the sensitive information or
                        study the business logic with the aim of bypassing it.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Some examples of this vulnerability are:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Performing an authentication on the client side without server side validation.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Making privileged calls from the client based solely on client side conditions (i.e. a
                        cash check on the client side to place an order on an e-commerce platform).&lt;/li&gt;
                        &lt;li&gt;&amp;nbsp;Hard-coding keys and secrets on the client side to make client-to-client
                        calls without a proxy.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.013">
              <output/>
            </source>
            <references>
              <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="https://cwe.mitre.org/data/definitions/602.html"/>
              <reference name="CWE-603: Use of client-side Authentication" url="https://cwe.mitre.org/data/definitions/603.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-05-18T23:34:53.614">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the
                        system development life cycle. Such testing/evaluation is necessary because it confirms that the
                        required security controls are implemented correctly, operating as intended, enforcing the
                        desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.794">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.013">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can
                        be leaked to users with access to the code. This access can be incidentally granted by
                        publishing the source code on a package-form or an online, public repository.

                        The unauthorized access to any of those secrets could lead to a compromise of sensitive data or
                        a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.013">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-477" name="Use of Obsolete Function" state="0" impact="75" issueId="" issueLink="">
          <desc>The code uses deprecated or obsolete functions, which suggests that the code has not been
                        actively reviewed or maintained.
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.013">
              <output/>
            </source>
            <references>
              <reference name="CWE-477: Use of Obsolete Function" url="https://cwe.mitre.org/data/definitions/477.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.014">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in
                        transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end
                        encryption between the client and server, terminating within a secure environment on the
                        server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of
                        (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively,
                        asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested
                        implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established
                            encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only
                            strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use
                            unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review
                            configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.883">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="INS-CLIENT" name="Ensure the application does not use unsupported, insecure, or deprecated client-side technologies" issueId="" issueLink="" platform="" cost="0" risk="63" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure the application does not use unsupported, insecure, or deprecated client-side
                        technologies such as: NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or
                        client-side Java applets.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Test the presence of any client side applet such as Flash, ActiveX and
                            Silverlight.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.884">
              <output/>
            </source>
            <references>
              <reference name="Testing Information Gathering" url="https://www.owasp.org/index.php/Testing_Information_Gathering"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CS-CLIENT-SECRET" name="Implement sensitive logic and data validation on the server-side" issueId="" issueLink="" platform="" cost="1" risk="88" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data and functionalities on the client-side must be considered tainted and
                        subject to manipulation by a malicious actor, regardless of the controls in place (e.g.
                        encryption or obfuscation of client-side code or content). &lt;/p&gt; This includes application
                        logic decisions, such as access controls, and data considered sensitive or secret, such as
                        encryption keys. While controls may be duplicated on the client-side to improve the user
                        experience, it is important to have these enforced on the server-side.&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Business logic, in particular access controls, must be implemented on the server-side.&lt;/li&gt;
                        &lt;li&gt;Secret data should be stored on the server-side, and only what is explicitly required
                        should be duplicated on the client-side.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;All data provided from the client-side (even from binary clients) should be
                        considered tainted, and security decisions should not be made solely on this data. For example,
                        an insecure implementation could include a compiled application (e.g. Flash!) performing
                        authentication on the client-side against a stored password. The decompilation of the binary (in
                        this case flv file) or the interception and modification of controls between the client and
                        server could expose the password or allow unauthorized access to the authenticated application
                        content.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Identify where critical decisions are made on the application. Key areas include:&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;authentication&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;input validation&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;access to resources&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;state bypasses&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Ensure those decisions are made or validated on the server side, particularly
                            where client-side controls are implemented.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify that sensitive data passed to the client side is appropriate, and ensure no
                            inappropriate data is stored or hard-coded into client-side components, for example&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Personally Identifiable Information.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Financial data, in particular cardholder data (as defined by the &lt;span
                            class="caps"&gt;PCI&lt;/span&gt; Council).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Application secrets - such as symmetric encryption keys or passwords.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.883">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-CLIENT-SECRET" name="Review code, configuration, and online repositories for secrets and sensitive information systemically" issueId="" issueLink="" platform="" cost="0" risk="88" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secret or sensitive information should not be exposed in source-code or client-side
                        software.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Code and online repositories must not contain secrets or
                        sensitive information.&lt;/li&gt;&lt;li&gt;Configuration files on the client- and server-side
                        must not contain hard-coded credentials or other sensitive data.&lt;/li&gt;&lt;li&gt;Online
                        repositories, services, and other associated restricted content must have appropriate access
                        controls in place.&lt;/li&gt;&lt;li&gt;Where sensitive information must be stored on the server
                        side, it should be in memory for transient data, or encrypted if persistent. &amp;nbsp;Depending
                        on the use case, this encryption may be asymmetric or public key, or symmetric using a shared
                        secret. Note however that reversible encryption on the client-side and in-memory storage are
                        still susceptible to client-side attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Use automated tools to regularly search for keywords or regular
                            expression patterns within the code, configuration and other files exposed on the client and
                            server-side, and any remote repositories.&lt;/li&gt;&lt;li&gt;The scanning process must be
                            triggered before the code is published (in particular for public/open source code) as once
                            published it is likely to be archived (and any disclosed secrets would be exposed and/or
                            have to be changed)&lt;/li&gt;&lt;li&gt;Review criteria and requirements for any temporary
                            or persistent storage of sensitive or secret data on the client-side, and the protections in
                            place.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.883">
              <output/>
            </source>
            <references>
              <reference name="Amazon git-secrets" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Microsoft Exchange 2016 Sensitive Information Patterns" url="https://technet.microsoft.com/en-us/library/jj150541(v=exchg.160).aspx"/>
              <reference name="Seekret" url="https://github.com/apuigsech/seekret"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Use periodically a static code analysis tool to analyze the code and detect potentially
                        malicious code, such as time functions, unsafe file operations and networks connections. With
                        the scanning of static code, we ensure the integrity of the application.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Verify that a code analysis tool is in use and it is configured to detect potentially
                            malicious code, such as time functions, unsafe file operations and network connections.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.757">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications
                        between RA (Registration Authority) and CSP (Credential Service Provider), should be
                        authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS
                        connection, using approved cryptographic algorithms.&lt;/p&gt;
                        &lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
                        &lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity
                        that issues security tokens or electronic credentials to subscribers. A CSP forms part of an
                        authentication system, most typically identified as a separate entity in a Federated
                        authentication system. A CSP may be an independent third party, or may issue credentials for its
                        own use. Credential Service Provider is typically also the Identity Provider (IDP). An example
                        of a CSP would be an online site whose primary purpose may be, for example, internet banking -
                        but whose users may be subsequently authenticated to other sites, applications or services
                        without further action on their part.&lt;/p&gt;
                        &lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the
                        identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be
                        independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
                        &lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying
                        the claimant's possession and control of one or two authenticators, using an authentication
                        protocol.&lt;/p&gt;
                        &lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's
                        authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically
                        to process a transaction or grant access to information or a system.&lt;/p&gt;
                        &lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and
                        identity proofing.&lt;/p&gt;
                        &lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more
                        authentication protocols.&lt;/p&gt;
                        &lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator
                        from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example
                            with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.884">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-05-18T23:34:53.412">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-295-CLIENT" name="Validate the certificate presented by the server" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Certificates presented by the server must be valid, provable, and cryptographically
                        secure in order to derive the benefits of TLS encrypted communications.&amp;nbsp; Invalid
                        certificates expose the application and its users to spoofing attacks such as Man In The Middle
                        (MITM) where data may be intercepted or redirected to a malicious site, and undermine confidence
                        in the site.&lt;/p&gt;&lt;p&gt;Validate the certificate presented by the server is signed by a
                        trusted Certificate Authority.&lt;/p&gt;&lt;p&gt;Ensure the certificate chain of trust is
                        legitimate and secure.&lt;/p&gt;&lt;p&gt;Verify cryptographically secure ciphers are in use
                        throughout the chain, in particular strong hashing algorithms for certificate signatures.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-11 Trusted Path" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/71-08_02_SC-11"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
          </references>
          <standards>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify the client is conducting appropriate checks and receives a
                            positive response regarding the validity and quality of the site certificate.&lt;/li&gt;&lt;li&gt;Use
                            TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL
                            Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan
                            tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool:
                            https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate
                            all security issues and warnings relating to the server certificate, and those in the trust
                            chain.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.883">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-327" name="Validate the TLS implementation in use" issueId="" issueLink="" platform="" cost="0" risk="81" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There are a number of established open- and closed- source TLS implementations in
                        use, which have undergone extensive review and testing by the developers, as well as
                        third-parties in the development, security, and cryptography space. Typically, these widely used
                        implementations have a lower risk of exploitation compared with privately developed - or less
                        known - implementations (although vulnerabilities such as Heartbleed highlight this is not
                        universally true) due to this additional scrutiny scrutiny.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify
                        the TLS and other cryptographic libraries, implementations, and technologies in use.&lt;/li&gt;&lt;li&gt;Verify
                        the veracity of the implementations, and review third party validations together with security
                        advisories or best-practices relating to them.&lt;/li&gt;&lt;li&gt;Some well-known TLS libraries
                        are NSS from Mozilla, and OpenSSL.&lt;/li&gt;&lt;li&gt;Where an unknown or unproven
                        implementation is in use, consider use of an established option.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Compatibility" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm the TLS layer in use is a secure, stable, release of a
                            publicly published implementation that has been subject to expert analysis and review.&lt;ul&gt;&lt;li&gt;If
                            not, assurance of the security of the implementation should be sought, or the risk
                            quantified.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that a client connecting to the
                            server will only be able to negotiate cryptographically strong, secure ciphers.&lt;/li&gt;&lt;li&gt;Confirm
                            that a client can not downgrade to a weaker cipher after initial negotiation.&lt;/li&gt;&lt;li&gt;Use
                            TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL
                            Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan
                            tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool:
                            https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate
                            all security issues and warnings relating to the TLS/SSL ciphers, protocols, and security
                            mechanisms.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.884">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-63" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment,
                                allowing developers to monitor their code regularly in order to avoid security
                                vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CSD-CLIENT-SECRET" name="Attackers gain unauthorised access to data or services by accessing a client side secret" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Secrets stored in any client side components, such as a mobile application, thick
                                client application or in JavaScript used by a browser, can be accessed by
                                users/attackers who have access to this client.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Attackers could then gain access to the data or services that are protected by this
                                secret, if no other credentials are required.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-798, CWE-603">
                  <countermeasures>
                    <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="DEP-CLIENT-TECH" name="Attackers gain unauthorised access to the application by the use of deprecated client-side technologies" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                As programming languages evolve, functions occasionally become obsolete due to:
                                &lt;/div&gt;
                                &lt;ul&gt;
                                &lt;li&gt;Advances in the language.&lt;/li&gt;
                                &lt;li&gt;Improved understanding of how operations should be performed effectively and
                                securely.&lt;/li&gt;
                                &lt;li&gt;Changes in the conventions that govern certain operations. &lt;/li&gt;
                                &lt;/ul&gt;
                                &lt;br /&gt;Functions that are removed are usually replaced by newer counterparts that
                                perform the same task in some different and hopefully improved way.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-477">
                  <countermeasures>
                    <countermeasure ref="INS-CLIENT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="INS-CLIENT" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components
                                (typically client and server). The attacker places himself in the communication channel
                                between the two components. Whenever one component attempts to communicate with the
                                other (data flow, authentication challenges, etc.), the data first goes to the attacker,
                                who has the opportunity to observe or alter it, and it is then passed to the other
                                component as if it were never intercepted. This interposition is transparent leaving the
                                two compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="CWE-327" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                <countermeasure ref="CWE-327" mitigation="25"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="74e341fb-b28c-4e24-93c9-18ed9657d476" diagramComponentId="c1b9b41d-78a6-4c57-93c2-3efa8c56ed57" ref="b4ab3358-66e5-4e92-b5a6-f2d97821a49a" name="Web Service" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="web-service">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software allocates a reusable resource or group of resources on behalf of an
                        actor without imposing any restrictions on how many resources can be allocated, in violation of
                        the intended security policy.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication
                        channel that can be sniffed by unauthorized actors.

                        Many communication channels can be "sniffed" by attackers during data transmission. For example,
                        network traffic can often be sniffed by any attacker who has access to a network interface. This
                        significantly lowers the difficulty of exploitation by attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100" issueId="" issueLink="">
          <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.357">
              <output/>
            </source>
            <references>
              <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-502" name="Deserialization of Untrusted Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The application deserializes untrusted data without sufficiently verifying that the resulting
                        data will be valid.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.241">
              <output/>
            </source>
            <references>
              <reference name="CWE-502: Deserialization of Untrusted Data" url="https://cwe.mitre.org/data/definitions/502.html"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-15" name="External Control of System or Configuration Setting" state="0" impact="100" issueId="" issueLink="">
          <desc>One or more system settings or configuration elements can be externally controlled by a
                        user.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.884">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an
                        unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.780">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-460" name="Improper Cleanup on Thrown Exception" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not clean up its state or incorrectly cleans up its state when an exception
                        is thrown, leading to unexpected state or control flow.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-116" name="Improper Encoding or Escaping of Output" state="0" impact="100" issueId="" issueLink="">
          <desc>The software prepares a structured message for communication with another component, but
                        encoding or escaping of the data is either missing or done incorrectly. As a result, the
                        intended structure of the message is not preserved.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.883">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-841" name="Improper Enforcement of Behavioral Workflow" state="0" impact="100" issueId="" issueLink="">
          <desc>The software supports a session in which more than one behavior
                        must be performed by an actor, but it does not properly ensure that the actor
                        performs the behaviors in the required sequence.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.241">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-173" name="Improper Handling of Alternative Encoding" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not properly handle cases in which the input uses an alternative
                        encoding scheme that is valid for the control sphere to which the input is being sent.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.357">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-235" name="Improper Handling of Extra Parameters" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not handle or incorrectly handles when the number of parameters, fields, or
                        arguments with the same name exceeds the expected amount.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.357">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-22" name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software uses external input to construct a pathname that is intended to identify
                        a file or directory that is located underneath a restricted parent directory, but the software
                        does not properly neutralize special elements within the pathname that can cause the pathname to
                        resolve to a location that is outside of the restricted directory.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Many
                        file operations are intended to take place within a restricted directory. By using special
                        elements such as ".." and "/" separators, attackers can escape outside of the restricted
                        location to access files or directories that are elsewhere on the system. One of the most common
                        special elements is the "../" sequence, which in most modern operating systems is interpreted as
                        the parent directory of the current location. This is referred to as relative path traversal.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Path
                        traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be
                        useful in accessing unexpected files. This is referred to as absolute path traversal. In many
                        programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to
                        truncate a generated filename to widen the scope of attack. For example, the software may add
                        ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may
                        effectively remove this restriction.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.357">
              <output/>
            </source>
            <references>
              <reference name="CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" url="https://cwe.mitre.org/data/definitions/22.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-95" name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software receives input from an upstream component, but it does not neutralize or
                        incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g.
                        "eval").</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.884">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-78" name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software constructs all or part of an OS command using externally-influenced input from an
                        upstream component, but it does not neutralize or incorrectly neutralizes special elements that
                        could modify the intended OS command when it is sent to a downstream component. This could allow
                        attackers to execute unexpected, dangerous commands directly on the operating system. This
                        weakness can lead to a vulnerability in environments in which the attacker does not have direct
                        access to the operating system, such as in web applications.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Alternately, if the weakness occurs in a privileged program, it could allow the attacker to
                        specify commands that normally would not be accessible, or to call alternate commands with
                        privileges that the attacker does not have. The problem is exacerbated if the compromised
                        process does not follow the principle of least privilege, because the attacker-controlled
                        commands may run with special system privileges that increases the amount of damage.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        There are at least two subtypes of OS command injection:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The application intends to execute a single, fixed program that is under its own
                        control. It intends to use externally-supplied inputs as arguments to that program. For example,
                        the program might use system(&amp;quot;nslookup [HOSTNAME]&amp;quot;) to run nslookup and allow
                        the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup
                        from executing. However, if the program does not remove command separators from the HOSTNAME
                        argument, attackers could place the separators into the arguments, which allows them to execute
                        their own program after nslookup has finished executing.The application accepts an input that it
                        uses to fully select which program to run, as well as which commands to use.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The application simply redirects this entire command to the operating system. For
                        example, the program might use &amp;quot;exec([COMMAND])&amp;quot; to execute the [COMMAND] that
                        was supplied by the user. If the COMMAND is under attacker control, then the attacker can
                        execute arbitrary commands or programs. If the command is being executed using functions like
                        exec() and CreateProcess(), the attacker might not be able to combine multiple commands together
                        in the same line. From a weakness standpoint, these variants represent distinct programmer
                        errors.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;In the first variant, the programmer clearly intends input from untrusted parties
                        will be part of the arguments in the command to be executed. In the second variant, the
                        programmer does not intend for the command to be accessible to any untrusted party, but the
                        programmer probably has not accounted for alternate ways in which malicious attackers can
                        provide input.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.884">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-117" name="Improper Output Neutralization for Logs" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes
                        output that is written to logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.781">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-915" name="Improperly Controlled Modification of Dynamically-Determined Object Attributes" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software receives input from an upstream component that specifies multiple
                        attributes, properties, or fields that are to be initialized or updated in an object, but it
                        does not properly control which attributes can be modified.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;If
                        the object contains attributes that were only intended for internal use, then their unexpected
                        modification could lead to a vulnerability. This weakness is sometimes known by the
                        language-specific mechanisms that make it possible, such as mass assignment, auto-binding, or
                        object injection.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.357">
              <output/>
            </source>
            <references>
              <reference name="CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes" url="https://cwe.mitre.org/data/definitions/915.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100" issueId="" issueLink="">
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to
                        an unintended actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.357">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-548" name="Information Exposure Through Directory Listing" state="0" impact="100" issueId="" issueLink="">
          <desc>A directory listing is inappropriately exposed, yielding
                        potentially sensitive information to attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.357">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-532" name="Information Exposure Through Log Files" state="0" impact="100" issueId="" issueLink="">
          <desc>Information written to log files can be of a sensitive nature
                        and give valuable guidance to an attacker or expose sensitive user
                        information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.781">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.357">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Improper Input Validation" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits
                        important details about the event when logging it. When critical security events are not logged
                        properly, such as in the case of a failed login attempt, this can make malicious behavior more
                        difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.780">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the
                        system development life cycle. Such testing/evaluation is necessary because it confirms that the
                        required security controls are implemented correctly, operating as intended, enforcing the
                        desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.524">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-272" name="Least Privilege Violation" state="0" impact="100" issueId="" issueLink="">
          <desc>The elevated privilege level required to perform operations such as chroot() should be dropped
                        immediately after the operation is performed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.240">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-779" name="Logging of Excessive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software logs too much information, making log files hard
                        to process and possibly hindering recovery efforts or forensic analysis after an
                        attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.780">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-350" name="Reliance on Reverse DNS Resolution for a Security-Critical Action" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs reverse DNS resolution on an IP address to obtain the hostname and make
                        a security decision, but it does not properly ensure that the IP address is truly associated
                        with the hostname.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.607">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the
                        contents of this URL, but it does not sufficiently ensure that the request is being sent to the
                        expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.884">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DOS-APP" name="The application exposes high resource consuming functions without any protection (Layer 7 attacks)" state="0" impact="100" issueId="" issueLink="">
          <desc>A highly resource consuming function could be exploited by an attacker to bring the service
                        down.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.422">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-203" name="The product exposes security-relevant information about the state of the product" state="0" impact="100" issueId="" issueLink="">
          <desc>The product behaves differently or sends different responses under different circumstances in
                        a way that is observable to an unauthorized actor, which exposes security-relevant information
                        about the state of the product, such as whether a particular operation was successful or not.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.498">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-541" name="The service returns back-end source code without interpreting it" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;If an include file source is accessible, the file may contain usernames and
                        passwords, as well as sensitive information pertaining to the application and system. The source
                        code can also be sent back to a client because of an error condition or an improperly configured
                        handler.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.239">
              <output/>
            </source>
            <references>
              <reference name="CWE-541: Information Exposure Through Include Source Code" url="https://cwe.mitre.org/data/definitions/541.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L3" name="There is no network protection to protect against Layer 3" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no measures in place to mitigate (D)DoS at a network level.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.422">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L4" name="There is no network protection to protect against Layer 4" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.422">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-TLS" name="There is no protection against Layer 6 attacks (SSL/TLS)" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.422">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-650" name="Trusting HTTP Permission Methods on the Server Side" state="0" impact="100" issueId="" issueLink="">
          <desc>The server contains a protection mechanism that assumes that
                        any URI that is accessed using HTTP GET will not cause a state change to the
                        associated resource. This might allow attackers to bypass intended access
                        restrictions and conduct resource modification and deletion attacks, since some
                        applications allow GET to modify state.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.357">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-601" name="URL Redirection to Untrusted Site ('Open Redirect')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;A web application accepts a user-controlled input specifying a link to an external
                        site, and uses this link in a Redirect. This functionality aids phishing attacks.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.355">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This is a generic weakness which includes several different situations that are all
                        connected to unexpected environmental conditions and could be related to:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared
                        buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two
                        different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:30.356">
              <output/>
            </source>
            <references>
              <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="dyn-exec" name="Assure that the application avoids the use of eval() or other dynamic code execution features" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Assure that the application avoids the use of eval() or other dynamic code execution features.
                        Where there is no alternative, any user input being included must be sanitized or sandboxed
                        before being executed.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Look for scripts that do not properly validate user inputs in the page
                            parameter. A remote user can supply a specially crafted URL to pass arbitrary code to an
                            eval() statement, which results in code execution.&lt;/p&gt;&lt;p&gt;Note 1: This attack
                            will execute the code with the same permissions, potentially including operation system
                            commands.&lt;/p&gt;&lt;p&gt;Note 2: Eval injection is prevalent in handler/dispatch
                            procedures that want to invoke a large number of functions, or set a large number of
                            variables.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.680">
              <output/>
            </source>
            <references>
              <reference name="Direct Dynamic Code Evaluation (Eval Injection)" url="https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection"/>
              <reference name="[SCRIPT_ENGINE_INJECTION] Potential code injection when using Script Engine" url="https://find-sec-bugs.github.io/bugs.htm"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="deny-default-enf" name="Assure that the principle of deny by default exists for new users/roles" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Deny by default is the principle whereby if a request is not specifically allowed, it
                        is denied. There are many ways this rule will manifest in application code. Some examples of
                        this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny by default exists whereby
                        new users/roles start with minimal or no permissions and users/roles do not receive access to
                        new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw
                        an error or exception while processing access control requests. In these cases access control
                        should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user
                        registers for a new account, that account should have minimal or no access by default until that
                        access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all
                        users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C7]: Enforce Access Controls" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"/>
          </references>
          <standards>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In
                            every portion of the application in which a user can create information inside the database
                            (e.g., making a payment, adding a contact, or sending a message), or can receive information
                            (statement of account, order details, etc.), or delete information (drop users, messages,
                            etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try
                            to access such functions as another user in order to verify if it is possible to access a
                            function that should not be permitted by the user's role/privilege (but might be permitted
                            as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.046">
              <output/>
            </source>
            <references>
              <reference name="Testing for Bypassing Authorization Schema (OTG-AUTHZ-002)" url="https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)"/>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-639" name="Avoid using direct references to files" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential
                        risk, regardless of the source or transport method. Many flaws in applications result from
                        unsafe handling of filenames or path data, for example directory traversal and arbitrary file
                        disclosure. Use of filenames or other direct references to objects such as files on the
                        server-side increases the risk of compromise of the system or unauthorized access to other
                        files, content, or functionality.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Avoid using direct references to
                        files or validate file name.&lt;/li&gt;&lt;li&gt;For example, instead of using:&amp;nbsp;www.example.com/open.jsp?file=details.txt&amp;nbsp;use:&amp;nbsp;www.example.com/open.jsp?file=[GUID]&amp;nbsp;and
                        then use a lookup table on the server to associate the [GUID] value with file details.txt.&lt;/li&gt;&lt;li&gt;Files
                        should be stored outside the web-root to prevent an attacker browsing directly to them.&lt;/li&gt;&lt;li&gt;Do
                        not use obscurity to prevent access; for example do not rely on renaming a file to include a
                        random string to prevent direct download or disclosure.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If direct
                        references are used to access files from within the web-root deviating from recommended security
                        practice, the following must be implemented:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String input
                        validation must be applied.&amp;nbsp; Identify and filter for directory traversal
                        meta-characters such as "../" or "..\" or "/", together with encoded variations and derivations.&lt;/li&gt;&lt;li&gt;Use
                        of a strict white-list of files that may be downloaded.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;When a parameter that represents a file or a file path is found in
                            the application:&lt;/li&gt;&lt;li&gt;For each of them try to change this parameter to gain
                            access to unexpected files.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For example:
                            www.example.com/open.jsp?file=details.txt&amp;nbsp;&lt;br&gt;Shouldn't be implemented that
                            way and if so, it should not be possible to access locations outside of this domain (i.e.
                            file=/etc/passwd or file= &lt;a href="http://www.google.com"&gt;http://www.google.com&lt;/a&gt;,
                            etc.).&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.978">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="post-spectre-web-dev-c2" name="Choose the correct set of headers according to resource type" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The post-spectre-web-dev-c1 countermeasure establishes a default set of headers but
                        depending on the resource type the headers may vary. Identify the type of resource the web
                        service is serving and apply the following recommendations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static
                        subresources: contain the same data no matter who requests them&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Origin:
                        *&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: cross-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Timing-Allow-Origin:
                        *&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers from post-spectre-web-dev-c1 ("Vary" can be
                        omitted)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Dynamic subresources: contain data
                        personalized to a given user&lt;ul&gt;&lt;li&gt;Application-internal resources: private API
                        endpoints, avatar images, uploaded data, etc.&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers from post-spectre-web-dev-c1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Personalized
                        resources intended for cross-origin use: public API endpoints, etc&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Credentials:
                        true&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Origin: &lt;/strong&gt;&lt;a
                        href="https://trusted.example/"&gt;&lt;strong&gt;https://trusted.example&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Methods:
                        POST&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Headers: ...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-...:
                        ...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers
                        from post-spectre-web-dev-c1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Personalized resources
                        that are intended for cross-origin no-cors embedding, but which don't intend to be directly
                        legible in that context: avatar images, authenticated media, etc&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        cross-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers from post-spectre-web-dev-c1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents&lt;ul&gt;&lt;li&gt;Fully-isolated
                        documents: documents that require users to be signed-in&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Cross-Origin-Opener-Policy: same-origin&lt;/li&gt;&lt;li&gt;Vary:
                        Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options:
                        nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options: SAMEORIGIN&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents
                        Expecting to Open Cross-Origin Windows:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Opener-Policy:
                        same-origin-allow-popups&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest,
                        Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options:
                        SAMEORIGIN&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents Expecting
                        Cross-Origin Openers: e.g. federated sign-in forms and payment providers&lt;ul&gt;&lt;li&gt;Documents
                        that only wish to be opened in cross-origin popups:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Opener-Policy:
                        unsafe-none&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest, Sec-Fetch-Mode,
                        Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options:
                        SAMEORIGIN&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents that only wish to
                        be framed in cross-origin contexts&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Cross-Origin-Opener-Policy: same-origin&lt;/li&gt;&lt;li&gt;Vary:
                        Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options:
                        nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options: ALLOWALL&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents
                        that support both popup and framing scenarios:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Opener-Policy:
                        unsafe-none&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest, Sec-Fetch-Mode,
                        Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options:
                        ALLOWALL&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Meltdown and Spectre attacks" url="https://meltdownattack.com/"/>
            <reference name="Post-Spectre Web Development" url="https://www.w3.org/TR/post-spectre-webdev/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Make requests to the updated web server and ensure that the headers are set
                            properly.&amp;nbsp;&lt;/p&gt;&lt;p&gt;The Post-Spectre Web Development guide specifies some
                            external endpoints that implement these headers that can be used as examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static
                            subresources&lt;ul&gt;&lt;li&gt;&lt;a
                            href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"&gt;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"&gt;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"&gt;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://ssl.google-analytics.com/ga.js"&gt;https://ssl.google-analytics.com/ga.js&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Dynamic
                            subresources&lt;ul&gt;&lt;li&gt;&lt;a
                            href="https://api.twitter.com/1.1/jot/client_event.json"&gt;https://api.twitter.com/1.1/jot/client_event.json&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://play.google.com/log?format=json&amp;amp;hasfast=true"&gt;https://play.google.com/log?format=json&amp;amp;hasfast=true&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://securepubads.g.doubleclick.net/pcs/view"&gt;https://securepubads.g.doubleclick.net/pcs/view&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://c.amazon-adsystem.com/e/dtb/bid"&gt;https://c.amazon-adsystem.com/e/dtb/bid&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Just
                            open the browser's developer tools to check the responses to see the headers.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.469">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-SRV-XML" name="Define and enforce secure validation through an XSD or DSD schema on XML input data" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The XML standards provides for formal validation criteria to be specified in a schema
                        (XSD or DTD). Defining a schema with security in mind, and enforcing it on input data, will
                        mitigate many attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define an XSD or DTD schema with secure
                        input validation criteria.&lt;/li&gt;&lt;li&gt;Validate all XML input data against the schema
                        before processing it.&lt;/li&gt;&lt;li&gt;The acceptance of unvalidated or non compliant data
                        could have unexpected impact on the behavior of the application, and may facilitate attacks such
                        as SQL injection.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For every endpoint which consumes XML data.&lt;/li&gt;
                            &lt;li&gt;Get the permitted structure of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Construct non-compliant samples and send them to the endpoints.&lt;/li&gt;
                            &lt;li&gt;Check they are not accepted.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.979">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC" name="Detect and notify the usage of automated tools or unusual behavior" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Don't allow users to manipulate a system or guess its behavior based on input or
                        output timing and detect the usage of automated tools or unusual behavior, such as actions not
                        performed in reasonable "human time" or other abnormal time patterns.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;When
                        the usage of automated tools is detected, the application should respond by denying access and
                        notifying the security group.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use several automated tools to perform normal user actions.&lt;/li&gt;
                            &lt;li&gt;Check that the applications detects these actions, denies the users access and
                            notifies the security group.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.045">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="protection-against-data-mining" name="Detect and protect against data mining techniques" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data mining is an analytical process that attempts to find correlations or patterns
                        in large data sets for the purpose of data or knowledge discovery. Data storage objects include
                        database records and database fields. Sensitive information can be extracted from data mining
                        operations. When information is personally identifiable information, it may lead to
                        unanticipated revelations about individuals and give rise to privacy risks. Prior to performing
                        data mining activities, organizations determine whether such activities are authorized.
                        Organizations may be subject to applicable laws, executive orders, directives, regulations, or
                        policies that address data mining requirements. Organizational personnel consult with the senior
                        agency official for privacy and legal counsel regarding such requirements.&lt;/p&gt;&lt;p&gt;Data
                        mining prevention and detection techniques include limiting the number and frequency of database
                        queries to increase the work factor needed to determine the contents of databases, limiting
                        types of responses provided to database queries, applying differential privacy techniques or
                        homomorphic encryption, and notifying personnel when atypical database queries or accesses
                        occur. Data mining protection focuses on protecting information from data mining while such
                        information resides in organizational data stores. In contrast, AU-13 focuses on monitoring for
                        organizational information that may have been mined or otherwise obtained from data stores and
                        is available as open-source information residing on external sites, such as social networking or
                        social media websites.&lt;/p&gt;&lt;p&gt;EO 13587 requires the establishment of an insider
                        threat program for deterring, detecting, and mitigating insider threats, including the
                        safeguarding of sensitive information from exploitation, compromise, or other unauthorized
                        disclosure. Data mining protection requires organizations to identify appropriate techniques to
                        prevent and detect unnecessary or unauthorized data mining. Data mining can be used by an
                        insider to collect organizational information for the purpose of exfiltration.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-53" url="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf"/>
          </references>
          <standards>
            <standard ref="AC-23" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that your system supports policies that protect against data mining such
                            as filtering, throttling and anomaly detection.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.047">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOG-RETENTION" name="Develop a log retention policy" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Develop a log retention policy to identify storage requirements for device logs and implement
                        procedures to ensure that the audit logs are available for a security response in the case of
                        incident or investigation.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The audit logs from the last 30 days must be collected in easily accessible storage media. Older
                        logs should be archived in a protected storage and should be accessible in the future as
                        required for incidents or investigations.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
          </references>
          <standards>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application contains logs from the last 30 days.&lt;/li&gt;
                            &lt;li&gt;Check that logs older than 30 days are in an external storage.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.574">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DIRECTORY_LISTING" name="Disable web server directory listing and ensure file metadata (e.g. .git) and backup files are not present within web roots" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Indexable directories allow an attacker to easily discover the existence of content
                        on your web server that should remain private.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Disable
                        directory listings in the web - or application - server configuration by default.&lt;/li&gt;&lt;li&gt;Restrict
                        access to unnecessary directories and files.&lt;/li&gt;&lt;li&gt;Create an index (default) file
                        for each directory.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Apache - auto index" url="https://httpd.apache.org/docs/trunk/mod/mod_autoindex.html"/>
            <reference name="Apache - directory listing" url="https://wiki.apache.org/httpd/DirectoryListings"/>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Directory_Indexing" url="https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Directory_Indexing"/>
            <reference name="OWASP Insecure Indexing" url="https://www.owasp.org/index.php/File_System#Insecure_Indexing"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that the directory listing is disabled on the web server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.979">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-11.5" name="Do not share system information in HTTP headers and responses" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should not share detailed version information of system components or
                        other information that would assist attackers in the HTTP header or HTTP responses.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the HTTP responses and headers do not reveal sensitive data about the system.
                            Using a command line web client like telnet or netcat could help on this task.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.979">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-FILE-DATA" name="Do not use untrusted client-side data in server-side file operations" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application may be required to perform server-side file operations based on
                        client-side actions. This can expose the application to attack through remote or local
                        file-inclusion, or remote code execution attacks if unsafe data is used in file inclusion, class
                        loader, or reflection capabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Tainted, untrusted, client-side
                        data must not be used directly in server-side file load operations.&lt;/li&gt;&lt;li&gt;Where
                        server-side operations are dependent on client-side input, this should be mapped to pre-defined
                        operations on the server-side rather than using tainted client-side input directly.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify sources of data entering the application.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Classify
                            them into trusted and untrusted.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;if they
                            are untrusted, make sure there is a validation and sanitization mechanism before sending
                            this data into another system (Database, Command, etc.).&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.680">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-532" name="Do not write secrets to the log files" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        The logs may be accessed by attackers and in order to protect sensitive data, no such sensitive
                        data should be included in the logs
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Proactive Controls [C9, C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the logs.&lt;/li&gt;
                            &lt;li&gt;Check that no sensitive data is included in the logs.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in
                        transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end
                        encryption between the client and server, terminating within a secure environment on the
                        server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of
                        (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively,
                        asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested
                        implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established
                            encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only
                            strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use
                            unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review
                            configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.046">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure enforcement of the principle of least privilege in functions, data files, URLs,
                        controllers, services, and other resources. This implies protection against spoofing and
                        elevation of privilege.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;In every portion of the application where a user can create information inside
                            the database (e.g., making a payment, adding a contact, or sending a message), or can
                            receive information (statement of account, order details, etc.), or delete information (drop
                            users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try
                            to access such functions as another user in order to verify if it is possible to access a
                            function that should not be permitted by the user's role/privilege (but might be permitted
                            as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.046">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is
                        not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data
                        is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They
                            may be used in applications for:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
                            &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
                            &lt;li&gt;Caching/Persistence&lt;/li&gt;
                            &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
                            &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.046">
              <output/>
            </source>
            <references>
              <reference name="Deserialization Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-HTTP-METHODS" name="Ensure that the application accepts only a defined set of required HTTP request methods" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP offers a number of methods that can be used to perform actions on the web
                        server. Many of theses methods are designed to aid developers in deploying and testing HTTP
                        applications. These HTTP methods can be used for nefarious purposes if the web server is
                        misconfigured. For example, Cross Site Tracing (XST), a form of cross site scripting using the
                        server's HTTP TRACE method.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While GET
                        and POST are by far the most common methods that are used to access information provided by a
                        web server, the Hypertext Transfer Protocol (HTTP) allows several other (and somewhat less
                        known) methods. RFC 2616 (which describes HTTP version 1.1 which is the standard today) defines
                        the following eight methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HEAD&lt;/li&gt;&lt;li&gt;GET&lt;/li&gt;&lt;li&gt;POST&lt;/li&gt;&lt;li&gt;PUT&lt;/li&gt;&lt;li&gt;DELETE&lt;/li&gt;&lt;li&gt;TRACE&lt;/li&gt;&lt;li&gt;OPTIONS&lt;/li&gt;&lt;li&gt;CONNECT&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Some
                        of these methods can potentially pose a security risk for a web application, as they allow an
                        attacker to modify the files stored on the web server and, in some scenarios, steal the
                        credentials of legitimate users. More specifically, the methods that should be disabled are the
                        following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;PUT: &lt;/strong&gt;This method allows a
                        client to upload new files onto the web server. An attacker may exploit this by uploading
                        malicious files (e.g.: an asp file that executes commands by invoking cmd.exe), or by simply
                        using the victim's server as a file repository.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;DELETE:&lt;/strong&gt;
                        This method allows a client to delete a file on the web server. An attacker may exploit it as a
                        very simple and direct way to deface a web site or to mount a DoS attack.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CONNECT:
                        &lt;/strong&gt;This method could allow a client to use the web server as a proxy.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;TRACE:
                        &lt;/strong&gt;This method simply echoes back to the client whatever string has been sent to the
                        server, and is used mainly for debugging purposes. This method, originally assumed harmless, can
                        be used to mount an attack known as Cross Site Tracing, which was discovered by Jeremiah
                        Grossman (see links at the bottom of the page).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If an application
                        needs one or more of these methods, such as REST Web Services (which may require PUT or DELETE),
                        it is important to check their usage is properly limited to trusted users and safe conditions.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Ensure
                        the application accepts only the HTTP requests GET and POST. The HTTP requests TRACE, PUT and
                        DELETE are blocked.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP test HTTP methods" url="https://github.com/ManhNho/OWASP-Testing-Guide-v5/blob/master/document/4%20Web%20Application%20Security%20Testing/4.3%20Configuration%20and%20Deployment%20Management%20Testing/4.3.6%20Test%20HTTP%20Methods%20(OTG-CONFIG-006).md"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application only accepts the request with the following HTTP
                            methods: GET and POST.&lt;/li&gt;
                            &lt;li&gt;Check that the application rejects and blocks the following requests with the HTTP
                            methods: TRACE, PUT and DELETE.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.979">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SAME-ENCODING-STYLE" name="Ensure that the client-side and the server-side are using the same encoding style" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the client-side and the server-side are using the same encoding style.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the server-side and the client-side are using the same encoding style.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.679">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SEC-DEPLOY" name="Ensure the build pipeline contains a build step to automatically build and verify the secure deployment of the application" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the build pipeline contains a build step to automatically build and verify the
                        secure deployment of the application, particularly if the application infrastructure is software
                        defined, such as cloud environment build scripts.</desc>
          <implementations/>
          <references>
            <reference name="Secure development and deployment guidance" url="https://www.ncsc.gov.uk/collection/developers-collection?curPage=/collection/developers-collection/principles/secure-the-build-and-deployment-pipeline"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Understanding the deployed configuration of the server hosting the web application is almost
                            as important as the application security testing itself. After all, an application chain is
                            only as strong as its weakest link. Application platforms are wide and varied, but some key
                            platform configuration errors can compromise the application in the same way an unsecured
                            application can compromise the server.
                            &lt;br /&gt;
                            &lt;br /&gt;In order to evaluate the readiness of the application platform, testing for
                            configuration management includes the following sections:
                            &lt;br /&gt;
                            &lt;br /&gt;4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
                            &lt;br /&gt;4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
                            &lt;br /&gt;4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
                            &lt;br /&gt;4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information
                            (OTG-CONFIG-004)
                            &lt;br /&gt;4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
                            &lt;br /&gt;4.3.6 Test HTTP Methods (OTG-CONFIG-006)
                            &lt;br /&gt;4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
                            &lt;br /&gt;4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
                            &lt;br /&gt;4.3.9 Test File Permission (OTG-CONFIG-009)
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.979">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="configuration-integrity" name="Ensure the integrity of all security-relevant configurations to detect tampering" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Web server and application server configurations play a key role in the security of a web
                        application. These servers are responsible for serving content and invoking applications that
                        generate content. In addition, many application servers provide a number of services that web
                        applications can use, including data storage, directory services, mail, messaging, and more.
                        Failure to manage the proper configuration of your servers can lead to a wide variety of
                        security problems.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Authorized administrators need to ensure the integrity of all security-relevant configurations
                        to detect tampering.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="14.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Understanding the deployed configuration of the server hosting the web application is almost
                            as important as the application security testing itself. After all, an application chain is
                            only as strong as its weakest link. Application platforms are wide and varied, but some key
                            platform configuration errors can compromise the application in the same way an unsecured
                            application can compromise the server.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            In order to evaluate the readiness of the application platform, testing for configuration
                            management includes the following sections:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.6 Test HTTP Methods (OTG-CONFIG-006)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.9 Test File Permission (OTG-CONFIG-009)&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.681">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOGS-INTEGRITY" name="Ensure the integrity of the logging system" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure Log integrity for the application generated logs, such as storing logs on write-once
                        media, forwarding a copy of the logs to a centralized SIEM or generating message digests for
                        each log file.</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-04 Audit Storage Capacity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/173-08_02_AU-04"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(c)(1)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SA-18" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the logs integrity is controlled by making daily backups or leveraging external
                            tools for log monitoring.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ENV-USE" name="Ensure there are no environmental security weaknesses" issueId="" issueLink="" platform="" cost="1" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Application security can be undermined by misconfiguration of the underlying server or
                        development environment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that vendor and best-practice guidelines have been applied, in particular affecting areas
                        such as:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographic strength of elements such as session tokens, GUIDs, and protection of
                        data in transit and at rest.&lt;/li&gt;
                        &lt;li&gt;Removal of debugging and compiler options and artifacts used during development.&lt;/li&gt;
                        &lt;li&gt;Configuration of error trapping and use of generic error messages and pages (e.g.
                        stack traces should not be returned to users).&lt;/li&gt;
                        &lt;li&gt;Appropriate access controls over software components, variables (e.g. EJBs and
                        methods).&lt;/li&gt;
                        &lt;li&gt;Insecure or inappropriate storage of data in configuration files or other data
                        structures (e.g. passwords in configuration files).&lt;/li&gt;
                        &lt;li&gt;Use of compilation/build features or security enhancements provided by the IDE&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Vulnerable Components" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/vulnerable-components.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A06:2021-Vulnerable and Outdated Components" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A6:2017-Security Misconfiguration" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A9:2017-Using Components with Known Vulnerabilities" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;figure class="table"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;Identify
                            the areas of the application that could potentially be affected by the following:&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared
                            buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of
                            two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Verify
                            they are correctly implemented.&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.980">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from un-trusted data" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection,
                        is directly written to a log file, then this data could contain newline or other meta-characters
                        that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should
                        first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="harden-http-headers" name="Harden HTTP Headers" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP headers are a fundamental part of website security.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The
                        Referrer-Policy HTTP header controls how much referrer information (sent via the Referrer
                        header) should be included with requests. This security header was designed to prevent
                        cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;The Origin request header indicates where a
                        fetch originates from. It doesn't include any path information, but only the server name. It is
                        sent with CORS requests, as well as with POST requests. It is similar to the Referer header,
                        but, unlike this header, it doesn't disclose the whole path.&lt;/li&gt;&lt;li&gt;The
                        Content-Disposition response header tells the browser to download a file rather than displaying
                        it in the browser window.&lt;/li&gt;&lt;li&gt;If a response states that it contains HTML content
                        but does not specify a character set, then the browser may analyze the HTML and attempt to
                        determine which character set it appears to be using. Even if the majority of the HTML actually
                        employs a standard character set such as UTF-8, the presence of non-standard characters anywhere
                        in the response may cause the browser to interpret the content using a different character set.
                        This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which
                        non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use
                        a suitable "Referrer-Policy" header, such as "no-referrer" or "same-origin".&lt;/li&gt;&lt;li&gt;Don't
                        use the Origin header for authentication or access control decisions, as the Origin header can
                        easily be changed by an attacker.&lt;/li&gt;&lt;li&gt;Use the Content-Disposition response
                        header for file downloading in all API responses with the following directives:
                        Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the
                        content type).&lt;/li&gt;&lt;li&gt;Use a content-type header specifying a safe character set
                        (e.g., UTF-8, ISO 8859-1) in every HTTP response.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTML does not specify charset" url="https://portswigger.net/kb/issues/00800200_html-does-not-specify-charset"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="Origin Header" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"/>
            <reference name="Referrer-Policy" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"/>
            <reference name="Reflected File Download" url="https://www.owasp.org/index.php/Reflected_File_Download"/>
            <reference name="Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)" url="https://tools.ietf.org/html/rfc6266"/>
          </references>
          <standards>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;An easy way to access your HTTP security headers, as part of your response
                            headers, is to fire up Chrome DevTools. To run this click into the "Network" panel and press
                            Ctrl + R (Cmd + R) to refresh the page. Click into your domain's request and you will see a
                            section for response headers.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Check if "Referrer-Policy" header
                            exists in HTTP responses and has the right directives to prevent cross-domain Referrer
                            leakage.&lt;/li&gt;&lt;li&gt;From a penetration testing perspective you should look for
                            insecure configurations; for example, when the server returns back the Origin header in the
                            Access-Control-Allow-Origin without any additional checks AND returns
                            Access-Control-Allow-Credentials: true, which can lead to access of sensitive data. Note
                            that this configuration is very insecure, and is not acceptable in general terms, except in
                            the case of a public API that is intended to be accessible by everyone.&lt;/li&gt;&lt;li&gt;Try
                            Reflected File Download input payloads to launch commands on the client machine. Reflected
                            File Download is an attack combining URL path segments (now deprecated) with pages that
                            reflect user inputs in the response. Generally web services vulnerable to JSONP Injection
                            are leveraged to deliver malware to end users.&lt;/li&gt;&lt;li&gt;Character encoding has a
                            popular misuse; namely, being used for encoding malicious injection strings in a way that
                            obfuscates them. Try different character encoding schemes (like UTF-7) to bypass input
                            validation filters, or take advantage of particular ways in which browsers render encoded
                            text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.980">
              <output/>
            </source>
            <references>
              <reference name="A new security header: Referrer Policy" url="https://scotthelme.co.uk/a-new-security-header-referrer-policy/"/>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
              <reference name="Reflected File Download - A New Web Attack Vector" url="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/reflected-file-download-a-new-web-attack-vector/"/>
              <reference name="Test Cross Origin Resource Sharing (OTG-CLIENT-007)" url="https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-dns-domains" name="Identify the DNS domains periodically to update the information about them" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should have a protection from sub-domain takeovers if the application
                        relies upon DNS entries or DNS sub-domains, such as expired domain names, out of date DNS
                        pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs,
                        serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar.
                        Protections can include ensuring that DNS names used by applications are regularly checked for
                        expiry or change.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify the forward and reverse DNS lookups.&lt;/li&gt;&lt;li&gt;Verify
                            the connection to the DNS was authenticated successfully by username/password or certificate
                            and that they are active.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-L7" name="Identity which functions of the application are resource consuming and protect and monitor them (optionally set up a WAF)" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DoS attacks against the application layer also aim to use up the memory and process
                        time that the application requires to function properly while minimizing the resources employed
                        by the attacker by using vulnerabilities or flaws in the application. The main characteristics
                        of this type of attack are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The requirement for less bandwidth
                        compared to other methods such as SYN Flood attacks, and as such, the infrastructure necessary
                        to launch a successful attack is usually minor.&lt;/li&gt;&lt;li&gt;Greater difficulty in
                        distinguishing between malicious and legitimate traffic. Many of the most common protection
                        measures or systems focus on the network or transport layer, and as such, they would not be
                        efficient when the target of the attack is the application layer. It is even difficult for the
                        defense systems that monitor this layer to distinguish between malicious and legitimate traffic.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As
                        we have indicated, this type of attack is very specific, and generally require fewer resources
                        from the attacker to achieve devastating effects in the systems attacked. However, this type of
                        attack requires more time to analyze the targeted system in order to discover vulnerabilities or
                        bottlenecks that can be exploited during the attack.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Analyze
                        weaknesses or bottlenecks in the design, the implementation, or even the functioning of the
                        application to identify "heavy" requests that are resource consuming. For example, if the web
                        application has a search engine, an attack could be to carry out searches that require a high
                        level of resources to generate a bottleneck and eventually disable the service.&lt;/li&gt;&lt;li&gt;Implement
                        a challenge to the device making the network request in order to test whether or not it is a
                        bot. This is done through a test much like the CAPTCHA test commonly found when creating an
                        account online. By giving a requirement such as a JavaScript computational challenge, many
                        attacks can be mitigated.&lt;/li&gt;&lt;li&gt;Use of a web application firewall, managing and
                        filtering traffic through an IP reputation database, and through on-the-fly network analysis by
                        engineers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Layer 7 DDoS Attacks" url="https://owasp.org/www-pdf-archive/Layer_7_DDOS.pdf"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 7 DDoS PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space. One well-known
                            application attack is Slowloris, which targets web servers. Verify that the implemented
                            Layer 7 protection mechanisms (Javascript challenges, CAPTCHA tests, WAF) are effective.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.377">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="implement-monitoring-unusual-activities" name="Implement and monitor Business Logic Limits for actions and transactions" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement in the application the appropriate limits for specific business actions and
                        transactions, to enforce the correct usage of the application for each user ensuring they cannot
                        bypass important steps in the flow. This business logic limits provide us protection against
                        likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/p&gt;&lt;p&gt;All
                        business actions or transactions that exceed the established limits, should be recorded in the
                        logs and monitored as unusual events.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A04:2021-Insecure Design" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Verify the application has appropriate limits for specific business actions or
                            transactions which are correctly enforced on a per user basis.&lt;/li&gt;
                            &lt;li&gt;Verify the application has business logic limits or validation to protect against
                            likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/li&gt;
                            &lt;li&gt;Verify the application monitors for unusual events or activity from a business
                            logic perspective.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.046">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests
                        to enumerate or attempt to exploit flaws in an application, for example, sending common
                        passwords to multiple target accounts within an application. By profiling normal traffic
                        volumes, and applying rate limiting, the application can be built to actively mitigate such
                        attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection
                        rate-limiting based on the source IP address can be used to restrict attacks against the
                        authentication or registration systems. Multiple failures (or attempts) from a single IP should
                        result in temporarily blocking or dropping traffic from the source. Note however that some
                        corporate and ISP environments may place multiple valid and discrete clients behind the same IP
                        address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other
                        IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class
                        of attack, Indicators of Compromise should be monitored (for example a higher rate of login
                        failures than usual), and appropriate actions taken. For example, when the application detects
                        active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could
                        be used to block attacks sharing a signature from pattern matching or deep packet inspection
                        (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application
                        could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is
                        detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement
                        the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application
                        detects a set number of failure login attempts, the account shall be locked for a certain time
                        period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When
                        the application detects an account is locked more times than usual, this account should be
                        disabled (no more than 100 failure attempts). A disabled account should only be restored by an
                        administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the
                        application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting
                        authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a
                        white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If
                        the user successfully authenticates, the previous failed attempts shall be reset for that user
                        from the same IP address.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;THC-Hydra&lt;/a&gt;,
                            &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;OWASP ZAP&lt;/a&gt;
                            or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite &lt;/a&gt;to simulate brute
                            force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform
                            a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the
                            function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a
                            log alerting function for an unusual amount of failed login attempts, even if they
                            originated from different sources.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.047">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="error-handling-centralized" name="Implement centralized mechanisms to manage errors and exceptions" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create a functionality or a mechanism to manage exceptions in a centralized manner
                        and avoid including duplicated try/catch blocks in the code.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;A
                        well-planned error/exception handling strategy is important for three reasons:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Good
                        error handling does not give an attacker any information which can be leveraged for attacking
                        the application.&lt;/li&gt;&lt;li&gt;A proper centralized error strategy is easier to maintain
                        and reduces the chances of any uncaught errors "Bubbling up" to the front-end of an application.&lt;/li&gt;&lt;li&gt;Information
                        leakages can lead to social engineering exploits.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Building
                        an infrastructure for consistent error reporting proves more difficult than error handling. All
                        exceptions should be caught as events with the severity of the error. These events will be
                        logged.&lt;/p&gt;&lt;p&gt;The centralized system should reorganize all events and throw the
                        corresponding error or system message in a consistent manner, depending on the severity of the
                        error.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Code Review: Error Handling" url="https://www.owasp.org/index.php/Codereview-Error-Handling"/>
            <reference name="OWASP Error Handling" url="https://www.owasp.org/index.php/Error_Handling"/>
            <reference name="OWASP Proactive Controls [C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify that a centralized system is in place to catch errors and
                            exceptions, and these errors are shown in a correct manner.&lt;/li&gt;&lt;li&gt;Verify all
                            errors thrown from the centralized system are displayed in a correct fashion.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.047">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations.
                        However, proper logging practices can provide the crucial forensics needed to investigate after
                        a breach, and perhaps more importantly, to detect security issues as they happen. Most
                        developers are already familiar with logging for debugging and diagnostic purposes, so it should
                        be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Log
                        all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Logs
                        should be written using a format suited to be consumed by a log management solution, and include
                        enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as
                        sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;li&gt;Configure
                        a monitoring system to continuously monitor the infrastructure, network, and the API
                        functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system
                        to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure
                        custom dashboards and alerts, making it possible to detect and respond to suspicious activity as
                        early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to
                            confirm that the organization's logging policies, processes, and procedures are being
                            followed properly both at the infrastructure level and the system level throughout the
                            organization.&amp;nbsp; Log management audits can identify deficiencies in policies,
                            procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most
                            common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors
                            or others performing testing and validation can review the logging configuration and
                            settings, as well as the system logs, infrastructure logs, and archived logs, for a
                            representative sampling of systems and infrastructure servers to ensure that they comply
                            with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under
                            the direction of auditors) or others performing testing and validation can create security
                            events on a representative sampling of systems through vulnerability scanning, penetration
                            testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the
                            log data those activities should generate exist and are handled according to the
                            organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.575">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-TLS" name="Inspect the TLS/SSL traffic on a capable device before sending the connection down on your infrastructure" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;TLS adds another vector for computational attacks since a client can easily (with
                        little computational effort) force the server to expend relatively large computational work. If
                        a web application is delivered over TLS, an attacker can also choose to attack the TLS
                        negotiation process. TLS is computationally expensive so an attacker can reduce a server's
                        availability by sending unintelligible data. In a variation of this attack, an attacker
                        completes the TLS handshake but perpetually renegotiates the encryption method. Or an attacker
                        can attempt to exhaust server resources by opening and closing many TLS sessions.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;To
                        mitigate consider options like offloading the SSL from the origin infrastructure and inspecting
                        the application traffic for signs of attack traffic or violations of policy at an application
                        delivery platform (ADP).&lt;br&gt;A good ADP will also ensure that your traffic is then
                        re-encrypted and forwarded back to the origin infrastructure with unencrypted content only ever
                        residing in protected memory on a secure bastion host.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 6 DDoS attack PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the
                            implemented availability protection is effective. One useful tool to execute this kind of
                            test is &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;. It covers all the required
                            tests for TLS &amp;amp; SSL assessments and is regularly updated.&lt;/p&gt;&lt;p&gt;There
                            are many testing options that can be used with &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;
                            and the options you should use will depend greatly on your testing requirements. Below are
                            some useful examples, for an overview of &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;
                            command-line options. run ./testssl.sh with no other options.&lt;/p&gt;&lt;p&gt;Test
                            Everything on a Single Host and Output to console&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S
                            -P -c -H -U TARGET-HOST&lt;/p&gt;&lt;p&gt;Test Everything on a Single Host and Output to
                            HTML&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST | aha &amp;gt;
                            OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Test all hosts on a Subnet and Output to HTML&lt;br&gt;./testssl.sh
                            -e -E -f -p -y -Y -S -P -c -H -U 192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Same
                            as above, but only enumerate each servers supported ciphers:&lt;br&gt;./testssl.sh -E
                            192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.377">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" name="Limit the number of accounts with privileges allowing modification and/or deletion of audit logs files" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Limit the number of accounts with privileges to modify and/or delete audit logs
                        files.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the number of accounts with privileges to modify the logs is limited and
                            controlled.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-VAL-LOG" name="Log and reject all data validation failures" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Data validation failures, together with access control violations, are symptomatic of malicious
                        activity where an attacker is attempting to subvert the protections in place. It is therefore
                        likely that unexpected input detected by the application relates to an attack. Rejecting and
                        logging such activity, and ideally terminating the session, increases the likelihood of
                        detecting and inhibiting structured attacks against the application.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Log all validation failures when rejecting requests.&lt;/li&gt;
                        &lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against
                        the logs and subsequent access to them.&lt;/li&gt;
                        &lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;
                        &lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker
                        enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.5.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may
                            indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm
                            security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged
                            relating to the event must be carefully sanitized and encoded; by definition the data could
                            be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify
                            actual logged data.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CDS-USER-TRACK" name="Log details of user actions within the system" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To maintain proper accountability, logs should be maintained with sufficient
                        information to track user actions within the system. These logs should be forensically sound,
                        non-repudiable, and contain comprehensive details about activity. While the exact data for an
                        event may vary, the following should be captured at a minimum:&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Timestamps against a proven external source (e.g. an NTP server).&lt;/li&gt;
                        &lt;li&gt;Origin (with this field we mark if the logs are provided by a trusted or untrusted
                        source).&lt;/li&gt;
                        &lt;li&gt;Event, status, and/or&amp;nbsp;error codes (with sensitive data masked as appropriate
                        or not introduced in logs).&lt;/li&gt;
                        &lt;li&gt;Service, command, application or function name and details.&lt;/li&gt;
                        &lt;li&gt;User or system account associated with an event.&lt;/li&gt;
                        &lt;li&gt;Devices used (e.g. source and destination IPs, terminal session ID, web browser,
                        etc.).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        Source:&amp;nbsp;&amp;nbsp;
                        &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley audit logging" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA AU-10 Non-Repudiation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/179-08_02_AU-10"/>
            <reference name="OSA CA-07 Continuous Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/166-08_02_CA-07"/>
            <reference name="OSA IR-05 Incident Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/139-08_02_IR-05"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(a)(1)(A)" supportedStandardRef="hipaa-required"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="IR-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-4" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Perform several different actions on the service.&lt;/li&gt;&lt;li&gt;Inspect
                            the log files to see if the format and content complies with the company policy.&lt;/li&gt;&lt;li&gt;If
                            there is no company policy, check that at least the following data is included: timestamp
                            event, status, error codes, service/command/application username or system account
                            associated with an eventDevice used (e.g. source and destination IPs, terminal session ID,
                            web browser, etc).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Source:&amp;nbsp;&lt;a
                            href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;
                            https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.575">
              <output/>
            </source>
            <references>
              <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-LOGGING" name="Logging the data access and the modification of personal data" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Make sure that every access and modification of personal data is logged (The log should be
                        precise enough to know who changed what and when). This includes data access from the
                        application as well as data access from privileged accounts, such as database admins. In
                        practice, this means logging both on application, middleware and operating system (OS) level.</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Test accessing and modifying user personal data as legitimate users, employees,
                            administrators and malicious actors.&lt;/li&gt;
                            &lt;li&gt;Verify appropriate logging of all the above activities are successful and
                            sufficiently detailed.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOG-TLS-FAILURES" name="Log the backend TLS connection failures" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Implement functionality to record backend TLS connection failures and include these in the
                        logs.</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that backend TLS connection failures are recorded in the logs.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-541" name="Prevent unauthorised access to source code through the service" issueId="" issueLink="" platform="" cost="0" risk="52" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to the source-code for the application can aid an attacker in determining bugs
                        or vulnerabilities in the code or logic. For closed-source projects it is therefore important to
                        control and restrict access to the source. Application services may unexpectedly expose code,
                        for example a service providing files to a user could be manipulated to access source code if
                        implemented insecurely.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure source
                        code is not inadvertently disclosed through misconfiguration or vulnerabilities in the service.&lt;/li&gt;&lt;li&gt;Check
                        configuration files are not downloadable directly from the service, and cannot be read and
                        viewed through the service itself.&lt;/li&gt;&lt;li&gt;Ensure backups, operating systems, and
                        version control artifacts do not expose code.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check the source code of the application is never returned in cases
                            in which it cannot be interpreted.&lt;/li&gt;&lt;li&gt;Web Servers have a concept called
                            handlers which manage the source code interpretation before sending it to the client. If
                            those handlers are not properly configured, the plain source code could be sent as a
                            default.&lt;/li&gt;&lt;li&gt;Check the handlers are correctly configured to support the
                            types of languages your server uses.&lt;/li&gt;&lt;li&gt;Check also that the source code is
                            not leaked in case of failure.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.046">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious
                        web site, email, blog, instant message, or program causes a user's web browser to perform an
                        unwanted action on a trusted site when the user is authenticated. A CSRF attack works because
                        browser requests automatically include any credentials associated with the site, such as the
                        user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the
                        site cannot distinguish between the forged or legitimate request sent by the victim. A
                        token/identifier that is not accessible to the attacker is needed to mitigate this and would not
                        be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring
                        re-authentication of sensitive functions is an effective way to protect your application against
                        a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies
                        from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF
                        nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key'
                        (which is valid only once) that must be validated in any sensitive form submission. For maximum
                        security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple
                        or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on
                        the server-side is problematic, an alternative defense is to use the double-submit cookie
                        technique. This technique is easy to implement and is stateless. In this technique, a random
                        value is sent in both a cookie and as a request parameter, with the server verifying if the
                        cookie value and request value match. When a user visits (even before authenticating to prevent
                        login CSRF), the site should generate a (cryptographically strong) pseudo random value and set
                        it as a cookie on the user's machine separate from the session identifier. The site then
                        requires that every transaction request include this pseudo-random value as a hidden form value
                        (or other request parameter/header). If both of them match on the server-side, the server
                        accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN
                        request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely
                        on examining an HTTP request header value. Firstly, determining the origin the request is coming
                        from (source origin). This can be achieved via Origin and/or referer headers. Secondly,
                        determining the origin the request is going to (target origin). On the server-side verify if
                        both of these match. If they do, we accept the request as legitimate (meaning it's the same
                        origin request) and if they don't, discard the request (meaning that the request originated from
                        a cross-domain). Reliability of these headers comes from the fact they cannot be altered
                        programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list
                        (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-30" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.-
                            Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser
                            request and server response, and verify a unique strong token is being sent and verified
                            with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way
                            resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.-
                            Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change
                            or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt
                            to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a
                            request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser
                            requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions
                            such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.980">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-ICMP-Flooding" name="Rate-limit ICMP traffic and prevent the attack from impacting bandwidth and firewall performance" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Common attacks are ICMP Flooding, Ping flood and Ping of death - Layer 3
                        infrastructure DDoS attack methods that use ICMP messages to overload the targeted network's
                        bandwidth. These kind of attacks can be prevented from taking place by rate-limiting ICMP
                        traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;For
                        example, iptables can be used on Linux systems as follows:&lt;/p&gt;&lt;p&gt;To protect against
                        ping flood attacks the 'limit' module of iptables can be used:&lt;/p&gt;&lt;p&gt;-A INPUT -p
                        icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT -A INPUT -p
                        icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        INPUT -p icmp --icmp-type echo-request -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;Note that the above
                        lines will protect only against ping request attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;To protect
                        against generic ICMP flood attacks we can remove the constraint '--icmp-type echo-request'. This
                        is only good enough to protect against PC to PC attacks. If flood is done using multiple sources
                        or using hardware then this configuration may not be enough. The configuration will also cause
                        denial of service to other users when under attack even from single source, as we are limiting
                        based on protocol without considering the source address of the packet.&lt;/p&gt;&lt;p&gt;Iptables
                        can also be used to prevent abuse of network resources by rate limiting them:&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 4/second --limit-burst 12 -j ACCEPT&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 1/minute --limit-burst 1 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        OUTPUT -p tcp -m tcp --dport 80 -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;In the above
                        example we are limiting outgoing connections to port 80. This is useful when we can't completely
                        block outgoing connections but we do not want it to become channel from where people start
                        browsing net or downloading. The limit module can also be used in rate limiting incoming traffic
                        for performance reasons.&lt;/p&gt;&lt;p&gt;Disabling a ping flood is most easily accomplished by
                        disabling the ICMP functionality of the targeted router, computer or other device. A network
                        administrator can access the administrative interface of the device and disable its ability to
                        send and receive any requests using the ICMP, effectively eliminating both the processing of the
                        request and the Echo Reply. The consequence of this is that all network activities that involve
                        ICMP are disabled, making the device unresponsive to ping requests, traceroute requests, and
                        other network activities.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Ping (ICMP) Flood DDoS Attack" url="https://www.cloudflare.com/learning/ddos/ping-icmp-flood-ddos-attack/"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="Rate limiting using iptables" url="https://www.sbarjatiya.com/notes_wiki/index.php/Rate_limiting_using_iptables"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the
                            implemented availability protection is effective. One useful tool to execute this kind of
                            test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The
                            interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP
                            echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the
                            ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For
                            example, you can execute a Smurf attack (denial-of-service attack that floods a target
                            system via spoofed broadcast ping messages) using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3
                            -1 - flood -a VICTIM_IP BROADCAST_ADDRESS&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.378">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-18.8" name="Reject requests containing unexpected or missing content type headers" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Reject requests containing unexpected or missing content type headers with HTTP response status
                        &amp;quot;406 Unacceptable&amp;quot; or &amp;quot;415 Unsupported Media Type&amp;quot;.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Validate request content-type" url="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Validate_request_content_types"/>
            <reference name="Spring docs: CSRF" url="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html"/>
          </references>
          <standards>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that HTTP requests with non-valid Content-type are rejected.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.980">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-SESS-REAUTH" name="Require additional authentication for sensitive operations / high value transactions" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Having gained access to an account, for example through session hijacking or
                        cross-site scripting, an attack may compromise data and functionality accessible to the victim.
                        This may include elevating privileges or accessing sensitive data and functionality, such as
                        changing passwords, creating accounts, or transferring funds.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;These
                        critical functions and sensitive data should be further protected from attack using a risk-based
                        authentication model requiring re-authentication via multi-factor authentication, or use of a
                        token to sign transactions or operations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement
                        re-authentication on key functions (such as requiring the old password before setting a new
                        one).&lt;/li&gt;&lt;li&gt;Use secondary authentication such as a transaction PIN to allow
                        financial transfers.&lt;/li&gt;&lt;li&gt;Critical administrative functionality should require
                        multi-factor authentication (such as a hard or soft token).&lt;/li&gt;&lt;li&gt;Consider use of
                        signing technologies or tokens that enable the server-side to verify the authenticity of a
                        request and mitigate Man in the Middle (MiTM) or Man in the Browser (MiTB) attacks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
          </references>
          <standards>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical functionalities of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the risk appetite for those functionalities.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Validate that re-authentication is required for those functions if deemed
                            necessary.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.980">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC-006" name="Restrict actions of users that follow unusual patterns" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict actions that users can do outside of the approved/required business process
                        flow.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This is important because without
                        this safeguard in place attackers may be able to bypass or circumvent work-flows and checks
                        allowing them to prematurely enter or skip required sections of the application potentially
                        allowing actions/transactions to be completed without successfully completing the entire
                        business process, leaving the system with incomplete back-end tracking information.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing for the circumvention of work flows" url="https://www.owasp.org/index.php/Testing_for_the_Circumvention_of_Work_Flows_(OTG-BUSLOGIC-006)"/>
          </references>
          <standards>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application only processes business logic flows in sequential step
                            order and in realistic human time.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.046">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Use periodically a static code analysis tool to analyze the code and detect potentially
                        malicious code, such as time functions, unsafe file operations and networks connections. With
                        the scanning of static code, we ensure the integrity of the application.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Verify that a code analysis tool is in use and it is configured to detect potentially
                            malicious code, such as time functions, unsafe file operations and network connections.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.499">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="post-spectre-web-dev-c1" name="Set security headers with default values explicitly" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Spectre breaks the isolation between different applications. It allows an attacker to
                        trick error-free programs, which follow best practices, into leaking their secrets. In fact, the
                        safety checks of said best practices actually increase the attack surface and may make
                        applications more susceptible to Spectre.&lt;/p&gt;&lt;p&gt;Mitigations can be applied to reduce
                        potential risk on web services:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Decide when not to
                        respond to requests&lt;/strong&gt; by examining incoming headers, paying special attention to
                        the Origin header on the one hand, and various Sec-Fetch- prefixed headers on the other.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Restrict
                        attackers' ability to load your data as a subresource&lt;/strong&gt; by setting a cross-origin
                        resource policy (CORP) of same-origin (opening up to same-site or cross-origin only when
                        necessary).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Restrict attackers' ability to frame your data as
                        a document&lt;/strong&gt; by opt-ing into framing protections via X-Frame-Options: SAMEORIGIN or
                        CSP's more granular frame-ancestors directive (frame-ancestors 'self' https://trusted.embedder,
                        for example).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Restrict attackers' ability to obtain a handle
                        to your window&lt;/strong&gt; by setting a cross-origin opener policy (COOP). In the best case,
                        you can default to a restrictive same-origin value, opening up to same-origin-allow-popups or
                        unsafe-none only if necessary.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prevent MIME-type confusion
                        attacks&lt;/strong&gt; and increase the robustness of passive defenses like cross-origin read
                        blocking (CORB) / opaque response blocking (ORB) by setting correct Content-Type headers, and
                        globally asserting X-Content-Type-Options: nosniff.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Meltdown and Spectre attacks" url="https://meltdownattack.com/"/>
            <reference name="Post-Spectre Web Development" url="https://www.w3.org/TR/post-spectre-webdev/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Make requests to the updated web server and ensure that the headers are set
                            properly.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.470">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-662" name="Use a synchronised time source" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to correlate logs and data from different internal and external systems, and
                        to preserve forensic quality of the logs, it is important a unified and trusted synchronized
                        time source is used throughout the environment.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Servers
                        should synchronize to an internal or external NTP server&lt;/li&gt;&lt;li&gt;The centralized
                        source should in turn use (or be) a trusted central time source.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This
                        control is critical in identifying application events (including attacks) through logging, and
                        in conducting post-event analysis, and in particular to track the entire user (or attacker)
                        journey through the system should it be compromised.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;It
                        is good practice to use the concept of Indicators of Compromise (IoC) which should be leveraged
                        to detect possible situations in which the system has been compromised and give an appropriate
                        response.&amp;nbsp; IoCs are often tracked through logs, and accurate time is essential.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-08 Time Stamps" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/177-08_02_AU-08"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA AU-11 Audit Record Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/180-08_02_AU-11"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check that mechanisms are installed to keep the host's clock synchronized (i.e.
                            ntpd in Linux based systems).&lt;/li&gt;
                            &lt;li&gt;Inspect the logs created by the app and check they have the correct timestamp.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.575">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" issueId="" issueLink="" platform="" cost="2" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential
                        risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or
                        auto-binding when accepting values from an untrusted source and mapping them to trusted server
                        side values increases the risk of tainted data being used unsafely.&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt;
                        &lt;li&gt;Use available features of the language or framework that allow specification of white
                        lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible
                        (white list) or attr_protected (black list) macros in each class that may be used in mass
                        assignment.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="Spring.java">
              <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
            <reference name="OWASP Juice Shop: XSS" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the framework the component is using.&lt;/li&gt;&lt;li&gt;Check
                            if this particular framework provides automatic binding of variables.&lt;/li&gt;&lt;li&gt;Verify
                            if it is disabled or restricted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.681">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-BH" name="Use blackholing to mitigate L4 DDoS attacks" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DDoS attack blocking, commonly referred to as blackholing, is a method typically used
                        by ISPs to stop a DDoS attack on one of its customers. This approach to block DDoS attacks makes
                        the site in question completely inaccessible to all traffic, both malicious attack traffic and
                        legitimate user traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Blackholing is typically deployed by the
                        ISP to protect other customers on its network from the adverse effects of DDoS attacks such as
                        slow network performance and disrupted service. Common attacks are SYN flood and Smurf attack.
                        For Smurf attack a simple solution is to disable IP broadcasting addresses at each network
                        router and firewall.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Older routers are likely to enable broadcasting
                        by default, while newer routers will likely already have it disabled.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;Disable
                        broadcasting by default on old routers.&lt;/p&gt;&lt;p&gt;To implement RTBH (Remote Triggered
                        Black Hole) Network Operator sets up a null route for the 192.0.2.1 address on all the backbone
                        routers which participate in BGP:&lt;/p&gt;&lt;p&gt;ip route 192.0.2.1 255.255.255.255 null 0
                        254&lt;/p&gt;&lt;p&gt;192.0.2.1 is part of 192.0.2.0/24, the TEST-NET, one of the reserved IPv4
                        address blocks.&lt;/p&gt;&lt;p&gt;Create a route-map to catch routes which need to be blackholed&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static
                        routes can be tagged in Cisco IOS - we will tag routes to be blackholed with the value of 66&lt;/li&gt;&lt;li&gt;Set
                        origin to be iBGP&lt;/li&gt;&lt;li&gt;Set local-preference to be 150&lt;ul&gt;&lt;li&gt;higher
                        than any other local-preference set in the backbone&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set
                        community to be no-export and internal marker community (ASN:666)&amp;nbsp;&lt;ul&gt;&lt;li&gt;Don't
                        want prefix to leak outside the AS&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set next-hop to
                        192.0.2.1 (IPv4) or 100::1 (IPv6)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Then introduce the
                        route-map into the BGP configuration.&lt;/p&gt;&lt;p&gt;To implement the trigger, simply null
                        route whatever address or address block needs to be blackholed:&lt;/p&gt;&lt;p&gt;ip route
                        50.62.124.1 255.255.255.255 null0 tag 66&amp;nbsp;&lt;/p&gt;&lt;p&gt;And this ensures that (for
                        example) 50.62.124.1/32 is announced to the entire backbone with next-hop 192.0.2.1 set.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="RFC 4987 - TCP SYN Flooding Attacks and Common Mitigations" url="https://tools.ietf.org/html/rfc4987"/>
            <reference name="RFC 5635 - Remote Triggered Black Hole Filtering               with Unicast Reverse Path Forwarding (uRPF)" url="https://tools.ietf.org/html/rfc5635"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the
                            implemented availability protection is effective. One useful tool to execute this kind of
                            test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The
                            interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP
                            echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the
                            ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For
                            example, you can simulate a TCP SYN DDoS Attack using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3
                            VICTIM_IP -flood -rand-source -destport 80 -syn -d 120 -w 64&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.378">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications
                        between RA (Registration Authority) and CSP (Credential Service Provider), should be
                        authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS
                        connection, using approved cryptographic algorithms.&lt;/p&gt;
                        &lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
                        &lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity
                        that issues security tokens or electronic credentials to subscribers. A CSP forms part of an
                        authentication system, most typically identified as a separate entity in a Federated
                        authentication system. A CSP may be an independent third party, or may issue credentials for its
                        own use. Credential Service Provider is typically also the Identity Provider (IDP). An example
                        of a CSP would be an online site whose primary purpose may be, for example, internet banking -
                        but whose users may be subsequently authenticated to other sites, applications or services
                        without further action on their part.&lt;/p&gt;
                        &lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the
                        identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be
                        independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
                        &lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying
                        the claimant's possession and control of one or two authenticators, using an authentication
                        protocol.&lt;/p&gt;
                        &lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's
                        authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically
                        to process a transaction or grant access to information or a system.&lt;/p&gt;
                        &lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and
                        identity proofing.&lt;/p&gt;
                        &lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more
                        authentication protocols.&lt;/p&gt;
                        &lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator
                        from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example
                            with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.047">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="same-encoding-parsers" name="Use the same encodings and parsers in all application components" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Errors may occur when converting between differently coded character data.&amp;nbsp; There are
                        two general types of encoding errors. If the byte sequence is not valid for the specified
                        charset then the input is considered malformed. If the byte sequence cannot be mapped to an
                        equivalent character sequence then an unmappable character has been encountered.
                        &lt;/div&gt;
                        &lt;div&gt;
                        Special care should be taken when decoding untrusted byte data to ensure that malformed input or
                        unmappable character errors do not result in defects and vulnerabilities.&amp;nbsp; Encoding
                        errors can also occur, for example, encoding a cryptographic key containing malformed input for
                        transmission will result in an error. Encoding and decoding errors typically result in data
                        corruption.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;
                        &lt;/div&gt;Use the same encodings and parsers in all application components to avoid parsing
                        attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI
                        attacks.</desc>
          <implementations/>
          <references>
            <reference name="STR51-J. Use the charset encoder and decoder classes when more control over the encoding process is required" url="https://wiki.sei.cmu.edu/confluence/display/java/STR51-J.+Use+the+charset+encoder+and+decoder+classes+when+more+control+over+the+encoding+process+is+required"/>
          </references>
          <standards>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all application components are using the same encoding style.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.681">
              <output/>
            </source>
            <references>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of
                        the source or transport method. For example, while hidden form fields, cookies or other headers
                        may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated
                        forms. These can be modified by the user on the client-side in memory, or in transit on the
                        network. Similarly, data passed from binary or compiled components can be modified in situ or in
                        transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit
                        between the two ends of the encrypted tunnel (one of which is typically controlled by the
                        client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all
                        data from the client side must be subjected to strict validation, sanitization, and encoding
                        against expected syntactic and semantic criteria.
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax
                        (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a
                        specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be
                        syntactically valid because it only contains alphanumeric characters, but it is not valid if the
                        input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the
                        strict criteria for each input are accepted, and reject, transform, or encapsulate any
                        non-compliant data.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific
                        malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive
                        and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to
                        obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be
                        useful for detecting and logging potential attacks, or determining which inputs are so malformed
                        that they should be rejected outright.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Validate all data received from the client, including values such as &lt;span
                        class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the
                        server side, X- headers, and other platform specific data objects passed between the client and
                        server.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;
                            &lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Serialized Java objects&lt;/li&gt;
                            &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;
                            &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined
                            whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;To test data validation:&amp;nbsp;
                            &lt;p&gt;&lt;/p&gt;
                            &lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it
                            (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing:
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Using a browser extension which allows you to modify the request and responses on
                            the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e.
                            &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp,
                            Fiddler, etc.).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.680">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-147" name="Validate input parameters to prevent HTTP Parameter Pollution" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>All data received from external sources should be considered tainted and a potential risk,
                        regardless of the source or transport method. HTTP Parameter Pollution attacks result when
                        parameters are added or inserted into requests, and are inappropriately or unsafely handled by
                        the server. For example, injection of parameters into strings or cookies sent to the application
                        can result in the variables being interpreted out of sequence, exploiting flaws in the business
                        logic and flow.
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;p&gt;For example, there was a bug in the Blogger platform which illustrates this
                        vulnerability. The bug allowed malicious users to take ownership of the victim's blog by using
                        the following HTTP request:&lt;/p&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;&lt;code&gt;POST /add-authors.do HTTP/1.1&lt;/code&gt;&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;&lt;code&gt;security_token=attackertoken&amp;amp;&lt;b&gt;blogID=attackerblogidvalue&lt;/b&gt;&amp;amp;&lt;b&gt;blogID=victimblogidvalue&lt;/b&gt;&amp;amp;authorsList=goldshlager19test%40gmail.com(attacker
                        email)&amp;amp;ok=Invite&lt;/code&gt;&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;p&gt;The flaw resided in the authentication mechanism used by the web application, as the
                        security check was performed on the first&amp;nbsp;&lt;code&gt;blogID&lt;/code&gt;&amp;nbsp;parameter,
                        whereas the actual operation used the second occurrence.&lt;/p&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify parameters within the application used for authentication
                            decisions, or critical business logic.&lt;/li&gt;&lt;li&gt;Send specially forged requests to
                            the application in which those parameters are duplicated, or passed through other methods
                            (e.g. POST parameters in the URL as GET fields, cookies as form fields etc.)&lt;ul&gt;&lt;li&gt;Review
                            the application logic to ensure:&lt;/li&gt;&lt;li&gt;The same parameter is for all the
                            decisions.&lt;/li&gt;&lt;li&gt;Parameters received over unexpected or non compliant methods
                            result in a security exception.&lt;/li&gt;&lt;li&gt;Duplicate parameters are identified and
                            result in a security exception.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application
                            should fail-safe; i.e. unexpected or suspicious behavior should result in termination of the
                            user's session and a security event being logged.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A number of
                            tools can be used to aid in testing:&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly
                            inside your browser with the Developer Tools&lt;/li&gt;&lt;li&gt;Using a browser extension
                            which allows you to modify the request and responses on the fly (i.e. Tamper Data)&lt;/li&gt;&lt;li&gt;Using
                            a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP,
                            Burp, Fiddler, etc.)&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:29.979">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Testing for HTTP Parameter Pollution" url="https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OTG-INPVAL-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-601" name="Whitelist which URLs the application may redirect to" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should maintain a list of URLs to which it may redirect users. This
                        whitelisting can also be achieved by applying regular expressions. The application should only
                        allow redirects to trusted URLS.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-04 Information Flow Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/26-08_02_AC-04"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the points of the application in which a redirection takes
                            place. Redirections are usually indicated by the use of the "Location" HTTP header along
                            with the "3xx" code.&lt;/li&gt;&lt;li&gt;Verify if the value inside the Location header is
                            coming from user input (URL string, Cookies, HTTP headers, forms, etc.).&lt;/li&gt;&lt;li&gt;Modify
                            the input value which will be part of the Location header to redirect to domains which
                            should not be permitted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.681">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS-CONTROL" name="Access Control" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-189" name="An attacker discovers the structure, function, and composition of a type of computer software through black box analysis techniques" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker discovers the structure, function, and composition of a type of computer
                                software through black box analysis techniques. 'Black Box' methods involve interacting
                                with the software indirectly, in the absence of direct access to the executable object.
                                Such analysis typically involves interacting with the software at the boundaries of
                                where the software interfaces with a larger execution environment, such as input-output
                                vectors, libraries, or APIs.</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-203">
                  <countermeasures>
                    <countermeasure ref="post-spectre-web-dev-c1" mitigation="50"/>
                    <countermeasure ref="post-spectre-web-dev-c2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="post-spectre-web-dev-c1" mitigation="50"/>
                <countermeasure ref="post-spectre-web-dev-c2" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="availability" name="Availability" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-607" name="Attackers bring the service down by exhausting it (D)DoS" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker can bring a service down by exhausting either the network or the service
                                itself.
                                &lt;br&gt;
                                &lt;br&gt;See references for more information.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="US Cert DDOS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
              </references>
              <weaknesses>
                <weakness ref="AV-DOS-APP">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L3">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L4">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-TLS">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="CS-Default">
          <threats>
            <threat ref="7k-CWE-Environment" name="Attackers gain unauthorised access to the application through an environment flaw" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This section includes everything that is outside of the source code but is
                                still critical to the security of the product that is being created. Because the issues
                                covered by this section are not directly related to source code, we separated it from
                                the rest of the realms.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="ENV-USE" mitigation="50"/>
                    <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ENV-USE" mitigation="50"/>
                <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In applications, particularly web applications, access to functionality is
                                mitigated by the authorization framework, whose job it is to map ACLs to elements of the
                                application's functionality; particularly URL's for web-apps. In cases in which the
                                administrator failed to specify an ACL for a particular element, an attacker may be able
                                to access it with impunity. An attacker with the ability to access functionality not
                                properly constrained by ACLs can obtain sensitive information and possibly compromise
                                the entire application. Such an attacker could potentially access resources that should
                                only be available to users of a higher privilege level, or access management sections of
                                the application, or can run queries for data that he is otherwise not supposed to.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-276">
                  <countermeasures>
                    <countermeasure ref="deny-default-enf" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="deny-default-enf" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-214" name="An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker sends random, malformed, or otherwise unexpected messages to a target
                                application and observes any stack traces produced by error messages. Fuzzing techniques
                                involve sending random or malformed messages to a target and monitoring the target's
                                response. The attacker does not initially know how a target will respond to individual
                                messages but by attempting a large number of message variants they may find a variant
                                that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause
                                the targeted application to return an error including a stack trace, although fuzzing a
                                target can also sometimes cause the target to enter an unstable state, causing a crash.
                                The stack trace enumerates the chain of methods that led up to the point where the error
                                was encountered. This can not only reveal the names of the methods (some of which may
                                have known weaknesses) but possibly also the location of class files and libraries as
                                well as parameter values. In some cases, the stack trace might even disclose sensitive
                                configuration or user information.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-460">
                  <countermeasures>
                    <countermeasure ref="error-handling-centralized" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="error-handling-centralized" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment,
                                allowing developers to monitor their code regularly in order to avoid security
                                vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="hostile-subdomain-takeover" name="Attackers claim subdomains with the help of external services" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                This attack vector utilizes DNS entries pointing to Service Providers where the pointed
                                sub-domain is currently not in use. Depending on the DNS-entry configuration and which
                                Service Provider it points to, some of these services will allow unverified users to
                                claim these sub-domains as their own.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                In the not so rare case, the attacker can also "inherit" the Domain Owner's Wildcard SSL
                                used inside the Service Provider.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;div&gt;
                                &lt;b&gt;Attack Scenario&lt;/b&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;ol&gt;
                                &lt;li&gt;Your company starts using a new service, eg an external Support
                                Ticketing-service.&lt;/li&gt;
                                &lt;li&gt;Your company points a sub-domain to the Support Ticketing-service, eg
                                support.your-domain.com&lt;/li&gt;
                                &lt;li&gt;Your company stops using this service but does not remove the sub-domain
                                redirection pointing to the ticketing system.&lt;/li&gt;
                                &lt;li&gt;Attacker signs up for the Service and claims the domain as theirs. No
                                verification is done by the Service Provider, and the DNS-setup is already correctly
                                setup.&lt;/li&gt;
                                &lt;li&gt;Attacker can now build a complete clone of the real site, add a login form,
                                redirect the user, steal credentials (e.g. admin accounts), cookies and/or completely
                                destroy business credibility for your company.&lt;/li&gt;
                                &lt;/ol&gt;
                                &lt;/div&gt;
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Hostile Subdomain Takeover using Heroku/Github/Desk + more" url="https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-350">
                  <countermeasures>
                    <countermeasure ref="identify-dns-domains" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="identify-dns-domains" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SOURCE-LEAK" name="Attackers gain control of the system through a source code leakage" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Attackers gain unauthorized access to a service by reading raw source code
                                returned by the service, and this code contains confidential information such as
                                authentication credentials or other secrets that can be used to access the service.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Configuration
                                files that can be downloaded from the service could also be leveraged to gain access to
                                sensitive information.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-541">
                  <countermeasures>
                    <countermeasure ref="CWE-541" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-541" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-172" name="Attackers subvert the intended workflow of the application in order to perform unauthorised operations" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;If an application enforces an order in workflows, then attackers could
                                attempt to bypass this order so that they can perform operations for which they are not
                                authorized. The technique can also be used to gain access to unauthorized data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-841">
                  <countermeasures>
                    <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                    <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing
                                the attackers' request, thereby reducing the resources available for legitimate services
                                and degrading or denying services. Usually, this attack focuses on memory allocation,
                                but any finite resource on the target could be the attacked, including bandwidth,
                                processing cycles, or other resources.&amp;nbsp;&lt;/p&gt;
                                &lt;p&gt;This attack does not attempt to force this allocation through a large number of
                                requests (that would be Resource Depletion through Flooding) but instead uses one or a
                                small number of requests that are carefully formatted to force the target to allocate
                                excessive resources to service this request(s). Often this attack takes advantage of a
                                bug in the target to cause the target to allocate resources vastly beyond what would be
                                needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-770">
                  <countermeasures>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                    <countermeasure ref="network-rate-limit" mitigation="34"/>
                    <countermeasure ref="protection-against-data-mining" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="protection-against-data-mining" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be
                                reserved for privileged users or administrators but are exposed to use by lower or
                                non-privileged accounts. Access to sensitive information and functionality must be
                                controlled to ensure that only authorized users are able to access these resources. If
                                access control mechanisms are absent or misconfigured, a user may be able to access
                                resources that are intended only for higher level users. An adversary may be able to
                                exploit this to utilize a less trusted account to gain information and perform
                                activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt;
                                &lt;p&gt;This attack differs from privilege escalation and other privilege stealing
                                attacks in that the adversary never actually escalates their privileges but instead is
                                able to use a lesser degree of privilege to access resources that should be (but are
                                not) reserved for higher privilege accounts. Likewise, the adversary does not exploit
                                trust or subvert systems - all control functionality is working as configured but the
                                configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-272">
                  <countermeasures>
                    <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOG-MANAGEMENT" name="Log Management" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-93" name="An attacker injects, manipulates or forges malicious log entries in the log file, allowing her to mislead a log audit, cover traces of attack, or perform other malicious actions" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack targets the log files of the target host. The attacker injects,
                                manipulates or forges malicious log entries in the log file, allowing him to mislead a
                                log audit, cover traces of attack, or perform other malicious actions. The target host
                                is not properly controlling log access. As a result tainted data is resulting in the log
                                files leading to a failure in accountability, non-repudiation and incident forensics
                                capability.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-117">
                  <countermeasures>
                    <countermeasure ref="ASVS-8.8" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="LOGS-INTEGRITY" mitigation="40"/>
                    <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="LOGS-INTEGRITY" mitigation="40"/>
                <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-778-AUTH" name="Attacks against the authentication system may go undetected" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Automated attacks against many user accounts, or successful attacks against an account
                                require a response. &amp;nbsp;If audit logs are not kept of both successful and
                                unsuccessful authentication operations, then post attack forensics will be hampered.&amp;nbsp;&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Without a dynamic response to mass automated attacks against the
                                authentication system, attackers stand a greater chance of success.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="CDS-USER-TRACK" mitigation="16"/>
                    <countermeasure ref="CSD-VAL-LOG" mitigation="14"/>
                    <countermeasure ref="CWE-662" mitigation="14"/>
                    <countermeasure ref="EU-GDPR-LOGGING" mitigation="14"/>
                    <countermeasure ref="LOG-TLS-FAILURES" mitigation="14"/>
                    <countermeasure ref="LOGS-INTEGRITY" mitigation="14"/>
                    <countermeasure ref="security-logging" mitigation="14"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CDS-USER-TRACK" mitigation="16"/>
                <countermeasure ref="CSD-VAL-LOG" mitigation="14"/>
                <countermeasure ref="CWE-662" mitigation="14"/>
                <countermeasure ref="EU-GDPR-LOGGING" mitigation="14"/>
                <countermeasure ref="LOG-TLS-FAILURES" mitigation="14"/>
                <countermeasure ref="LOGS-INTEGRITY" mitigation="14"/>
                <countermeasure ref="security-logging" mitigation="14"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data
                                subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-532">
                  <countermeasures>
                    <countermeasure ref="CWE-532" mitigation="70"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-779">
                  <countermeasures>
                    <countermeasure ref="LOG-RETENTION" mitigation="30"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-532" mitigation="70"/>
                <countermeasure ref="LOG-RETENTION" mitigation="30"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="post-data" name="Post data" desc="Data is received (posted) here" library="CS-Default">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal
                                resources. The attacker can supply - or modify - a URL which the code running on the
                                server will read or submit data to, and by carefully selecting the URLs, the attacker
                                may be able to read server configuration details such as AWS metadata, connect to
                                internal services like http enabled databases, or perform post requests towards internal
                                services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="25"/>
                    <countermeasure ref="CWE-601" mitigation="25"/>
                    <countermeasure ref="DATA-VAL" mitigation="25"/>
                    <countermeasure ref="WEB-FILE-DATA" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="25"/>
                <countermeasure ref="CWE-601" mitigation="25"/>
                <countermeasure ref="DATA-VAL" mitigation="25"/>
                <countermeasure ref="WEB-FILE-DATA" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-35" name="Attackers can leverage Executable Code in Non-Executable Files" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attack of this type exploits a system's trust in configuration and resource files,
                                when the executable loads the resource (such as an image file or configuration file) the
                                attacker has modified the file to either execute malicious code directly or manipulate
                                the target process (e.g. application server) to execute based on the malicious
                                configuration parameters. Since systems are increasingly interrelated mashing up
                                resources from local and remote sources the possibility of this attack occurring is
                                high.
                                &lt;br /&gt;The attack can be directed at a client system, such as causing buffer
                                overrun through loading seemingly benign image files, as in Microsoft Security Bulletin
                                MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded
                                into the browser. Another example targets clients reading pdf files. In this case the
                                attacker simply appends javascript to the end of a legitimate url for a pdf
                                (http://www.gnucitizen.org/blog/danger-danger-danger/)
                                &lt;br /&gt;http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here
                                &lt;br /&gt;The client assumes that they are reading a pdf, but the attacker has
                                modified the resource and loaded executable javascript into the client's browser
                                process.
                                &lt;br /&gt;The attack can also target server processes. The attacker edits the resource
                                or configuration file, for example a web.xml file used to configure security permissions
                                for a J2EE app server, adding role name &amp;quot;public&amp;quot; grants all users with
                                the public role the ability to use the administration functionality.
                                &lt;br /&gt;The server trusts its configuration file to be correct, but when they are
                                manipulated, the attacker gains full control.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-95">
                  <countermeasures>
                    <countermeasure ref="dyn-exec" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="dyn-exec" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-176" name="Attackers can manipulate Configuration/Environment" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker manipulates files or settings external to a target application which
                                affect the behavior of that application. For example, many applications use external
                                configuration files and libraries - modification of these entities or otherwise
                                affecting the application's ability to use them would constitute a
                                configuration/environment manipulation attack.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-15">
                  <countermeasures>
                    <countermeasure ref="configuration-integrity" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="configuration-integrity" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-94" name="Attackers gain access to the system through Server-Side Code Injection" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Server-Side Code Injection happens when an attacker is able to direct input
                                under his control and mix it with executed code on the server side by modifying the
                                logic executed on it.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Depending
                                on the code isolation, this event could grant the user access to system resources and
                                data.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-78">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="80"/>
                    <countermeasure ref="SAME-ENCODING-STYLE" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="80"/>
                <countermeasure ref="SAME-ENCODING-STYLE" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-73" name="Attackers upload code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attack of this type involves an attacker inserting malicious characters
                                (such as a XSS redirection) into a filename, directly or indirectly that is then used by
                                the target software to generate HTML text or other potentially executable content. Many
                                websites rely on user-generated content and dynamically build resources like files,
                                filenames, and URL links directly from user supplied data. In this attack pattern, the
                                attacker uploads code that can execute in the client browser and/or redirect the client
                                browser to a site that the attacker owns. All XSS attack payload variants can be used to
                                exploit these vulnerabilities.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-116">
                  <countermeasures>
                    <countermeasure ref="same-encoding-parsers" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="same-encoding-parsers" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-586-SER" name="An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Developers leverage serialization in order to convert data or state into a static,
                                binary format for saving to disk or transferring over a network. These objects are then
                                deserialized when needed to recover the data/state. By injecting a malformed object into
                                a vulnerable application, an adversary can potentially compromise the application by
                                manipulating the deserialization process. This can result in a number of unwanted
                                outcomes, including remote code execution.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-502">
                  <countermeasures>
                    <countermeasure ref="SER-UNTRUST" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="SER-UNTRUST" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-62" name="An attacker crafts malicious web links and distributes them hoping to induce users to click on the link and execute a malicious action" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker crafts malicious web links and distributes them (via web pages, email,
                                etc.), typically in a targeted manner, hoping to induce users to click on the link and
                                execute the malicious action against some third-party application. If successful, the
                                action embedded in the malicious link will be processed and accepted by the targeted
                                application with the users' privilege level.
                                &lt;br&gt;This type of attack leverages the persistence and implicit trust placed in
                                user session cookies by many web applications today. In such an architecture, once the
                                user authenticates to an application and a session cookie is created on the user's
                                system, all following transactions for that session are authenticated using that cookie
                                including potential actions initiated by an attacker and simply "riding" the existing
                                session cookie.
                                &lt;br&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="ASVS-18.8" mitigation="34"/>
                    <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                    <countermeasure ref="cwe-352-csrf" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-18.8" mitigation="34"/>
                <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                <countermeasure ref="cwe-352-csrf" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="open-redirect-threat" name="An attacker leverages the redirection functionality in the application to conduct more convincing phishing attacks" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An http parameter may contain a URL value for redirecting the request to
                                another specified URL. By modifying this URL value to point towards a malicious site, an
                                attacker may successfully launch a phishing scam and steal user credentials. Because the
                                server name in the modified link is identical to the original site, phishing attempts
                                have a more trustworthy and convincing appearance.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-601">
                  <countermeasures>
                    <countermeasure ref="CWE-601" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-601" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-117" name="An attacker monitors HTTP headers from a target in order to gather information" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker monitors data streams to or from a target in order to gather information.
                                This attack may be undertaken in order to gather information to support a later attack,
                                or the data collected may be the end goal of the attack. This attack usually involves
                                sniffing network traffic, but may include observing other types of data streams, such as
                                radio. In most varieties of this attack, the attacker is passive and simply observes
                                regular communication, however in some variants the attacker may attempt to initiate the
                                establishment of a data stream or influence the nature of the data transmitted. However,
                                in all variants of this attack, and distinguishing this attack from other data
                                collection methods, the attacker is not the intended recipient of the data stream.
                                Unlike some other data leakage attacks, the attacker is observing explicit data channels
                                (e.g. network traffic) and reading the content. This differs from attacks that collect
                                more qualitative information, such as communication volume, or other information not
                                explicitly communicated via a data stream.</desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="ASVS-11.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-11.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-267" name="Attackers encode potentially harmful input and submit it to bypass input filtering protections" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack leverages the possibility of encoding potentially harmful input
                                and submitting it to applications not expecting or effective at validating this
                                encoding, thus, thwarting the validation.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-173">
                  <countermeasures>
                    <countermeasure ref="harden-http-headers" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-235">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="50"/>
                <countermeasure ref="harden-http-headers" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-300" name="Attackers gain control of the connection through a Man In The Middle attack" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.&amp;nbsp; &amp;nbsp;
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-MASS" name="Functionality could be subverted through mass assignment" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>If the application binds parameters to back-end objects, then attackers could
                                potentially set fields on those objects that were not designed to be modified by the
                                user.</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-915">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                    <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-101" name="Unauthorised data could be accessed by manipulating parameters sent to the application" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>The application could be tricked into exposing data to unauthorized users by
                                manipulating the parameters it accepts. All data received from the client side could be
                                subject to manipulation, including fields like cookies and HTTP headers, if these are
                                used as inputs to the application.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-22">
                  <countermeasures>
                    <countermeasure ref="CWE-639" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-548">
                  <countermeasures>
                    <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-650">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="25"/>
                <countermeasure ref="CWE-639" mitigation="25"/>
                <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="d16d50e6-8880-42db-a078-f9f07936fa5e" diagramComponentId="d260486f-52b3-4946-bae1-b967bea936c3" ref="6466e1cd-f115-44bf-9962-548b27fca47a" name="Web Application - Server side" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="web-application-server-side">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software allocates a reusable resource or group of resources on behalf of an
                        actor without imposing any restrictions on how many resources can be allocated, in violation of
                        the intended security policy.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.108">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication
                        channel that can be sniffed by unauthorized actors.

                        Many communication channels can be "sniffed" by attackers during data transmission. For example,
                        network traffic can often be sniffed by any attacker who has access to a network interface. This
                        significantly lowers the difficulty of exploitation by attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.108">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100" issueId="" issueLink="">
          <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.636">
              <output/>
            </source>
            <references>
              <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-502" name="Deserialization of Untrusted Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The application deserializes untrusted data without sufficiently verifying that the resulting
                        data will be valid.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.108">
              <output/>
            </source>
            <references>
              <reference name="CWE-502: Deserialization of Untrusted Data" url="https://cwe.mitre.org/data/definitions/502.html"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-15" name="External Control of System or Configuration Setting" state="0" impact="100" issueId="" issueLink="">
          <desc>One or more system settings or configuration elements can be externally controlled by a
                        user.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.166">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an
                        unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.577">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-460" name="Improper Cleanup on Thrown Exception" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not clean up its state or incorrectly cleans up its state when an exception
                        is thrown, leading to unexpected state or control flow.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.108">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-116" name="Improper Encoding or Escaping of Output" state="0" impact="100" issueId="" issueLink="">
          <desc>The software prepares a structured message for communication with another component, but
                        encoding or escaping of the data is either missing or done incorrectly. As a result, the
                        intended structure of the message is not preserved.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.161">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-841" name="Improper Enforcement of Behavioral Workflow" state="0" impact="100" issueId="" issueLink="">
          <desc>The software supports a session in which more than one behavior
                        must be performed by an actor, but it does not properly ensure that the actor
                        performs the behaviors in the required sequence.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.108">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-173" name="Improper Handling of Alternative Encoding" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not properly handle cases in which the input uses an alternative
                        encoding scheme that is valid for the control sphere to which the input is being sent.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.636">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-235" name="Improper Handling of Extra Parameters" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not handle or incorrectly handles when the number of parameters, fields, or
                        arguments with the same name exceeds the expected amount.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.636">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-22" name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software uses external input to construct a pathname that is intended to identify
                        a file or directory that is located underneath a restricted parent directory, but the software
                        does not properly neutralize special elements within the pathname that can cause the pathname to
                        resolve to a location that is outside of the restricted directory.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Many
                        file operations are intended to take place within a restricted directory. By using special
                        elements such as ".." and "/" separators, attackers can escape outside of the restricted
                        location to access files or directories that are elsewhere on the system. One of the most common
                        special elements is the "../" sequence, which in most modern operating systems is interpreted as
                        the parent directory of the current location. This is referred to as relative path traversal.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Path
                        traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be
                        useful in accessing unexpected files. This is referred to as absolute path traversal. In many
                        programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to
                        truncate a generated filename to widen the scope of attack. For example, the software may add
                        ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may
                        effectively remove this restriction.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.636">
              <output/>
            </source>
            <references>
              <reference name="CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" url="https://cwe.mitre.org/data/definitions/22.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-95" name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software receives input from an upstream component, but it does not neutralize or
                        incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g.
                        "eval").</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.166">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-78" name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software constructs all or part of an OS command using externally-influenced input from an
                        upstream component, but it does not neutralize or incorrectly neutralizes special elements that
                        could modify the intended OS command when it is sent to a downstream component. This could allow
                        attackers to execute unexpected, dangerous commands directly on the operating system. This
                        weakness can lead to a vulnerability in environments in which the attacker does not have direct
                        access to the operating system, such as in web applications.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Alternately, if the weakness occurs in a privileged program, it could allow the attacker to
                        specify commands that normally would not be accessible, or to call alternate commands with
                        privileges that the attacker does not have. The problem is exacerbated if the compromised
                        process does not follow the principle of least privilege, because the attacker-controlled
                        commands may run with special system privileges that increases the amount of damage.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        There are at least two subtypes of OS command injection:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The application intends to execute a single, fixed program that is under its own
                        control. It intends to use externally-supplied inputs as arguments to that program. For example,
                        the program might use system(&amp;quot;nslookup [HOSTNAME]&amp;quot;) to run nslookup and allow
                        the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup
                        from executing. However, if the program does not remove command separators from the HOSTNAME
                        argument, attackers could place the separators into the arguments, which allows them to execute
                        their own program after nslookup has finished executing.The application accepts an input that it
                        uses to fully select which program to run, as well as which commands to use.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The application simply redirects this entire command to the operating system. For
                        example, the program might use &amp;quot;exec([COMMAND])&amp;quot; to execute the [COMMAND] that
                        was supplied by the user. If the COMMAND is under attacker control, then the attacker can
                        execute arbitrary commands or programs. If the command is being executed using functions like
                        exec() and CreateProcess(), the attacker might not be able to combine multiple commands together
                        in the same line. From a weakness standpoint, these variants represent distinct programmer
                        errors.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;In the first variant, the programmer clearly intends input from untrusted parties
                        will be part of the arguments in the command to be executed. In the second variant, the
                        programmer does not intend for the command to be accessible to any untrusted party, but the
                        programmer probably has not accounted for alternate ways in which malicious attackers can
                        provide input.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.166">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-117" name="Improper Output Neutralization for Logs" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes
                        output that is written to logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.577">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-915" name="Improperly Controlled Modification of Dynamically-Determined Object Attributes" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software receives input from an upstream component that specifies multiple
                        attributes, properties, or fields that are to be initialized or updated in an object, but it
                        does not properly control which attributes can be modified.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;If
                        the object contains attributes that were only intended for internal use, then their unexpected
                        modification could lead to a vulnerability. This weakness is sometimes known by the
                        language-specific mechanisms that make it possible, such as mass assignment, auto-binding, or
                        object injection.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.636">
              <output/>
            </source>
            <references>
              <reference name="CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes" url="https://cwe.mitre.org/data/definitions/915.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100" issueId="" issueLink="">
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to
                        an unintended actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.108">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.636">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-548" name="Information Exposure Through Directory Listing" state="0" impact="100" issueId="" issueLink="">
          <desc>A directory listing is inappropriately exposed, yielding
                        potentially sensitive information to attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.636">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-532" name="Information Exposure Through Log Files" state="0" impact="100" issueId="" issueLink="">
          <desc>Information written to log files can be of a sensitive nature
                        and give valuable guidance to an attacker or expose sensitive user
                        information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.577">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.636">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Improper Input Validation" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits
                        important details about the event when logging it. When critical security events are not logged
                        properly, such as in the case of a failed login attempt, this can make malicious behavior more
                        difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.576">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the
                        system development life cycle. Such testing/evaluation is necessary because it confirms that the
                        required security controls are implemented correctly, operating as intended, enforcing the
                        desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:22.682">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-272" name="Least Privilege Violation" state="0" impact="100" issueId="" issueLink="">
          <desc>The elevated privilege level required to perform operations such as chroot() should be dropped
                        immediately after the operation is performed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.108">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-779" name="Logging of Excessive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software logs too much information, making log files hard
                        to process and possibly hindering recovery efforts or forensic analysis after an
                        attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.577">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-350" name="Reliance on Reverse DNS Resolution for a Security-Critical Action" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs reverse DNS resolution on an IP address to obtain the hostname and make
                        a security decision, but it does not properly ensure that the IP address is truly associated
                        with the hostname.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:22.427">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the
                        contents of this URL, but it does not sufficiently ensure that the request is being sent to the
                        expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.166">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DOS-APP" name="The application exposes high resource consuming functions without any protection (Layer 7 attacks)" state="0" impact="100" issueId="" issueLink="">
          <desc>A highly resource consuming function could be exploited by an attacker to bring the service
                        down.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.822">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-541" name="The service returns back-end source code without interpreting it" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;If an include file source is accessible, the file may contain usernames and
                        passwords, as well as sensitive information pertaining to the application and system. The source
                        code can also be sent back to a client because of an error condition or an improperly configured
                        handler.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.107">
              <output/>
            </source>
            <references>
              <reference name="CWE-541: Information Exposure Through Include Source Code" url="https://cwe.mitre.org/data/definitions/541.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L3" name="There is no network protection to protect against Layer 3" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no measures in place to mitigate (D)DoS at a network level.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.823">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L4" name="There is no network protection to protect against Layer 4" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.823">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-TLS" name="There is no protection against Layer 6 attacks (SSL/TLS)" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.823">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-650" name="Trusting HTTP Permission Methods on the Server Side" state="0" impact="100" issueId="" issueLink="">
          <desc>The server contains a protection mechanism that assumes that
                        any URI that is accessed using HTTP GET will not cause a state change to the
                        associated resource. This might allow attackers to bypass intended access
                        restrictions and conduct resource modification and deletion attacks, since some
                        applications allow GET to modify state.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.636">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-601" name="URL Redirection to Untrusted Site ('Open Redirect')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;A web application accepts a user-controlled input specifying a link to an external
                        site, and uses this link in a Redirect. This functionality aids phishing attacks.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.634">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This is a generic weakness which includes several different situations that are all
                        connected to unexpected environmental conditions and could be related to:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared
                        buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two
                        different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.635">
              <output/>
            </source>
            <references>
              <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="dyn-exec" name="Assure that the application avoids the use of eval() or other dynamic code execution features" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Assure that the application avoids the use of eval() or other dynamic code execution features.
                        Where there is no alternative, any user input being included must be sanitized or sandboxed
                        before being executed.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Look for scripts that do not properly validate user inputs in the page
                            parameter. A remote user can supply a specially crafted URL to pass arbitrary code to an
                            eval() statement, which results in code execution.&lt;/p&gt;&lt;p&gt;Note 1: This attack
                            will execute the code with the same permissions, potentially including operation system
                            commands.&lt;/p&gt;&lt;p&gt;Note 2: Eval injection is prevalent in handler/dispatch
                            procedures that want to invoke a large number of functions, or set a large number of
                            variables.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.939">
              <output/>
            </source>
            <references>
              <reference name="Direct Dynamic Code Evaluation (Eval Injection)" url="https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection"/>
              <reference name="[SCRIPT_ENGINE_INJECTION] Potential code injection when using Script Engine" url="https://find-sec-bugs.github.io/bugs.htm"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="deny-default-enf" name="Assure that the principle of deny by default exists for new users/roles" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Deny by default is the principle whereby if a request is not specifically allowed, it
                        is denied. There are many ways this rule will manifest in application code. Some examples of
                        this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny by default exists whereby
                        new users/roles start with minimal or no permissions and users/roles do not receive access to
                        new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw
                        an error or exception while processing access control requests. In these cases access control
                        should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user
                        registers for a new account, that account should have minimal or no access by default until that
                        access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all
                        users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C7]: Enforce Access Controls" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"/>
          </references>
          <standards>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In
                            every portion of the application in which a user can create information inside the database
                            (e.g., making a payment, adding a contact, or sending a message), or can receive information
                            (statement of account, order details, etc.), or delete information (drop users, messages,
                            etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try
                            to access such functions as another user in order to verify if it is possible to access a
                            function that should not be permitted by the user's role/privilege (but might be permitted
                            as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.905">
              <output/>
            </source>
            <references>
              <reference name="Testing for Bypassing Authorization Schema (OTG-AUTHZ-002)" url="https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)"/>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-639" name="Avoid using direct references to files" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential
                        risk, regardless of the source or transport method. Many flaws in applications result from
                        unsafe handling of filenames or path data, for example directory traversal and arbitrary file
                        disclosure. Use of filenames or other direct references to objects such as files on the
                        server-side increases the risk of compromise of the system or unauthorized access to other
                        files, content, or functionality.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Avoid using direct references to
                        files or validate file name.&lt;/li&gt;&lt;li&gt;For example, instead of using:&amp;nbsp;www.example.com/open.jsp?file=details.txt&amp;nbsp;use:&amp;nbsp;www.example.com/open.jsp?file=[GUID]&amp;nbsp;and
                        then use a lookup table on the server to associate the [GUID] value with file details.txt.&lt;/li&gt;&lt;li&gt;Files
                        should be stored outside the web-root to prevent an attacker browsing directly to them.&lt;/li&gt;&lt;li&gt;Do
                        not use obscurity to prevent access; for example do not rely on renaming a file to include a
                        random string to prevent direct download or disclosure.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If direct
                        references are used to access files from within the web-root deviating from recommended security
                        practice, the following must be implemented:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String input
                        validation must be applied.&amp;nbsp; Identify and filter for directory traversal
                        meta-characters such as "../" or "..\" or "/", together with encoded variations and derivations.&lt;/li&gt;&lt;li&gt;Use
                        of a strict white-list of files that may be downloaded.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;When a parameter that represents a file or a file path is found in
                            the application:&lt;/li&gt;&lt;li&gt;For each of them try to change this parameter to gain
                            access to unexpected files.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For example:
                            www.example.com/open.jsp?file=details.txt&amp;nbsp;&lt;br&gt;Shouldn't be implemented that
                            way and if so, it should not be possible to access locations outside of this domain (i.e.
                            file=/etc/passwd or file= &lt;a href="http://www.google.com"&gt;http://www.google.com&lt;/a&gt;,
                            etc.).&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.385">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-SRV-XML" name="Define and enforce secure validation through an XSD or DSD schema on XML input data" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The XML standards provides for formal validation criteria to be specified in a schema
                        (XSD or DTD). Defining a schema with security in mind, and enforcing it on input data, will
                        mitigate many attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define an XSD or DTD schema with secure
                        input validation criteria.&lt;/li&gt;&lt;li&gt;Validate all XML input data against the schema
                        before processing it.&lt;/li&gt;&lt;li&gt;The acceptance of unvalidated or non compliant data
                        could have unexpected impact on the behavior of the application, and may facilitate attacks such
                        as SQL injection.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For every endpoint which consumes XML data.&lt;/li&gt;
                            &lt;li&gt;Get the permitted structure of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Construct non-compliant samples and send them to the endpoints.&lt;/li&gt;
                            &lt;li&gt;Check they are not accepted.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.387">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC" name="Detect and notify the usage of automated tools or unusual behavior" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Don't allow users to manipulate a system or guess its behavior based on input or
                        output timing and detect the usage of automated tools or unusual behavior, such as actions not
                        performed in reasonable "human time" or other abnormal time patterns.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;When
                        the usage of automated tools is detected, the application should respond by denying access and
                        notifying the security group.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use several automated tools to perform normal user actions.&lt;/li&gt;
                            &lt;li&gt;Check that the applications detects these actions, denies the users access and
                            notifies the security group.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.904">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="protection-against-data-mining" name="Detect and protect against data mining techniques" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data mining is an analytical process that attempts to find correlations or patterns
                        in large data sets for the purpose of data or knowledge discovery. Data storage objects include
                        database records and database fields. Sensitive information can be extracted from data mining
                        operations. When information is personally identifiable information, it may lead to
                        unanticipated revelations about individuals and give rise to privacy risks. Prior to performing
                        data mining activities, organizations determine whether such activities are authorized.
                        Organizations may be subject to applicable laws, executive orders, directives, regulations, or
                        policies that address data mining requirements. Organizational personnel consult with the senior
                        agency official for privacy and legal counsel regarding such requirements.&lt;/p&gt;&lt;p&gt;Data
                        mining prevention and detection techniques include limiting the number and frequency of database
                        queries to increase the work factor needed to determine the contents of databases, limiting
                        types of responses provided to database queries, applying differential privacy techniques or
                        homomorphic encryption, and notifying personnel when atypical database queries or accesses
                        occur. Data mining protection focuses on protecting information from data mining while such
                        information resides in organizational data stores. In contrast, AU-13 focuses on monitoring for
                        organizational information that may have been mined or otherwise obtained from data stores and
                        is available as open-source information residing on external sites, such as social networking or
                        social media websites.&lt;/p&gt;&lt;p&gt;EO 13587 requires the establishment of an insider
                        threat program for deterring, detecting, and mitigating insider threats, including the
                        safeguarding of sensitive information from exploitation, compromise, or other unauthorized
                        disclosure. Data mining protection requires organizations to identify appropriate techniques to
                        prevent and detect unnecessary or unauthorized data mining. Data mining can be used by an
                        insider to collect organizational information for the purpose of exfiltration.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-53" url="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf"/>
          </references>
          <standards>
            <standard ref="AC-23" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that your system supports policies that protect against data mining such
                            as filtering, throttling and anomaly detection.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.906">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOG-RETENTION" name="Develop a log retention policy" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Develop a log retention policy to identify storage requirements for device logs and implement
                        procedures to ensure that the audit logs are available for a security response in the case of
                        incident or investigation.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The audit logs from the last 30 days must be collected in easily accessible storage media. Older
                        logs should be archived in a protected storage and should be accessible in the future as
                        required for incidents or investigations.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
          </references>
          <standards>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application contains logs from the last 30 days.&lt;/li&gt;
                            &lt;li&gt;Check that logs older than 30 days are in an external storage.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DIRECTORY_LISTING" name="Disable web server directory listing and ensure file metadata (e.g. .git) and backup files are not present within web roots" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Indexable directories allow an attacker to easily discover the existence of content
                        on your web server that should remain private.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Disable
                        directory listings in the web - or application - server configuration by default.&lt;/li&gt;&lt;li&gt;Restrict
                        access to unnecessary directories and files.&lt;/li&gt;&lt;li&gt;Create an index (default) file
                        for each directory.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Apache - auto index" url="https://httpd.apache.org/docs/trunk/mod/mod_autoindex.html"/>
            <reference name="Apache - directory listing" url="https://wiki.apache.org/httpd/DirectoryListings"/>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Directory_Indexing" url="https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Directory_Indexing"/>
            <reference name="OWASP Insecure Indexing" url="https://www.owasp.org/index.php/File_System#Insecure_Indexing"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that the directory listing is disabled on the web server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.386">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-11.5" name="Do not share system information in HTTP headers and responses" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should not share detailed version information of system components or
                        other information that would assist attackers in the HTTP header or HTTP responses.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the HTTP responses and headers do not reveal sensitive data about the system.
                            Using a command line web client like telnet or netcat could help on this task.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.387">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-FILE-DATA" name="Do not use untrusted client-side data in server-side file operations" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application may be required to perform server-side file operations based on
                        client-side actions. This can expose the application to attack through remote or local
                        file-inclusion, or remote code execution attacks if unsafe data is used in file inclusion, class
                        loader, or reflection capabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Tainted, untrusted, client-side
                        data must not be used directly in server-side file load operations.&lt;/li&gt;&lt;li&gt;Where
                        server-side operations are dependent on client-side input, this should be mapped to pre-defined
                        operations on the server-side rather than using tainted client-side input directly.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify sources of data entering the application.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Classify
                            them into trusted and untrusted.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;if they
                            are untrusted, make sure there is a validation and sanitization mechanism before sending
                            this data into another system (Database, Command, etc.).&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.939">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-532" name="Do not write secrets to the log files" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        The logs may be accessed by attackers and in order to protect sensitive data, no such sensitive
                        data should be included in the logs
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Proactive Controls [C9, C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the logs.&lt;/li&gt;
                            &lt;li&gt;Check that no sensitive data is included in the logs.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in
                        transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end
                        encryption between the client and server, terminating within a secure environment on the
                        server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of
                        (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively,
                        asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested
                        implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established
                            encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only
                            strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use
                            unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review
                            configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.905">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure enforcement of the principle of least privilege in functions, data files, URLs,
                        controllers, services, and other resources. This implies protection against spoofing and
                        elevation of privilege.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;In every portion of the application where a user can create information inside
                            the database (e.g., making a payment, adding a contact, or sending a message), or can
                            receive information (statement of account, order details, etc.), or delete information (drop
                            users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try
                            to access such functions as another user in order to verify if it is possible to access a
                            function that should not be permitted by the user's role/privilege (but might be permitted
                            as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.905">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is
                        not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data
                        is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They
                            may be used in applications for:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
                            &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
                            &lt;li&gt;Caching/Persistence&lt;/li&gt;
                            &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
                            &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.906">
              <output/>
            </source>
            <references>
              <reference name="Deserialization Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-HTTP-METHODS" name="Ensure that the application accepts only a defined set of required HTTP request methods" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP offers a number of methods that can be used to perform actions on the web
                        server. Many of theses methods are designed to aid developers in deploying and testing HTTP
                        applications. These HTTP methods can be used for nefarious purposes if the web server is
                        misconfigured. For example, Cross Site Tracing (XST), a form of cross site scripting using the
                        server's HTTP TRACE method.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While GET
                        and POST are by far the most common methods that are used to access information provided by a
                        web server, the Hypertext Transfer Protocol (HTTP) allows several other (and somewhat less
                        known) methods. RFC 2616 (which describes HTTP version 1.1 which is the standard today) defines
                        the following eight methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HEAD&lt;/li&gt;&lt;li&gt;GET&lt;/li&gt;&lt;li&gt;POST&lt;/li&gt;&lt;li&gt;PUT&lt;/li&gt;&lt;li&gt;DELETE&lt;/li&gt;&lt;li&gt;TRACE&lt;/li&gt;&lt;li&gt;OPTIONS&lt;/li&gt;&lt;li&gt;CONNECT&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Some
                        of these methods can potentially pose a security risk for a web application, as they allow an
                        attacker to modify the files stored on the web server and, in some scenarios, steal the
                        credentials of legitimate users. More specifically, the methods that should be disabled are the
                        following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;PUT: &lt;/strong&gt;This method allows a
                        client to upload new files onto the web server. An attacker may exploit this by uploading
                        malicious files (e.g.: an asp file that executes commands by invoking cmd.exe), or by simply
                        using the victim's server as a file repository.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;DELETE:&lt;/strong&gt;
                        This method allows a client to delete a file on the web server. An attacker may exploit it as a
                        very simple and direct way to deface a web site or to mount a DoS attack.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CONNECT:
                        &lt;/strong&gt;This method could allow a client to use the web server as a proxy.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;TRACE:
                        &lt;/strong&gt;This method simply echoes back to the client whatever string has been sent to the
                        server, and is used mainly for debugging purposes. This method, originally assumed harmless, can
                        be used to mount an attack known as Cross Site Tracing, which was discovered by Jeremiah
                        Grossman (see links at the bottom of the page).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If an application
                        needs one or more of these methods, such as REST Web Services (which may require PUT or DELETE),
                        it is important to check their usage is properly limited to trusted users and safe conditions.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Ensure
                        the application accepts only the HTTP requests GET and POST. The HTTP requests TRACE, PUT and
                        DELETE are blocked.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP test HTTP methods" url="https://github.com/ManhNho/OWASP-Testing-Guide-v5/blob/master/document/4%20Web%20Application%20Security%20Testing/4.3%20Configuration%20and%20Deployment%20Management%20Testing/4.3.6%20Test%20HTTP%20Methods%20(OTG-CONFIG-006).md"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application only accepts the request with the following HTTP
                            methods: GET and POST.&lt;/li&gt;
                            &lt;li&gt;Check that the application rejects and blocks the following requests with the HTTP
                            methods: TRACE, PUT and DELETE.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.387">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SAME-ENCODING-STYLE" name="Ensure that the client-side and the server-side are using the same encoding style" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the client-side and the server-side are using the same encoding style.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the server-side and the client-side are using the same encoding style.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.938">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SEC-DEPLOY" name="Ensure the build pipeline contains a build step to automatically build and verify the secure deployment of the application" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the build pipeline contains a build step to automatically build and verify the
                        secure deployment of the application, particularly if the application infrastructure is software
                        defined, such as cloud environment build scripts.</desc>
          <implementations/>
          <references>
            <reference name="Secure development and deployment guidance" url="https://www.ncsc.gov.uk/collection/developers-collection?curPage=/collection/developers-collection/principles/secure-the-build-and-deployment-pipeline"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Understanding the deployed configuration of the server hosting the web application is almost
                            as important as the application security testing itself. After all, an application chain is
                            only as strong as its weakest link. Application platforms are wide and varied, but some key
                            platform configuration errors can compromise the application in the same way an unsecured
                            application can compromise the server.
                            &lt;br /&gt;
                            &lt;br /&gt;In order to evaluate the readiness of the application platform, testing for
                            configuration management includes the following sections:
                            &lt;br /&gt;
                            &lt;br /&gt;4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
                            &lt;br /&gt;4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
                            &lt;br /&gt;4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
                            &lt;br /&gt;4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information
                            (OTG-CONFIG-004)
                            &lt;br /&gt;4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
                            &lt;br /&gt;4.3.6 Test HTTP Methods (OTG-CONFIG-006)
                            &lt;br /&gt;4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
                            &lt;br /&gt;4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
                            &lt;br /&gt;4.3.9 Test File Permission (OTG-CONFIG-009)
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.387">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="configuration-integrity" name="Ensure the integrity of all security-relevant configurations to detect tampering" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Web server and application server configurations play a key role in the security of a web
                        application. These servers are responsible for serving content and invoking applications that
                        generate content. In addition, many application servers provide a number of services that web
                        applications can use, including data storage, directory services, mail, messaging, and more.
                        Failure to manage the proper configuration of your servers can lead to a wide variety of
                        security problems.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Authorized administrators need to ensure the integrity of all security-relevant configurations
                        to detect tampering.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="14.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Understanding the deployed configuration of the server hosting the web application is almost
                            as important as the application security testing itself. After all, an application chain is
                            only as strong as its weakest link. Application platforms are wide and varied, but some key
                            platform configuration errors can compromise the application in the same way an unsecured
                            application can compromise the server.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            In order to evaluate the readiness of the application platform, testing for configuration
                            management includes the following sections:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.6 Test HTTP Methods (OTG-CONFIG-006)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.9 Test File Permission (OTG-CONFIG-009)&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.941">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOGS-INTEGRITY" name="Ensure the integrity of the logging system" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure Log integrity for the application generated logs, such as storing logs on write-once
                        media, forwarding a copy of the logs to a centralized SIEM or generating message digests for
                        each log file.</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-04 Audit Storage Capacity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/173-08_02_AU-04"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(c)(1)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SA-18" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the logs integrity is controlled by making daily backups or leveraging external
                            tools for log monitoring.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.364">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ENV-USE" name="Ensure there are no environmental security weaknesses" issueId="" issueLink="" platform="" cost="1" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Application security can be undermined by misconfiguration of the underlying server or
                        development environment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that vendor and best-practice guidelines have been applied, in particular affecting areas
                        such as:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographic strength of elements such as session tokens, GUIDs, and protection of
                        data in transit and at rest.&lt;/li&gt;
                        &lt;li&gt;Removal of debugging and compiler options and artifacts used during development.&lt;/li&gt;
                        &lt;li&gt;Configuration of error trapping and use of generic error messages and pages (e.g.
                        stack traces should not be returned to users).&lt;/li&gt;
                        &lt;li&gt;Appropriate access controls over software components, variables (e.g. EJBs and
                        methods).&lt;/li&gt;
                        &lt;li&gt;Insecure or inappropriate storage of data in configuration files or other data
                        structures (e.g. passwords in configuration files).&lt;/li&gt;
                        &lt;li&gt;Use of compilation/build features or security enhancements provided by the IDE&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Vulnerable Components" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/vulnerable-components.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A06:2021-Vulnerable and Outdated Components" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A6:2017-Security Misconfiguration" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A9:2017-Using Components with Known Vulnerabilities" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;figure class="table"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;Identify
                            the areas of the application that could potentially be affected by the following:&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared
                            buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of
                            two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Verify
                            they are correctly implemented.&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.387">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from un-trusted data" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection,
                        is directly written to a log file, then this data could contain newline or other meta-characters
                        that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should
                        first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.364">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="harden-http-headers" name="Harden HTTP Headers" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP headers are a fundamental part of website security.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The
                        Referrer-Policy HTTP header controls how much referrer information (sent via the Referrer
                        header) should be included with requests. This security header was designed to prevent
                        cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;The Origin request header indicates where a
                        fetch originates from. It doesn't include any path information, but only the server name. It is
                        sent with CORS requests, as well as with POST requests. It is similar to the Referer header,
                        but, unlike this header, it doesn't disclose the whole path.&lt;/li&gt;&lt;li&gt;The
                        Content-Disposition response header tells the browser to download a file rather than displaying
                        it in the browser window.&lt;/li&gt;&lt;li&gt;If a response states that it contains HTML content
                        but does not specify a character set, then the browser may analyze the HTML and attempt to
                        determine which character set it appears to be using. Even if the majority of the HTML actually
                        employs a standard character set such as UTF-8, the presence of non-standard characters anywhere
                        in the response may cause the browser to interpret the content using a different character set.
                        This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which
                        non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use
                        a suitable "Referrer-Policy" header, such as "no-referrer" or "same-origin".&lt;/li&gt;&lt;li&gt;Don't
                        use the Origin header for authentication or access control decisions, as the Origin header can
                        easily be changed by an attacker.&lt;/li&gt;&lt;li&gt;Use the Content-Disposition response
                        header for file downloading in all API responses with the following directives:
                        Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the
                        content type).&lt;/li&gt;&lt;li&gt;Use a content-type header specifying a safe character set
                        (e.g., UTF-8, ISO 8859-1) in every HTTP response.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTML does not specify charset" url="https://portswigger.net/kb/issues/00800200_html-does-not-specify-charset"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="Origin Header" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"/>
            <reference name="Referrer-Policy" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"/>
            <reference name="Reflected File Download" url="https://www.owasp.org/index.php/Reflected_File_Download"/>
            <reference name="Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)" url="https://tools.ietf.org/html/rfc6266"/>
          </references>
          <standards>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;An easy way to access your HTTP security headers, as part of your response
                            headers, is to fire up Chrome DevTools. To run this click into the "Network" panel and press
                            Ctrl + R (Cmd + R) to refresh the page. Click into your domain's request and you will see a
                            section for response headers.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Check if "Referrer-Policy" header
                            exists in HTTP responses and has the right directives to prevent cross-domain Referrer
                            leakage.&lt;/li&gt;&lt;li&gt;From a penetration testing perspective you should look for
                            insecure configurations; for example, when the server returns back the Origin header in the
                            Access-Control-Allow-Origin without any additional checks AND returns
                            Access-Control-Allow-Credentials: true, which can lead to access of sensitive data. Note
                            that this configuration is very insecure, and is not acceptable in general terms, except in
                            the case of a public API that is intended to be accessible by everyone.&lt;/li&gt;&lt;li&gt;Try
                            Reflected File Download input payloads to launch commands on the client machine. Reflected
                            File Download is an attack combining URL path segments (now deprecated) with pages that
                            reflect user inputs in the response. Generally web services vulnerable to JSONP Injection
                            are leveraged to deliver malware to end users.&lt;/li&gt;&lt;li&gt;Character encoding has a
                            popular misuse; namely, being used for encoding malicious injection strings in a way that
                            obfuscates them. Try different character encoding schemes (like UTF-7) to bypass input
                            validation filters, or take advantage of particular ways in which browsers render encoded
                            text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.387">
              <output/>
            </source>
            <references>
              <reference name="A new security header: Referrer Policy" url="https://scotthelme.co.uk/a-new-security-header-referrer-policy/"/>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
              <reference name="Reflected File Download - A New Web Attack Vector" url="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/reflected-file-download-a-new-web-attack-vector/"/>
              <reference name="Test Cross Origin Resource Sharing (OTG-CLIENT-007)" url="https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-dns-domains" name="Identify the DNS domains periodically to update the information about them" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should have a protection from sub-domain takeovers if the application
                        relies upon DNS entries or DNS sub-domains, such as expired domain names, out of date DNS
                        pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs,
                        serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar.
                        Protections can include ensuring that DNS names used by applications are regularly checked for
                        expiry or change.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify the forward and reverse DNS lookups.&lt;/li&gt;&lt;li&gt;Verify
                            the connection to the DNS was authenticated successfully by username/password or certificate
                            and that they are active.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:22.269">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-L7" name="Identity which functions of the application are resource consuming and protect and monitor them (optionally set up a WAF)" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DoS attacks against the application layer also aim to use up the memory and process
                        time that the application requires to function properly while minimizing the resources employed
                        by the attacker by using vulnerabilities or flaws in the application. The main characteristics
                        of this type of attack are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The requirement for less bandwidth
                        compared to other methods such as SYN Flood attacks, and as such, the infrastructure necessary
                        to launch a successful attack is usually minor.&lt;/li&gt;&lt;li&gt;Greater difficulty in
                        distinguishing between malicious and legitimate traffic. Many of the most common protection
                        measures or systems focus on the network or transport layer, and as such, they would not be
                        efficient when the target of the attack is the application layer. It is even difficult for the
                        defense systems that monitor this layer to distinguish between malicious and legitimate traffic.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As
                        we have indicated, this type of attack is very specific, and generally require fewer resources
                        from the attacker to achieve devastating effects in the systems attacked. However, this type of
                        attack requires more time to analyze the targeted system in order to discover vulnerabilities or
                        bottlenecks that can be exploited during the attack.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Analyze
                        weaknesses or bottlenecks in the design, the implementation, or even the functioning of the
                        application to identify "heavy" requests that are resource consuming. For example, if the web
                        application has a search engine, an attack could be to carry out searches that require a high
                        level of resources to generate a bottleneck and eventually disable the service.&lt;/li&gt;&lt;li&gt;Implement
                        a challenge to the device making the network request in order to test whether or not it is a
                        bot. This is done through a test much like the CAPTCHA test commonly found when creating an
                        account online. By giving a requirement such as a JavaScript computational challenge, many
                        attacks can be mitigated.&lt;/li&gt;&lt;li&gt;Use of a web application firewall, managing and
                        filtering traffic through an IP reputation database, and through on-the-fly network analysis by
                        engineers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Layer 7 DDoS Attacks" url="https://owasp.org/www-pdf-archive/Layer_7_DDOS.pdf"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 7 DDoS PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space. One well-known
                            application attack is Slowloris, which targets web servers. Verify that the implemented
                            Layer 7 protection mechanisms (Javascript challenges, CAPTCHA tests, WAF) are effective.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="implement-monitoring-unusual-activities" name="Implement and monitor Business Logic Limits for actions and transactions" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement in the application the appropriate limits for specific business actions and
                        transactions, to enforce the correct usage of the application for each user ensuring they cannot
                        bypass important steps in the flow. This business logic limits provide us protection against
                        likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/p&gt;&lt;p&gt;All
                        business actions or transactions that exceed the established limits, should be recorded in the
                        logs and monitored as unusual events.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A04:2021-Insecure Design" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Verify the application has appropriate limits for specific business actions or
                            transactions which are correctly enforced on a per user basis.&lt;/li&gt;
                            &lt;li&gt;Verify the application has business logic limits or validation to protect against
                            likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/li&gt;
                            &lt;li&gt;Verify the application monitors for unusual events or activity from a business
                            logic perspective.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.906">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests
                        to enumerate or attempt to exploit flaws in an application, for example, sending common
                        passwords to multiple target accounts within an application. By profiling normal traffic
                        volumes, and applying rate limiting, the application can be built to actively mitigate such
                        attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection
                        rate-limiting based on the source IP address can be used to restrict attacks against the
                        authentication or registration systems. Multiple failures (or attempts) from a single IP should
                        result in temporarily blocking or dropping traffic from the source. Note however that some
                        corporate and ISP environments may place multiple valid and discrete clients behind the same IP
                        address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other
                        IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class
                        of attack, Indicators of Compromise should be monitored (for example a higher rate of login
                        failures than usual), and appropriate actions taken. For example, when the application detects
                        active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could
                        be used to block attacks sharing a signature from pattern matching or deep packet inspection
                        (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application
                        could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is
                        detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement
                        the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application
                        detects a set number of failure login attempts, the account shall be locked for a certain time
                        period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When
                        the application detects an account is locked more times than usual, this account should be
                        disabled (no more than 100 failure attempts). A disabled account should only be restored by an
                        administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the
                        application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting
                        authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a
                        white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If
                        the user successfully authenticates, the previous failed attempts shall be reset for that user
                        from the same IP address.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;THC-Hydra&lt;/a&gt;,
                            &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;OWASP ZAP&lt;/a&gt;
                            or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite &lt;/a&gt;to simulate brute
                            force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform
                            a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the
                            function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a
                            log alerting function for an unusual amount of failed login attempts, even if they
                            originated from different sources.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.906">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="error-handling-centralized" name="Implement centralized mechanisms to manage errors and exceptions" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create a functionality or a mechanism to manage exceptions in a centralized manner
                        and avoid including duplicated try/catch blocks in the code.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;A
                        well-planned error/exception handling strategy is important for three reasons:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Good
                        error handling does not give an attacker any information which can be leveraged for attacking
                        the application.&lt;/li&gt;&lt;li&gt;A proper centralized error strategy is easier to maintain
                        and reduces the chances of any uncaught errors "Bubbling up" to the front-end of an application.&lt;/li&gt;&lt;li&gt;Information
                        leakages can lead to social engineering exploits.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Building
                        an infrastructure for consistent error reporting proves more difficult than error handling. All
                        exceptions should be caught as events with the severity of the error. These events will be
                        logged.&lt;/p&gt;&lt;p&gt;The centralized system should reorganize all events and throw the
                        corresponding error or system message in a consistent manner, depending on the severity of the
                        error.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Code Review: Error Handling" url="https://www.owasp.org/index.php/Codereview-Error-Handling"/>
            <reference name="OWASP Error Handling" url="https://www.owasp.org/index.php/Error_Handling"/>
            <reference name="OWASP Proactive Controls [C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify that a centralized system is in place to catch errors and
                            exceptions, and these errors are shown in a correct manner.&lt;/li&gt;&lt;li&gt;Verify all
                            errors thrown from the centralized system are displayed in a correct fashion.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.906">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations.
                        However, proper logging practices can provide the crucial forensics needed to investigate after
                        a breach, and perhaps more importantly, to detect security issues as they happen. Most
                        developers are already familiar with logging for debugging and diagnostic purposes, so it should
                        be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Log
                        all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Logs
                        should be written using a format suited to be consumed by a log management solution, and include
                        enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as
                        sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;li&gt;Configure
                        a monitoring system to continuously monitor the infrastructure, network, and the API
                        functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system
                        to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure
                        custom dashboards and alerts, making it possible to detect and respond to suspicious activity as
                        early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to
                            confirm that the organization's logging policies, processes, and procedures are being
                            followed properly both at the infrastructure level and the system level throughout the
                            organization.&amp;nbsp; Log management audits can identify deficiencies in policies,
                            procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most
                            common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors
                            or others performing testing and validation can review the logging configuration and
                            settings, as well as the system logs, infrastructure logs, and archived logs, for a
                            representative sampling of systems and infrastructure servers to ensure that they comply
                            with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under
                            the direction of auditors) or others performing testing and validation can create security
                            events on a representative sampling of systems through vulnerability scanning, penetration
                            testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the
                            log data those activities should generate exist and are handled according to the
                            organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.364">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-TLS" name="Inspect the TLS/SSL traffic on a capable device before sending the connection down on your infrastructure" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;TLS adds another vector for computational attacks since a client can easily (with
                        little computational effort) force the server to expend relatively large computational work. If
                        a web application is delivered over TLS, an attacker can also choose to attack the TLS
                        negotiation process. TLS is computationally expensive so an attacker can reduce a server's
                        availability by sending unintelligible data. In a variation of this attack, an attacker
                        completes the TLS handshake but perpetually renegotiates the encryption method. Or an attacker
                        can attempt to exhaust server resources by opening and closing many TLS sessions.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;To
                        mitigate consider options like offloading the SSL from the origin infrastructure and inspecting
                        the application traffic for signs of attack traffic or violations of policy at an application
                        delivery platform (ADP).&lt;br&gt;A good ADP will also ensure that your traffic is then
                        re-encrypted and forwarded back to the origin infrastructure with unencrypted content only ever
                        residing in protected memory on a secure bastion host.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 6 DDoS attack PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the
                            implemented availability protection is effective. One useful tool to execute this kind of
                            test is &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;. It covers all the required
                            tests for TLS &amp;amp; SSL assessments and is regularly updated.&lt;/p&gt;&lt;p&gt;There
                            are many testing options that can be used with &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;
                            and the options you should use will depend greatly on your testing requirements. Below are
                            some useful examples, for an overview of &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;
                            command-line options. run ./testssl.sh with no other options.&lt;/p&gt;&lt;p&gt;Test
                            Everything on a Single Host and Output to console&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S
                            -P -c -H -U TARGET-HOST&lt;/p&gt;&lt;p&gt;Test Everything on a Single Host and Output to
                            HTML&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST | aha &amp;gt;
                            OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Test all hosts on a Subnet and Output to HTML&lt;br&gt;./testssl.sh
                            -e -E -f -p -y -Y -S -P -c -H -U 192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Same
                            as above, but only enumerate each servers supported ciphers:&lt;br&gt;./testssl.sh -E
                            192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.760">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" name="Limit the number of accounts with privileges allowing modification and/or deletion of audit logs files" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Limit the number of accounts with privileges to modify and/or delete audit logs
                        files.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the number of accounts with privileges to modify the logs is limited and
                            controlled.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.364">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-VAL-LOG" name="Log and reject all data validation failures" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Data validation failures, together with access control violations, are symptomatic of malicious
                        activity where an attacker is attempting to subvert the protections in place. It is therefore
                        likely that unexpected input detected by the application relates to an attack. Rejecting and
                        logging such activity, and ideally terminating the session, increases the likelihood of
                        detecting and inhibiting structured attacks against the application.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Log all validation failures when rejecting requests.&lt;/li&gt;
                        &lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against
                        the logs and subsequent access to them.&lt;/li&gt;
                        &lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;
                        &lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker
                        enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.5.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may
                            indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm
                            security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged
                            relating to the event must be carefully sanitized and encoded; by definition the data could
                            be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify
                            actual logged data.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.364">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CDS-USER-TRACK" name="Log details of user actions within the system" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To maintain proper accountability, logs should be maintained with sufficient
                        information to track user actions within the system. These logs should be forensically sound,
                        non-repudiable, and contain comprehensive details about activity. While the exact data for an
                        event may vary, the following should be captured at a minimum:&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Timestamps against a proven external source (e.g. an NTP server).&lt;/li&gt;
                        &lt;li&gt;Origin (with this field we mark if the logs are provided by a trusted or untrusted
                        source).&lt;/li&gt;
                        &lt;li&gt;Event, status, and/or&amp;nbsp;error codes (with sensitive data masked as appropriate
                        or not introduced in logs).&lt;/li&gt;
                        &lt;li&gt;Service, command, application or function name and details.&lt;/li&gt;
                        &lt;li&gt;User or system account associated with an event.&lt;/li&gt;
                        &lt;li&gt;Devices used (e.g. source and destination IPs, terminal session ID, web browser,
                        etc.).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        Source:&amp;nbsp;&amp;nbsp;
                        &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley audit logging" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA AU-10 Non-Repudiation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/179-08_02_AU-10"/>
            <reference name="OSA CA-07 Continuous Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/166-08_02_CA-07"/>
            <reference name="OSA IR-05 Incident Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/139-08_02_IR-05"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(a)(1)(A)" supportedStandardRef="hipaa-required"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="IR-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-4" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Perform several different actions on the service.&lt;/li&gt;&lt;li&gt;Inspect
                            the log files to see if the format and content complies with the company policy.&lt;/li&gt;&lt;li&gt;If
                            there is no company policy, check that at least the following data is included: timestamp
                            event, status, error codes, service/command/application username or system account
                            associated with an eventDevice used (e.g. source and destination IPs, terminal session ID,
                            web browser, etc).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Source:&amp;nbsp;&lt;a
                            href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;
                            https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.364">
              <output/>
            </source>
            <references>
              <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-LOGGING" name="Logging the data access and the modification of personal data" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Make sure that every access and modification of personal data is logged (The log should be
                        precise enough to know who changed what and when). This includes data access from the
                        application as well as data access from privileged accounts, such as database admins. In
                        practice, this means logging both on application, middleware and operating system (OS) level.</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Test accessing and modifying user personal data as legitimate users, employees,
                            administrators and malicious actors.&lt;/li&gt;
                            &lt;li&gt;Verify appropriate logging of all the above activities are successful and
                            sufficiently detailed.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.364">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOG-TLS-FAILURES" name="Log the backend TLS connection failures" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Implement functionality to record backend TLS connection failures and include these in the
                        logs.</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that backend TLS connection failures are recorded in the logs.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.364">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-541" name="Prevent unauthorised access to source code through the service" issueId="" issueLink="" platform="" cost="0" risk="52" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to the source-code for the application can aid an attacker in determining bugs
                        or vulnerabilities in the code or logic. For closed-source projects it is therefore important to
                        control and restrict access to the source. Application services may unexpectedly expose code,
                        for example a service providing files to a user could be manipulated to access source code if
                        implemented insecurely.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure source
                        code is not inadvertently disclosed through misconfiguration or vulnerabilities in the service.&lt;/li&gt;&lt;li&gt;Check
                        configuration files are not downloadable directly from the service, and cannot be read and
                        viewed through the service itself.&lt;/li&gt;&lt;li&gt;Ensure backups, operating systems, and
                        version control artifacts do not expose code.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check the source code of the application is never returned in cases
                            in which it cannot be interpreted.&lt;/li&gt;&lt;li&gt;Web Servers have a concept called
                            handlers which manage the source code interpretation before sending it to the client. If
                            those handlers are not properly configured, the plain source code could be sent as a
                            default.&lt;/li&gt;&lt;li&gt;Check the handlers are correctly configured to support the
                            types of languages your server uses.&lt;/li&gt;&lt;li&gt;Check also that the source code is
                            not leaked in case of failure.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious
                        web site, email, blog, instant message, or program causes a user's web browser to perform an
                        unwanted action on a trusted site when the user is authenticated. A CSRF attack works because
                        browser requests automatically include any credentials associated with the site, such as the
                        user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the
                        site cannot distinguish between the forged or legitimate request sent by the victim. A
                        token/identifier that is not accessible to the attacker is needed to mitigate this and would not
                        be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring
                        re-authentication of sensitive functions is an effective way to protect your application against
                        a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies
                        from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF
                        nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key'
                        (which is valid only once) that must be validated in any sensitive form submission. For maximum
                        security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple
                        or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on
                        the server-side is problematic, an alternative defense is to use the double-submit cookie
                        technique. This technique is easy to implement and is stateless. In this technique, a random
                        value is sent in both a cookie and as a request parameter, with the server verifying if the
                        cookie value and request value match. When a user visits (even before authenticating to prevent
                        login CSRF), the site should generate a (cryptographically strong) pseudo random value and set
                        it as a cookie on the user's machine separate from the session identifier. The site then
                        requires that every transaction request include this pseudo-random value as a hidden form value
                        (or other request parameter/header). If both of them match on the server-side, the server
                        accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN
                        request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely
                        on examining an HTTP request header value. Firstly, determining the origin the request is coming
                        from (source origin). This can be achieved via Origin and/or referer headers. Secondly,
                        determining the origin the request is going to (target origin). On the server-side verify if
                        both of these match. If they do, we accept the request as legitimate (meaning it's the same
                        origin request) and if they don't, discard the request (meaning that the request originated from
                        a cross-domain). Reliability of these headers comes from the fact they cannot be altered
                        programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list
                        (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-30" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.-
                            Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser
                            request and server response, and verify a unique strong token is being sent and verified
                            with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way
                            resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.-
                            Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change
                            or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt
                            to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a
                            request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser
                            requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions
                            such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.387">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-ICMP-Flooding" name="Rate-limit ICMP traffic and prevent the attack from impacting bandwidth and firewall performance" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Common attacks are ICMP Flooding, Ping flood and Ping of death - Layer 3
                        infrastructure DDoS attack methods that use ICMP messages to overload the targeted network's
                        bandwidth. These kind of attacks can be prevented from taking place by rate-limiting ICMP
                        traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;For
                        example, iptables can be used on Linux systems as follows:&lt;/p&gt;&lt;p&gt;To protect against
                        ping flood attacks the 'limit' module of iptables can be used:&lt;/p&gt;&lt;p&gt;-A INPUT -p
                        icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT -A INPUT -p
                        icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        INPUT -p icmp --icmp-type echo-request -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;Note that the above
                        lines will protect only against ping request attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;To protect
                        against generic ICMP flood attacks we can remove the constraint '--icmp-type echo-request'. This
                        is only good enough to protect against PC to PC attacks. If flood is done using multiple sources
                        or using hardware then this configuration may not be enough. The configuration will also cause
                        denial of service to other users when under attack even from single source, as we are limiting
                        based on protocol without considering the source address of the packet.&lt;/p&gt;&lt;p&gt;Iptables
                        can also be used to prevent abuse of network resources by rate limiting them:&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 4/second --limit-burst 12 -j ACCEPT&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 1/minute --limit-burst 1 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        OUTPUT -p tcp -m tcp --dport 80 -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;In the above
                        example we are limiting outgoing connections to port 80. This is useful when we can't completely
                        block outgoing connections but we do not want it to become channel from where people start
                        browsing net or downloading. The limit module can also be used in rate limiting incoming traffic
                        for performance reasons.&lt;/p&gt;&lt;p&gt;Disabling a ping flood is most easily accomplished by
                        disabling the ICMP functionality of the targeted router, computer or other device. A network
                        administrator can access the administrative interface of the device and disable its ability to
                        send and receive any requests using the ICMP, effectively eliminating both the processing of the
                        request and the Echo Reply. The consequence of this is that all network activities that involve
                        ICMP are disabled, making the device unresponsive to ping requests, traceroute requests, and
                        other network activities.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Ping (ICMP) Flood DDoS Attack" url="https://www.cloudflare.com/learning/ddos/ping-icmp-flood-ddos-attack/"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="Rate limiting using iptables" url="https://www.sbarjatiya.com/notes_wiki/index.php/Rate_limiting_using_iptables"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the
                            implemented availability protection is effective. One useful tool to execute this kind of
                            test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The
                            interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP
                            echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the
                            ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For
                            example, you can execute a Smurf attack (denial-of-service attack that floods a target
                            system via spoofed broadcast ping messages) using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3
                            -1 - flood -a VICTIM_IP BROADCAST_ADDRESS&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.760">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-18.8" name="Reject requests containing unexpected or missing content type headers" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Reject requests containing unexpected or missing content type headers with HTTP response status
                        &amp;quot;406 Unacceptable&amp;quot; or &amp;quot;415 Unsupported Media Type&amp;quot;.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Validate request content-type" url="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Validate_request_content_types"/>
            <reference name="Spring docs: CSRF" url="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html"/>
          </references>
          <standards>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that HTTP requests with non-valid Content-type are rejected.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.387">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-SESS-REAUTH" name="Require additional authentication for sensitive operations / high value transactions" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Having gained access to an account, for example through session hijacking or
                        cross-site scripting, an attack may compromise data and functionality accessible to the victim.
                        This may include elevating privileges or accessing sensitive data and functionality, such as
                        changing passwords, creating accounts, or transferring funds.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;These
                        critical functions and sensitive data should be further protected from attack using a risk-based
                        authentication model requiring re-authentication via multi-factor authentication, or use of a
                        token to sign transactions or operations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement
                        re-authentication on key functions (such as requiring the old password before setting a new
                        one).&lt;/li&gt;&lt;li&gt;Use secondary authentication such as a transaction PIN to allow
                        financial transfers.&lt;/li&gt;&lt;li&gt;Critical administrative functionality should require
                        multi-factor authentication (such as a hard or soft token).&lt;/li&gt;&lt;li&gt;Consider use of
                        signing technologies or tokens that enable the server-side to verify the authenticity of a
                        request and mitigate Man in the Middle (MiTM) or Man in the Browser (MiTB) attacks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
          </references>
          <standards>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical functionalities of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the risk appetite for those functionalities.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Validate that re-authentication is required for those functions if deemed
                            necessary.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.387">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC-006" name="Restrict actions of users that follow unusual patterns" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict actions that users can do outside of the approved/required business process
                        flow.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This is important because without
                        this safeguard in place attackers may be able to bypass or circumvent work-flows and checks
                        allowing them to prematurely enter or skip required sections of the application potentially
                        allowing actions/transactions to be completed without successfully completing the entire
                        business process, leaving the system with incomplete back-end tracking information.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing for the circumvention of work flows" url="https://www.owasp.org/index.php/Testing_for_the_Circumvention_of_Work_Flows_(OTG-BUSLOGIC-006)"/>
          </references>
          <standards>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application only processes business logic flows in sequential step
                            order and in realistic human time.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Use periodically a static code analysis tool to analyze the code and detect potentially
                        malicious code, such as time functions, unsafe file operations and networks connections. With
                        the scanning of static code, we ensure the integrity of the application.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Verify that a code analysis tool is in use and it is configured to detect potentially
                            malicious code, such as time functions, unsafe file operations and network connections.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:22.648">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-662" name="Use a synchronised time source" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to correlate logs and data from different internal and external systems, and
                        to preserve forensic quality of the logs, it is important a unified and trusted synchronized
                        time source is used throughout the environment.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Servers
                        should synchronize to an internal or external NTP server&lt;/li&gt;&lt;li&gt;The centralized
                        source should in turn use (or be) a trusted central time source.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This
                        control is critical in identifying application events (including attacks) through logging, and
                        in conducting post-event analysis, and in particular to track the entire user (or attacker)
                        journey through the system should it be compromised.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;It
                        is good practice to use the concept of Indicators of Compromise (IoC) which should be leveraged
                        to detect possible situations in which the system has been compromised and give an appropriate
                        response.&amp;nbsp; IoCs are often tracked through logs, and accurate time is essential.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-08 Time Stamps" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/177-08_02_AU-08"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA AU-11 Audit Record Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/180-08_02_AU-11"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check that mechanisms are installed to keep the host's clock synchronized (i.e.
                            ntpd in Linux based systems).&lt;/li&gt;
                            &lt;li&gt;Inspect the logs created by the app and check they have the correct timestamp.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.364">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" issueId="" issueLink="" platform="" cost="2" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential
                        risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or
                        auto-binding when accepting values from an untrusted source and mapping them to trusted server
                        side values increases the risk of tainted data being used unsafely.&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt;
                        &lt;li&gt;Use available features of the language or framework that allow specification of white
                        lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible
                        (white list) or attr_protected (black list) macros in each class that may be used in mass
                        assignment.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="Spring.java">
              <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
            <reference name="OWASP Juice Shop: XSS" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the framework the component is using.&lt;/li&gt;&lt;li&gt;Check
                            if this particular framework provides automatic binding of variables.&lt;/li&gt;&lt;li&gt;Verify
                            if it is disabled or restricted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.941">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-BH" name="Use blackholing to mitigate L4 DDoS attacks" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DDoS attack blocking, commonly referred to as blackholing, is a method typically used
                        by ISPs to stop a DDoS attack on one of its customers. This approach to block DDoS attacks makes
                        the site in question completely inaccessible to all traffic, both malicious attack traffic and
                        legitimate user traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Blackholing is typically deployed by the
                        ISP to protect other customers on its network from the adverse effects of DDoS attacks such as
                        slow network performance and disrupted service. Common attacks are SYN flood and Smurf attack.
                        For Smurf attack a simple solution is to disable IP broadcasting addresses at each network
                        router and firewall.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Older routers are likely to enable broadcasting
                        by default, while newer routers will likely already have it disabled.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;Disable
                        broadcasting by default on old routers.&lt;/p&gt;&lt;p&gt;To implement RTBH (Remote Triggered
                        Black Hole) Network Operator sets up a null route for the 192.0.2.1 address on all the backbone
                        routers which participate in BGP:&lt;/p&gt;&lt;p&gt;ip route 192.0.2.1 255.255.255.255 null 0
                        254&lt;/p&gt;&lt;p&gt;192.0.2.1 is part of 192.0.2.0/24, the TEST-NET, one of the reserved IPv4
                        address blocks.&lt;/p&gt;&lt;p&gt;Create a route-map to catch routes which need to be blackholed&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static
                        routes can be tagged in Cisco IOS - we will tag routes to be blackholed with the value of 66&lt;/li&gt;&lt;li&gt;Set
                        origin to be iBGP&lt;/li&gt;&lt;li&gt;Set local-preference to be 150&lt;ul&gt;&lt;li&gt;higher
                        than any other local-preference set in the backbone&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set
                        community to be no-export and internal marker community (ASN:666)&amp;nbsp;&lt;ul&gt;&lt;li&gt;Don't
                        want prefix to leak outside the AS&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set next-hop to
                        192.0.2.1 (IPv4) or 100::1 (IPv6)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Then introduce the
                        route-map into the BGP configuration.&lt;/p&gt;&lt;p&gt;To implement the trigger, simply null
                        route whatever address or address block needs to be blackholed:&lt;/p&gt;&lt;p&gt;ip route
                        50.62.124.1 255.255.255.255 null0 tag 66&amp;nbsp;&lt;/p&gt;&lt;p&gt;And this ensures that (for
                        example) 50.62.124.1/32 is announced to the entire backbone with next-hop 192.0.2.1 set.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="RFC 4987 - TCP SYN Flooding Attacks and Common Mitigations" url="https://tools.ietf.org/html/rfc4987"/>
            <reference name="RFC 5635 - Remote Triggered Black Hole Filtering               with Unicast Reverse Path Forwarding (uRPF)" url="https://tools.ietf.org/html/rfc5635"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the
                            implemented availability protection is effective. One useful tool to execute this kind of
                            test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The
                            interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP
                            echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the
                            ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For
                            example, you can simulate a TCP SYN DDoS Attack using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3
                            VICTIM_IP -flood -rand-source -destport 80 -syn -d 120 -w 64&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.760">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications
                        between RA (Registration Authority) and CSP (Credential Service Provider), should be
                        authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS
                        connection, using approved cryptographic algorithms.&lt;/p&gt;
                        &lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
                        &lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity
                        that issues security tokens or electronic credentials to subscribers. A CSP forms part of an
                        authentication system, most typically identified as a separate entity in a Federated
                        authentication system. A CSP may be an independent third party, or may issue credentials for its
                        own use. Credential Service Provider is typically also the Identity Provider (IDP). An example
                        of a CSP would be an online site whose primary purpose may be, for example, internet banking -
                        but whose users may be subsequently authenticated to other sites, applications or services
                        without further action on their part.&lt;/p&gt;
                        &lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the
                        identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be
                        independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
                        &lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying
                        the claimant's possession and control of one or two authenticators, using an authentication
                        protocol.&lt;/p&gt;
                        &lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's
                        authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically
                        to process a transaction or grant access to information or a system.&lt;/p&gt;
                        &lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and
                        identity proofing.&lt;/p&gt;
                        &lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more
                        authentication protocols.&lt;/p&gt;
                        &lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator
                        from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example
                            with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.906">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="same-encoding-parsers" name="Use the same encodings and parsers in all application components" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Errors may occur when converting between differently coded character data.&amp;nbsp; There are
                        two general types of encoding errors. If the byte sequence is not valid for the specified
                        charset then the input is considered malformed. If the byte sequence cannot be mapped to an
                        equivalent character sequence then an unmappable character has been encountered.
                        &lt;/div&gt;
                        &lt;div&gt;
                        Special care should be taken when decoding untrusted byte data to ensure that malformed input or
                        unmappable character errors do not result in defects and vulnerabilities.&amp;nbsp; Encoding
                        errors can also occur, for example, encoding a cryptographic key containing malformed input for
                        transmission will result in an error. Encoding and decoding errors typically result in data
                        corruption.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;
                        &lt;/div&gt;Use the same encodings and parsers in all application components to avoid parsing
                        attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI
                        attacks.</desc>
          <implementations/>
          <references>
            <reference name="STR51-J. Use the charset encoder and decoder classes when more control over the encoding process is required" url="https://wiki.sei.cmu.edu/confluence/display/java/STR51-J.+Use+the+charset+encoder+and+decoder+classes+when+more+control+over+the+encoding+process+is+required"/>
          </references>
          <standards>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all application components are using the same encoding style.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.941">
              <output/>
            </source>
            <references>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of
                        the source or transport method. For example, while hidden form fields, cookies or other headers
                        may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated
                        forms. These can be modified by the user on the client-side in memory, or in transit on the
                        network. Similarly, data passed from binary or compiled components can be modified in situ or in
                        transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit
                        between the two ends of the encrypted tunnel (one of which is typically controlled by the
                        client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all
                        data from the client side must be subjected to strict validation, sanitization, and encoding
                        against expected syntactic and semantic criteria.
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax
                        (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a
                        specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be
                        syntactically valid because it only contains alphanumeric characters, but it is not valid if the
                        input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the
                        strict criteria for each input are accepted, and reject, transform, or encapsulate any
                        non-compliant data.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific
                        malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive
                        and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to
                        obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be
                        useful for detecting and logging potential attacks, or determining which inputs are so malformed
                        that they should be rejected outright.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Validate all data received from the client, including values such as &lt;span
                        class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the
                        server side, X- headers, and other platform specific data objects passed between the client and
                        server.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;
                            &lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Serialized Java objects&lt;/li&gt;
                            &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;
                            &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined
                            whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;To test data validation:&amp;nbsp;
                            &lt;p&gt;&lt;/p&gt;
                            &lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it
                            (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing:
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Using a browser extension which allows you to modify the request and responses on
                            the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e.
                            &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp,
                            Fiddler, etc.).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.939">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-147" name="Validate input parameters to prevent HTTP Parameter Pollution" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>All data received from external sources should be considered tainted and a potential risk,
                        regardless of the source or transport method. HTTP Parameter Pollution attacks result when
                        parameters are added or inserted into requests, and are inappropriately or unsafely handled by
                        the server. For example, injection of parameters into strings or cookies sent to the application
                        can result in the variables being interpreted out of sequence, exploiting flaws in the business
                        logic and flow.
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;p&gt;For example, there was a bug in the Blogger platform which illustrates this
                        vulnerability. The bug allowed malicious users to take ownership of the victim's blog by using
                        the following HTTP request:&lt;/p&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;&lt;code&gt;POST /add-authors.do HTTP/1.1&lt;/code&gt;&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;&lt;code&gt;security_token=attackertoken&amp;amp;&lt;b&gt;blogID=attackerblogidvalue&lt;/b&gt;&amp;amp;&lt;b&gt;blogID=victimblogidvalue&lt;/b&gt;&amp;amp;authorsList=goldshlager19test%40gmail.com(attacker
                        email)&amp;amp;ok=Invite&lt;/code&gt;&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;p&gt;The flaw resided in the authentication mechanism used by the web application, as the
                        security check was performed on the first&amp;nbsp;&lt;code&gt;blogID&lt;/code&gt;&amp;nbsp;parameter,
                        whereas the actual operation used the second occurrence.&lt;/p&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify parameters within the application used for authentication
                            decisions, or critical business logic.&lt;/li&gt;&lt;li&gt;Send specially forged requests to
                            the application in which those parameters are duplicated, or passed through other methods
                            (e.g. POST parameters in the URL as GET fields, cookies as form fields etc.)&lt;ul&gt;&lt;li&gt;Review
                            the application logic to ensure:&lt;/li&gt;&lt;li&gt;The same parameter is for all the
                            decisions.&lt;/li&gt;&lt;li&gt;Parameters received over unexpected or non compliant methods
                            result in a security exception.&lt;/li&gt;&lt;li&gt;Duplicate parameters are identified and
                            result in a security exception.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application
                            should fail-safe; i.e. unexpected or suspicious behavior should result in termination of the
                            user's session and a security event being logged.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A number of
                            tools can be used to aid in testing:&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly
                            inside your browser with the Developer Tools&lt;/li&gt;&lt;li&gt;Using a browser extension
                            which allows you to modify the request and responses on the fly (i.e. Tamper Data)&lt;/li&gt;&lt;li&gt;Using
                            a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP,
                            Burp, Fiddler, etc.)&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:26.387">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Testing for HTTP Parameter Pollution" url="https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OTG-INPVAL-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-601" name="Whitelist which URLs the application may redirect to" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should maintain a list of URLs to which it may redirect users. This
                        whitelisting can also be achieved by applying regular expressions. The application should only
                        allow redirects to trusted URLS.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-04 Information Flow Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/26-08_02_AC-04"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the points of the application in which a redirection takes
                            place. Redirections are usually indicated by the use of the "Location" HTTP header along
                            with the "3xx" code.&lt;/li&gt;&lt;li&gt;Verify if the value inside the Location header is
                            coming from user input (URL string, Cookies, HTTP headers, forms, etc.).&lt;/li&gt;&lt;li&gt;Modify
                            the input value which will be part of the Location header to redirect to domains which
                            should not be permitted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:25.941">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="availability" name="Availability" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-607" name="Attackers bring the service down by exhausting it (D)DoS" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker can bring a service down by exhausting either the network or the service
                                itself.
                                &lt;br&gt;
                                &lt;br&gt;See references for more information.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="US Cert DDOS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
              </references>
              <weaknesses>
                <weakness ref="AV-DOS-APP">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L3">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L4">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-TLS">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="CS-Default">
          <threats>
            <threat ref="7k-CWE-Environment" name="Attackers gain unauthorised access to the application through an environment flaw" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This section includes everything that is outside of the source code but is
                                still critical to the security of the product that is being created. Because the issues
                                covered by this section are not directly related to source code, we separated it from
                                the rest of the realms.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="ENV-USE" mitigation="50"/>
                    <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ENV-USE" mitigation="50"/>
                <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In applications, particularly web applications, access to functionality is
                                mitigated by the authorization framework, whose job it is to map ACLs to elements of the
                                application's functionality; particularly URL's for web-apps. In cases in which the
                                administrator failed to specify an ACL for a particular element, an attacker may be able
                                to access it with impunity. An attacker with the ability to access functionality not
                                properly constrained by ACLs can obtain sensitive information and possibly compromise
                                the entire application. Such an attacker could potentially access resources that should
                                only be available to users of a higher privilege level, or access management sections of
                                the application, or can run queries for data that he is otherwise not supposed to.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-276">
                  <countermeasures>
                    <countermeasure ref="deny-default-enf" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="deny-default-enf" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-214" name="An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker sends random, malformed, or otherwise unexpected messages to a target
                                application and observes any stack traces produced by error messages. Fuzzing techniques
                                involve sending random or malformed messages to a target and monitoring the target's
                                response. The attacker does not initially know how a target will respond to individual
                                messages but by attempting a large number of message variants they may find a variant
                                that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause
                                the targeted application to return an error including a stack trace, although fuzzing a
                                target can also sometimes cause the target to enter an unstable state, causing a crash.
                                The stack trace enumerates the chain of methods that led up to the point where the error
                                was encountered. This can not only reveal the names of the methods (some of which may
                                have known weaknesses) but possibly also the location of class files and libraries as
                                well as parameter values. In some cases, the stack trace might even disclose sensitive
                                configuration or user information.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-460">
                  <countermeasures>
                    <countermeasure ref="error-handling-centralized" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="error-handling-centralized" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment,
                                allowing developers to monitor their code regularly in order to avoid security
                                vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="hostile-subdomain-takeover" name="Attackers claim subdomains with the help of external services" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                This attack vector utilizes DNS entries pointing to Service Providers where the pointed
                                sub-domain is currently not in use. Depending on the DNS-entry configuration and which
                                Service Provider it points to, some of these services will allow unverified users to
                                claim these sub-domains as their own.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                In the not so rare case, the attacker can also "inherit" the Domain Owner's Wildcard SSL
                                used inside the Service Provider.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;div&gt;
                                &lt;b&gt;Attack Scenario&lt;/b&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;ol&gt;
                                &lt;li&gt;Your company starts using a new service, eg an external Support
                                Ticketing-service.&lt;/li&gt;
                                &lt;li&gt;Your company points a sub-domain to the Support Ticketing-service, eg
                                support.your-domain.com&lt;/li&gt;
                                &lt;li&gt;Your company stops using this service but does not remove the sub-domain
                                redirection pointing to the ticketing system.&lt;/li&gt;
                                &lt;li&gt;Attacker signs up for the Service and claims the domain as theirs. No
                                verification is done by the Service Provider, and the DNS-setup is already correctly
                                setup.&lt;/li&gt;
                                &lt;li&gt;Attacker can now build a complete clone of the real site, add a login form,
                                redirect the user, steal credentials (e.g. admin accounts), cookies and/or completely
                                destroy business credibility for your company.&lt;/li&gt;
                                &lt;/ol&gt;
                                &lt;/div&gt;
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Hostile Subdomain Takeover using Heroku/Github/Desk + more" url="https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-350">
                  <countermeasures>
                    <countermeasure ref="identify-dns-domains" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="identify-dns-domains" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SOURCE-LEAK" name="Attackers gain control of the system through a source code leakage" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Attackers gain unauthorized access to a service by reading raw source code
                                returned by the service, and this code contains confidential information such as
                                authentication credentials or other secrets that can be used to access the service.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Configuration
                                files that can be downloaded from the service could also be leveraged to gain access to
                                sensitive information.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-541">
                  <countermeasures>
                    <countermeasure ref="CWE-541" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-541" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-172" name="Attackers subvert the intended workflow of the application in order to perform unauthorised operations" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;If an application enforces an order in workflows, then attackers could
                                attempt to bypass this order so that they can perform operations for which they are not
                                authorized. The technique can also be used to gain access to unauthorized data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-841">
                  <countermeasures>
                    <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                    <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing
                                the attackers' request, thereby reducing the resources available for legitimate services
                                and degrading or denying services. Usually, this attack focuses on memory allocation,
                                but any finite resource on the target could be the attacked, including bandwidth,
                                processing cycles, or other resources.&amp;nbsp;&lt;/p&gt;
                                &lt;p&gt;This attack does not attempt to force this allocation through a large number of
                                requests (that would be Resource Depletion through Flooding) but instead uses one or a
                                small number of requests that are carefully formatted to force the target to allocate
                                excessive resources to service this request(s). Often this attack takes advantage of a
                                bug in the target to cause the target to allocate resources vastly beyond what would be
                                needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-770">
                  <countermeasures>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                    <countermeasure ref="network-rate-limit" mitigation="34"/>
                    <countermeasure ref="protection-against-data-mining" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="protection-against-data-mining" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be
                                reserved for privileged users or administrators but are exposed to use by lower or
                                non-privileged accounts. Access to sensitive information and functionality must be
                                controlled to ensure that only authorized users are able to access these resources. If
                                access control mechanisms are absent or misconfigured, a user may be able to access
                                resources that are intended only for higher level users. An adversary may be able to
                                exploit this to utilize a less trusted account to gain information and perform
                                activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt;
                                &lt;p&gt;This attack differs from privilege escalation and other privilege stealing
                                attacks in that the adversary never actually escalates their privileges but instead is
                                able to use a lesser degree of privilege to access resources that should be (but are
                                not) reserved for higher privilege accounts. Likewise, the adversary does not exploit
                                trust or subvert systems - all control functionality is working as configured but the
                                configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-272">
                  <countermeasures>
                    <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOG-MANAGEMENT" name="Log Management" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-93" name="An attacker injects, manipulates or forges malicious log entries in the log file, allowing her to mislead a log audit, cover traces of attack, or perform other malicious actions" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack targets the log files of the target host. The attacker injects,
                                manipulates or forges malicious log entries in the log file, allowing him to mislead a
                                log audit, cover traces of attack, or perform other malicious actions. The target host
                                is not properly controlling log access. As a result tainted data is resulting in the log
                                files leading to a failure in accountability, non-repudiation and incident forensics
                                capability.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-117">
                  <countermeasures>
                    <countermeasure ref="ASVS-8.8" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="LOGS-INTEGRITY" mitigation="40"/>
                    <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="LOGS-INTEGRITY" mitigation="40"/>
                <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-778-AUTH" name="Attacks against the authentication system may go undetected" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Automated attacks against many user accounts, or successful attacks against an account
                                require a response. &amp;nbsp;If audit logs are not kept of both successful and
                                unsuccessful authentication operations, then post attack forensics will be hampered.&amp;nbsp;&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Without a dynamic response to mass automated attacks against the
                                authentication system, attackers stand a greater chance of success.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="CDS-USER-TRACK" mitigation="16"/>
                    <countermeasure ref="CSD-VAL-LOG" mitigation="14"/>
                    <countermeasure ref="CWE-662" mitigation="14"/>
                    <countermeasure ref="EU-GDPR-LOGGING" mitigation="14"/>
                    <countermeasure ref="LOG-TLS-FAILURES" mitigation="14"/>
                    <countermeasure ref="LOGS-INTEGRITY" mitigation="14"/>
                    <countermeasure ref="security-logging" mitigation="14"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CDS-USER-TRACK" mitigation="16"/>
                <countermeasure ref="CSD-VAL-LOG" mitigation="14"/>
                <countermeasure ref="CWE-662" mitigation="14"/>
                <countermeasure ref="EU-GDPR-LOGGING" mitigation="14"/>
                <countermeasure ref="LOG-TLS-FAILURES" mitigation="14"/>
                <countermeasure ref="LOGS-INTEGRITY" mitigation="14"/>
                <countermeasure ref="security-logging" mitigation="14"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data
                                subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-532">
                  <countermeasures>
                    <countermeasure ref="CWE-532" mitigation="70"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-779">
                  <countermeasures>
                    <countermeasure ref="LOG-RETENTION" mitigation="30"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-532" mitigation="70"/>
                <countermeasure ref="LOG-RETENTION" mitigation="30"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="post-data" name="Post data" desc="Data is received (posted) here" library="CS-Default">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal
                                resources. The attacker can supply - or modify - a URL which the code running on the
                                server will read or submit data to, and by carefully selecting the URLs, the attacker
                                may be able to read server configuration details such as AWS metadata, connect to
                                internal services like http enabled databases, or perform post requests towards internal
                                services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="25"/>
                    <countermeasure ref="CWE-601" mitigation="25"/>
                    <countermeasure ref="DATA-VAL" mitigation="25"/>
                    <countermeasure ref="WEB-FILE-DATA" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="25"/>
                <countermeasure ref="CWE-601" mitigation="25"/>
                <countermeasure ref="DATA-VAL" mitigation="25"/>
                <countermeasure ref="WEB-FILE-DATA" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-35" name="Attackers can leverage Executable Code in Non-Executable Files" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attack of this type exploits a system's trust in configuration and resource files,
                                when the executable loads the resource (such as an image file or configuration file) the
                                attacker has modified the file to either execute malicious code directly or manipulate
                                the target process (e.g. application server) to execute based on the malicious
                                configuration parameters. Since systems are increasingly interrelated mashing up
                                resources from local and remote sources the possibility of this attack occurring is
                                high.
                                &lt;br /&gt;The attack can be directed at a client system, such as causing buffer
                                overrun through loading seemingly benign image files, as in Microsoft Security Bulletin
                                MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded
                                into the browser. Another example targets clients reading pdf files. In this case the
                                attacker simply appends javascript to the end of a legitimate url for a pdf
                                (http://www.gnucitizen.org/blog/danger-danger-danger/)
                                &lt;br /&gt;http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here
                                &lt;br /&gt;The client assumes that they are reading a pdf, but the attacker has
                                modified the resource and loaded executable javascript into the client's browser
                                process.
                                &lt;br /&gt;The attack can also target server processes. The attacker edits the resource
                                or configuration file, for example a web.xml file used to configure security permissions
                                for a J2EE app server, adding role name &amp;quot;public&amp;quot; grants all users with
                                the public role the ability to use the administration functionality.
                                &lt;br /&gt;The server trusts its configuration file to be correct, but when they are
                                manipulated, the attacker gains full control.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-95">
                  <countermeasures>
                    <countermeasure ref="dyn-exec" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="dyn-exec" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-176" name="Attackers can manipulate Configuration/Environment" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker manipulates files or settings external to a target application which
                                affect the behavior of that application. For example, many applications use external
                                configuration files and libraries - modification of these entities or otherwise
                                affecting the application's ability to use them would constitute a
                                configuration/environment manipulation attack.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-15">
                  <countermeasures>
                    <countermeasure ref="configuration-integrity" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="configuration-integrity" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-94" name="Attackers gain access to the system through Server-Side Code Injection" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Server-Side Code Injection happens when an attacker is able to direct input
                                under his control and mix it with executed code on the server side by modifying the
                                logic executed on it.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Depending
                                on the code isolation, this event could grant the user access to system resources and
                                data.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-78">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="80"/>
                    <countermeasure ref="SAME-ENCODING-STYLE" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="80"/>
                <countermeasure ref="SAME-ENCODING-STYLE" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-73" name="Attackers upload code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attack of this type involves an attacker inserting malicious characters
                                (such as a XSS redirection) into a filename, directly or indirectly that is then used by
                                the target software to generate HTML text or other potentially executable content. Many
                                websites rely on user-generated content and dynamically build resources like files,
                                filenames, and URL links directly from user supplied data. In this attack pattern, the
                                attacker uploads code that can execute in the client browser and/or redirect the client
                                browser to a site that the attacker owns. All XSS attack payload variants can be used to
                                exploit these vulnerabilities.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-116">
                  <countermeasures>
                    <countermeasure ref="same-encoding-parsers" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="same-encoding-parsers" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-586-SER" name="An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Developers leverage serialization in order to convert data or state into a static,
                                binary format for saving to disk or transferring over a network. These objects are then
                                deserialized when needed to recover the data/state. By injecting a malformed object into
                                a vulnerable application, an adversary can potentially compromise the application by
                                manipulating the deserialization process. This can result in a number of unwanted
                                outcomes, including remote code execution.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-502">
                  <countermeasures>
                    <countermeasure ref="SER-UNTRUST" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="SER-UNTRUST" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-62" name="An attacker crafts malicious web links and distributes them hoping to induce users to click on the link and execute a malicious action" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker crafts malicious web links and distributes them (via web pages, email,
                                etc.), typically in a targeted manner, hoping to induce users to click on the link and
                                execute the malicious action against some third-party application. If successful, the
                                action embedded in the malicious link will be processed and accepted by the targeted
                                application with the users' privilege level.
                                &lt;br&gt;This type of attack leverages the persistence and implicit trust placed in
                                user session cookies by many web applications today. In such an architecture, once the
                                user authenticates to an application and a session cookie is created on the user's
                                system, all following transactions for that session are authenticated using that cookie
                                including potential actions initiated by an attacker and simply "riding" the existing
                                session cookie.
                                &lt;br&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="ASVS-18.8" mitigation="34"/>
                    <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                    <countermeasure ref="cwe-352-csrf" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-18.8" mitigation="34"/>
                <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                <countermeasure ref="cwe-352-csrf" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="open-redirect-threat" name="An attacker leverages the redirection functionality in the application to conduct more convincing phishing attacks" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An http parameter may contain a URL value for redirecting the request to
                                another specified URL. By modifying this URL value to point towards a malicious site, an
                                attacker may successfully launch a phishing scam and steal user credentials. Because the
                                server name in the modified link is identical to the original site, phishing attempts
                                have a more trustworthy and convincing appearance.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-601">
                  <countermeasures>
                    <countermeasure ref="CWE-601" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-601" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-117" name="An attacker monitors HTTP headers from a target in order to gather information" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker monitors data streams to or from a target in order to gather information.
                                This attack may be undertaken in order to gather information to support a later attack,
                                or the data collected may be the end goal of the attack. This attack usually involves
                                sniffing network traffic, but may include observing other types of data streams, such as
                                radio. In most varieties of this attack, the attacker is passive and simply observes
                                regular communication, however in some variants the attacker may attempt to initiate the
                                establishment of a data stream or influence the nature of the data transmitted. However,
                                in all variants of this attack, and distinguishing this attack from other data
                                collection methods, the attacker is not the intended recipient of the data stream.
                                Unlike some other data leakage attacks, the attacker is observing explicit data channels
                                (e.g. network traffic) and reading the content. This differs from attacks that collect
                                more qualitative information, such as communication volume, or other information not
                                explicitly communicated via a data stream.</desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="ASVS-11.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-11.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-267" name="Attackers encode potentially harmful input and submit it to bypass input filtering protections" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack leverages the possibility of encoding potentially harmful input
                                and submitting it to applications not expecting or effective at validating this
                                encoding, thus, thwarting the validation.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-173">
                  <countermeasures>
                    <countermeasure ref="harden-http-headers" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-235">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="50"/>
                <countermeasure ref="harden-http-headers" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-300" name="Attackers gain control of the connection through a Man In The Middle attack" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.&amp;nbsp; &amp;nbsp;
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-MASS" name="Functionality could be subverted through mass assignment" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>If the application binds parameters to back-end objects, then attackers could
                                potentially set fields on those objects that were not designed to be modified by the
                                user.</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-915">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                    <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-101" name="Unauthorised data could be accessed by manipulating parameters sent to the application" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>The application could be tricked into exposing data to unauthorized users by
                                manipulating the parameters it accepts. All data received from the client side could be
                                subject to manipulation, including fields like cookies and HTTP headers, if these are
                                used as inputs to the application.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-22">
                  <countermeasures>
                    <countermeasure ref="CWE-639" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-548">
                  <countermeasures>
                    <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-650">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="25"/>
                <countermeasure ref="CWE-639" mitigation="25"/>
                <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="8d190ba8-a2ab-4a3f-a437-b0440293f81f" diagramComponentId="c35adc96-3968-4248-8422-b36f6805e8f6" ref="66e5a95a-0f71-43a9-bd27-b5b0fd5710d9" name="RESTful Web Service" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="rest-full-web-service">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="api-broken-object-level-authorization" name="API Broken Object Level Authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This has been the most common and devastating attack on APIs to date. Authorization
                        and access control mechanisms in modern applications are complex and wide-spread. Even if the
                        application implements a proper infrastructure for authorization checks, developers might forget
                        to use these checks before accessing a sensitive object. Access control detection is not
                        typically amenable to automated static or dynamic testing.&lt;/p&gt;&lt;p&gt;Unauthorized access
                        can result in data disclosure to unauthorized parties, data loss, or data manipulation.
                        Unauthorized access to objects can also lead to full account takeover.&lt;/p&gt;&lt;p&gt;Object
                        level authorization is an access control mechanism that is usually implemented at the code level
                        to validate that one user can only access objects that they should have access to.&lt;/p&gt;&lt;p&gt;Every
                        API endpoint that receives an ID of an object, and performs any type of action on the object,
                        should implement object-level authorization checks. These checks should validate that the
                        logged-in user does have access to perform the requested action on the requested object.&lt;/p&gt;&lt;p&gt;Failures
                        in this mechanism typically leads to unauthorized information disclosure, modification, or
                        destruction of data.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.615">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="api-broken-authentication" name="API broken authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Authentication endpoints and flows are assets that need to be protected.&amp;nbsp;&lt;/p&gt;&lt;p&gt;An
                        API is vulnerable if it:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Permits "credential stuffing" whereby the
                        attacker has a list of valid usernames and passwords.&lt;/li&gt;&lt;li&gt;Allows attackers to
                        perform brute force attacks, without presenting captcha / account lockout mechanisms.&lt;/li&gt;&lt;li&gt;Permits
                        weak passwords.&lt;/li&gt;&lt;li&gt;Sends sensitive authentication details, such as
                        authorization tokens and passwords in the URL.&lt;/li&gt;&lt;li&gt;Doesn't validate the
                        authenticity of tokens.&lt;/li&gt;&lt;li&gt;Accepts unsigned / weakly signed JWT tokens
                        ("alg":"none") / doesn't validate their expiration date.&lt;/li&gt;&lt;li&gt;Uses plain text,
                        encrypted, or weakly hashed passwords.&lt;/li&gt;&lt;li&gt;Uses weak encryption keys / API keys.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.615">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="api-vulnerable-injection" name="API is vulnerable to injection flaws" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The API is vulnerable to injection flaws if:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Client-supplied data is not validated, filtered, or sanitized by the API.&lt;/li&gt;
                        &lt;li&gt;Client-supplied data is directly used or concatenated to SQL/NoSQL/LDAP queries, OS
                        commands, XML parsers, and Object Relational Mapping (ORM)/Object Document Mapper (ODM).&lt;/li&gt;
                        &lt;li&gt;Data coming from external systems (e.g., integrated systems) is not validated,
                        filtered, or sanitized by the API.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.615">
              <output/>
            </source>
            <references>
              <reference name="Command Injection" url="https://www.owasp.org/index.php/Command_Injection"/>
              <reference name="NoSQL Injection Fun with Objects and Arrays" url="https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf"/>
              <reference name="OWASP Injection Flaws" url="https://www.owasp.org/index.php/Injection_Flaws"/>
              <reference name="SQL Injection" url="https://www.owasp.org/index.php/SQL_Injection"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software allocates a reusable resource or group of resources on behalf of an
                        actor without imposing any restrictions on how many resources can be allocated, in violation of
                        the intended security policy.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.447">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication
                        channel that can be sniffed by unauthorized actors.

                        Many communication channels can be "sniffed" by attackers during data transmission. For example,
                        network traffic can often be sniffed by any attacker who has access to a network interface. This
                        significantly lowers the difficulty of exploitation by attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.448">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100" issueId="" issueLink="">
          <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.878">
              <output/>
            </source>
            <references>
              <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-502" name="Deserialization of Untrusted Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The application deserializes untrusted data without sufficiently verifying that the resulting
                        data will be valid.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.448">
              <output/>
            </source>
            <references>
              <reference name="CWE-502: Deserialization of Untrusted Data" url="https://cwe.mitre.org/data/definitions/502.html"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-15" name="External Control of System or Configuration Setting" state="0" impact="100" issueId="" issueLink="">
          <desc>One or more system settings or configuration elements can be externally controlled by a
                        user.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.260">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an
                        unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:35.032">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-285" name="Improper Authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not perform - or incorrectly - performs an authorization check when
                        an actor attempts to access a resource or perform an action.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.615">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-460" name="Improper Cleanup on Thrown Exception" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not clean up its state or incorrectly cleans up its state when an exception
                        is thrown, leading to unexpected state or control flow.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.447">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-116" name="Improper Encoding or Escaping of Output" state="0" impact="100" issueId="" issueLink="">
          <desc>The software prepares a structured message for communication with another component, but
                        encoding or escaping of the data is either missing or done incorrectly. As a result, the
                        intended structure of the message is not preserved.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.259">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-841" name="Improper Enforcement of Behavioral Workflow" state="0" impact="100" issueId="" issueLink="">
          <desc>The software supports a session in which more than one behavior
                        must be performed by an actor, but it does not properly ensure that the actor
                        performs the behaviors in the required sequence.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.448">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-173" name="Improper Handling of Alternative Encoding" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not properly handle cases in which the input uses an alternative
                        encoding scheme that is valid for the control sphere to which the input is being sent.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.878">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-235" name="Improper Handling of Extra Parameters" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not handle or incorrectly handles when the number of parameters, fields, or
                        arguments with the same name exceeds the expected amount.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.878">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-22" name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software uses external input to construct a pathname that is intended to identify
                        a file or directory that is located underneath a restricted parent directory, but the software
                        does not properly neutralize special elements within the pathname that can cause the pathname to
                        resolve to a location that is outside of the restricted directory.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Many
                        file operations are intended to take place within a restricted directory. By using special
                        elements such as ".." and "/" separators, attackers can escape outside of the restricted
                        location to access files or directories that are elsewhere on the system. One of the most common
                        special elements is the "../" sequence, which in most modern operating systems is interpreted as
                        the parent directory of the current location. This is referred to as relative path traversal.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Path
                        traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be
                        useful in accessing unexpected files. This is referred to as absolute path traversal. In many
                        programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to
                        truncate a generated filename to widen the scope of attack. For example, the software may add
                        ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may
                        effectively remove this restriction.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.878">
              <output/>
            </source>
            <references>
              <reference name="CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" url="https://cwe.mitre.org/data/definitions/22.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-95" name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software receives input from an upstream component, but it does not neutralize or
                        incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g.
                        "eval").</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.260">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-78" name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software constructs all or part of an OS command using externally-influenced input from an
                        upstream component, but it does not neutralize or incorrectly neutralizes special elements that
                        could modify the intended OS command when it is sent to a downstream component. This could allow
                        attackers to execute unexpected, dangerous commands directly on the operating system. This
                        weakness can lead to a vulnerability in environments in which the attacker does not have direct
                        access to the operating system, such as in web applications.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Alternately, if the weakness occurs in a privileged program, it could allow the attacker to
                        specify commands that normally would not be accessible, or to call alternate commands with
                        privileges that the attacker does not have. The problem is exacerbated if the compromised
                        process does not follow the principle of least privilege, because the attacker-controlled
                        commands may run with special system privileges that increases the amount of damage.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        There are at least two subtypes of OS command injection:&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;The application intends to execute a single, fixed program that is under its own
                        control. It intends to use externally-supplied inputs as arguments to that program. For example,
                        the program might use system(&amp;quot;nslookup [HOSTNAME]&amp;quot;) to run nslookup and allow
                        the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup
                        from executing. However, if the program does not remove command separators from the HOSTNAME
                        argument, attackers could place the separators into the arguments, which allows them to execute
                        their own program after nslookup has finished executing.The application accepts an input that it
                        uses to fully select which program to run, as well as which commands to use.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The application simply redirects this entire command to the operating system. For
                        example, the program might use &amp;quot;exec([COMMAND])&amp;quot; to execute the [COMMAND] that
                        was supplied by the user. If the COMMAND is under attacker control, then the attacker can
                        execute arbitrary commands or programs. If the command is being executed using functions like
                        exec() and CreateProcess(), the attacker might not be able to combine multiple commands together
                        in the same line. From a weakness standpoint, these variants represent distinct programmer
                        errors.&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;In the first variant, the programmer clearly intends input from untrusted parties
                        will be part of the arguments in the command to be executed. In the second variant, the
                        programmer does not intend for the command to be accessible to any untrusted party, but the
                        programmer probably has not accounted for alternate ways in which malicious attackers can
                        provide input.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.260">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-117" name="Improper Output Neutralization for Logs" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes
                        output that is written to logs.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:35.032">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-915" name="Improperly Controlled Modification of Dynamically-Determined Object Attributes" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software receives input from an upstream component that specifies multiple
                        attributes, properties, or fields that are to be initialized or updated in an object, but it
                        does not properly control which attributes can be modified.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;If
                        the object contains attributes that were only intended for internal use, then their unexpected
                        modification could lead to a vulnerability. This weakness is sometimes known by the
                        language-specific mechanisms that make it possible, such as mass assignment, auto-binding, or
                        object injection.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.878">
              <output/>
            </source>
            <references>
              <reference name="CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes" url="https://cwe.mitre.org/data/definitions/915.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100" issueId="" issueLink="">
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to
                        an unintended actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.448">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.879">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-548" name="Information Exposure Through Directory Listing" state="0" impact="100" issueId="" issueLink="">
          <desc>A directory listing is inappropriately exposed, yielding
                        potentially sensitive information to attackers.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.878">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-532" name="Information Exposure Through Log Files" state="0" impact="100" issueId="" issueLink="">
          <desc>Information written to log files can be of a sensitive nature
                        and give valuable guidance to an attacker or expose sensitive user
                        information.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:35.032">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.878">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Improper Input Validation" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits
                        important details about the event when logging it. When critical security events are not logged
                        properly, such as in the case of a failed login attempt, this can make malicious behavior more
                        difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:35.031">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-436" name="Interpretation Conflict" state="0" impact="100" issueId="" issueLink="">
          <desc>Product A handles inputs or steps differently than Product B,
                        which causes A to perform incorrect actions based on its perception of B's
                        state.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.614">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-assets-inventory" name="Lack of assets inventory and retirement strategies" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Lack of asset inventory and retirement strategies may lead to running unpatched
                        systems, resulting in leakage of sensitive data. It is common to find unnecessarily exposed API
                        hosts because of modern concepts like microservices, which make applications easy to deploy and
                        independent (e.g., cloud computing, k8s).&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.615">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the
                        system development life cycle. Such testing/evaluation is necessary because it confirms that the
                        required security controls are implemented correctly, operating as intended, enforcing the
                        desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.186">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-272" name="Least Privilege Violation" state="0" impact="100" issueId="" issueLink="">
          <desc>The elevated privilege level required to perform operations such as chroot() should be dropped
                        immediately after the operation is performed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.447">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-779" name="Logging of Excessive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software logs too much information, making log files hard
                        to process and possibly hindering recovery efforts or forensic analysis after an
                        attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:35.032">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-350" name="Reliance on Reverse DNS Resolution for a Security-Critical Action" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs reverse DNS resolution on an IP address to obtain the hostname and make
                        a security decision, but it does not properly ensure that the IP address is truly associated
                        with the hostname.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.110">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the
                        contents of this URL, but it does not sufficiently ensure that the request is being sent to the
                        expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.260">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DOS-APP" name="The application exposes high resource consuming functions without any protection (Layer 7 attacks)" state="0" impact="100" issueId="" issueLink="">
          <desc>A highly resource consuming function could be exploited by an attacker to bring the service
                        down.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:32.992">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-203" name="The product exposes security-relevant information about the state of the product" state="0" impact="100" issueId="" issueLink="">
          <desc>The product behaves differently or sends different responses under different circumstances in
                        a way that is observable to an unauthorized actor, which exposes security-relevant information
                        about the state of the product, such as whether a particular operation was successful or not.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.438">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-541" name="The service returns back-end source code without interpreting it" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;If an include file source is accessible, the file may contain usernames and
                        passwords, as well as sensitive information pertaining to the application and system. The source
                        code can also be sent back to a client because of an error condition or an improperly configured
                        handler.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.446">
              <output/>
            </source>
            <references>
              <reference name="CWE-541: Information Exposure Through Include Source Code" url="https://cwe.mitre.org/data/definitions/541.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L3" name="There is no network protection to protect against Layer 3" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no measures in place to mitigate (D)DoS at a network level.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:32.993">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L4" name="There is no network protection to protect against Layer 4" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:32.992">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-TLS" name="There is no protection against Layer 6 attacks (SSL/TLS)" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:32.992">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-650" name="Trusting HTTP Permission Methods on the Server Side" state="0" impact="100" issueId="" issueLink="">
          <desc>The server contains a protection mechanism that assumes that
                        any URI that is accessed using HTTP GET will not cause a state change to the
                        associated resource. This might allow attackers to bypass intended access
                        restrictions and conduct resource modification and deletion attacks, since some
                        applications allow GET to modify state.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.878">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-601" name="URL Redirection to Untrusted Site ('Open Redirect')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;A web application accepts a user-controlled input specifying a link to an external
                        site, and uses this link in a Redirect. This functionality aids phishing attacks.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.877">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This is a generic weakness which includes several different situations that are all
                        connected to unexpected environmental conditions and could be related to:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared
                        buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two
                        different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.878">
              <output/>
            </source>
            <references>
              <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="dyn-exec" name="Assure that the application avoids the use of eval() or other dynamic code execution features" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Assure that the application avoids the use of eval() or other dynamic code execution features.
                        Where there is no alternative, any user input being included must be sanitized or sandboxed
                        before being executed.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Look for scripts that do not properly validate user inputs in the page
                            parameter. A remote user can supply a specially crafted URL to pass arbitrary code to an
                            eval() statement, which results in code execution.&lt;/p&gt;&lt;p&gt;Note 1: This attack
                            will execute the code with the same permissions, potentially including operation system
                            commands.&lt;/p&gt;&lt;p&gt;Note 2: Eval injection is prevalent in handler/dispatch
                            procedures that want to invoke a large number of functions, or set a large number of
                            variables.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.131">
              <output/>
            </source>
            <references>
              <reference name="Direct Dynamic Code Evaluation (Eval Injection)" url="https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection"/>
              <reference name="[SCRIPT_ENGINE_INJECTION] Potential code injection when using Script Engine" url="https://find-sec-bugs.github.io/bugs.htm"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="deny-default-enf" name="Assure that the principle of deny by default exists for new users/roles" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Deny by default is the principle whereby if a request is not specifically allowed, it
                        is denied. There are many ways this rule will manifest in application code. Some examples of
                        this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny by default exists whereby
                        new users/roles start with minimal or no permissions and users/roles do not receive access to
                        new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw
                        an error or exception while processing access control requests. In these cases access control
                        should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user
                        registers for a new account, that account should have minimal or no access by default until that
                        access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all
                        users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C7]: Enforce Access Controls" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"/>
          </references>
          <standards>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In
                            every portion of the application in which a user can create information inside the database
                            (e.g., making a payment, adding a contact, or sending a message), or can receive information
                            (statement of account, order details, etc.), or delete information (drop users, messages,
                            etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try
                            to access such functions as another user in order to verify if it is possible to access a
                            function that should not be permitted by the user's role/privilege (but might be permitted
                            as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.251">
              <output/>
            </source>
            <references>
              <reference name="Testing for Bypassing Authorization Schema (OTG-AUTHZ-002)" url="https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)"/>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-639" name="Avoid using direct references to files" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential
                        risk, regardless of the source or transport method. Many flaws in applications result from
                        unsafe handling of filenames or path data, for example directory traversal and arbitrary file
                        disclosure. Use of filenames or other direct references to objects such as files on the
                        server-side increases the risk of compromise of the system or unauthorized access to other
                        files, content, or functionality.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Avoid using direct references to
                        files or validate file name.&lt;/li&gt;&lt;li&gt;For example, instead of using:&amp;nbsp;www.example.com/open.jsp?file=details.txt&amp;nbsp;use:&amp;nbsp;www.example.com/open.jsp?file=[GUID]&amp;nbsp;and
                        then use a lookup table on the server to associate the [GUID] value with file details.txt.&lt;/li&gt;&lt;li&gt;Files
                        should be stored outside the web-root to prevent an attacker browsing directly to them.&lt;/li&gt;&lt;li&gt;Do
                        not use obscurity to prevent access; for example do not rely on renaming a file to include a
                        random string to prevent direct download or disclosure.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If direct
                        references are used to access files from within the web-root deviating from recommended security
                        practice, the following must be implemented:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String input
                        validation must be applied.&amp;nbsp; Identify and filter for directory traversal
                        meta-characters such as "../" or "..\" or "/", together with encoded variations and derivations.&lt;/li&gt;&lt;li&gt;Use
                        of a strict white-list of files that may be downloaded.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;When a parameter that represents a file or a file path is found in
                            the application:&lt;/li&gt;&lt;li&gt;For each of them try to change this parameter to gain
                            access to unexpected files.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For example:
                            www.example.com/open.jsp?file=details.txt&amp;nbsp;&lt;br&gt;Shouldn't be implemented that
                            way and if so, it should not be possible to access locations outside of this domain (i.e.
                            file=/etc/passwd or file= &lt;a href="http://www.google.com"&gt;http://www.google.com&lt;/a&gt;,
                            etc.).&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.675">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="post-spectre-web-dev-c2" name="Choose the correct set of headers according to resource type" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The post-spectre-web-dev-c1 countermeasure establishes a default set of headers but
                        depending on the resource type the headers may vary. Identify the type of resource the web
                        service is serving and apply the following recommendations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static
                        subresources: contain the same data no matter who requests them&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Origin:
                        *&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: cross-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Timing-Allow-Origin:
                        *&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers from post-spectre-web-dev-c1 ("Vary" can be
                        omitted)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Dynamic subresources: contain data
                        personalized to a given user&lt;ul&gt;&lt;li&gt;Application-internal resources: private API
                        endpoints, avatar images, uploaded data, etc.&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers from post-spectre-web-dev-c1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Personalized
                        resources intended for cross-origin use: public API endpoints, etc&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Credentials:
                        true&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Origin: &lt;/strong&gt;&lt;a
                        href="https://trusted.example/"&gt;&lt;strong&gt;https://trusted.example&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Methods:
                        POST&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Headers: ...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-...:
                        ...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers
                        from post-spectre-web-dev-c1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Personalized resources
                        that are intended for cross-origin no-cors embedding, but which don't intend to be directly
                        legible in that context: avatar images, authenticated media, etc&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        cross-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers from post-spectre-web-dev-c1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents&lt;ul&gt;&lt;li&gt;Fully-isolated
                        documents: documents that require users to be signed-in&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Cross-Origin-Opener-Policy: same-origin&lt;/li&gt;&lt;li&gt;Vary:
                        Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options:
                        nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options: SAMEORIGIN&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents
                        Expecting to Open Cross-Origin Windows:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Opener-Policy:
                        same-origin-allow-popups&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest,
                        Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options:
                        SAMEORIGIN&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents Expecting
                        Cross-Origin Openers: e.g. federated sign-in forms and payment providers&lt;ul&gt;&lt;li&gt;Documents
                        that only wish to be opened in cross-origin popups:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Opener-Policy:
                        unsafe-none&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest, Sec-Fetch-Mode,
                        Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options:
                        SAMEORIGIN&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents that only wish to
                        be framed in cross-origin contexts&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Cross-Origin-Opener-Policy: same-origin&lt;/li&gt;&lt;li&gt;Vary:
                        Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options:
                        nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options: ALLOWALL&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents
                        that support both popup and framing scenarios:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy:
                        same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Opener-Policy:
                        unsafe-none&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest, Sec-Fetch-Mode,
                        Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options:
                        ALLOWALL&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Meltdown and Spectre attacks" url="https://meltdownattack.com/"/>
            <reference name="Post-Spectre Web Development" url="https://www.w3.org/TR/post-spectre-webdev/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Make requests to the updated web server and ensure that the headers are set
                            properly.&amp;nbsp;&lt;/p&gt;&lt;p&gt;The Post-Spectre Web Development guide specifies some
                            external endpoints that implement these headers that can be used as examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static
                            subresources&lt;ul&gt;&lt;li&gt;&lt;a
                            href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"&gt;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"&gt;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"&gt;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://ssl.google-analytics.com/ga.js"&gt;https://ssl.google-analytics.com/ga.js&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Dynamic
                            subresources&lt;ul&gt;&lt;li&gt;&lt;a
                            href="https://api.twitter.com/1.1/jot/client_event.json"&gt;https://api.twitter.com/1.1/jot/client_event.json&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://play.google.com/log?format=json&amp;amp;hasfast=true"&gt;https://play.google.com/log?format=json&amp;amp;hasfast=true&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://securepubads.g.doubleclick.net/pcs/view"&gt;https://securepubads.g.doubleclick.net/pcs/view&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a
                            href="https://c.amazon-adsystem.com/e/dtb/bid"&gt;https://c.amazon-adsystem.com/e/dtb/bid&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Just
                            open the browser's developer tools to check the responses to see the headers.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.412">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-SRV-XML" name="Define and enforce secure validation through an XSD or DSD schema on XML input data" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The XML standards provides for formal validation criteria to be specified in a schema
                        (XSD or DTD). Defining a schema with security in mind, and enforcing it on input data, will
                        mitigate many attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define an XSD or DTD schema with secure
                        input validation criteria.&lt;/li&gt;&lt;li&gt;Validate all XML input data against the schema
                        before processing it.&lt;/li&gt;&lt;li&gt;The acceptance of unvalidated or non compliant data
                        could have unexpected impact on the behavior of the application, and may facilitate attacks such
                        as SQL injection.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For every endpoint which consumes XML data.&lt;/li&gt;
                            &lt;li&gt;Get the permitted structure of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Construct non-compliant samples and send them to the endpoints.&lt;/li&gt;
                            &lt;li&gt;Check they are not accepted.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC" name="Detect and notify the usage of automated tools or unusual behavior" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Don't allow users to manipulate a system or guess its behavior based on input or
                        output timing and detect the usage of automated tools or unusual behavior, such as actions not
                        performed in reasonable "human time" or other abnormal time patterns.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;When
                        the usage of automated tools is detected, the application should respond by denying access and
                        notifying the security group.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use several automated tools to perform normal user actions.&lt;/li&gt;
                            &lt;li&gt;Check that the applications detects these actions, denies the users access and
                            notifies the security group.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.250">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="protection-against-data-mining" name="Detect and protect against data mining techniques" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data mining is an analytical process that attempts to find correlations or patterns
                        in large data sets for the purpose of data or knowledge discovery. Data storage objects include
                        database records and database fields. Sensitive information can be extracted from data mining
                        operations. When information is personally identifiable information, it may lead to
                        unanticipated revelations about individuals and give rise to privacy risks. Prior to performing
                        data mining activities, organizations determine whether such activities are authorized.
                        Organizations may be subject to applicable laws, executive orders, directives, regulations, or
                        policies that address data mining requirements. Organizational personnel consult with the senior
                        agency official for privacy and legal counsel regarding such requirements.&lt;/p&gt;&lt;p&gt;Data
                        mining prevention and detection techniques include limiting the number and frequency of database
                        queries to increase the work factor needed to determine the contents of databases, limiting
                        types of responses provided to database queries, applying differential privacy techniques or
                        homomorphic encryption, and notifying personnel when atypical database queries or accesses
                        occur. Data mining protection focuses on protecting information from data mining while such
                        information resides in organizational data stores. In contrast, AU-13 focuses on monitoring for
                        organizational information that may have been mined or otherwise obtained from data stores and
                        is available as open-source information residing on external sites, such as social networking or
                        social media websites.&lt;/p&gt;&lt;p&gt;EO 13587 requires the establishment of an insider
                        threat program for deterring, detecting, and mitigating insider threats, including the
                        safeguarding of sensitive information from exploitation, compromise, or other unauthorized
                        disclosure. Data mining protection requires organizations to identify appropriate techniques to
                        prevent and detect unnecessary or unauthorized data mining. Data mining can be used by an
                        insider to collect organizational information for the purpose of exfiltration.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-53" url="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf"/>
          </references>
          <standards>
            <standard ref="AC-23" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that your system supports policies that protect against data mining such
                            as filtering, throttling and anomaly detection.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOG-RETENTION" name="Develop a log retention policy" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Develop a log retention policy to identify storage requirements for device logs and implement
                        procedures to ensure that the audit logs are available for a security response in the case of
                        incident or investigation.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The audit logs from the last 30 days must be collected in easily accessible storage media. Older
                        logs should be archived in a protected storage and should be accessible in the future as
                        required for incidents or investigations.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
          </references>
          <standards>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application contains logs from the last 30 days.&lt;/li&gt;
                            &lt;li&gt;Check that logs older than 30 days are in an external storage.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DIRECTORY_LISTING" name="Disable web server directory listing and ensure file metadata (e.g. .git) and backup files are not present within web roots" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Indexable directories allow an attacker to easily discover the existence of content
                        on your web server that should remain private.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Disable
                        directory listings in the web - or application - server configuration by default.&lt;/li&gt;&lt;li&gt;Restrict
                        access to unnecessary directories and files.&lt;/li&gt;&lt;li&gt;Create an index (default) file
                        for each directory.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Apache - auto index" url="https://httpd.apache.org/docs/trunk/mod/mod_autoindex.html"/>
            <reference name="Apache - directory listing" url="https://wiki.apache.org/httpd/DirectoryListings"/>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Directory_Indexing" url="https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Directory_Indexing"/>
            <reference name="OWASP Insecure Indexing" url="https://www.owasp.org/index.php/File_System#Insecure_Indexing"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that the directory listing is disabled on the web server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-11.5" name="Do not share system information in HTTP headers and responses" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should not share detailed version information of system components or
                        other information that would assist attackers in the HTTP header or HTTP responses.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the HTTP responses and headers do not reveal sensitive data about the system.
                            Using a command line web client like telnet or netcat could help on this task.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-FILE-DATA" name="Do not use untrusted client-side data in server-side file operations" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application may be required to perform server-side file operations based on
                        client-side actions. This can expose the application to attack through remote or local
                        file-inclusion, or remote code execution attacks if unsafe data is used in file inclusion, class
                        loader, or reflection capabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Tainted, untrusted, client-side
                        data must not be used directly in server-side file load operations.&lt;/li&gt;&lt;li&gt;Where
                        server-side operations are dependent on client-side input, this should be mapped to pre-defined
                        operations on the server-side rather than using tainted client-side input directly.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify sources of data entering the application.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Classify
                            them into trusted and untrusted.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;if they
                            are untrusted, make sure there is a validation and sanitization mechanism before sending
                            this data into another system (Database, Command, etc.).&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.131">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-532" name="Do not write secrets to the log files" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        The logs may be accessed by attackers and in order to protect sensitive data, no such sensitive
                        data should be included in the logs
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Proactive Controls [C9, C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the logs.&lt;/li&gt;
                            &lt;li&gt;Check that no sensitive data is included in the logs.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in
                        transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end
                        encryption between the client and server, terminating within a secure environment on the
                        server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of
                        (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively,
                        asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested
                        implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established
                            encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only
                            strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use
                            unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review
                            configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.250">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure enforcement of the principle of least privilege in functions, data files, URLs,
                        controllers, services, and other resources. This implies protection against spoofing and
                        elevation of privilege.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;In every portion of the application where a user can create information inside
                            the database (e.g., making a payment, adding a contact, or sending a message), or can
                            receive information (statement of account, order details, etc.), or delete information (drop
                            users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try
                            to access such functions as another user in order to verify if it is possible to access a
                            function that should not be permitted by the user's role/privilege (but might be permitted
                            as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.251">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is
                        not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data
                        is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They
                            may be used in applications for:&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
                            &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
                            &lt;li&gt;Caching/Persistence&lt;/li&gt;
                            &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
                            &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.251">
              <output/>
            </source>
            <references>
              <reference name="Deserialization Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="review-api-responses" name="Ensure that the API responses contain only legitimate needed data" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;APIs rely on clients to perform the data filtering. Since APIs are used as data
                        sources, sometimes developers try to implement them in a generic way without thinking about the
                        sensitivity of the exposed data.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Never
                        rely on the client-side to perform sensitive data filtering.&lt;/li&gt;&lt;li&gt;Ensure that the
                        API responses contain only legitimate needed data.&lt;/li&gt;&lt;li&gt;Explicitly define and
                        enforce data returned by all API methods, including errors. Whenever possible: use schema's for
                        responses, patterns for all strings and clear field names.&lt;/li&gt;&lt;li&gt;Define all
                        sensitive and personally identifiable information (PII) that your application stores and
                        processes and review all API calls returning such information, to see if these responses could
                        be a security issue.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP REST Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API3:2019-Excessive Data Exposure" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Exploitation of excessive data exposure is simple, and is usually performed by
                            sniffing (covertly observing) the traffic to analyze API responses, looking for any
                            sensitive data that should not be returned to the user.&lt;/p&gt;&lt;p&gt;Automatic tools
                            usually can't detect this type of vulnerability because it's hard to differentiate between
                            legitimate data returned from the API, and sensitive data that should not be returned
                            without a deep understanding of the application. However, you can use a "man-in-the-middle
                            proxy" like OWASP Zap to manually explore your application to find sensitive data in API
                            responses.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To Manually Explore your
                            application:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Start ZAP and click the Quick Start tab of the
                            Workspace Window.&lt;/li&gt;&lt;li&gt;Click the large Manual Explore button.&lt;/li&gt;&lt;li&gt;In
                            the URL to explore text box, enter the full URL of the web application you want to inspect.&lt;/li&gt;&lt;li&gt;Select
                            the browser you would like to use.&lt;/li&gt;&lt;li&gt;Click Launch Browser.&lt;/li&gt;&lt;li&gt;Explore
                            your application.&lt;/li&gt;&lt;li&gt;To examine a tree view of the explored pages, click
                            the Sites tab in the Tree Window. You can expand the nodes to see the individual URLs
                            accessed.&lt;/li&gt;&lt;li&gt;To view the request / response information, select a request
                            from the left side panel and get the information via the right-side "Request" and "Response"
                            tabs.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.521">
              <output/>
            </source>
            <references>
              <reference name="OWASP ZAP Getting Started Guide" url="https://www.zaproxy.org/getting-started/"/>
              <reference name="Testing for Exposed Session Variables (OTG-SESS-004)" url="https://www.owasp.org/index.php/Testing_for_Exposed_Session_Variables_(OTG-SESS-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-HTTP-METHODS" name="Ensure that the application accepts only a defined set of required HTTP request methods" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP offers a number of methods that can be used to perform actions on the web
                        server. Many of theses methods are designed to aid developers in deploying and testing HTTP
                        applications. These HTTP methods can be used for nefarious purposes if the web server is
                        misconfigured. For example, Cross Site Tracing (XST), a form of cross site scripting using the
                        server's HTTP TRACE method.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While GET
                        and POST are by far the most common methods that are used to access information provided by a
                        web server, the Hypertext Transfer Protocol (HTTP) allows several other (and somewhat less
                        known) methods. RFC 2616 (which describes HTTP version 1.1 which is the standard today) defines
                        the following eight methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HEAD&lt;/li&gt;&lt;li&gt;GET&lt;/li&gt;&lt;li&gt;POST&lt;/li&gt;&lt;li&gt;PUT&lt;/li&gt;&lt;li&gt;DELETE&lt;/li&gt;&lt;li&gt;TRACE&lt;/li&gt;&lt;li&gt;OPTIONS&lt;/li&gt;&lt;li&gt;CONNECT&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Some
                        of these methods can potentially pose a security risk for a web application, as they allow an
                        attacker to modify the files stored on the web server and, in some scenarios, steal the
                        credentials of legitimate users. More specifically, the methods that should be disabled are the
                        following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;PUT: &lt;/strong&gt;This method allows a
                        client to upload new files onto the web server. An attacker may exploit this by uploading
                        malicious files (e.g.: an asp file that executes commands by invoking cmd.exe), or by simply
                        using the victim's server as a file repository.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;DELETE:&lt;/strong&gt;
                        This method allows a client to delete a file on the web server. An attacker may exploit it as a
                        very simple and direct way to deface a web site or to mount a DoS attack.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CONNECT:
                        &lt;/strong&gt;This method could allow a client to use the web server as a proxy.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;TRACE:
                        &lt;/strong&gt;This method simply echoes back to the client whatever string has been sent to the
                        server, and is used mainly for debugging purposes. This method, originally assumed harmless, can
                        be used to mount an attack known as Cross Site Tracing, which was discovered by Jeremiah
                        Grossman (see links at the bottom of the page).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If an application
                        needs one or more of these methods, such as REST Web Services (which may require PUT or DELETE),
                        it is important to check their usage is properly limited to trusted users and safe conditions.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Ensure
                        the application accepts only the HTTP requests GET and POST. The HTTP requests TRACE, PUT and
                        DELETE are blocked.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP test HTTP methods" url="https://github.com/ManhNho/OWASP-Testing-Guide-v5/blob/master/document/4%20Web%20Application%20Security%20Testing/4.3%20Configuration%20and%20Deployment%20Management%20Testing/4.3.6%20Test%20HTTP%20Methods%20(OTG-CONFIG-006).md"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application only accepts the request with the following HTTP
                            methods: GET and POST.&lt;/li&gt;
                            &lt;li&gt;Check that the application rejects and blocks the following requests with the HTTP
                            methods: TRACE, PUT and DELETE.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SAME-ENCODING-STYLE" name="Ensure that the client-side and the server-side are using the same encoding style" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the client-side and the server-side are using the same encoding style.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the server-side and the client-side are using the same encoding style.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.130">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SEC-DEPLOY" name="Ensure the build pipeline contains a build step to automatically build and verify the secure deployment of the application" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the build pipeline contains a build step to automatically build and verify the
                        secure deployment of the application, particularly if the application infrastructure is software
                        defined, such as cloud environment build scripts.</desc>
          <implementations/>
          <references>
            <reference name="Secure development and deployment guidance" url="https://www.ncsc.gov.uk/collection/developers-collection?curPage=/collection/developers-collection/principles/secure-the-build-and-deployment-pipeline"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Understanding the deployed configuration of the server hosting the web application is almost
                            as important as the application security testing itself. After all, an application chain is
                            only as strong as its weakest link. Application platforms are wide and varied, but some key
                            platform configuration errors can compromise the application in the same way an unsecured
                            application can compromise the server.
                            &lt;br /&gt;
                            &lt;br /&gt;In order to evaluate the readiness of the application platform, testing for
                            configuration management includes the following sections:
                            &lt;br /&gt;
                            &lt;br /&gt;4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
                            &lt;br /&gt;4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
                            &lt;br /&gt;4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
                            &lt;br /&gt;4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information
                            (OTG-CONFIG-004)
                            &lt;br /&gt;4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
                            &lt;br /&gt;4.3.6 Test HTTP Methods (OTG-CONFIG-006)
                            &lt;br /&gt;4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
                            &lt;br /&gt;4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
                            &lt;br /&gt;4.3.9 Test File Permission (OTG-CONFIG-009)
                            &lt;br /&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.676">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="configuration-integrity" name="Ensure the integrity of all security-relevant configurations to detect tampering" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Web server and application server configurations play a key role in the security of a web
                        application. These servers are responsible for serving content and invoking applications that
                        generate content. In addition, many application servers provide a number of services that web
                        applications can use, including data storage, directory services, mail, messaging, and more.
                        Failure to manage the proper configuration of your servers can lead to a wide variety of
                        security problems.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation:&lt;/b&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Authorized administrators need to ensure the integrity of all security-relevant configurations
                        to detect tampering.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="14.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Understanding the deployed configuration of the server hosting the web application is almost
                            as important as the application security testing itself. After all, an application chain is
                            only as strong as its weakest link. Application platforms are wide and varied, but some key
                            platform configuration errors can compromise the application in the same way an unsecured
                            application can compromise the server.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            In order to evaluate the readiness of the application platform, testing for configuration
                            management includes the following sections:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.6 Test HTTP Methods (OTG-CONFIG-006)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
                            &lt;/div&gt;
                            &lt;div&gt;
                            4.3.9 Test File Permission (OTG-CONFIG-009)&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.131">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOGS-INTEGRITY" name="Ensure the integrity of the logging system" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure Log integrity for the application generated logs, such as storing logs on write-once
                        media, forwarding a copy of the logs to a centralized SIEM or generating message digests for
                        each log file.</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-04 Audit Storage Capacity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/173-08_02_AU-04"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(c)(1)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SA-18" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the logs integrity is controlled by making daily backups or leveraging external
                            tools for log monitoring.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ENV-USE" name="Ensure there are no environmental security weaknesses" issueId="" issueLink="" platform="" cost="1" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Application security can be undermined by misconfiguration of the underlying server or
                        development environment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that vendor and best-practice guidelines have been applied, in particular affecting areas
                        such as:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographic strength of elements such as session tokens, GUIDs, and protection of
                        data in transit and at rest.&lt;/li&gt;
                        &lt;li&gt;Removal of debugging and compiler options and artifacts used during development.&lt;/li&gt;
                        &lt;li&gt;Configuration of error trapping and use of generic error messages and pages (e.g.
                        stack traces should not be returned to users).&lt;/li&gt;
                        &lt;li&gt;Appropriate access controls over software components, variables (e.g. EJBs and
                        methods).&lt;/li&gt;
                        &lt;li&gt;Insecure or inappropriate storage of data in configuration files or other data
                        structures (e.g. passwords in configuration files).&lt;/li&gt;
                        &lt;li&gt;Use of compilation/build features or security enhancements provided by the IDE&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Vulnerable Components" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/vulnerable-components.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A06:2021-Vulnerable and Outdated Components" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A6:2017-Security Misconfiguration" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A9:2017-Using Components with Known Vulnerabilities" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;figure class="table"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;Identify
                            the areas of the application that could potentially be affected by the following:&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared
                            buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of
                            two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Verify
                            they are correctly implemented.&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.677">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from un-trusted data" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection,
                        is directly written to a log file, then this data could contain newline or other meta-characters
                        that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should
                        first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="rest-content-type-val" name="Explicitly check the incoming Content-Type for REST services" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A REST request or response body should match the intended content type in the header.
                        Otherwise this could cause misinterpretation on the consumer/producer side and lead to code
                        injection/execution vulnerabilities.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Explicitly
                        check incoming Content-Type for REST services are the expected ones, such as application/xml or
                        application/JSON.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP REST Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="13.2.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Modify the content-type server header and test if the request is accepted by the
                            server or not. For example: modify "content application/JSON" to "application/XML" and
                            insert an XML entity payload to determine the XML entity injection point.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.522">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="harden-http-headers" name="Harden HTTP Headers" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP headers are a fundamental part of website security.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The
                        Referrer-Policy HTTP header controls how much referrer information (sent via the Referrer
                        header) should be included with requests. This security header was designed to prevent
                        cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;The Origin request header indicates where a
                        fetch originates from. It doesn't include any path information, but only the server name. It is
                        sent with CORS requests, as well as with POST requests. It is similar to the Referer header,
                        but, unlike this header, it doesn't disclose the whole path.&lt;/li&gt;&lt;li&gt;The
                        Content-Disposition response header tells the browser to download a file rather than displaying
                        it in the browser window.&lt;/li&gt;&lt;li&gt;If a response states that it contains HTML content
                        but does not specify a character set, then the browser may analyze the HTML and attempt to
                        determine which character set it appears to be using. Even if the majority of the HTML actually
                        employs a standard character set such as UTF-8, the presence of non-standard characters anywhere
                        in the response may cause the browser to interpret the content using a different character set.
                        This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which
                        non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use
                        a suitable "Referrer-Policy" header, such as "no-referrer" or "same-origin".&lt;/li&gt;&lt;li&gt;Don't
                        use the Origin header for authentication or access control decisions, as the Origin header can
                        easily be changed by an attacker.&lt;/li&gt;&lt;li&gt;Use the Content-Disposition response
                        header for file downloading in all API responses with the following directives:
                        Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the
                        content type).&lt;/li&gt;&lt;li&gt;Use a content-type header specifying a safe character set
                        (e.g., UTF-8, ISO 8859-1) in every HTTP response.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTML does not specify charset" url="https://portswigger.net/kb/issues/00800200_html-does-not-specify-charset"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="Origin Header" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"/>
            <reference name="Referrer-Policy" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"/>
            <reference name="Reflected File Download" url="https://www.owasp.org/index.php/Reflected_File_Download"/>
            <reference name="Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)" url="https://tools.ietf.org/html/rfc6266"/>
          </references>
          <standards>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;An easy way to access your HTTP security headers, as part of your response
                            headers, is to fire up Chrome DevTools. To run this click into the "Network" panel and press
                            Ctrl + R (Cmd + R) to refresh the page. Click into your domain's request and you will see a
                            section for response headers.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Check if "Referrer-Policy" header
                            exists in HTTP responses and has the right directives to prevent cross-domain Referrer
                            leakage.&lt;/li&gt;&lt;li&gt;From a penetration testing perspective you should look for
                            insecure configurations; for example, when the server returns back the Origin header in the
                            Access-Control-Allow-Origin without any additional checks AND returns
                            Access-Control-Allow-Credentials: true, which can lead to access of sensitive data. Note
                            that this configuration is very insecure, and is not acceptable in general terms, except in
                            the case of a public API that is intended to be accessible by everyone.&lt;/li&gt;&lt;li&gt;Try
                            Reflected File Download input payloads to launch commands on the client machine. Reflected
                            File Download is an attack combining URL path segments (now deprecated) with pages that
                            reflect user inputs in the response. Generally web services vulnerable to JSONP Injection
                            are leveraged to deliver malware to end users.&lt;/li&gt;&lt;li&gt;Character encoding has a
                            popular misuse; namely, being used for encoding malicious injection strings in a way that
                            obfuscates them. Try different character encoding schemes (like UTF-7) to bypass input
                            validation filters, or take advantage of particular ways in which browsers render encoded
                            text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.677">
              <output/>
            </source>
            <references>
              <reference name="A new security header: Referrer Policy" url="https://scotthelme.co.uk/a-new-security-header-referrer-policy/"/>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
              <reference name="Reflected File Download - A New Web Attack Vector" url="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/reflected-file-download-a-new-web-attack-vector/"/>
              <reference name="Test Cross Origin Resource Sharing (OTG-CLIENT-007)" url="https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-dns-domains" name="Identify the DNS domains periodically to update the information about them" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should have a protection from sub-domain takeovers if the application
                        relies upon DNS entries or DNS sub-domains, such as expired domain names, out of date DNS
                        pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs,
                        serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar.
                        Protections can include ensuring that DNS names used by applications are regularly checked for
                        expiry or change.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify the forward and reverse DNS lookups.&lt;/li&gt;&lt;li&gt;Verify
                            the connection to the DNS was authenticated successfully by username/password or certificate
                            and that they are active.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.080">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-L7" name="Identity which functions of the application are resource consuming and protect and monitor them (optionally set up a WAF)" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DoS attacks against the application layer also aim to use up the memory and process
                        time that the application requires to function properly while minimizing the resources employed
                        by the attacker by using vulnerabilities or flaws in the application. The main characteristics
                        of this type of attack are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The requirement for less bandwidth
                        compared to other methods such as SYN Flood attacks, and as such, the infrastructure necessary
                        to launch a successful attack is usually minor.&lt;/li&gt;&lt;li&gt;Greater difficulty in
                        distinguishing between malicious and legitimate traffic. Many of the most common protection
                        measures or systems focus on the network or transport layer, and as such, they would not be
                        efficient when the target of the attack is the application layer. It is even difficult for the
                        defense systems that monitor this layer to distinguish between malicious and legitimate traffic.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As
                        we have indicated, this type of attack is very specific, and generally require fewer resources
                        from the attacker to achieve devastating effects in the systems attacked. However, this type of
                        attack requires more time to analyze the targeted system in order to discover vulnerabilities or
                        bottlenecks that can be exploited during the attack.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Analyze
                        weaknesses or bottlenecks in the design, the implementation, or even the functioning of the
                        application to identify "heavy" requests that are resource consuming. For example, if the web
                        application has a search engine, an attack could be to carry out searches that require a high
                        level of resources to generate a bottleneck and eventually disable the service.&lt;/li&gt;&lt;li&gt;Implement
                        a challenge to the device making the network request in order to test whether or not it is a
                        bot. This is done through a test much like the CAPTCHA test commonly found when creating an
                        account online. By giving a requirement such as a JavaScript computational challenge, many
                        attacks can be mitigated.&lt;/li&gt;&lt;li&gt;Use of a web application firewall, managing and
                        filtering traffic through an IP reputation database, and through on-the-fly network analysis by
                        engineers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Layer 7 DDoS Attacks" url="https://owasp.org/www-pdf-archive/Layer_7_DDOS.pdf"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 7 DDoS PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space. One well-known
                            application attack is Slowloris, which targets web servers. Verify that the implemented
                            Layer 7 protection mechanisms (Javascript challenges, CAPTCHA tests, WAF) are effective.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:32.950">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="centralized-authz-module" name="Implement a centralized authorization module that is invoked from all your business functions" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Authorization checks for a function or resource are usually managed via
                        configuration, and sometimes at the code level. Implementing proper checks can be a confusing
                        task, since modern applications can contain many types of roles or groups and complex user
                        hierarchy (e.g., sub-users, users with more than one role).&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Your
                        application should have a consistent and easy to analyze authorization module that is invoked
                        from all your business functions. Frequently, such protection is provided by one or more
                        components external to the application code.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The enforcement
                        mechanism(s) should deny all access by default, requiring explicit grants to specific roles for
                        access to every function.&lt;/li&gt;&lt;li&gt;Review your API endpoints against function-level
                        authorization flaws, while keeping in mind the business logic of the application and groups
                        hierarchy.&lt;/li&gt;&lt;li&gt;Ensure that all of your administrative controllers inherit from
                        an administrative abstract controller that implements authorization checks based on the user's
                        group/role.&lt;/li&gt;&lt;li&gt;Ensure that administrative functions inside a regular controller
                        implements authorization checks based on the user's group and role.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Forced browsing" url="https://www.owasp.org/index.php/Forced_browsing"/>
            <reference name="OWASP Development Guide: Chapter on Authorization" url="https://www.owasp.org/index.php/Category:Access_Control"/>
            <reference name="Top 10 2013-A7-Missing Function Level Access Control" url="https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API5:2019-Broken Function Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Exploitation requires the attacker to send legitimate API calls to the API
                            endpoint that they should not have access to. These endpoints might be exposed to anonymous
                            users or regular, non-privileged users. It's easier to discover these flaws in APIs since
                            APIs are more structured, and the way to access certain functions is more predictable (e.g.,
                            replacing the HTTP method from GET to PUT, or changing the "users" string in the URL to
                            "admins", or changing the value of a parameter like "is_admin" from "false" to "true").&lt;/p&gt;&lt;p&gt;Don't
                            assume that an API endpoint is regular or administrative only based on the URL path. While
                            developers might choose to expose most of the administrative endpoints under a specific
                            relative path, like api/admins, it's very common to find these administrative endpoints
                            under other relative paths together with regular endpoints, like api/users&lt;/p&gt;&lt;p&gt;The
                            best way to find broken function-level authorization issues is to perform deep analysis of
                            the authorization mechanism, while keeping in mind the user hierarchy, different roles or
                            groups in the application, and:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Verify if a regular user can
                            access administrative endpoints.&lt;/li&gt;&lt;li&gt;Verify if a user can perform sensitive
                            actions (e.g., creation, modification, or erasure) that they should not have access to by
                            simply changing the HTTP method (e.g., from GET to DELETE).&lt;/li&gt;&lt;li&gt;Verify if a
                            user from group X can access a function that should be exposed only to users from group Y,
                            by simply guessing the endpoint URL and parameters (e.g., /api/v1/users/export_all).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.522">
              <output/>
            </source>
            <references>
              <reference name="OWASP Cheatsheet Testing Automation" url="https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation.html"/>
              <reference name="Testing for Authorization" url="https://www.owasp.org/index.php/Testing_for_Authorization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="implement-monitoring-unusual-activities" name="Implement and monitor Business Logic Limits for actions and transactions" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement in the application the appropriate limits for specific business actions and
                        transactions, to enforce the correct usage of the application for each user ensuring they cannot
                        bypass important steps in the flow. This business logic limits provide us protection against
                        likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/p&gt;&lt;p&gt;All
                        business actions or transactions that exceed the established limits, should be recorded in the
                        logs and monitored as unusual events.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A04:2021-Insecure Design" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Verify the application has appropriate limits for specific business actions or
                            transactions which are correctly enforced on a per user basis.&lt;/li&gt;
                            &lt;li&gt;Verify the application has business logic limits or validation to protect against
                            likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/li&gt;
                            &lt;li&gt;Verify the application monitors for unusual events or activity from a business
                            logic perspective.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests
                        to enumerate or attempt to exploit flaws in an application, for example, sending common
                        passwords to multiple target accounts within an application. By profiling normal traffic
                        volumes, and applying rate limiting, the application can be built to actively mitigate such
                        attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection
                        rate-limiting based on the source IP address can be used to restrict attacks against the
                        authentication or registration systems. Multiple failures (or attempts) from a single IP should
                        result in temporarily blocking or dropping traffic from the source. Note however that some
                        corporate and ISP environments may place multiple valid and discrete clients behind the same IP
                        address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other
                        IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class
                        of attack, Indicators of Compromise should be monitored (for example a higher rate of login
                        failures than usual), and appropriate actions taken. For example, when the application detects
                        active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could
                        be used to block attacks sharing a signature from pattern matching or deep packet inspection
                        (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application
                        could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is
                        detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement
                        the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application
                        detects a set number of failure login attempts, the account shall be locked for a certain time
                        period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When
                        the application detects an account is locked more times than usual, this account should be
                        disabled (no more than 100 failure attempts). A disabled account should only be restored by an
                        administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the
                        application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting
                        authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a
                        white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If
                        the user successfully authenticates, the previous failed attempts shall be reset for that user
                        from the same IP address.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;THC-Hydra&lt;/a&gt;,
                            &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;OWASP ZAP&lt;/a&gt;
                            or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite &lt;/a&gt;to simulate brute
                            force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform
                            a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the
                            function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a
                            log alerting function for an unusual amount of failed login attempts, even if they
                            originated from different sources.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="best-practices-api-auth" name="Implement best practices for API authentication" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;One of the challenges to building any RESTful API is having a well thought out
                        authentication strategy. An API built without protection from malicious threats through
                        authentication represents an API design failure that can threaten an organization's data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Know
                        all the possible flows to authenticate to the API (mobile / web / deep links that implement
                        one-click authentication / etc).&lt;/li&gt;&lt;li&gt;Check these flows with the API engineers.&lt;/li&gt;&lt;li&gt;Understand
                        deeply the authentication mechanisms and how they are be used. OAuth is not authentication, and
                        neither are API keys.&lt;/li&gt;&lt;li&gt;Don't reinvent the wheel in authentication, token
                        generation, password storage. Use the standard frameworks.&lt;/li&gt;&lt;li&gt;Credential
                        recovery / forget password endpoints should be treated as login endpoints in terms of brute
                        force, rate limiting and lockout protections.&lt;/li&gt;&lt;li&gt;Use the OWASP Authentication
                        Cheatsheet.&lt;/li&gt;&lt;li&gt;Where possible, implement multi-factor authentication.&lt;/li&gt;&lt;li&gt;Implement
                        anti-brute-force mechanisms to mitigate credential stuffing, dictionary attack and brute force
                        attacks on your authentication endpoints. This mechanism should be stricter than the regular
                        rate limiting mechanism on your API.&lt;/li&gt;&lt;li&gt;Implement account lockout / captcha
                        mechanisms to prevent brute force attacks. Implement weak-password checks.&lt;/li&gt;&lt;li&gt;API
                        keys should not be used for authentication, but for client app / project authentication.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How to Secure APIs" url="https://dzone.com/articles/how-to-secure-apis"/>
            <reference name="OWASP REST Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="23" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="26" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API2:2019-Broken Authentication" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Testing the authentication schema means deeply understanding how the
                            authentication process works and using that information to circumvent the authentication
                            mechanism.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Verify that the user's authentication data are
                            transferred via an encrypted channel (&lt;a
                            href="https://www.owasp.org/index.php/Testing_for_Credentials_Transported_over_an_Encrypted_Channel_(OTG-AUTHN-001)"&gt;OTG-AUTHN-001&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Test
                            for default credentials of common applications (&lt;a
                            href="https://www.owasp.org/index.php/Testing_for_default_credentials_(OTG-AUTHN-002)"&gt;OTG-AUTHN-002&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Attempt
                            an invalid login by using incorrect passwords a number of times to test the account lockout
                            mechanism's ability to mitigate brute force password guessing (&lt;a
                            href="https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)"&gt;OTG-AUTHN-003&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Modify
                            user input parameters to gain access to protected areas without providing valid credentials
                            (&lt;a
                            href="https://www.owasp.org/index.php/Testing_for_Bypassing_Authentication_Schema_(OTG-AUTHN-004)"&gt;OTG-AUTHN-004&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Verify
                            that the credentials are only sent during the login phase, and not sent together with every
                            request to the application (&lt;a
                            href="https://www.owasp.org/index.php/Testing_for_Vulnerable_Remember_Password_(OTG-AUTHN-005)"&gt;OTG-AUTHN-005&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Check
                            that the application does not leak any sensitive data into the browser cache. In order to do
                            that, use a proxy (such as WebScarab) and search through the server responses that belong to
                            the session, checking that for every page which contains sensitive information, the server
                            instructed the browser not to cache any data (&lt;a
                            href="https://www.owasp.org/index.php/Testing_for_Browser_cache_weakness_(OTG-AUTHN-006)"&gt;OTG-AUTHN-006&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Determine
                            the resistance of the application against brute force password guessing using available
                            password dictionaries by evaluating the length, complexity, reuse and aging requirements of
                            passwords (&lt;a
                            href="https://www.owasp.org/index.php/Testing_for_Weak_password_policy_(OTG-AUTHN-007)"&gt;OTG-AUTHN-007&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Try
                            to create security questions by creating a new account or by configuring your existing
                            account's password recovery properties, to find weak self-generated questions (&lt;a
                            href="https://www.owasp.org/index.php/Testing_for_Weak_security_question/answer_(OTG-AUTHN-008)"&gt;OTG-AUTHN-008&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Determine
                            the resistance of the passwords reset functionality against guessing or bypassing (&lt;a
                            href="https://www.owasp.org/index.php/Testing_for_weak_password_change_or_reset_functionalities_(OTG-AUTHN-009)"&gt;OTG-AUTHN-009&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Fully
                            test the website's primary authentication functions. This should identify how accounts are
                            issued, created or changed and how passwords are recovered, reset, or changed. Additionally
                            knowledge of any elevated privilege authentication and authentication protection measures
                            should be known (&lt;a
                            href="https://www.owasp.org/index.php/Testing_for_Weaker_authentication_in_alternative_channel_(OTG-AUTHN-010)"&gt;OTG-AUTHN-010&lt;/a&gt;).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.522">
              <output/>
            </source>
            <references>
              <reference name="OWASP Testing Guide v4. Testing for authentication" url="https://www.owasp.org/index.php/Testing_for_authentication"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="error-handling-centralized" name="Implement centralized mechanisms to manage errors and exceptions" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create a functionality or a mechanism to manage exceptions in a centralized manner
                        and avoid including duplicated try/catch blocks in the code.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;A
                        well-planned error/exception handling strategy is important for three reasons:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Good
                        error handling does not give an attacker any information which can be leveraged for attacking
                        the application.&lt;/li&gt;&lt;li&gt;A proper centralized error strategy is easier to maintain
                        and reduces the chances of any uncaught errors "Bubbling up" to the front-end of an application.&lt;/li&gt;&lt;li&gt;Information
                        leakages can lead to social engineering exploits.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Building
                        an infrastructure for consistent error reporting proves more difficult than error handling. All
                        exceptions should be caught as events with the severity of the error. These events will be
                        logged.&lt;/p&gt;&lt;p&gt;The centralized system should reorganize all events and throw the
                        corresponding error or system message in a consistent manner, depending on the severity of the
                        error.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Code Review: Error Handling" url="https://www.owasp.org/index.php/Codereview-Error-Handling"/>
            <reference name="OWASP Error Handling" url="https://www.owasp.org/index.php/Error_Handling"/>
            <reference name="OWASP Proactive Controls [C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify that a centralized system is in place to catch errors and
                            exceptions, and these errors are shown in a correct manner.&lt;/li&gt;&lt;li&gt;Verify all
                            errors thrown from the centralized system are displayed in a correct fashion.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="object-level-authorization" name="Implement object-level authorization checks in every function that accesses a data source using input from the user" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement a proper authorization mechanism that relies on the user policies and
                        hierarchy. Object-level authorization checks should be considered in every function that
                        accesses a data source using input from the user.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Favor
                        not using an ID that has been sent from the client, but instead use an ID that is stored in the
                        session object when accessing a database record by the record ID.&lt;/li&gt;&lt;li&gt;Use an
                        authorization mechanism to check if the logged-in user has access to perform the requested
                        action on the record in every function that uses an input from the client to access a record in
                        the database.&lt;/li&gt;&lt;li&gt;Use random and unpredictable values as GUIDs for records' IDs.&lt;/li&gt;&lt;li&gt;Write
                        tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break these
                        tests.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Top 10 2007-Insecure Direct Object Reference" url="https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Map out all locations in the application in which user input is used
                            to reference objects directly. For example, locations where user input is used to access a
                            database row, a file, application page, etc.&lt;/li&gt;&lt;li&gt;Modify the value of the
                            parameter used to reference objects to see if the application raises an authorization error.&lt;/li&gt;&lt;li&gt;Assess
                            whether it is possible to retrieve objects belonging to other users or otherwise bypass
                            authorization.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.522">
              <output/>
            </source>
            <references>
              <reference name="Testing for Insecure Direct Object References (OTG-AUTHZ-004)" url="https://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)"/>
              <reference name="Top 10 2007-Insecure Direct Object Reference" url="https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations.
                        However, proper logging practices can provide the crucial forensics needed to investigate after
                        a breach, and perhaps more importantly, to detect security issues as they happen. Most
                        developers are already familiar with logging for debugging and diagnostic purposes, so it should
                        be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Log
                        all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Logs
                        should be written using a format suited to be consumed by a log management solution, and include
                        enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as
                        sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;li&gt;Configure
                        a monitoring system to continuously monitor the infrastructure, network, and the API
                        functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system
                        to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure
                        custom dashboards and alerts, making it possible to detect and respond to suspicious activity as
                        early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to
                            confirm that the organization's logging policies, processes, and procedures are being
                            followed properly both at the infrastructure level and the system level throughout the
                            organization.&amp;nbsp; Log management audits can identify deficiencies in policies,
                            procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most
                            common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors
                            or others performing testing and validation can review the logging configuration and
                            settings, as well as the system logs, infrastructure logs, and archived logs, for a
                            representative sampling of systems and infrastructure servers to ensure that they comply
                            with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under
                            the direction of auditors) or others performing testing and validation can create security
                            events on a representative sampling of systems through vulnerability scanning, penetration
                            testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the
                            log data those activities should generate exist and are handled according to the
                            organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.811">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-TLS" name="Inspect the TLS/SSL traffic on a capable device before sending the connection down on your infrastructure" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;TLS adds another vector for computational attacks since a client can easily (with
                        little computational effort) force the server to expend relatively large computational work. If
                        a web application is delivered over TLS, an attacker can also choose to attack the TLS
                        negotiation process. TLS is computationally expensive so an attacker can reduce a server's
                        availability by sending unintelligible data. In a variation of this attack, an attacker
                        completes the TLS handshake but perpetually renegotiates the encryption method. Or an attacker
                        can attempt to exhaust server resources by opening and closing many TLS sessions.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;To
                        mitigate consider options like offloading the SSL from the origin infrastructure and inspecting
                        the application traffic for signs of attack traffic or violations of policy at an application
                        delivery platform (ADP).&lt;br&gt;A good ADP will also ensure that your traffic is then
                        re-encrypted and forwarded back to the origin infrastructure with unencrypted content only ever
                        residing in protected memory on a secure bastion host.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 6 DDoS attack PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the
                            implemented availability protection is effective. One useful tool to execute this kind of
                            test is &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;. It covers all the required
                            tests for TLS &amp;amp; SSL assessments and is regularly updated.&lt;/p&gt;&lt;p&gt;There
                            are many testing options that can be used with &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;
                            and the options you should use will depend greatly on your testing requirements. Below are
                            some useful examples, for an overview of &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;
                            command-line options. run ./testssl.sh with no other options.&lt;/p&gt;&lt;p&gt;Test
                            Everything on a Single Host and Output to console&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S
                            -P -c -H -U TARGET-HOST&lt;/p&gt;&lt;p&gt;Test Everything on a Single Host and Output to
                            HTML&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST | aha &amp;gt;
                            OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Test all hosts on a Subnet and Output to HTML&lt;br&gt;./testssl.sh
                            -e -E -f -p -y -Y -S -P -c -H -U 192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Same
                            as above, but only enumerate each servers supported ciphers:&lt;br&gt;./testssl.sh -E
                            192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:32.950">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="inventory-api" name="Inventory all API hosts and document important aspects of each one of them" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Asset management is a systematic process of developing, operating, maintaining,
                        upgrading, and disposing of assets in the most cost-effective manner (including all costs, risks
                        and performance attributes). The asset inventory makes up the first part of a chain in many risk
                        management frameworks.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Inventory
                        all API hosts and document important aspects of each one of them, focusing on the API
                        environment (e.g., production, staging, test, development), who should have network access to
                        the host (e.g., public, internal, partners) and the API version.&lt;/li&gt;&lt;li&gt;Inventory
                        integrated services and document important aspects such as their role in the system, what data
                        is exchanged (data flow), and its sensitivity.&lt;/li&gt;&lt;li&gt;Document all aspects of your
                        API such as authentication, errors, redirects, rate limiting, cross-origin resource sharing
                        (CORS) policy and endpoints, including their parameters, requests, and responses.&lt;/li&gt;&lt;li&gt;Generate
                        documentation automatically by adopting open standards. Include the documentation build in your
                        CI/CD pipeline.&lt;/li&gt;&lt;li&gt;Make API documentation available to those authorized to use
                        the API.&lt;/li&gt;&lt;li&gt;Use external protection measures such as API security firewalls for
                        all exposed versions of your APIs, not just for the current production version.&lt;/li&gt;&lt;li&gt;Avoid
                        using production data with non-production API deployments. If this is unavoidable, these
                        endpoints should get the same security treatment as the production ones.&lt;/li&gt;&lt;li&gt;When
                        newer versions of APIs include security improvements, perform risk analysis to make the decision
                        of the mitigation actions required for the older versions: for example, whether it is possible
                        to backport the improvements without breaking API compatibility, or simply take the older
                        versions out swiftly and force all clients to move to the latest versions.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Best Practices in API Documentation" url="https://swagger.io/blog/api-documentation/best-practices-in-api-documentation"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="20" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="21" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="27" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API9:2019-Improper Assets Management" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Make sure the API host inventory and API documentation are updated and available to
                            stakeholders. To check the validity of this documentation you can use an active/passive
                            discovery tool to identify undocumented API hosts or endpoints.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.522">
              <output/>
            </source>
            <references>
              <reference name="Inventory and Control of Software Assets" url="https://www.cisecurity.org/controls/inventory-and-control-of-software-assets/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" name="Limit the number of accounts with privileges allowing modification and/or deletion of audit logs files" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Limit the number of accounts with privileges to modify and/or delete audit logs
                        files.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the number of accounts with privileges to modify the logs is limited and
                            controlled.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-VAL-LOG" name="Log and reject all data validation failures" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Data validation failures, together with access control violations, are symptomatic of malicious
                        activity where an attacker is attempting to subvert the protections in place. It is therefore
                        likely that unexpected input detected by the application relates to an attack. Rejecting and
                        logging such activity, and ideally terminating the session, increases the likelihood of
                        detecting and inhibiting structured attacks against the application.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Log all validation failures when rejecting requests.&lt;/li&gt;
                        &lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against
                        the logs and subsequent access to them.&lt;/li&gt;
                        &lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;
                        &lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker
                        enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.5.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may
                            indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm
                            security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged
                            relating to the event must be carefully sanitized and encoded; by definition the data could
                            be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify
                            actual logged data.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CDS-USER-TRACK" name="Log details of user actions within the system" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To maintain proper accountability, logs should be maintained with sufficient
                        information to track user actions within the system. These logs should be forensically sound,
                        non-repudiable, and contain comprehensive details about activity. While the exact data for an
                        event may vary, the following should be captured at a minimum:&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Timestamps against a proven external source (e.g. an NTP server).&lt;/li&gt;
                        &lt;li&gt;Origin (with this field we mark if the logs are provided by a trusted or untrusted
                        source).&lt;/li&gt;
                        &lt;li&gt;Event, status, and/or&amp;nbsp;error codes (with sensitive data masked as appropriate
                        or not introduced in logs).&lt;/li&gt;
                        &lt;li&gt;Service, command, application or function name and details.&lt;/li&gt;
                        &lt;li&gt;User or system account associated with an event.&lt;/li&gt;
                        &lt;li&gt;Devices used (e.g. source and destination IPs, terminal session ID, web browser,
                        etc.).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        Source:&amp;nbsp;&amp;nbsp;
                        &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley audit logging" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA AU-10 Non-Repudiation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/179-08_02_AU-10"/>
            <reference name="OSA CA-07 Continuous Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/166-08_02_CA-07"/>
            <reference name="OSA IR-05 Incident Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/139-08_02_IR-05"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(a)(1)(A)" supportedStandardRef="hipaa-required"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="IR-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-4" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Perform several different actions on the service.&lt;/li&gt;&lt;li&gt;Inspect
                            the log files to see if the format and content complies with the company policy.&lt;/li&gt;&lt;li&gt;If
                            there is no company policy, check that at least the following data is included: timestamp
                            event, status, error codes, service/command/application username or system account
                            associated with an eventDevice used (e.g. source and destination IPs, terminal session ID,
                            web browser, etc).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Source:&amp;nbsp;&lt;a
                            href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;
                            https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.810">
              <output/>
            </source>
            <references>
              <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-LOGGING" name="Logging the data access and the modification of personal data" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Make sure that every access and modification of personal data is logged (The log should be
                        precise enough to know who changed what and when). This includes data access from the
                        application as well as data access from privileged accounts, such as database admins. In
                        practice, this means logging both on application, middleware and operating system (OS) level.</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Test accessing and modifying user personal data as legitimate users, employees,
                            administrators and malicious actors.&lt;/li&gt;
                            &lt;li&gt;Verify appropriate logging of all the above activities are successful and
                            sufficiently detailed.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.811">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOG-TLS-FAILURES" name="Log the backend TLS connection failures" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Implement functionality to record backend TLS connection failures and include these in the
                        logs.</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that backend TLS connection failures are recorded in the logs.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-541" name="Prevent unauthorised access to source code through the service" issueId="" issueLink="" platform="" cost="0" risk="52" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to the source-code for the application can aid an attacker in determining bugs
                        or vulnerabilities in the code or logic. For closed-source projects it is therefore important to
                        control and restrict access to the source. Application services may unexpectedly expose code,
                        for example a service providing files to a user could be manipulated to access source code if
                        implemented insecurely.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure source
                        code is not inadvertently disclosed through misconfiguration or vulnerabilities in the service.&lt;/li&gt;&lt;li&gt;Check
                        configuration files are not downloadable directly from the service, and cannot be read and
                        viewed through the service itself.&lt;/li&gt;&lt;li&gt;Ensure backups, operating systems, and
                        version control artifacts do not expose code.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check the source code of the application is never returned in cases
                            in which it cannot be interpreted.&lt;/li&gt;&lt;li&gt;Web Servers have a concept called
                            handlers which manage the source code interpretation before sending it to the client. If
                            those handlers are not properly configured, the plain source code could be sent as a
                            default.&lt;/li&gt;&lt;li&gt;Check the handlers are correctly configured to support the
                            types of languages your server uses.&lt;/li&gt;&lt;li&gt;Check also that the source code is
                            not leaked in case of failure.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.250">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious
                        web site, email, blog, instant message, or program causes a user's web browser to perform an
                        unwanted action on a trusted site when the user is authenticated. A CSRF attack works because
                        browser requests automatically include any credentials associated with the site, such as the
                        user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the
                        site cannot distinguish between the forged or legitimate request sent by the victim. A
                        token/identifier that is not accessible to the attacker is needed to mitigate this and would not
                        be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring
                        re-authentication of sensitive functions is an effective way to protect your application against
                        a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies
                        from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF
                        nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key'
                        (which is valid only once) that must be validated in any sensitive form submission. For maximum
                        security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple
                        or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on
                        the server-side is problematic, an alternative defense is to use the double-submit cookie
                        technique. This technique is easy to implement and is stateless. In this technique, a random
                        value is sent in both a cookie and as a request parameter, with the server verifying if the
                        cookie value and request value match. When a user visits (even before authenticating to prevent
                        login CSRF), the site should generate a (cryptographically strong) pseudo random value and set
                        it as a cookie on the user's machine separate from the session identifier. The site then
                        requires that every transaction request include this pseudo-random value as a hidden form value
                        (or other request parameter/header). If both of them match on the server-side, the server
                        accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN
                        request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely
                        on examining an HTTP request header value. Firstly, determining the origin the request is coming
                        from (source origin). This can be achieved via Origin and/or referer headers. Secondly,
                        determining the origin the request is going to (target origin). On the server-side verify if
                        both of these match. If they do, we accept the request as legitimate (meaning it's the same
                        origin request) and if they don't, discard the request (meaning that the request originated from
                        a cross-domain). Reliability of these headers comes from the fact they cannot be altered
                        programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list
                        (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-30" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.-
                            Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser
                            request and server response, and verify a unique strong token is being sent and verified
                            with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way
                            resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.-
                            Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change
                            or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt
                            to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a
                            request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser
                            requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions
                            such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.677">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-ICMP-Flooding" name="Rate-limit ICMP traffic and prevent the attack from impacting bandwidth and firewall performance" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Common attacks are ICMP Flooding, Ping flood and Ping of death - Layer 3
                        infrastructure DDoS attack methods that use ICMP messages to overload the targeted network's
                        bandwidth. These kind of attacks can be prevented from taking place by rate-limiting ICMP
                        traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;For
                        example, iptables can be used on Linux systems as follows:&lt;/p&gt;&lt;p&gt;To protect against
                        ping flood attacks the 'limit' module of iptables can be used:&lt;/p&gt;&lt;p&gt;-A INPUT -p
                        icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT -A INPUT -p
                        icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        INPUT -p icmp --icmp-type echo-request -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;Note that the above
                        lines will protect only against ping request attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;To protect
                        against generic ICMP flood attacks we can remove the constraint '--icmp-type echo-request'. This
                        is only good enough to protect against PC to PC attacks. If flood is done using multiple sources
                        or using hardware then this configuration may not be enough. The configuration will also cause
                        denial of service to other users when under attack even from single source, as we are limiting
                        based on protocol without considering the source address of the packet.&lt;/p&gt;&lt;p&gt;Iptables
                        can also be used to prevent abuse of network resources by rate limiting them:&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 4/second --limit-burst 12 -j ACCEPT&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 1/minute --limit-burst 1 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A
                        OUTPUT -p tcp -m tcp --dport 80 -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;In the above
                        example we are limiting outgoing connections to port 80. This is useful when we can't completely
                        block outgoing connections but we do not want it to become channel from where people start
                        browsing net or downloading. The limit module can also be used in rate limiting incoming traffic
                        for performance reasons.&lt;/p&gt;&lt;p&gt;Disabling a ping flood is most easily accomplished by
                        disabling the ICMP functionality of the targeted router, computer or other device. A network
                        administrator can access the administrative interface of the device and disable its ability to
                        send and receive any requests using the ICMP, effectively eliminating both the processing of the
                        request and the Echo Reply. The consequence of this is that all network activities that involve
                        ICMP are disabled, making the device unresponsive to ping requests, traceroute requests, and
                        other network activities.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Ping (ICMP) Flood DDoS Attack" url="https://www.cloudflare.com/learning/ddos/ping-icmp-flood-ddos-attack/"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="Rate limiting using iptables" url="https://www.sbarjatiya.com/notes_wiki/index.php/Rate_limiting_using_iptables"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the
                            implemented availability protection is effective. One useful tool to execute this kind of
                            test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The
                            interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP
                            echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the
                            ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For
                            example, you can execute a Smurf attack (denial-of-service attack that floods a target
                            system via spoofed broadcast ping messages) using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3
                            -1 - flood -a VICTIM_IP BROADCAST_ADDRESS&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:32.951">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-18.8" name="Reject requests containing unexpected or missing content type headers" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Reject requests containing unexpected or missing content type headers with HTTP response status
                        &amp;quot;406 Unacceptable&amp;quot; or &amp;quot;415 Unsupported Media Type&amp;quot;.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Validate request content-type" url="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Validate_request_content_types"/>
            <reference name="Spring docs: CSRF" url="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html"/>
          </references>
          <standards>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that HTTP requests with non-valid Content-type are rejected.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.677">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-SESS-REAUTH" name="Require additional authentication for sensitive operations / high value transactions" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Having gained access to an account, for example through session hijacking or
                        cross-site scripting, an attack may compromise data and functionality accessible to the victim.
                        This may include elevating privileges or accessing sensitive data and functionality, such as
                        changing passwords, creating accounts, or transferring funds.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;These
                        critical functions and sensitive data should be further protected from attack using a risk-based
                        authentication model requiring re-authentication via multi-factor authentication, or use of a
                        token to sign transactions or operations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement
                        re-authentication on key functions (such as requiring the old password before setting a new
                        one).&lt;/li&gt;&lt;li&gt;Use secondary authentication such as a transaction PIN to allow
                        financial transfers.&lt;/li&gt;&lt;li&gt;Critical administrative functionality should require
                        multi-factor authentication (such as a hard or soft token).&lt;/li&gt;&lt;li&gt;Consider use of
                        signing technologies or tokens that enable the server-side to verify the authenticity of a
                        request and mitigate Man in the Middle (MiTM) or Man in the Browser (MiTB) attacks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
          </references>
          <standards>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical functionalities of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the risk appetite for those functionalities.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Validate that re-authentication is required for those functions if deemed
                            necessary.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.677">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC-006" name="Restrict actions of users that follow unusual patterns" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict actions that users can do outside of the approved/required business process
                        flow.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This is important because without
                        this safeguard in place attackers may be able to bypass or circumvent work-flows and checks
                        allowing them to prematurely enter or skip required sections of the application potentially
                        allowing actions/transactions to be completed without successfully completing the entire
                        business process, leaving the system with incomplete back-end tracking information.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing for the circumvention of work flows" url="https://www.owasp.org/index.php/Testing_for_the_Circumvention_of_Work_Flows_(OTG-BUSLOGIC-006)"/>
          </references>
          <standards>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application only processes business logic flows in sequential step
                            order and in realistic human time.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Use periodically a static code analysis tool to analyze the code and detect potentially
                        malicious code, such as time functions, unsafe file operations and networks connections. With
                        the scanning of static code, we ensure the integrity of the application.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Verify that a code analysis tool is in use and it is configured to detect potentially
                            malicious code, such as time functions, unsafe file operations and network connections.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.162">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="post-spectre-web-dev-c1" name="Set security headers with default values explicitly" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Spectre breaks the isolation between different applications. It allows an attacker to
                        trick error-free programs, which follow best practices, into leaking their secrets. In fact, the
                        safety checks of said best practices actually increase the attack surface and may make
                        applications more susceptible to Spectre.&lt;/p&gt;&lt;p&gt;Mitigations can be applied to reduce
                        potential risk on web services:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Decide when not to
                        respond to requests&lt;/strong&gt; by examining incoming headers, paying special attention to
                        the Origin header on the one hand, and various Sec-Fetch- prefixed headers on the other.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Restrict
                        attackers' ability to load your data as a subresource&lt;/strong&gt; by setting a cross-origin
                        resource policy (CORP) of same-origin (opening up to same-site or cross-origin only when
                        necessary).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Restrict attackers' ability to frame your data as
                        a document&lt;/strong&gt; by opt-ing into framing protections via X-Frame-Options: SAMEORIGIN or
                        CSP's more granular frame-ancestors directive (frame-ancestors 'self' https://trusted.embedder,
                        for example).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Restrict attackers' ability to obtain a handle
                        to your window&lt;/strong&gt; by setting a cross-origin opener policy (COOP). In the best case,
                        you can default to a restrictive same-origin value, opening up to same-origin-allow-popups or
                        unsafe-none only if necessary.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prevent MIME-type confusion
                        attacks&lt;/strong&gt; and increase the robustness of passive defenses like cross-origin read
                        blocking (CORB) / opaque response blocking (ORB) by setting correct Content-Type headers, and
                        globally asserting X-Content-Type-Options: nosniff.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Meltdown and Spectre attacks" url="https://meltdownattack.com/"/>
            <reference name="Post-Spectre Web Development" url="https://www.w3.org/TR/post-spectre-webdev/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Make requests to the updated web server and ensure that the headers are set
                            properly.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.413">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-662" name="Use a synchronised time source" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to correlate logs and data from different internal and external systems, and
                        to preserve forensic quality of the logs, it is important a unified and trusted synchronized
                        time source is used throughout the environment.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Servers
                        should synchronize to an internal or external NTP server&lt;/li&gt;&lt;li&gt;The centralized
                        source should in turn use (or be) a trusted central time source.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This
                        control is critical in identifying application events (including attacks) through logging, and
                        in conducting post-event analysis, and in particular to track the entire user (or attacker)
                        journey through the system should it be compromised.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;It
                        is good practice to use the concept of Indicators of Compromise (IoC) which should be leveraged
                        to detect possible situations in which the system has been compromised and give an appropriate
                        response.&amp;nbsp; IoCs are often tracked through logs, and accurate time is essential.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-08 Time Stamps" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/177-08_02_AU-08"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA AU-11 Audit Record Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/180-08_02_AU-11"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check that mechanisms are installed to keep the host's clock synchronized (i.e.
                            ntpd in Linux based systems).&lt;/li&gt;
                            &lt;li&gt;Inspect the logs created by the app and check they have the correct timestamp.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" issueId="" issueLink="" platform="" cost="2" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential
                        risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or
                        auto-binding when accepting values from an untrusted source and mapping them to trusted server
                        side values increases the risk of tainted data being used unsafely.&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt;
                        &lt;li&gt;Use available features of the language or framework that allow specification of white
                        lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible
                        (white list) or attr_protected (black list) macros in each class that may be used in mass
                        assignment.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="Spring.java">
              <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
            <reference name="OWASP Juice Shop: XSS" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the framework the component is using.&lt;/li&gt;&lt;li&gt;Check
                            if this particular framework provides automatic binding of variables.&lt;/li&gt;&lt;li&gt;Verify
                            if it is disabled or restricted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-BH" name="Use blackholing to mitigate L4 DDoS attacks" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DDoS attack blocking, commonly referred to as blackholing, is a method typically used
                        by ISPs to stop a DDoS attack on one of its customers. This approach to block DDoS attacks makes
                        the site in question completely inaccessible to all traffic, both malicious attack traffic and
                        legitimate user traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Blackholing is typically deployed by the
                        ISP to protect other customers on its network from the adverse effects of DDoS attacks such as
                        slow network performance and disrupted service. Common attacks are SYN flood and Smurf attack.
                        For Smurf attack a simple solution is to disable IP broadcasting addresses at each network
                        router and firewall.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Older routers are likely to enable broadcasting
                        by default, while newer routers will likely already have it disabled.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;Disable
                        broadcasting by default on old routers.&lt;/p&gt;&lt;p&gt;To implement RTBH (Remote Triggered
                        Black Hole) Network Operator sets up a null route for the 192.0.2.1 address on all the backbone
                        routers which participate in BGP:&lt;/p&gt;&lt;p&gt;ip route 192.0.2.1 255.255.255.255 null 0
                        254&lt;/p&gt;&lt;p&gt;192.0.2.1 is part of 192.0.2.0/24, the TEST-NET, one of the reserved IPv4
                        address blocks.&lt;/p&gt;&lt;p&gt;Create a route-map to catch routes which need to be blackholed&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static
                        routes can be tagged in Cisco IOS - we will tag routes to be blackholed with the value of 66&lt;/li&gt;&lt;li&gt;Set
                        origin to be iBGP&lt;/li&gt;&lt;li&gt;Set local-preference to be 150&lt;ul&gt;&lt;li&gt;higher
                        than any other local-preference set in the backbone&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set
                        community to be no-export and internal marker community (ASN:666)&amp;nbsp;&lt;ul&gt;&lt;li&gt;Don't
                        want prefix to leak outside the AS&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set next-hop to
                        192.0.2.1 (IPv4) or 100::1 (IPv6)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Then introduce the
                        route-map into the BGP configuration.&lt;/p&gt;&lt;p&gt;To implement the trigger, simply null
                        route whatever address or address block needs to be blackholed:&lt;/p&gt;&lt;p&gt;ip route
                        50.62.124.1 255.255.255.255 null0 tag 66&amp;nbsp;&lt;/p&gt;&lt;p&gt;And this ensures that (for
                        example) 50.62.124.1/32 is announced to the entire backbone with next-hop 192.0.2.1 set.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="RFC 4987 - TCP SYN Flooding Attacks and Common Mitigations" url="https://tools.ietf.org/html/rfc4987"/>
            <reference name="RFC 5635 - Remote Triggered Black Hole Filtering               with Unicast Reverse Path Forwarding (uRPF)" url="https://tools.ietf.org/html/rfc5635"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and
                            monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the
                            implemented availability protection is effective. One useful tool to execute this kind of
                            test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The
                            interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP
                            echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the
                            ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For
                            example, you can simulate a TCP SYN DDoS Attack using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3
                            VICTIM_IP -flood -rand-source -destport 80 -syn -d 120 -w 64&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:32.951">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications
                        between RA (Registration Authority) and CSP (Credential Service Provider), should be
                        authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS
                        connection, using approved cryptographic algorithms.&lt;/p&gt;
                        &lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
                        &lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity
                        that issues security tokens or electronic credentials to subscribers. A CSP forms part of an
                        authentication system, most typically identified as a separate entity in a Federated
                        authentication system. A CSP may be an independent third party, or may issue credentials for its
                        own use. Credential Service Provider is typically also the Identity Provider (IDP). An example
                        of a CSP would be an online site whose primary purpose may be, for example, internet banking -
                        but whose users may be subsequently authenticated to other sites, applications or services
                        without further action on their part.&lt;/p&gt;
                        &lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the
                        identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be
                        independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
                        &lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying
                        the claimant's possession and control of one or two authenticators, using an authentication
                        protocol.&lt;/p&gt;
                        &lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's
                        authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically
                        to process a transaction or grant access to information or a system.&lt;/p&gt;
                        &lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and
                        identity proofing.&lt;/p&gt;
                        &lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more
                        authentication protocols.&lt;/p&gt;
                        &lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator
                        from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example
                            with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="same-encoding-parsers" name="Use the same encodings and parsers in all application components" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Errors may occur when converting between differently coded character data.&amp;nbsp; There are
                        two general types of encoding errors. If the byte sequence is not valid for the specified
                        charset then the input is considered malformed. If the byte sequence cannot be mapped to an
                        equivalent character sequence then an unmappable character has been encountered.
                        &lt;/div&gt;
                        &lt;div&gt;
                        Special care should be taken when decoding untrusted byte data to ensure that malformed input or
                        unmappable character errors do not result in defects and vulnerabilities.&amp;nbsp; Encoding
                        errors can also occur, for example, encoding a cryptographic key containing malformed input for
                        transmission will result in an error. Encoding and decoding errors typically result in data
                        corruption.&amp;nbsp;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;b&gt;Remediation&lt;/b&gt;
                        &lt;/div&gt;Use the same encodings and parsers in all application components to avoid parsing
                        attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI
                        attacks.</desc>
          <implementations/>
          <references>
            <reference name="STR51-J. Use the charset encoder and decoder classes when more control over the encoding process is required" url="https://wiki.sei.cmu.edu/confluence/display/java/STR51-J.+Use+the+charset+encoder+and+decoder+classes+when+more+control+over+the+encoding+process+is+required"/>
          </references>
          <standards>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all application components are using the same encoding style.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.132">
              <output/>
            </source>
            <references>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of
                        the source or transport method. For example, while hidden form fields, cookies or other headers
                        may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated
                        forms. These can be modified by the user on the client-side in memory, or in transit on the
                        network. Similarly, data passed from binary or compiled components can be modified in situ or in
                        transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit
                        between the two ends of the encrypted tunnel (one of which is typically controlled by the
                        client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all
                        data from the client side must be subjected to strict validation, sanitization, and encoding
                        against expected syntactic and semantic criteria.
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax
                        (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a
                        specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be
                        syntactically valid because it only contains alphanumeric characters, but it is not valid if the
                        input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the
                        strict criteria for each input are accepted, and reject, transform, or encapsulate any
                        non-compliant data.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific
                        malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive
                        and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to
                        obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be
                        useful for detecting and logging potential attacks, or determining which inputs are so malformed
                        that they should be rejected outright.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Validate all data received from the client, including values such as &lt;span
                        class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the
                        server side, X- headers, and other platform specific data objects passed between the client and
                        server.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;
                            &lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Serialized Java objects&lt;/li&gt;
                            &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;
                            &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined
                            whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;To test data validation:&amp;nbsp;
                            &lt;p&gt;&lt;/p&gt;
                            &lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it
                            (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing:
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Using a browser extension which allows you to modify the request and responses on
                            the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e.
                            &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp,
                            Fiddler, etc.).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:34.131">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-147" name="Validate input parameters to prevent HTTP Parameter Pollution" issueId="" issueLink="" platform="" cost="0" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>All data received from external sources should be considered tainted and a potential risk,
                        regardless of the source or transport method. HTTP Parameter Pollution attacks result when
                        parameters are added or inserted into requests, and are inappropriately or unsafely handled by
                        the server. For example, injection of parameters into strings or cookies sent to the application
                        can result in the variables being interpreted out of sequence, exploiting flaws in the business
                        logic and flow.
                        &lt;div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;p&gt;For example, there was a bug in the Blogger platform which illustrates this
                        vulnerability. The bug allowed malicious users to take ownership of the victim's blog by using
                        the following HTTP request:&lt;/p&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;&lt;code&gt;POST /add-authors.do HTTP/1.1&lt;/code&gt;&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;p&gt;&lt;code&gt;security_token=attackertoken&amp;amp;&lt;b&gt;blogID=attackerblogidvalue&lt;/b&gt;&amp;amp;&lt;b&gt;blogID=victimblogidvalue&lt;/b&gt;&amp;amp;authorsList=goldshlager19test%40gmail.com(attacker
                        email)&amp;amp;ok=Invite&lt;/code&gt;&lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;p&gt;The flaw resided in the authentication mechanism used by the web application, as the
                        security check was performed on the first&amp;nbsp;&lt;code&gt;blogID&lt;/code&gt;&amp;nbsp;parameter,
                        whereas the actual operation used the second occurrence.&lt;/p&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify parameters within the application used for authentication
                            decisions, or critical business logic.&lt;/li&gt;&lt;li&gt;Send specially forged requests to
                            the application in which those parameters are duplicated, or passed through other methods
                            (e.g. POST parameters in the URL as GET fields, cookies as form fields etc.)&lt;ul&gt;&lt;li&gt;Review
                            the application logic to ensure:&lt;/li&gt;&lt;li&gt;The same parameter is for all the
                            decisions.&lt;/li&gt;&lt;li&gt;Parameters received over unexpected or non compliant methods
                            result in a security exception.&lt;/li&gt;&lt;li&gt;Duplicate parameters are identified and
                            result in a security exception.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application
                            should fail-safe; i.e. unexpected or suspicious behavior should result in termination of the
                            user's session and a security event being logged.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A number of
                            tools can be used to aid in testing:&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly
                            inside your browser with the Developer Tools&lt;/li&gt;&lt;li&gt;Using a browser extension
                            which allows you to modify the request and responses on the fly (i.e. Tamper Data)&lt;/li&gt;&lt;li&gt;Using
                            a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP,
                            Burp, Fiddler, etc.)&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.676">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Testing for HTTP Parameter Pollution" url="https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OTG-INPVAL-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-601" name="Whitelist which URLs the application may redirect to" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should maintain a list of URLs to which it may redirect users. This
                        whitelisting can also be achieved by applying regular expressions. The application should only
                        allow redirects to trusted URLS.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-04 Information Flow Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/26-08_02_AC-04"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the points of the application in which a redirection takes
                            place. Redirections are usually indicated by the use of the "Location" HTTP header along
                            with the "3xx" code.&lt;/li&gt;&lt;li&gt;Verify if the value inside the Location header is
                            coming from user input (URL string, Cookies, HTTP headers, forms, etc.).&lt;/li&gt;&lt;li&gt;Modify
                            the input value which will be part of the Location header to redirect to domains which
                            should not be permitted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:33.676">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS-CONTROL" name="Access Control" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-189" name="An attacker discovers the structure, function, and composition of a type of computer software through black box analysis techniques" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker discovers the structure, function, and composition of a type of computer
                                software through black box analysis techniques. 'Black Box' methods involve interacting
                                with the software indirectly, in the absence of direct access to the executable object.
                                Such analysis typically involves interacting with the software at the boundaries of
                                where the software interfaces with a larger execution environment, such as input-output
                                vectors, libraries, or APIs.</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-203">
                  <countermeasures>
                    <countermeasure ref="post-spectre-web-dev-c1" mitigation="50"/>
                    <countermeasure ref="post-spectre-web-dev-c2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="post-spectre-web-dev-c1" mitigation="50"/>
                <countermeasure ref="post-spectre-web-dev-c2" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="CS-Default">
          <threats>
            <threat ref="sniff-api-responses" name="Attackers sniff the traffic to analyze API responses, looking for sensitive data" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Exploitation of excessive data exposure can be a simple process, and is
                                usually performed by sniffing (covertly observing) the traffic to analyze API responses,
                                looking for sensitive data that should not be returned to the user.&lt;/p&gt;&lt;p&gt;The
                                API may return sensitive data to the client by design. This data is usually filtered on
                                the client side before being presented to the user. An attacker could potentially sniff
                                this traffic and see the sensitive data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="review-api-responses" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="review-api-responses" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="abusing-API-authentication" name="Attackers gain control of users' accounts in the system by abusing poorly implemented API authentication" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;API authentication can be complex and at times confusing. Software and
                                security engineers might have misconceptions about the boundaries of authentication and
                                how to implement it correctly. In addition, the authentication mechanism is a prime
                                target for attackers, since it's exposed to everyone. These two points make the
                                authentication component potentially valuable to miscreants.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-114: Authentication Abuse" url="https://capec.mitre.org/data/definitions/114.html"/>
                <reference name="CAPEC-57: Utilizing REST's Trust in the System Resource to Obtain Sensitive Data" url="https://capec.mitre.org/data/definitions/57.html"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="cwe-352-csrf" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="api-broken-authentication">
                  <countermeasures>
                    <countermeasure ref="best-practices-api-auth" mitigation="90"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="best-practices-api-auth" mitigation="90"/>
                <countermeasure ref="cwe-352-csrf" mitigation="10"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authorization" name="Authorization" desc="" library="CS-Default">
          <threats>
            <threat ref="broken-authorization-api" name="Attackers can exploit API endpoints that are vulnerable to broken authorization to access forbidden functionality" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Attackers could exploit API endpoints that are vulnerable to broken
                                object-level authorization by manipulating the ID of an object that is sent within the
                                request. This may lead to unauthorized access to sensitive data. This issue is extremely
                                common in API-based applications because the server component usually does not fully
                                track the client's state, and instead, relies more on parameters like object IDs, that
                                are sent from the client to decide which objects to access.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-1: Accessing Functionality Not Properly Constrained by ACLs" url="http://capec.mitre.org/data/definitions/1.html"/>
                <reference name="CAPEC-87: Forceful Browsing" url="http://capec.mitre.org/data/definitions/87.html"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-285">
                  <countermeasures>
                    <countermeasure ref="centralized-authz-module" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="api-broken-object-level-authorization">
                  <countermeasures>
                    <countermeasure ref="object-level-authorization" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="centralized-authz-module" mitigation="50"/>
                <countermeasure ref="object-level-authorization" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="availability" name="Availability" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-607" name="Attackers bring the service down by exhausting it (D)DoS" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker can bring a service down by exhausting either the network or the service
                                itself.
                                &lt;br&gt;
                                &lt;br&gt;See references for more information.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="US Cert DDOS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
              </references>
              <weaknesses>
                <weakness ref="AV-DOS-APP">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L3">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L4">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-TLS">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="CS-Default">
          <threats>
            <threat ref="7k-CWE-Environment" name="Attackers gain unauthorised access to the application through an environment flaw" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This section includes everything that is outside of the source code but is
                                still critical to the security of the product that is being created. Because the issues
                                covered by this section are not directly related to source code, we separated it from
                                the rest of the realms.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="ENV-USE" mitigation="50"/>
                    <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ENV-USE" mitigation="50"/>
                <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In applications, particularly web applications, access to functionality is
                                mitigated by the authorization framework, whose job it is to map ACLs to elements of the
                                application's functionality; particularly URL's for web-apps. In cases in which the
                                administrator failed to specify an ACL for a particular element, an attacker may be able
                                to access it with impunity. An attacker with the ability to access functionality not
                                properly constrained by ACLs can obtain sensitive information and possibly compromise
                                the entire application. Such an attacker could potentially access resources that should
                                only be available to users of a higher privilege level, or access management sections of
                                the application, or can run queries for data that he is otherwise not supposed to.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-276">
                  <countermeasures>
                    <countermeasure ref="deny-default-enf" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="deny-default-enf" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-214" name="An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker sends random, malformed, or otherwise unexpected messages to a target
                                application and observes any stack traces produced by error messages. Fuzzing techniques
                                involve sending random or malformed messages to a target and monitoring the target's
                                response. The attacker does not initially know how a target will respond to individual
                                messages but by attempting a large number of message variants they may find a variant
                                that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause
                                the targeted application to return an error including a stack trace, although fuzzing a
                                target can also sometimes cause the target to enter an unstable state, causing a crash.
                                The stack trace enumerates the chain of methods that led up to the point where the error
                                was encountered. This can not only reveal the names of the methods (some of which may
                                have known weaknesses) but possibly also the location of class files and libraries as
                                well as parameter values. In some cases, the stack trace might even disclose sensitive
                                configuration or user information.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-460">
                  <countermeasures>
                    <countermeasure ref="error-handling-centralized" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="error-handling-centralized" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment,
                                allowing developers to monitor their code regularly in order to avoid security
                                vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="hostile-subdomain-takeover" name="Attackers claim subdomains with the help of external services" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                This attack vector utilizes DNS entries pointing to Service Providers where the pointed
                                sub-domain is currently not in use. Depending on the DNS-entry configuration and which
                                Service Provider it points to, some of these services will allow unverified users to
                                claim these sub-domains as their own.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                In the not so rare case, the attacker can also "inherit" the Domain Owner's Wildcard SSL
                                used inside the Service Provider.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;div&gt;
                                &lt;b&gt;Attack Scenario&lt;/b&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;ol&gt;
                                &lt;li&gt;Your company starts using a new service, eg an external Support
                                Ticketing-service.&lt;/li&gt;
                                &lt;li&gt;Your company points a sub-domain to the Support Ticketing-service, eg
                                support.your-domain.com&lt;/li&gt;
                                &lt;li&gt;Your company stops using this service but does not remove the sub-domain
                                redirection pointing to the ticketing system.&lt;/li&gt;
                                &lt;li&gt;Attacker signs up for the Service and claims the domain as theirs. No
                                verification is done by the Service Provider, and the DNS-setup is already correctly
                                setup.&lt;/li&gt;
                                &lt;li&gt;Attacker can now build a complete clone of the real site, add a login form,
                                redirect the user, steal credentials (e.g. admin accounts), cookies and/or completely
                                destroy business credibility for your company.&lt;/li&gt;
                                &lt;/ol&gt;
                                &lt;/div&gt;
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Hostile Subdomain Takeover using Heroku/Github/Desk + more" url="https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-350">
                  <countermeasures>
                    <countermeasure ref="identify-dns-domains" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="identify-dns-domains" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SOURCE-LEAK" name="Attackers gain control of the system through a source code leakage" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Attackers gain unauthorized access to a service by reading raw source code
                                returned by the service, and this code contains confidential information such as
                                authentication credentials or other secrets that can be used to access the service.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Configuration
                                files that can be downloaded from the service could also be leveraged to gain access to
                                sensitive information.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-541">
                  <countermeasures>
                    <countermeasure ref="CWE-541" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-541" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-172" name="Attackers subvert the intended workflow of the application in order to perform unauthorised operations" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;If an application enforces an order in workflows, then attackers could
                                attempt to bypass this order so that they can perform operations for which they are not
                                authorized. The technique can also be used to gain access to unauthorized data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-841">
                  <countermeasures>
                    <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                    <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing
                                the attackers' request, thereby reducing the resources available for legitimate services
                                and degrading or denying services. Usually, this attack focuses on memory allocation,
                                but any finite resource on the target could be the attacked, including bandwidth,
                                processing cycles, or other resources.&amp;nbsp;&lt;/p&gt;
                                &lt;p&gt;This attack does not attempt to force this allocation through a large number of
                                requests (that would be Resource Depletion through Flooding) but instead uses one or a
                                small number of requests that are carefully formatted to force the target to allocate
                                excessive resources to service this request(s). Often this attack takes advantage of a
                                bug in the target to cause the target to allocate resources vastly beyond what would be
                                needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-770">
                  <countermeasures>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                    <countermeasure ref="network-rate-limit" mitigation="34"/>
                    <countermeasure ref="protection-against-data-mining" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="protection-against-data-mining" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be
                                reserved for privileged users or administrators but are exposed to use by lower or
                                non-privileged accounts. Access to sensitive information and functionality must be
                                controlled to ensure that only authorized users are able to access these resources. If
                                access control mechanisms are absent or misconfigured, a user may be able to access
                                resources that are intended only for higher level users. An adversary may be able to
                                exploit this to utilize a less trusted account to gain information and perform
                                activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt;
                                &lt;p&gt;This attack differs from privilege escalation and other privilege stealing
                                attacks in that the adversary never actually escalates their privileges but instead is
                                able to use a lesser degree of privilege to access resources that should be (but are
                                not) reserved for higher privilege accounts. Likewise, the adversary does not exploit
                                trust or subvert systems - all control functionality is working as configured but the
                                configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-272">
                  <countermeasures>
                    <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOG-MANAGEMENT" name="Log Management" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-93" name="An attacker injects, manipulates or forges malicious log entries in the log file, allowing her to mislead a log audit, cover traces of attack, or perform other malicious actions" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack targets the log files of the target host. The attacker injects,
                                manipulates or forges malicious log entries in the log file, allowing him to mislead a
                                log audit, cover traces of attack, or perform other malicious actions. The target host
                                is not properly controlling log access. As a result tainted data is resulting in the log
                                files leading to a failure in accountability, non-repudiation and incident forensics
                                capability.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-117">
                  <countermeasures>
                    <countermeasure ref="ASVS-8.8" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="LOGS-INTEGRITY" mitigation="40"/>
                    <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="LOGS-INTEGRITY" mitigation="40"/>
                <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-778-AUTH" name="Attacks against the authentication system may go undetected" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Automated attacks against many user accounts, or successful attacks against an account
                                require a response. &amp;nbsp;If audit logs are not kept of both successful and
                                unsuccessful authentication operations, then post attack forensics will be hampered.&amp;nbsp;&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Without a dynamic response to mass automated attacks against the
                                authentication system, attackers stand a greater chance of success.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="CDS-USER-TRACK" mitigation="16"/>
                    <countermeasure ref="CSD-VAL-LOG" mitigation="14"/>
                    <countermeasure ref="CWE-662" mitigation="14"/>
                    <countermeasure ref="EU-GDPR-LOGGING" mitigation="14"/>
                    <countermeasure ref="LOG-TLS-FAILURES" mitigation="14"/>
                    <countermeasure ref="LOGS-INTEGRITY" mitigation="14"/>
                    <countermeasure ref="security-logging" mitigation="14"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CDS-USER-TRACK" mitigation="16"/>
                <countermeasure ref="CSD-VAL-LOG" mitigation="14"/>
                <countermeasure ref="CWE-662" mitigation="14"/>
                <countermeasure ref="EU-GDPR-LOGGING" mitigation="14"/>
                <countermeasure ref="LOG-TLS-FAILURES" mitigation="14"/>
                <countermeasure ref="LOGS-INTEGRITY" mitigation="14"/>
                <countermeasure ref="security-logging" mitigation="14"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data
                                subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-532">
                  <countermeasures>
                    <countermeasure ref="CWE-532" mitigation="70"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-779">
                  <countermeasures>
                    <countermeasure ref="LOG-RETENTION" mitigation="30"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-532" mitigation="70"/>
                <countermeasure ref="LOG-RETENTION" mitigation="30"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="post-data" name="Post data" desc="Data is received (posted) here" library="CS-Default">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal
                                resources. The attacker can supply - or modify - a URL which the code running on the
                                server will read or submit data to, and by carefully selecting the URLs, the attacker
                                may be able to read server configuration details such as AWS metadata, connect to
                                internal services like http enabled databases, or perform post requests towards internal
                                services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="25"/>
                    <countermeasure ref="CWE-601" mitigation="25"/>
                    <countermeasure ref="DATA-VAL" mitigation="25"/>
                    <countermeasure ref="WEB-FILE-DATA" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="25"/>
                <countermeasure ref="CWE-601" mitigation="25"/>
                <countermeasure ref="DATA-VAL" mitigation="25"/>
                <countermeasure ref="WEB-FILE-DATA" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-35" name="Attackers can leverage Executable Code in Non-Executable Files" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attack of this type exploits a system's trust in configuration and resource files,
                                when the executable loads the resource (such as an image file or configuration file) the
                                attacker has modified the file to either execute malicious code directly or manipulate
                                the target process (e.g. application server) to execute based on the malicious
                                configuration parameters. Since systems are increasingly interrelated mashing up
                                resources from local and remote sources the possibility of this attack occurring is
                                high.
                                &lt;br /&gt;The attack can be directed at a client system, such as causing buffer
                                overrun through loading seemingly benign image files, as in Microsoft Security Bulletin
                                MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded
                                into the browser. Another example targets clients reading pdf files. In this case the
                                attacker simply appends javascript to the end of a legitimate url for a pdf
                                (http://www.gnucitizen.org/blog/danger-danger-danger/)
                                &lt;br /&gt;http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here
                                &lt;br /&gt;The client assumes that they are reading a pdf, but the attacker has
                                modified the resource and loaded executable javascript into the client's browser
                                process.
                                &lt;br /&gt;The attack can also target server processes. The attacker edits the resource
                                or configuration file, for example a web.xml file used to configure security permissions
                                for a J2EE app server, adding role name &amp;quot;public&amp;quot; grants all users with
                                the public role the ability to use the administration functionality.
                                &lt;br /&gt;The server trusts its configuration file to be correct, but when they are
                                manipulated, the attacker gains full control.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-95">
                  <countermeasures>
                    <countermeasure ref="dyn-exec" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="dyn-exec" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-176" name="Attackers can manipulate Configuration/Environment" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker manipulates files or settings external to a target application which
                                affect the behavior of that application. For example, many applications use external
                                configuration files and libraries - modification of these entities or otherwise
                                affecting the application's ability to use them would constitute a
                                configuration/environment manipulation attack.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-15">
                  <countermeasures>
                    <countermeasure ref="configuration-integrity" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="configuration-integrity" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-94" name="Attackers gain access to the system through Server-Side Code Injection" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Server-Side Code Injection happens when an attacker is able to direct input
                                under his control and mix it with executed code on the server side by modifying the
                                logic executed on it.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Depending
                                on the code isolation, this event could grant the user access to system resources and
                                data.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-78">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="80"/>
                    <countermeasure ref="SAME-ENCODING-STYLE" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="80"/>
                <countermeasure ref="SAME-ENCODING-STYLE" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-73" name="Attackers upload code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attack of this type involves an attacker inserting malicious characters
                                (such as a XSS redirection) into a filename, directly or indirectly that is then used by
                                the target software to generate HTML text or other potentially executable content. Many
                                websites rely on user-generated content and dynamically build resources like files,
                                filenames, and URL links directly from user supplied data. In this attack pattern, the
                                attacker uploads code that can execute in the client browser and/or redirect the client
                                browser to a site that the attacker owns. All XSS attack payload variants can be used to
                                exploit these vulnerabilities.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-116">
                  <countermeasures>
                    <countermeasure ref="same-encoding-parsers" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="same-encoding-parsers" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-586-SER" name="An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Developers leverage serialization in order to convert data or state into a static,
                                binary format for saving to disk or transferring over a network. These objects are then
                                deserialized when needed to recover the data/state. By injecting a malformed object into
                                a vulnerable application, an adversary can potentially compromise the application by
                                manipulating the deserialization process. This can result in a number of unwanted
                                outcomes, including remote code execution.
                                &lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-502">
                  <countermeasures>
                    <countermeasure ref="SER-UNTRUST" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="SER-UNTRUST" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-62" name="An attacker crafts malicious web links and distributes them hoping to induce users to click on the link and execute a malicious action" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker crafts malicious web links and distributes them (via web pages, email,
                                etc.), typically in a targeted manner, hoping to induce users to click on the link and
                                execute the malicious action against some third-party application. If successful, the
                                action embedded in the malicious link will be processed and accepted by the targeted
                                application with the users' privilege level.
                                &lt;br&gt;This type of attack leverages the persistence and implicit trust placed in
                                user session cookies by many web applications today. In such an architecture, once the
                                user authenticates to an application and a session cookie is created on the user's
                                system, all following transactions for that session are authenticated using that cookie
                                including potential actions initiated by an attacker and simply "riding" the existing
                                session cookie.
                                &lt;br&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="ASVS-18.8" mitigation="34"/>
                    <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                    <countermeasure ref="cwe-352-csrf" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-18.8" mitigation="34"/>
                <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                <countermeasure ref="cwe-352-csrf" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="open-redirect-threat" name="An attacker leverages the redirection functionality in the application to conduct more convincing phishing attacks" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An http parameter may contain a URL value for redirecting the request to
                                another specified URL. By modifying this URL value to point towards a malicious site, an
                                attacker may successfully launch a phishing scam and steal user credentials. Because the
                                server name in the modified link is identical to the original site, phishing attempts
                                have a more trustworthy and convincing appearance.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-601">
                  <countermeasures>
                    <countermeasure ref="CWE-601" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-601" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-117" name="An attacker monitors HTTP headers from a target in order to gather information" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>An attacker monitors data streams to or from a target in order to gather information.
                                This attack may be undertaken in order to gather information to support a later attack,
                                or the data collected may be the end goal of the attack. This attack usually involves
                                sniffing network traffic, but may include observing other types of data streams, such as
                                radio. In most varieties of this attack, the attacker is passive and simply observes
                                regular communication, however in some variants the attacker may attempt to initiate the
                                establishment of a data stream or influence the nature of the data transmitted. However,
                                in all variants of this attack, and distinguishing this attack from other data
                                collection methods, the attacker is not the intended recipient of the data stream.
                                Unlike some other data leakage attacks, the attacker is observing explicit data channels
                                (e.g. network traffic) and reading the content. This differs from attacks that collect
                                more qualitative information, such as communication volume, or other information not
                                explicitly communicated via a data stream.</desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="ASVS-11.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-11.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-267" name="Attackers encode potentially harmful input and submit it to bypass input filtering protections" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack leverages the possibility of encoding potentially harmful input
                                and submitting it to applications not expecting or effective at validating this
                                encoding, thus, thwarting the validation.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-173">
                  <countermeasures>
                    <countermeasure ref="harden-http-headers" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-235">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="50"/>
                <countermeasure ref="harden-http-headers" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="api-injection" name="Attackers feed the API with malicious data through injection vectors (e.g., direct input, parameters, integrated services, etc.), hoping for it to be sent to an interpreter" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Injection flaws are very common and are often found in SQL, LDAP, or NoSQL
                                queries, OS commands, XML parsers, and ORM. These flaws are relatively easy to discover
                                when reviewing the source code. Attackers can use scanners and fuzzers.&lt;/p&gt;&lt;p&gt;Injection
                                exploits can lead to information disclosure and data loss. It could also lead to DoS, or
                                complete host takeover in the worst scenarios.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-248: Command Injection" url="https://capec.mitre.org/data/definitions/248.html"/>
                <reference name="CAPEC-66: SQL Injection" url="https://capec.mitre.org/data/definitions/66.html"/>
              </references>
              <weaknesses>
                <weakness ref="api-vulnerable-injection">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-300" name="Attackers gain control of the connection through a Man In The Middle attack" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.&amp;nbsp; &amp;nbsp;
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-273" name="Attackers inject content into a server response that is interpreted differently by intermediaries than it is by the target browser" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker injects content into a server response that is interpreted
                                differently by intermediaries than it is by the target browser. To achieve this takes
                                advantage of inconsistent or incorrect interpretations of the HTTP protocol by various
                                applications. For example, using different block terminating characters (CR or LF
                                alone), adding duplicate header fields that browsers interpret as belonging to separate
                                responses, or other techniques. Consequences of this attack can include
                                response-splitting, cross-site scripting, defacement, cache poisoning, or similar
                                actions.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-436">
                  <countermeasures>
                    <countermeasure ref="rest-content-type-val" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="rest-content-type-val" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="unpatched-api" name="Attackers may gain access to sensitive data, or even take over the server through old, unpatched, API versions connected to the same database" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                Old API versions are usually unpatched and are an easy way to compromise systems without
                                having to fight state-of-the-art security mechanisms, which might be in place to protect
                                the most recent API versions.
                                &lt;/div&gt;
                                &lt;div&gt;
                                Outdated documentation makes it more difficult to find and/or fix vulnerabilities.&amp;nbsp;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br&gt;
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-310: Scanning for Vulnerable Software" url="https://capec.mitre.org/data/definitions/310.html"/>
              </references>
              <weaknesses>
                <weakness ref="lack-assets-inventory">
                  <countermeasures>
                    <countermeasure ref="inventory-api" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="inventory-api" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-MASS" name="Functionality could be subverted through mass assignment" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>If the application binds parameters to back-end objects, then attackers could
                                potentially set fields on those objects that were not designed to be modified by the
                                user.</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-915">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                    <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-101" name="Unauthorised data could be accessed by manipulating parameters sent to the application" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>The application could be tricked into exposing data to unauthorized users by
                                manipulating the parameters it accepts. All data received from the client side could be
                                subject to manipulation, including fields like cookies and HTTP headers, if these are
                                used as inputs to the application.</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-22">
                  <countermeasures>
                    <countermeasure ref="CWE-639" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-548">
                  <countermeasures>
                    <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-650">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="25"/>
                <countermeasure ref="CWE-639" mitigation="25"/>
                <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="4dcfce29-0282-4abd-8b6e-67650ff2c4d5" diagramComponentId="e4bc7a6d-9ec2-4713-8add-401bc7287a11" ref="aa19a301-3655-4958-8fa9-12f6c8f76746" name="Microsoft Azure Service Bus Messaging" desc="" library="Microsoft-Azure" parentComponentRef="" componentDefinitionRef="CD-MICROSOFT-AZURE-SER-BUS-MSG">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AZURE-ACCESS-01" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        The credentials for groups and roles are not correctly configured and there are user accounts with more privileges than necessary.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Log into the Azure portal as an owner.&lt;/li&gt;
                            &lt;li&gt;Select Azure Active Directory.&lt;/li&gt;
                            &lt;li&gt;Go into &amp;quot;Users and groups&amp;quot; &amp;gt; &amp;quot;All users&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Check that each user has got assigned the correct groups.&lt;/li&gt;
                            &lt;li&gt;Go into &amp;quot;Users and groups&amp;quot; &amp;gt; &amp;quot;All groups&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Check that each group has got assigned the correct roles to achieve principle of
                            least privilege.&lt;/li&gt;
                            &lt;li&gt;Check that the roles for the Cloud Service are well assigned.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;div&gt;
                            &lt;/div&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-05-18T23:34:50.190">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AZURE-VNET01" name="Networks for Azure resources are not properly segmented. Without proper segmentation, when attackers gain access to one resource, any other resources in the same VNet are compromised" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Resources in the same VNet are compromised because when one of them is attacked and the
                        attackers gain access, they also gain access to all resources.
                        &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Identify the resources and the Microsoft Azure instances.
                            &lt;/div&gt;
                            &lt;div&gt;
                            Check that the resources are in the correct VNet.
                            &lt;/div&gt;
                            &lt;div&gt;
                            Check that the Microsoft Azure instances&amp;nbsp;are into different VNets.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:32.843">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-AZURE-SER-BUS-MSG1" name="Use Azure Private Link to enable private access to Service Bus" issueId="" issueLink="" platform="" cost="0" risk="52" state="Recommended" owner="ccumming@synopsys.com" library="Microsoft-Azure" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use Azure Private Link to enable private access to Service Bus&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Use Azure Private Link to enable private access to Service Bus from your virtual networks without crossing the internet.&lt;br&gt; Private access is an additional defense in depth measure to the authentication and traffic security offered by Azure services.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; To integrate a Service Bus namespace with Azure Private Link, you'll need the following entities or permissions:&lt;/p&gt; 
&lt;p&gt;- A Service Bus namespace.&lt;br&gt; - An Azure virtual network.&lt;br&gt; - A subnet in the virtual network. You can use the default subnet.&lt;br&gt; - Owner or contributor permissions for both the Service Bus namespace and the virtual network.&lt;/p&gt; 
&lt;p&gt;Your private endpoint and virtual network must be in the same region. When you select a region for the private endpoint using the portal, it will automatically filter only virtual networks that are in that region. Your Service Bus namespace can be in a different region. And, Your private endpoint uses a private IP address in your virtual network.&lt;/p&gt; 
&lt;p&gt;If you already have an existing namespace, you can create a private endpoint by following these steps:&lt;/p&gt; 
&lt;p&gt;1. Sign in to the Azure portal.&lt;/p&gt; 
&lt;p&gt;2. In the search bar, type in Service Bus.&lt;/p&gt; 
&lt;p&gt;3. Select the namespace from the list to which you want to add a private endpoint.&lt;/p&gt; 
&lt;p&gt;4. On the left menu, select Networking option under Settings. By default, the Selected networks option is selected.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; You see the Networking tab only for premium namespaces.&lt;/p&gt; 
&lt;p&gt;Warning&lt;br&gt; If you don't add at least one IP firewall rule or a virtual network on this page, the namespace can be accessed over public internet (using the access key).&lt;/p&gt; 
&lt;p&gt;If you select the All networks option, your Service Bus namespace accepts connections from any IP address (using the access key). This default setting is equivalent to a rule that accepts the 0.0.0.0/0 IP address range.&lt;/p&gt; 
&lt;p&gt;5. To allow access to the namespace via private endpoints, select the Private endpoint connections tab at the top of the page&lt;/p&gt; 
&lt;p&gt;6. Select the + Private Endpoint button at the top of the page.&lt;/p&gt; 
&lt;p&gt;7. On the Basics page, follow these steps:&lt;/p&gt; 
&lt;p&gt;a. Select the Azure subscription in which you want to create the private endpoint.&lt;/p&gt; 
&lt;p&gt;b. Select the resource group for the private endpoint resource.&lt;/p&gt; 
&lt;p&gt;c. Enter a name for the private endpoint.&lt;/p&gt; 
&lt;p&gt;d. Select a region for the private endpoint. Your private endpoint must be in the same region as your virtual network, but can be in a different region from the private link resource that you are connecting to.&lt;/p&gt; 
&lt;p&gt;e. Select Next: Resource &amp;gt; button at the bottom of the page.&lt;/p&gt; 
&lt;p&gt;8. On the Resource page, follow these steps:&lt;/p&gt; 
&lt;p&gt;a. For connection method, if you select Connect to an Azure resource in my directory, follow these steps:&lt;/p&gt; 
&lt;p&gt;i. Select the Azure subscription in which your Service Bus namespace exists.&lt;/p&gt; 
&lt;p&gt;ii. For Resource type, Select Microsoft.ServiceBus/namespaces for the Resource type.&lt;/p&gt; 
&lt;p&gt;iii. For Resource, select a Service Bus namespace from the drop-down list.&lt;/p&gt; 
&lt;p&gt;iv. Confirm that the Target subresource is set to namespace.&lt;/p&gt; 
&lt;p&gt;v. Select Next: Configuration &amp;gt; button at the bottom of the page.&lt;/p&gt; 
&lt;p&gt;b. If you select Connect to an Azure resource by resource ID or alias, follow these steps:&lt;/p&gt; 
&lt;p&gt;i. Enter the resource ID or alias. It can be the resource ID or alias that someone has shared with you. The easiest way to get the resource ID is to navigate to the Service Bus namespace in the Azure portal and copy the portion of URI starting from /subscriptions/. See the following image for an example.&lt;/p&gt; 
&lt;p&gt;ii. For Target sub-resource, enter namespace. It's the type of the sub-resource that your private endpoint can access.&lt;/p&gt; 
&lt;p&gt;iii.(optional) Enter a request message. The resource owner sees this message while managing private endpoint connection.&lt;/p&gt; 
&lt;p&gt;iv. Then, select Next: Configuration &amp;gt; button at the bottom of the page.&lt;/p&gt; 
&lt;p&gt;9. On the Configuration page, you select the subnet in a virtual network to where you want to deploy the private endpoint.&lt;/p&gt; 
&lt;p&gt;a. Select a virtual network. Only virtual networks in the currently selected subscription and location are listed in the drop-down list.&lt;/p&gt; 
&lt;p&gt;b. Select a subnet in the virtual network you selected.&lt;/p&gt; 
&lt;p&gt;c. Select Next: Tags &amp;gt; button at the bottom of the page.&lt;/p&gt; 
&lt;p&gt;10. On the Tags page, create any tags (names and values) that you want to associate with the private endpoint resource. Then, select Review + create button at the bottom of the page.&lt;/p&gt; 
&lt;p&gt;11. On the Review + create, review all the settings, and select Create to create the private endpoint.&lt;/p&gt; 
&lt;p&gt;12. Confirm that the private endpoint is created. If you are the owner of the resource and had selected Connect to an Azure resource in my directory option for the Connection method, the endpoint connection should be auto-approved. If it's in the pending state, please see the Manage private endpoints using Azure portal section at Reference URL.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Allow access to Azure Service Bus namespaces via private endpoints" url="https://docs.microsoft.com/en-us/azure/service-bus-messaging/private-link-service"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Validate that the private link connection works&lt;/p&gt;

	&lt;p&gt;You should validate that resources within the virtual network of the private endpoint are connecting to your Service Bus namespace over a private IP address, and that they have the correct private DNS zone integration.&lt;/p&gt;

	&lt;p&gt;First, create a Windows virtual machine in the Azure portal&lt;/p&gt;

	&lt;p&gt;In the Networking tab:&lt;/p&gt;

	&lt;p&gt;1. Specify Virtual network and Subnet. You must select the Virtual Network on which you deployed the private endpoint.&lt;br /&gt;
2. Specify a public IP resource.&lt;br /&gt;
3. For NIC network security group, select None.&lt;br /&gt;
4 For Load balancing, select No.&lt;/p&gt;

	&lt;p&gt;Connect to the VM, open the command line, and run the following command:&lt;/p&gt;

	&lt;p&gt;nslookup &lt;service-bus-namespace-name&gt;.servicebus.windows.net&lt;/p&gt;

	&lt;p&gt;You should see a result that looks like the following.&lt;/p&gt;

	&lt;p&gt;Non-authoritative answer:&lt;br /&gt;
Name:    &lt;service-bus-namespace-name&gt;.privatelink.servicebus.windows.net&lt;br /&gt;
Address:  10.0.0.4 (private IP address associated with the private endpoint)&lt;br /&gt;
Aliases:  &lt;service-bus-namespace-name&gt;.servicebus.windows.net&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:32.818">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AZURE-MANAGED-ID" name="Use Managed Identities" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="ccumming@synopsys.com" library="Microsoft-Azure" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use Managed Identities&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Use Managed Identities to provide Azure services with an automatically managed identity in Azure AD. Managed Identities allows you to authenticate to any service that supports Azure AD authentication to Azure Resource Manager and can be used with API/Azure Portal/CLI/PowerShell.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Enable system-assigned managed identity during creation of a VM&lt;/p&gt; 
&lt;p&gt;To enable system-assigned managed identity on a VM during its creation, your account needs the Virtual Machine Contributor role assignment. No additional Azure AD directory role assignments are required.&lt;/p&gt; 
&lt;p&gt;- Under the Management tab in the Identity section, switch Managed service identity to On.&lt;/p&gt; 
&lt;p&gt;Enable system-assigned managed identity on an existing VM&lt;/p&gt; 
&lt;p&gt;To enable system-assigned managed identity on a VM that was originally provisioned without it, your account needs the Virtual Machine Contributor role assignment. No additional Azure AD directory role assignments are required.&lt;/p&gt; 
&lt;p&gt;1. Sign in to the Azure portal using an account associated with the Azure subscription that contains the VM.&lt;/p&gt; 
&lt;p&gt;2. Navigate to the desired Virtual Machine and select Identity.&lt;/p&gt; 
&lt;p&gt;3. Under System assigned, Status, select On and then click Save:&lt;/p&gt; 
&lt;p&gt;Assign a user-assigned managed identity to an existing VM&lt;/p&gt; 
&lt;p&gt;To assign a user-assigned identity to a VM, your account needs the Virtual Machine Contributor and Managed Identity Operator role assignments. No additional Azure AD directory role assignments are required.&lt;/p&gt; 
&lt;p&gt;1. Sign in to the Azure portal using an account associated with the Azure subscription that contains the VM.&lt;/p&gt; 
&lt;p&gt;2. Navigate to the desired VM and click Identity, User assigned and then +Add.&lt;/p&gt; 
&lt;p&gt;3. Click the user-assigned identity you want to add to the VM and then click Add.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Configure managed identities for Azure resources on a VM using the Azure portal" url="https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/qs-configure-portal-windows-vm"/>
          </references>
          <standards>
            <standard ref="IM-3" supportedStandardRef="azure-security-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you manage identities securely and automatically.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-05-18T23:34:50.095">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Microsoft-Azure">
          <threats>
            <threat ref="LOSS-CONTROL_ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="ccumming@synopsys.com" library="Microsoft-Azure" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized access to the control of the environment, due to user accounts - or role groups - not being well defined and configured. As a consequence attackers may be able to make changes without root approval.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AZURE-ACCESS-01">
                  <countermeasures>
                    <countermeasure ref="AZURE-MANAGED-ID" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AZURE-MANAGED-ID" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Microsoft-Azure">
          <threats>
            <threat ref="AZURE-UNAUTHORISED-CONNECTION" name="Attackers perform unauthorized network access" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="Microsoft-Azure" editable="true">
              <desc>&lt;p&gt;Attackers could perform unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AZURE-VNET01">
                  <countermeasures>
                    <countermeasure ref="C-AZURE-SER-BUS-MSG1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AZURE-SER-BUS-MSG1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="9819df95-566d-4144-875d-7852fbffb68c" diagramComponentId="de1dd15d-5242-4d0e-913c-09d2d381dfb7" ref="84938d4c-4d32-4de6-a1be-c852de621214" name="Mobile Device Client" desc="" library="OWASP-MASVS" parentComponentRef="" componentDefinitionRef="mobile-device-client">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-388" name="An error condition is not properly handled (Error Handling)" state="0" impact="100" issueId="" issueLink="">
          <desc>Errors and error handling represent a class of API. Errors related to error handling are so
                        common that they deserve a special kingdom of their own. As with "API Abuse", there
                        are two ways to introduce an error-related security vulnerability: the most common one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.612">
              <output/>
            </source>
            <references>
              <reference name="CWE-388: An error condition is not properly handled (Error Handling)" url="https://cwe.mitre.org/data/definitions/388.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-120" name="Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" state="0" impact="100" issueId="" issueLink="">
          <desc>The program copies an input buffer to an output buffer without verifying that the size of the
                        input buffer is less than the size of the output buffer, leading to a buffer overflow.
                        &lt;br /&gt;A buffer overflow condition exists when a program attempts to put more data in a
                        buffer than it can hold, or when a program attempts to put data in a memory area outside of the
                        boundaries of a buffer. The simplest type of error, and the most common cause of buffer
                        overflows, is the &amp;quot;classic&amp;quot; case in which the program copies the buffer
                        without restricting how much is copied. Other variants exist, but the existence of a classic
                        overflow strongly suggests that the programmer is not considering even the most basic of
                        security protections.
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.612">
              <output/>
            </source>
            <references>
              <reference name="CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" url="https://cwe.mitre.org/data/definitions/120.html"/>
              <reference name="Smashing The Stack For Fun And Profit" url="https://insecure.org/stf/smashstack.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-494" name="Download of Code Without Integrity Check" state="0" impact="100" issueId="" issueLink="">
          <desc>The product downloads source code or an executable from a remote location and executes the
                        code without sufficiently verifying the origin and integrity of the code.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.612">
              <output/>
            </source>
            <references>
              <reference name="CWE-494: Download of Code Without Integrity Check" url="https://cwe.mitre.org/data/definitions/494.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.612">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-749" name="Exposed Dangerous Method or Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software provides an Applications Programming Interface (API) or similar interface for
                        interaction with external actors, but the interface includes a dangerous method or function that
                        is not properly restricted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.612">
              <output/>
            </source>
            <references>
              <reference name="CWE-749: Exposed Dangerous Method or Function" url="https://cwe.mitre.org/data/definitions/749.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-79" name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes user-controllable input before it
                        is placed in output that is used as a web page that is served to other users. Cross-site
                        scripting (XSS) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;There are three main kinds of XSS:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 1: Reflected XSS (or Non-Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The server reads data directly from the HTTP request and reflects it back in the HTTP response.
                        Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a
                        vulnerable web application, which is then reflected back to the victim and executed by the web
                        browser. The most common mechanism for delivering malicious content is to include it as a
                        parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed
                        in this manner constitute the core of many phishing schemes, whereby an attacker convinces a
                        victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's
                        content back to the victim, the content is executed by the victim's browser.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 2: Stored XSS (or Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The application stores dangerous data in a database, message forum, visitor log, or other
                        trusted data store. At a later time, the dangerous data is subsequently read back into the
                        application and included in dynamic content. From an attacker's perspective, the optimal place
                        to inject malicious content is in an area that is displayed to either many users or particularly
                        interesting users. Interesting users typically have elevated privileges in the application or
                        interact with sensitive data that is valuable to the attacker. If one of these users executes
                        malicious content, the attacker may be able to perform privileged operations on behalf of the
                        user or gain access to sensitive data belonging to the user. For example, the attacker might
                        inject XSS into a log message, which might not be handled properly when an administrator views
                        the logs.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 0: DOM-Based XSS&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        In DOM-based XSS, the client performs the injection of XSS into the page; in the other types,
                        the server performs the injection. DOM-based XSS generally involves server-controlled, trusted
                        script that is sent to the client, such as Javascript that performs sanity checks on a form
                        before the user submits it. If the server-supplied script processes user-supplied data and then
                        injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is
                        possible.Once the malicious script is injected, the attacker can perform a variety of malicious
                        activities. The attacker could transfer private information, such as cookies that may include
                        session information, from the victim's machine to the attacker. The attacker could send
                        malicious requests to a web site on behalf of the victim, which could be especially dangerous to
                        the site if the victim has administrator privileges to manage that site. Phishing attacks could
                        be used to emulate trusted web sites and trick the victim into entering a password, allowing the
                        attacker to compromise the victim's account on that web site. Finally, the script could exploit
                        a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes
                        referred to as &amp;quot;drive-by hacking&amp;quot;.
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;br /&gt;
                        &lt;/blockquote&gt;In many cases, the attack can be launched without the victim even being aware
                        of it. Even with careful users, attackers frequently use a variety of methods to encode the
                        malicious portion of the attack, such as URL encoding or Unicode, so the request looks less
                        suspicious.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.612">
              <output/>
            </source>
            <references>
              <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-83" name="Improper Neutralization of Script in Attributes in a Web Page" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes "javascript:" or other URIs from
                        dangerous attributes within tags, such as onmouseover, onload, onerror, or style.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.612">
              <output/>
            </source>
            <references>
              <reference name="CWE-83: Improper Neutralization of Script in Attributes in a Web Page" url="https://cwe.mitre.org/data/definitions/83.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MASVS-EMULATION-TOOLS" name="Inappropriate use of emulation tools" state="0" impact="100" issueId="" issueLink="">
          <desc>The inappropriate use of emulation tools are not detected by the app, and attackers can
                        leverage them to obtain information about the app.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.612">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MASVS-REVERSE-ENGINEERING-TOOLS" name="Inappropriate use of reverse engineering tools" state="0" impact="100" issueId="" issueLink="">
          <desc>The inappropriate use of the reverse engineering tools is not detected by the app, and
                        attackers can leverage them to obtain information about the app.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.611">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100" issueId="" issueLink="">
          <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.

When a resource is given a permission setting that provides access to a wider range of actors than required, it can lead to the exposure of sensitive information or to the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.609">
              <output/>
            </source>
            <references>
              <reference name="CWE-732: Incorrect Permission Assignment for Critical Resource" url="https://cwe.mitre.org/data/definitions/732.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-215" name="Information Exposure Through Debug Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The application contains debugging code that can expose sensitive information to untrusted parties.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.611">
              <output/>
            </source>
            <references>
              <reference name="CWE-215: Information Exposure Through Debug Information" url="https://cwe.mitre.org/data/definitions/215.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.611">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-489" name="Leftover Debug Code" state="0" impact="100" issueId="" issueLink="">
          <desc>The application can be deployed with active debugging code that can create unintended entry
                        points.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.611">
              <output/>
            </source>
            <references>
              <reference name="CWE-489: Leftover Debug Code" url="https://cwe.mitre.org/data/definitions/489.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MEMORY-LEAKAGE" name="Memory Leakage" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.611">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="OUTDATED-LIBRARIES" name="Outdated libraries" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.611">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-656" name="Reliance on Security Through Obscurity" state="0" impact="100" issueId="" issueLink="">
          <desc>The software uses a protection mechanism whose strength depends heavily on its obscurity, such
                        that knowledge of its algorithms or key data is sufficient to defeat the mechanism.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:09.611">
              <output/>
            </source>
            <references>
              <reference name="CWE-656: Reliance on Security Through Obscurity" url="https://cwe.mitre.org/data/definitions/656.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="MASVS-7.9" name="Activate the Free Security Features" issueId="" issueLink="" platform="" cost="1" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>For Android:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;We shall activate the Obfuscation of the code and strip unneeded debugging information.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;For iOS:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;We shall activate:&amp;nbsp;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;ARC (Automatic Reference Counting): memory management feature, adds retain and release messages when required.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Stack Canary: helps prevent buffer overflow attacks.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;PIE (Position Independent Executable): enables full ASLR for binary.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-for-debugging-symbols-mstg-code-3"/>
            <reference name="OWASP MASVS - iOS - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#finding-debugging-code-and-verbose-error-logging-mstg-code-4"/>
          </references>
          <standards>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.6" name="Allow only the minimum set of protocol handlers required" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Configure the WebViews to allow only the minimum set of protocol handlers required (ideally, only https). Potentially dangerous handlers, such as file, tel and app-id, are disabled.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing WebView Protocol Handlers" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-webview-protocol-handlers-mstg-platform-6"/>
            <reference name="OWASP MASVS - iOS - Testing WebView Protocol Handlers" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-webview-protocol-handlers-mstg-platform-6"/>
          </references>
          <standards>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the set of protocol handlers are deactivated.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.6" name="Anonymize all data that is sent to 3rd Party services" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>All data that is sent to 3rd Party services shall be anonymized, so no PII data is available that would allow the 3rd party to identify the user account. Also all other data, like IDs in an application that can be mapped to a user account or session should not be sent to a third party.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6"/>
            <reference name="OWASP MASVS - iOS - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#determining-whether-sensitive-data-is-exposed-via-ipc-mechanisms-mstg-storage-6"/>
          </references>
          <standards>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all data that is sent to 3rd Party services is anonymized.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.9" name="Apply 2FA Authentication on remote services" issueId="" issueLink="" platform="" cost="0" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A second factor of authentication exists at the remote endpoint and the 2FA requirement is consistently enforced. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Authentication and Session Management Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements"/>
          </references>
          <standards>
            <standard ref="4.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.13" name="Apply application level payload encryption" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;As a defense in depth, next to having solid hardening of the communicating parties, application level payload encryption can be applied to further impede eavesdropping.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Resilience Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements"/>
          </references>
          <standards>
            <standard ref="8.13" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.13" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.6" name="Catch and handle the possible exceptions" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Implement a well-designed and unified scheme to handle exceptions. Make sure the application has centralized handlers for exceptions that result in similar behavior. This can be a static class for instance. For specific exceptions given the methods context, specific catch blocks should be provided.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Exception Handling" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6-and-mstg-code-7"/>
            <reference name="OWASP MASVS - iOS - Testing Error Handling in Security Controls" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the exceptions are well-designed and are catched and handled well.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.5" name="Check for weaknesses in 3rd party libraries" issueId="" issueLink="" platform="" cost="0" risk="89" state="Implemented" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;iOS applications often make use of third party libraries. These third party libraries accelerate development as the developer has to write less code in order to solve a problem. There are two categories of libraries:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are not (or should not) be packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt;&lt;/span&gt;&lt;span&gt; used for testing.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;Alamofire&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;These libraries can lead to unwanted side-effects:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;A library can contain a vulnerability, which will make the application vulnerable. A good example is &lt;/span&gt;&lt;span&gt;&lt;code&gt;AFNetworking&lt;/code&gt;&lt;/span&gt;&lt;span&gt; version 2.5.1, which contained a bug that disabled certificate validation. This vulnerability would allow attackers to execute man-in-the-middle attacks against apps that are using the library to connect to their APIs.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can no longer be maintained or hardly be used, which is why no vulnerabilities are reported and/or fixed. This can lead to having bad and/or vulnerable code in your application through the library.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can use a license, such as LGPL2.1, which requires the application author to provide access to the source code for those who use the application and request insight in its sources. In fact the application should then be allowed to be redistributed with modifications to its source code. This can endanger the intellectual property (IP) of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Note: there are two widely used package management tools: Carthage and CocoaPods. Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;iOS applications often make use of third party libraries. These third party libraries accelerate development as the developer has to write less code in order to solve a problem. There are two categories of libraries:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are not (or should not) be packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt;&lt;/span&gt;&lt;span&gt; used for testing.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;Alamofire&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;These libraries can lead to unwanted side-effects:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;A library can contain a vulnerability, which will make the application vulnerable. A good example is &lt;/span&gt;&lt;span&gt;&lt;code&gt;AFNetworking&lt;/code&gt;&lt;/span&gt;&lt;span&gt; version 2.5.1, which contained a bug that disabled certificate validation. This vulnerability would allow attackers to execute man-in-the-middle attacks against apps that are using the library to connect to their APIs.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can no longer be maintained or hardly be used, which is why no vulnerabilities are reported and/or fixed. This can lead to having bad and/or vulnerable code in your application through the library.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can use a license, such as LGPL2.1, which requires the application author to provide access to the source code for those who use the application and request insight in its sources. In fact the application should then be allowed to be redistributed with modifications to its source code. This can endanger the intellectual property (IP) of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Note: there are two widely used package management tools: Carthage and CocoaPods. Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.&lt;/span&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Checking for Weaknesses in Third Party Libraries" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#checking-for-weaknesses-in-third-party-libraries-mstg-code-5"/>
            <reference name="OWASP MASVS - iOS - Checking for Weaknesses in Third Party Libraries" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings"/>
          </references>
          <standards>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt;The dynamic analysis of this section comprises validating whether the copyrights of the licenses have been adhered to. This often means that the application should have an &lt;/span&gt; 
&lt;span&gt;&lt;code&gt;about&lt;/code&gt;&lt;/span&gt; 
&lt;span&gt; or &lt;/span&gt; 
&lt;span&gt;&lt;code&gt;EULA&lt;/code&gt;&lt;/span&gt; 
&lt;span&gt; section in which the copy-right statements are noted as required by the license of the third party library.&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.15" name="Clean local storage after several failed attempts to authenticate user" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>The app's local storage should be wiped after an excessive number of failed authentication attempts.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.15" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.15" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that local storage is cleaned after failed attempts to authenticate</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.10" name="Clear WebView's resources" issueId="" issueLink="" platform="" cost="0" risk="77" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;A WebView's cache, storage, and loaded resources (JavaScript, etc.) should be cleared before the WebView is destroyed.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Platform Interaction Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x11-v6-interaction_with_the_environment"/>
          </references>
          <standards>
            <standard ref="6.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-1.9" name="Create a mechanism to force updates on application" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Starting from Android 5.0 (API level 21), together with the Play Core Library, apps can be forced to be updated. This mechanism is based on using the &lt;/span&gt;&lt;span&gt;&lt;code&gt;AppUpdateManager&lt;/code&gt;&lt;/span&gt;&lt;span&gt;. Before that, other mechanisms were used, such as doing http calls to the Google Play Store, which are not as reliable as the APIs of the Play Store might change. Alternatively, Firebase could be used to check for possible forced updates as well (see this &lt;/span&gt;&lt;/span&gt;&lt;a href="https://medium.com/@sembozdemir/force-your-users-to-update-your-app-with-using-firebase-33f1e0bcec5a" target="_blank"&gt;&lt;span&gt;&lt;span&gt;blog&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;). Enforced updating can be really helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily patched by means of forced updates.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;For iOS, enforced updating can be really helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily patched by means of forced updates. The challenge with iOS however, is that Apple does not provide any APIs yet to automate this process, instead, developers will have to create their own mechanism, such as described at various &lt;/span&gt;&lt;/span&gt;&lt;a href="https://mobikul.com/show-update-application-latest-version-functionality-ios-app-swift-3/" target="_blank"&gt;&lt;span&gt;&lt;span&gt;blogs&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; which boil down to looking up properties of the app using &lt;/span&gt;&lt;span&gt;&lt;code&gt;http://itunes.apple.com/lookup\?id\&amp;lt;BundleId&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;span&gt; or third party libraries, such as &lt;/span&gt;&lt;/span&gt;&lt;a href="https://github.com/ArtSabintsev/Siren" target="_blank"&gt;&lt;span&gt;&lt;span&gt;Siren&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; and &lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.npmjs.com/package/react-native-appstore-version-checker" target="_blank"&gt;&lt;span&gt;&lt;span&gt;react-native-appstore-version-checker&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;. Most of these implementations will require a certain given version offered by an API or just "latest in the appstore", which means users can be frustrated with having to update the app, even though no business/security need for an update is truly there.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle management is key here. Similarly, when a user is not forced to update, do not forget to test older versions of your app against your API and/or use proper API versioning.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing enforced updating" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-enforced-updating-mstg-arch-9"/>
            <reference name="OWASP MASVS - iOS - Testing enforced updating" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-enforced-updating-mstg-arch-9"/>
          </references>
          <standards>
            <standard ref="1.9" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="1.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span style="white-space: pre;"&gt;In order to test for proper updating: try downloading an older version of the application with a security vulnerability, either by a release from the developers or by using a third party app-store. Next, verify whether or not you can continue to use the application without updating it. If an update prompt is given, verify if you can still use the application by canceling the prompt or otherwise circumventing it through normal application usage. This includes validating whether the backend will stop calls to vulnerable backends and/or whether the vulnerable app-version itself is blocked by the backend. Lastly, see if you can play with the version number of a man-in-the-middled app and see how the backend responds to this (and if it is recorded at all for instance).&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.12" name="Create an authorization model on remote endpoints" issueId="" issueLink="" platform="" cost="0" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;Authorization models should be defined and enforced at the remote endpoint.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Authentication and Session Management Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements"/>
          </references>
          <standards>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.12" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.806">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.5-4.6" name="Create a strong password policy" issueId="" issueLink="" platform="" cost="0" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;Password strength is a key concern when passwords are used for authentication. The password policy defines requirements to which end users should adhere. A password policy typically specifies password length, password complexity, and password topologies. A "strong" password policy makes manual or automated password cracking difficult or impossible.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Best Practices for Passwords" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management"/>
          </references>
          <standards>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt;Automated password guessing attacks can be performed using a number of tools. For HTTP(S) services, using an interception proxy is a viable option. For example, you can use &lt;/span&gt; 
&lt;a href="https://portswigger.net/burp/help/intruder_using.html" target="_blank"&gt;&lt;span&gt;Burp Suite Intruder&lt;/span&gt;&lt;/a&gt; 
&lt;span&gt; to perform both wordlist-based and brute-force attacks.&lt;/span&gt; 
&lt;div&gt; 
 &lt;span&gt;&lt;br&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Execute the following steps for a wordlist based brute force attack with Burp Intruder:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Start Burp Suite Professional.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Create a new project (or open an existing one).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Set up your mobile device to use Burp as the HTTP/HTTPS proxy. Log into the mobile app and intercept the authentication request sent to the backend service.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Right-click this request on the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Proxy/HTTP History&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab and select &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Send to Intruder&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; in the context menu.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Select the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Intruder&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab. For further information on how to use &lt;/span&gt;&lt;/span&gt;&lt;a href="https://portswigger.net/burp/documentation/desktop/tools/intruder/using" target="_blank"&gt;&lt;span&gt;&lt;span&gt;Burp Intruder&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; read the official documentation on Portswigger.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Make sure all parameters in the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Target&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Positions&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Options&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tabs are appropriately set and select the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Payload&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Load or paste the list of passwords you want to try. There are several resources available that offer password lists, like &lt;/span&gt;&lt;/span&gt;&lt;a href="https://github.com/fuzzdb-project/fuzzdb/" target="_blank"&gt;&lt;span&gt;&lt;span&gt;FuzzDB&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;, the built-in lists in Burp Intruder or the files available in &lt;/span&gt;&lt;span&gt;&lt;code&gt;/usr/share/wordlists&lt;/code&gt;&lt;/span&gt;&lt;span&gt; on Kali Linux.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
  &lt;/ul&gt;&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Once everything is configured and you have a word-list selected, you're ready to start the attack!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.11" name="Create the functionality to verify the app uses a minimum device-access-security policy" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Different checks on the Android device can be implemented by querying different system preferences from Settings.Secure. The Device Administration API offers different mechanisms to create security aware applications, that are able to enforce password policies or encryption of the device.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing the Device-Access-Security Policy" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#testing-the-device-access-security-policy-mstg-storage-11"/>
            <reference name="OWASP MASVS - iOS - Testing the Device-Access-Security Policy" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#testing-local-data-storage-mstg-storage-1-and-mstg-storage-2"/>
          </references>
          <standards>
            <standard ref="2.11" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.11" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the app verifies the mobile device complies with the minimum
                            device-access-security policy.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.7" name="Deny the access by default when an uncaught exception appears" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Deny the access by default to prevent the app crashing because of uncaught exception and to avoid unauthorized access.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Exception Handling" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6-and-mstg-code-7"/>
            <reference name="OWASP MASVS - iOS - Testing Error Handling in Security Controls" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#testing-exception-handling-mstg-code-6"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the application denies access to the session when the exceptions appear.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.5" name="Disable JavaScript by default in a WebView if it is not necessary" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>JavaScript is disabled by default in a WebView and if not needed shouldn't be enabled. This reduces the attack surface and potential threats to the app.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing JavaScript Execution in WebViews" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#testing-javascript-execution-in-webviews-mstg-platform-5"/>
            <reference name="OWASP MASVS - iOS - Testing JavaScript Execution in WebViews" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-ios-webviews-mstg-platform-5"/>
          </references>
          <standards>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Search in the code the following instruction:
                            webview.getSettings().setJavaScriptEnabled(true);&lt;/li&gt;
                            &lt;li&gt;Check that this instruction doesn't exist in the code.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;For iOS:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the JavaScript is disabled and configured as following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            #import &amp;quot;ViewController.h&amp;quot;&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            #import @interface ViewController () @property(strong,nonatomic) WKWebView *webView;
                            &lt;/div&gt;
                            &lt;div&gt;
                            @end @implementation ViewController - (void)viewDidLoad { NSURL *url = [NSURL
                            URLWithString:@&amp;quot;http://www.example.com/&amp;quot;];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            NSURLRequest *request = [NSURLRequest requestWithURL:url];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            WKPreferences *pref = [[WKPreferences alloc] init]; //Disable javascript execution: [pref
                            setJavaScriptEnabled:NO];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [pref setJavaScriptCanOpenWindowsAutomatically:NO];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            WKWebViewConfiguration *conf = [[WKWebViewConfiguration alloc] init];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [conf setPreferences:pref]; _webView = [[WKWebView
                            alloc]initWithFrame:CGRectMake(self.view.frame.origin.x,85, self.view.frame.size.width,
                            self.view.frame.size.height-85) configuration:conf] ;&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [_webView loadRequest:request];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [self.view addSubview:_webView]; }
                            &lt;/div&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.5" name="Disable keyboard cache on sensitive data text inputs" issueId="" issueLink="" platform="" cost="1" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>A general best practice is overwriting different functions in the input field to disable the clipboard specifically for it. Also longclickable should be deactivated for the input field.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Sensitive Data Is Exposed via IPC Mechanisms" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-sensitive-stored-data-has-been-exposed-via-ipc-mechanisms-mstg-storage-6"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in the Clipboard" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#finding-sensitive-data-in-the-keyboard-cache-mstg-storage-5"/>
          </references>
          <standards>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the clipboard is disabled when sensitive data is used.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.806">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.10" name="Do not use the SSAID for 'device binding'" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Do not use the SSAID for device binding because the behavior of the SSAID has changed since
                        Android O and the behavior of MAC addresses have changed in Android N.

                        Google has set a new set of recommendations in their SDK documentation regarding identifiers as
                        well. Because of this new behavior, we recommend developers not rely on the SSAID alone, as the
                        identifier has become less stable. For instance: The SSAID might change upon a factory reset or
                        when the app is reinstalled after the upgrade to Android O. Please note that there are a number
                        of devices which have the same ANDROID_ID and/or have an ANDROID_ID that can be overridden.
                        Also, the Build.Serial was often used but now apps targeting Android O will get "UNKNOWN" when
                        they request the Build.Serial.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Device Binding" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-device-binding-mstg-resilience-10"/>
            <reference name="OWASP MASVS - iOS - Testing Device Binding" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#device-binding-mstg-resilience-10"/>
          </references>
          <standards>
            <standard ref="8.10" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Dynamic Analysis using an Emulator.&lt;/li&gt;
                            &lt;li&gt;Run the application on an Emulator.&lt;/li&gt;
                            &lt;li&gt;Make sure you can raise the trust in the instance of the application (e.g.
                            authenticate).&lt;/li&gt;
                            &lt;li&gt;Retrieve the data from the Emulator. This has a few steps:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;ol&gt;
                            &lt;ol&gt;
                            &lt;li&gt;ssh to your emulator using ADB shell&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;run-as&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;chmod 777 the contents of cache and shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;exit the current user&lt;/li&gt;
                            &lt;li&gt;copy the contents of /dat/data//cache &amp;amp; shared-preferences to the sdcard&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;use ADB or the DDMS to pull the contents&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Install the application on another Emulator&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;&amp;nbsp;Overwrite the data from step 3 in the data folder of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;copy the contents of step 3 to the sdcard of the second emulator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;ssh to your emulator using ADB shell&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;run-as&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;chmod 777 the folders cache and shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;copy the older contents of the sdcard to /dat/data//cache &amp;amp;
                            shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Can you continue in an authenticated state? If so, then binding might not be
                            working properly.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.801">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.3" name="Don't write any sensitive data on logs" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;There are many legitimate reasons for creating log files on a mobile device, including keeping track of crashes or errors that are stored locally while the device is offline (so that they can be sent to the app's developer once online), and storing usage statistics. However, logging sensitive data, such as credit card numbers and session information, may expose the data to attackers or malicious applications. Log files can be created in several ways.&amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;The following list includes two classes that are available for Android:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Log Class&lt;/li&gt; 
 &lt;li&gt;Logger Class&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Use a centralized logging class and mechanism and remove logging statements from the production release because other applications may be able to read them.&lt;/p&gt; 
&lt;p&gt;The following list shows the methods available on iOS:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NSLog Method&lt;/li&gt; 
 &lt;li&gt;printf-like function&lt;/li&gt; 
 &lt;li&gt;NSAssert-like function&lt;/li&gt; 
 &lt;li&gt;Macro&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Data Storage" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage"/>
            <reference name="OWASP MASVS - iOS - Testing Data Storage" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage"/>
          </references>
          <standards>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M2: Insecure Data Storage" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt; 
 &lt;li&gt;Review app logs in search of sensitive data&lt;/li&gt; 
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.11" name="Encrypt and pack all executable files and libraries belonging to the app" issueId="" issueLink="" platform="" cost="1" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that all executable files and libraries belonging to the app are encrypted on the file level and/or important code and data segments inside the executables are encrypted or packed.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Advanced Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
            <reference name="OWASP MASVS - iOS - Testing Simple Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
          </references>
          <standards>
            <standard ref="8.11" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.11" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all executable files and libraries belonging to the app are encrypted or
                            packed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.803">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.14" name="Encrypt sensitive data stored locally" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>If sensitive data is still required to be stored locally, it should be encrypted using a key derived from hardware backed storage which requires authentication</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.14" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.14" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that sensitive data is not stored in plain text.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.13" name="Ensure sensitive data is not stored locally on the mobile device" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>No sensitive data should be stored locally on the mobile device. Instead, data should be retrieved from a remote endpoint when needed and only be kept in memory.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.13" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.13" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if any sensitive data is stored on the device and analyze if it is necessary.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.7" name="Ensure that the app responds correctly against tampering, debugging and emulation" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the app implements multiple different responses to tampering, debugging and emulation,
                        including stealthy responses that don't simply terminate the app.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying the Variability of Tampering Responses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05c-reverse-engineering-and-tampering"/>
            <reference name="OWASP MASVS - iOS - Verifying the Variability of Tampering Responses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06c-reverse-engineering-and-tampering"/>
          </references>
          <standards>
            <standard ref="8.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the app implements multiple different responses to tampering, debugging and
                            emulation, including stealthy responses that don't simply terminate the app.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.801">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.6" name="Ensure the app only depends on up-to-date connectivity and security libraries" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Android relies on a security provider to provide SSL/TLS-based connections. The problem with this kind of security provider (one example is OpenSSL), which comes with the device, is that it often has bugs and/or vulnerabilities. To avoid known vulnerabilities, developers need to make sure that the application will install a proper security provider. Since July 11, 2016, Google has been rejecting Play Store application submissions (both new applications and updates) that use vulnerable versions of OpenSSL.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing the Security Provider" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05g-testing-network-communication#testing-the-security-provider-mstg-network-6"/>
          </references>
          <standards>
            <standard ref="5.6" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;When you have the source code:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Run the application in debug mode, then create a breakpoint where the app will first contact the endpoint(s).&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Right click the highlighted code and select &lt;/span&gt;&lt;span&gt;&lt;code&gt;Evaluate Expression&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Type &lt;/span&gt;&lt;span&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/span&gt;&lt;span&gt; and press enter.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Check the providers and try to find &lt;/span&gt;&lt;span&gt;&lt;code&gt;GmsCore_OpenSSL&lt;/code&gt;&lt;/span&gt;&lt;span&gt;, which should be the new top-listed provider.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;When you do not have the source code:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Use Xposed to hook into the &lt;/span&gt;&lt;span&gt;&lt;code&gt;java.security&lt;/code&gt;&lt;/span&gt;&lt;span&gt; package, then hook into &lt;/span&gt;&lt;span&gt;&lt;code&gt;java.security.Security&lt;/code&gt;&lt;/span&gt;&lt;span&gt; with the method &lt;/span&gt;&lt;span&gt;&lt;code&gt;getProviders&lt;/code&gt;&lt;/span&gt;&lt;span&gt; (with no arguments). The return value will be an array of &lt;/span&gt;&lt;span&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Determine whether the first provider is &lt;/span&gt;&lt;span&gt;&lt;code&gt;GmsCore_OpenSSL&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.4" name="Ensure the logout functionality terminates the session" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The purpose of this test case is verifying logout functionality and determining whether it effectively terminates the session on both client and server and invalidates a stateless token.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Failing to destroy the server-side session is one of the most common logout functionality implementation errors. This error keeps the session or token alive, even after the user logs out of the application. An attacker who gets valid authentication information can continue to use it and hijack a user's account.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Many mobile apps don't automatically log users out. There can be various reasons, such as: because it is inconvenient for customers, or because of decisions made when implementing stateless authentication. The application should still have a logout function, and it should be implemented according to best practices, destroying all locally stored tokens or session identifiers. If session information is stored on the server, it should also be destroyed by sending a logout request to that server. In case of a high-risk application, tokens should be blacklisted. Not removing tokens or session identifiers can result in unauthorized access to the application in case the tokens are leaked. Note that other sensitive types of information should be removed as well, as any information that is not properly cleared may be leaked later, for example during a device backup.&lt;/span&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Login Activity and Device Blocking" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management"/>
          </references>
          <standards>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Use an interception proxy for dynamic application analysis and execute the following steps to check whether the logout is implemented properly:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Log in to the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Access a resource that requires authentication, typically a request for private information belonging to your account.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Log out of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Try to access the data again by resending the request from step 2.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;If the logout is correctly implemented on the server, an error message or redirect to the login page will be sent back to the client. On the other hand, if you receive the same response you got in step 2, the token or session ID is still valid and hasn't been correctly terminated on the server.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.11" name="Implement a device blocking functionality" issueId="" issueLink="" platform="" cost="0" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;For applications which require L2 protection, the MASVS states that they should inform the user about all login activities within the app with the possibility of blocking certain devices. This can be broken down into various scenarios:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides a push notification the moment their account is used on another device to notify the user of different activities. The user can then block this device after opening the app via the push-notification.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides an overview of the last session after login. If the previous session was with a different configuration (e.g. location, device, app-version) compared to the current configuration, then the user should have the option to report suspicious activities and block devices used in the previous session.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides an overview of the last session after login at all times.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application has a self-service portal in which the user can see an audit-log. This allows the user to manage the different devices that are logged in.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The developer can make use of specific meta-information and associate it to each different activity or event within the application. This will make it easier for the user to spot suspicious behavior and block the corresponding device. The meta-information may include:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Device: The user can clearly identify all devices where the app is being used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Date and Time: The user can clearly see the latest date and time when the app was used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Location: The user can clearly identify the latest locations where the app was used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application can provide a list of activities history which will be updated after each sensitive activity within the application. The choice of which activities to audit needs to be done for each application based on the data it handles and the level of security risk the team is willing to have. Below is a list of common sensitive activities that are usually audited:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Login attempts&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Password changes&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Personal Identifiable Information changes (name, email address, telephone number, etc.)&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Sensitive activities (purchase, accessing important resources, etc.)&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Consent to Terms and Conditions clauses&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Paid content requires special care, and additional meta-information (e.g., operation cost, credit, etc.) might be used to ensure user's knowledge about the whole operation's parameters.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;In addition, non-repudiation mechanisms should be applied to sensitive transactions (e.g. payed content access, given consent to Terms and Conditions clauses, etc.) in order to prove that a specific transaction was in fact performed (integrity) and by whom (authentication).&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing Login Activity and Device Blocking" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04e-testing-authentication-and-session-management"/>
          </references>
          <standards>
            <standard ref="4.11" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.11" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;In all cases, you should verify whether different devices are detected correctly. Therefore, the binding of the application to the actual device should be tested. In iOS, a developer can use&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;identifierForVendor&lt;/code&gt;&lt;/span&gt;&lt;span&gt;, which is related to the bundle ID: the moment you change a bundle ID, the method will return a different value. When the app is ran for the first time, make sure you store the value returned by&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;identifierForVendor&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to the KeyChain, so that changes to it can be detected at an early stage.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;In Android, the developer can use&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;Settings.Secure.ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;till Android 8.0 (API level 26) to identify an application instance. Note that starting at Android 8.0 (API level 26),&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is no longer a device unique ID. Instead, it becomes scoped by the combination of app signing key, user and device. So validating&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for device blocking could be tricky for these Android versions. Because if an app changes its signing key, the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;will change and it won't be able to recognize old users devices. Therefore, it's better to store the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;encrypted and privately in a private a shared preferences file using a randomly generated key from the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;AndroidKeyStore&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and preferably AES_GCM encryption. The moment the app signature changes, the application can check for a delta and register the new&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;. The moment this new ID changes without a new application signing key, it should indicate that something else is wrong. Next, the device binding can be extended by signing requests with a key stored in the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;Keychain&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for iOS and in the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;KeyStore&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in Android can reassure strong device binding. You should also test if using different IPs, different locations and/or different time-slots will trigger the right type of information in all scenarios.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Lastly, the blocking of the devices should be tested, by blocking a registered instance of the app and see if it is then no longer allowed to authenticate. Note: in case of an application which requires L2 protection, it can be a good idea to warn a user even before the first authentication on a new device. Instead: warn the user already when a second instance of the app is registered.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.1" name="Implement detection and response functionalities for root detection" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Implement detection and response functionalities to detect rooted devices and if the device is rooted, the app shall respond in two ways:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The app notifies the user that their device is rooted and it's not secure to continue with the app.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Terminate the session and the app, because sensitive data is vulnerable.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Advanced Root Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-root-detection-mstg-resilience-1"/>
            <reference name="OWASP MASVS - iOS - Testing Advanced Root Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#jailbreak-detection-mstg-resilience-1"/>
          </references>
          <standards>
            <standard ref="8.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M9: Reverse Engineering" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Check that the app has two or more functionalities with independent methods to
                            detect a rooted device.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that if the device is rooted, the user is alerted or the app is terminated.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.804">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.3" name="Implement functionality to alert when the app code changes" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Implement functionality to detect, notify and respond when the app is modified by executable files or by anti-debugging tools within its own sandbox. When the injection is detected the app shall alert the user and terminate the session.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing File Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-file-integrity-checks-mstg-resilience-3"/>
            <reference name="OWASP MASVS - iOS - Testing Memory Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#file-integrity-checks-mstg-resilience-3-and-mstg-resilience-11"/>
          </references>
          <standards>
            <standard ref="8.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For the application source integrity checks, run the app on the device in an
                            unmodified state and make sure that everything works.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Then apply simple patches to the classes.dex and any .so libraries contained in
                            the app package. Re-package and re-sign the app.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the app alerts the user and/or terminates the session.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.802">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.6" name="Implement functionality to detect and respond to, modifications of process memory" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Create functionality to detect &amp;quot;hostile&amp;quot; code in its memory and respond
                        accordingly. Controls in this category verify the integrity of the app's own memory space, with
                        the goal of protecting against memory patches applied during runtime. This includes unwanted
                        changes to binary code or bytecode, functions pointer tables, and important data structures, as
                        well as rogue code loaded into process memory.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;div&gt;
                        Integrity can be verified either by:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Comparing the contents of memory, or a checksum over the contents, with known good
                        values.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Searching memory for signatures of unwanted modifications.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing File Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-file-integrity-checks-mstg-resilience-3"/>
            <reference name="OWASP MASVS - iOS - Testing Memory Integrity Checks" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#file-integrity-checks-mstg-resilience-3-and-mstg-resilience-11"/>
          </references>
          <standards>
            <standard ref="8.6" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.6" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Disable all file-based detection of reverse engineering tools.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Then inject code using Xposed, Frida and Substrate, and attempt to install native
                            hooks and Java method hooks.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that the app detects the &amp;quot;hostile&amp;quot; code in its memory and
                            responds accordingly.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.802">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.5" name="Implement functionality to detect if the app is being run inside an emulator" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Create and implement functionality to detect when the app is being run inside an emulator. If
                        the app is running inside an emulator, the app shall terminate the session.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Simple Emulator Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-emulator-detection-mstg-resilience-5"/>
            <reference name="OWASP MASVS - iOS - Testing Simple Emulator Detection" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-emulator-detection-mstg-resilience-5"/>
          </references>
          <standards>
            <standard ref="8.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Install and run the app within an emulator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the app detects this and terminates the session.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.802">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.4" name="Implement functionality to detect the presence of widely used reverse engineering tools" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Create functionality to detect the presence of widely used reverse engineering tools, such as
                        code injection tools, hooking frameworks and debugging servers. If any reverse engineering tool
                        is detected, the app shall force termination of the session.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Detection of Reverse Engineering Tools" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-reverse-engineering-tools-detection-mstg-resilience-4"/>
            <reference name="OWASP MASVS - iOS - Testing Detection of Reverse Engineering Tools" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-reverse-engineering-tools-detection-mstg-resilience-4"/>
          </references>
          <standards>
            <standard ref="8.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Launch the app systematically with various apps and frameworks installed, such as the
                            following:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Substrate for Android&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Xposed&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Frida&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Introspy-Android&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Drozer&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;RootCloak&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Android SSL Trust Killer&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;The app should alert the user and/or terminate the app.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.802">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.2" name="Implement functionality to notify when debugging mechanisms are presented within the app" issueId="" issueLink="" platform="" cost="1" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Implement anti-debugging mechanisms to prohibit debug mode being activated. Anti-debugging
                        features can be preventive or reactive. As the name implies, preventive anti-debugging
                        techniques prevent the debugger from attaching in the first place, while reactive techniques
                        attempt to detect whether a debugger is present and react to it in some way (e.g. terminating
                        the app, or triggering some kind of hidden behavior).&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The &amp;quot;more-is-better&amp;quot; rule applies: To maximize effectiveness, defenders
                        combine multiple methods of prevention and detection which operate on different API layers and
                        are distributed throughout the app.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Debugging Defenses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-anti-debugging-detection-mstg-resilience-2"/>
            <reference name="OWASP MASVS - iOS - Testing Debugging Defenses" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-anti-debugging-detection-mstg-resilience-2"/>
          </references>
          <standards>
            <standard ref="8.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M9: Reverse Engineering" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check for the presence of anti-debugging mechanisms and verify if with the following
                            criteria the anti-debugging mechanisms are bypassed:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Attaching JDB and ptrace based debuggers either fails or causes the app to
                            terminate or malfunction&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Multiple detection methods are scattered throughout the app (as opposed to putting
                            everything into a single method or function);&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;The anti-debugging defenses operate on multiple API layers (Java, native library
                            functions, Assembler/system calls);&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;The mechanisms show some level of originality (vs. copy/paste from StackOverflow
                            or other sources);&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.802">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.4" name="Insert the condition DEVELOPER-MODE to remove the debugging code, log verbose errors or debugging messages in the production version" issueId="" issueLink="" platform="" cost="1" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Insert the policy in the if statement with DEVELOPER_MODE as condition. The DEVELOPER_MODE has
                        to be disabled for release build in order to disable StrictMode too.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Remove the debugging code, log verbose errors or debugging messages in the production version.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing for Debugging Code and Verbose Error Logging" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-for-debugging-code-and-verbose-error-logging-mstg-code-4"/>
            <reference name="OWASP MASVS - iOS - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#finding-debugging-code-and-verbose-error-logging-mstg-code-4"/>
          </references>
          <standards>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M10: Extraneous Functionality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Check that there is only one method to activate the DEVELOPMENT_MODE.&lt;/li&gt;
                            &lt;li&gt;Check that the debugging code was removed.&lt;/li&gt;
                            &lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.9-8.12" name="Obfuscate all executable files, libraries, important code and data segments" issueId="" issueLink="" platform="" cost="1" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Obfuscation is the process of transforming code and data in order to make it more difficult to comprehend. It is an integral part of every software protection scheme. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If the goal of obfuscation is to protect sensitive computations, an obfuscation scheme is used that is both appropriate for the particular task and robust against manual and automated de-obfuscation methods, considering currently published research. The effectiveness of the obfuscation scheme must be verified through manual testing. Note that hardware-based isolation features are preferred over obfuscation whenever possible. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Advanced Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
            <reference name="OWASP MASVS - iOS - Testing Simple Obfuscation" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06j-testing-resiliency-against-reverse-engineering#testing-obfuscation-mstg-resilience-9"/>
          </references>
          <standards>
            <standard ref="8.12" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.12" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8.9" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.9" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Attempt to decompile the byte-code, disassemble any included library files, and perform static analysis. At the very least, the app's core functionality (i.e., the functionality meant to be obfuscated) shouldn't be easily discerned. Verify that&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;meaningful identifiers, such as class names, method names, and variable names, have been discarded,&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;string resources and strings in binaries are encrypted,&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;code and data related to the protected functionality is encrypted, packed, or otherwise concealed.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;For a more detailed assessment, you need a detailed understanding of the relevant threats and the obfuscation methods used.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.809">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.7" name="Only JavaScript provided with the app code is allowed" issueId="" issueLink="" platform="" cost="1" risk="77" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>If native methods of the app are exposed to a WebView, verify that the WebView only renders JavaScript contained within the app package.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether Java Objects Are Exposed Through WebViews" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05h-testing-platform-interaction#determining-whether-java-objects-are-exposed-through-webviews-mstg-platform-7"/>
          </references>
          <standards>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.7" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>- Produce a JavaScript payload.
                            - Inject it into the file that the app is requesting. The injection could be done either
                            through a MITM attack or by directly modifying the file in case it is stored on external
                            storage. The whole process could be done through Drozer that uses weasel (MWR's advanced
                            exploitation payload) which is able to install a full agent, injecting a limited agent into
                            a running process, or connecting a reverse shell to act as a Remote Access Tool (RAT).
                            - Check that only the JavaScript provided with the app is allowed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.800">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.1" name="Perform authentication process on remote services" issueId="" issueLink="" platform="" cost="0" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  If the app provides users access to a remote service, some form of authentication, such as username/password authentication, is performed at the remote endpoint. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Authentication and Session Management Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x09-v4-authentication_and_session_management_requirements"/>
          </references>
          <standards>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.3" name="Remove or obfuscate the debugging symbols from native binaries" issueId="" issueLink="" platform="" cost="1" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>As a general rule of thumb, as little explanative information as possible should be provided
                        along with the compiled code. Some metadata such as debugging information, line numbers and
                        descriptive function or method names make the binary or bytecode easier to understand for the
                        reverse engineer, but isn't actually needed in a release build and can therefore be safely
                        discarded without impacting the functionality of the app.

                        This data shall be removed from the release version or shall be obfuscated in order to be
                        inaccessible to the reverse engineer.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying Compiler Settings" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#testing-for-debugging-symbols-mstg-code-3"/>
            <reference name="OWASP MASVS - iOS - Testing for Debugging Symbols" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#finding-debugging-symbols-mstg-code-3"/>
          </references>
          <standards>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.3" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Symbols are usually stripped during the build process, so you need the compiled byte-code
                            and libraries to verify whether any unnecessary metadata has been discarded. First find the
                            nm binary in your Android NDK and export it (or create an alias).
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            export $NM =
                            $ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            To display debug symbols:
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            $ $NM -a
                            libfoo.so/tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm:
                            libfoo.so: no symbols&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;To display dynamic symbols:
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            $ $NM -D libfoo.so&amp;nbsp;
                            &lt;/blockquote&gt;Alternatively, open the file in your favorite disassembler and check the
                            symbol tables manually. Dynamic symbols can be stripped using the visibility compiler flag.
                            Adding this flag causes gcc to discard the function names while still preserving the names
                            of functions declared as JNIEXPORT.&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;br /&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            Check if the following was added to build.gradle:&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            externalNativeBuild { cmake { cppFlags &amp;quot;-fvisibility=hidden&amp;quot; } }&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;br /&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;For iOS:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Use gobjdump to inspect the main binary and any included dylibs for Stabs and DWARF symbols.
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            $ gobjdump --stabs --dwarf TargetApp&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;In archive MyTargetApp:&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            - armv5te: file format mach-o-arm - aarch64: file format mach-o-arm64 Gobjdump is part of
                            binutils and can be installed via Homebrew on Mac OS X.
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.1" name="Request only the minimum required permissions from the mobile operating system" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Security best practice dictates the practice of least-privilege is followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Request only the minimum required permissions from the mobile operating system. For example, if there is no requirement to use the camera then the application should not request this permission. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Review features and functionality present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them and associated OS permissions. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing App Permissions" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide"/>
            <reference name="OWASP MASVS - iOS - Testing Custom URL Schemes" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06h-testing-platform-interaction#testing-app-permissions-mstg-platform-1"/>
          </references>
          <standards>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="6.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android applications:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Install the application and review the permissions the application is asking for.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check they are actually needed.&lt;/li&gt;
                            &lt;/ol&gt;For iOS applications:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Install the application and use its main functionality, iOS will ask for the
                            permission when it is needed.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify those permissions requests are in accordance with the minimum set of
                            permissions needed by the application.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.1-5.2" name="Secure channels with TLS" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  One of the core mobile app functions is sending/receiving data over untrusted networks like the Internet. If the data is not properly protected in transit, an attacker with access to any part of the network infrastructure (e.g., a Wi-Fi access point) may intercept, read, or modify it. This is why plaintext network protocols are rarely advisable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The vast majority of apps rely on HTTP for communication with the backend. HTTPS wraps HTTP in an encrypted connection (the acronym HTTPS originally referred to HTTP over Secure Socket Layer (SSL); SSL is the deprecated predecessor of TLS). TLS allows authentication of the backend service and ensures confidentiality and integrity of the network data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensuring proper TLS configuration on the server side is also important. The SSL protocol is deprecated and should no longer be used. Also TLS v1.0 and TLS v1.1 have known vulnerabilities and their usage is deprecated in all major browsers by 2020. TLS v1.2 and TLS v1.3 are considered best practice for secure transmission of data. Starting with Android 10 (API level 29) TLS v1.3 will be enabled by default for faster and secure communication. The major change with TLS v1.3 is that customizing cipher suites is no longer possible and that all of them are enabled when TLS v1.3 is enabled, whereas Zero Round Trip (0-RTT) mode isn't supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When both the client and server are controlled by the same organization and used only for communicating with one another, you can increase security by hardening the configuration. 
&lt;/div&gt; 
&lt;div&gt;
  If a mobile application connects to a specific server, its networking stack can be tuned to ensure the highest possible security level for the server's configuration. Lack of support in the underlying operating system may force the mobile application to use a weaker configuration. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Verifying Data Encryption on the Network" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04f-testing-network-communication"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.2" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M3: Insecure Communication" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Intercept the tested app's incoming and outgoing network traffic and make sure that this traffic is encrypted. You can intercept network traffic in any of the following ways: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Capture all HTTP(S) and Websocket traffic with an interception proxy like OWASP ZAP or Burp Suite and make sure all requests are made via HTTPS instead of HTTP.&lt;/li&gt; 
  &lt;li&gt;Interception proxies like Burp and OWASP ZAP will show HTTP(S) traffic only. You can, however, use a Burp plugin such as Burp-non-HTTP-Extension or the tool mitm-relay to decode and visualize communication via XMPP and other protocols.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.8" name="Secure in the unmanaged code, the allocated memory, freed memory and used memory" issueId="" issueLink="" platform="" cost="1" risk="81" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Memory corruption bugs are a popular mainstay for hackers. This class of bug results from a programming error that causes the program to access an unintended memory location. Under the right conditions, attackers can capitalize on this behavior to hijack the execution flow of the vulnerable program and execute arbitrary code.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This kind of vulnerability occurs in a number of ways: 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;b&gt;Buffer overflows:&lt;/b&gt; This describes a programming error where an app writes beyond an allocated memory range for a particular operation. An attacker can use this flaw to overwrite important control data located in adjacent memory, such as function pointers. Buffer overflows were formerly the most common type of memory corruption flaw, but have become less prevalent over the years due to a number of factors. Notably, awareness among developers of the risks in using unsafe C library functions is now a common best practice plus, catching buffer overflow bugs is relatively simple. However, it is still worth testing for such defects.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Out-of-bounds-access: &lt;/b&gt;Buggy pointer arithmetic may cause a pointer or index to reference a position beyond the bounds of the intended memory structure (e.g. buffer or list). When an app attempts to write to an out-of-bounds address, a crash or unintended behavior occurs. If the attacker can control the target offset and manipulate the content written to some extent, code execution exploit is likely possible.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Dangling pointers:&lt;/b&gt; These occur when an object with an incoming reference to a memory location is deleted or deallocated, but the object pointer is not reset. If the program later uses the dangling pointer to call a virtual function of the already deallocated object, it is possible to hijack execution by overwriting the original vtable pointer. Alternatively, it is possible to read or write object variables or other memory structures referenced by a dangling pointer.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Use-after-free:&lt;/b&gt; This refers to a special case of dangling pointers referencing released (deallocated) memory. After a memory address is cleared, all pointers referencing the location become invalid, causing the memory manager to return the address to a pool of available memory. When this memory location is eventually re-allocated, accessing the original pointer will read or write the data contained in the newly allocated memory. This usually leads to data corruption and undefined behavior, but crafty attackers can set up the appropriate memory locations to leverage control of the instruction pointer.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Integer overflows: &lt;/b&gt;When the result of an arithmetic operation exceeds the maximum value for the integer type defined by the programmer, this results in the value "wrapping around" the maximum integer value, inevitably resulting in a small value being stored. Conversely, when the result of an arithmetic operation is smaller than the minimum value of the integer type, an integer underflow occurs where the result is larger than expected. Whether a particular integer overflow/underflow bug is exploitable depends on how the integer is used - for example, if the integer type were to represent the length of a buffer, this could create a buffer overflow vulnerability.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Format string vulnerabilities: &lt;/b&gt;When unchecked user input is passed to the format string parameter of the printf() family of C functions, attackers may inject format tokens such as '%c' and '%n' to access memory. Format string bugs are convenient to exploit due to their flexibility. Should a program output the result of the string formatting operation, the attacker can read and write to memory arbitrarily, thus bypassing protection features such as ASLR.&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   A best practice to fix the Memory Corruption Bugs are the following:&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;When using integer variables for array indexing, buffer length calculations, or any other security-critical operation, verify that unsigned integer types are used and perform precondition tests to prevent the possibility of integer wrapping.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Ensure the app does not use unsafe string functions such as strcpy, most other functions beginning with the "str" prefix, sprint, vsprintf, gets, etc.; If the app contains C++ code, ANSI C++ string classes are used; iOS apps written in Objective-C use NSString class. C apps on iOS should use CFString, the Core Foundation representation of a string. No untrusted data is concatenated into format strings.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Testing for Memory Management Bugs" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/general-mobile-app-testing-guide/0x04h-testing-code-quality#memory-corruption-bugs-mstg-code-8"/>
          </references>
          <standards>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if some of the different Memory Corruption bugs appear when you try to use them to
                            gain access to the system.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.787">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.8" name="Set the detection mechanism to trigger different alarms" issueId="" issueLink="" platform="" cost="0" risk="89" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;The detection mechanisms trigger responses of different types, including delayed and stealthy responses.&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Resilience Requirements" url="https://mobile-security.gitbook.io/masvs/security-requirements/0x15-v8-resiliency_against_reverse_engineering_requirements"/>
          </references>
          <standards>
            <standard ref="8.8" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="8.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.810">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.1" name="Sign the app and provision with valid certificate with a properly protected key" issueId="" issueLink="" platform="" cost="1" risk="94" state="Recommended" owner="ccumming@synopsys.com" library="OWASP-MASVS" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Code signing your app assures users that it is from a known source and the app hasn't been modified since it was last signed. This process can prevent an app from being tampered with, or modified to include malicious code.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Verifying That the App is Properly Signed" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05i-testing-code-quality-and-build-settings#making-sure-that-the-app-is-properly-signed-mstg-code-1"/>
            <reference name="OWASP MASVS - iOS - Verifying That the App is Properly Signed" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06i-testing-code-quality-and-build-settings#making-sure-that-the-app-is-properly-signed-mstg-code-1"/>
          </references>
          <standards>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="7.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the app is correctly signed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T19:14:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-133" name="An attacker attempts to invoke all common switches and options to discover weaknesses" state="Partly-Mitigate" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="OWASP-MASVS" editable="true">
              <desc>An attacker attempts to invoke all common switches and options in the target
                                application for the purpose of discovering weaknesses in the target. For example, in
                                some applications, adding the --debug switch causes debugging information to be
                                displayed, which can sometimes reveal sensitive processing or configuration information
                                to an attacker.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                This attack differs from other forms of API abuse in that the attacker is blindly
                                attempting to invoke options in the hope that one of them will work rather than
                                specifically targeting a known option. Nonetheless, even if the attacker is familiar
                                with the published options of a targeted application this attack method may still be
                                fruitful as it might discover unpublicized functionality.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-215">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.3" mitigation="15"/>
                    <countermeasure ref="MASVS-7.4" mitigation="5"/>
                    <countermeasure ref="MASVS-8.2" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-489">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.4" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-656">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.13" mitigation="5"/>
                    <countermeasure ref="MASVS-2.14" mitigation="5"/>
                    <countermeasure ref="MASVS-2.3" mitigation="5"/>
                    <countermeasure ref="MASVS-5.1-5.2" mitigation="5"/>
                    <countermeasure ref="MASVS-7.9" mitigation="5"/>
                    <countermeasure ref="MASVS-8.11" mitigation="5"/>
                    <countermeasure ref="MASVS-8.13" mitigation="5"/>
                    <countermeasure ref="MASVS-8.8" mitigation="5"/>
                    <countermeasure ref="MASVS-8.9-8.12" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MEMORY-LEAKAGE">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.15" mitigation="5"/>
                    <countermeasure ref="MASVS-2.5" mitigation="5"/>
                    <countermeasure ref="MASVS-4.4" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="OUTDATED-LIBRARIES">
                  <countermeasures>
                    <countermeasure ref="MASVS-1.9" mitigation="5"/>
                    <countermeasure ref="MASVS-5.6" mitigation="5"/>
                    <countermeasure ref="MASVS-7.5" mitigation="5"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-1.9" mitigation="5"/>
                <countermeasure ref="MASVS-2.13" mitigation="5"/>
                <countermeasure ref="MASVS-2.14" mitigation="5"/>
                <countermeasure ref="MASVS-2.15" mitigation="5"/>
                <countermeasure ref="MASVS-2.3" mitigation="5"/>
                <countermeasure ref="MASVS-2.5" mitigation="5"/>
                <countermeasure ref="MASVS-4.4" mitigation="5"/>
                <countermeasure ref="MASVS-5.1-5.2" mitigation="5"/>
                <countermeasure ref="MASVS-5.6" mitigation="5"/>
                <countermeasure ref="MASVS-7.3" mitigation="15"/>
                <countermeasure ref="MASVS-7.4" mitigation="5"/>
                <countermeasure ref="MASVS-7.5" mitigation="5"/>
                <countermeasure ref="MASVS-7.9" mitigation="5"/>
                <countermeasure ref="MASVS-8.11" mitigation="5"/>
                <countermeasure ref="MASVS-8.13" mitigation="5"/>
                <countermeasure ref="MASVS-8.2" mitigation="5"/>
                <countermeasure ref="MASVS-8.8" mitigation="5"/>
                <countermeasure ref="MASVS-8.9-8.12" mitigation="5"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="OWASP-MASVS" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-494">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.1" mitigation="34"/>
                    <countermeasure ref="MASVS-8.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.1" mitigation="34"/>
                <countermeasure ref="MASVS-8.3" mitigation="33"/>
                <countermeasure ref="use-analysis-static-code" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-188" name="Attacker gains access to sensitive data by modifying the application's expected behavior" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="OWASP-MASVS" editable="true">
              <desc>An attacker discovers the structure, function, and composition of an object, resource,
                                or system by using a variety of analysis techniques to effectively determine how the
                                analyzed entity was constructed or operates. The goal of reverse engineering is often to
                                duplicate the function, or a part of the function, of an object in order to duplicate or
                                &amp;quot;back engineer&amp;quot; some aspect of its functioning.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Reverse engineering techniques can be applied to mechanical objects, electronic devices,
                                or software, although the methodology and techniques involved in each type of analysis
                                differ widely. When adversaries are reverse engineering software, methodologies fall
                                into two broad categories, 'white box' and 'black box.' White box techniques involve
                                methods which can be applied to a piece of software when an executable or some other
                                compiled object can be directly subjected to analysis, revealing at least a portion of
                                its machine instructions that can be observed upon execution.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                'Black Box' methods involve interacting with the software indirectly, in the absence of
                                the ability to measure, instrument, or analyze an executable object directly. Such
                                analysis typically involves interacting with the software at the boundaries of where the
                                software interfaces with a larger execution environment, such as input-output vectors,
                                libraries, or APIs.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="MASVS-EMULATION-TOOLS">
                  <countermeasures>
                    <countermeasure ref="MASVS-8.5" mitigation="20"/>
                    <countermeasure ref="MASVS-8.7" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MASVS-REVERSE-ENGINEERING-TOOLS">
                  <countermeasures>
                    <countermeasure ref="MASVS-8.10" mitigation="20"/>
                    <countermeasure ref="MASVS-8.4" mitigation="20"/>
                    <countermeasure ref="MASVS-8.6" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-8.10" mitigation="20"/>
                <countermeasure ref="MASVS-8.4" mitigation="20"/>
                <countermeasure ref="MASVS-8.5" mitigation="20"/>
                <countermeasure ref="MASVS-8.6" mitigation="20"/>
                <countermeasure ref="MASVS-8.7" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122-MOBILE" name="Users lose trust in the application because it requests unnecessary privileges" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="OWASP-MASVS" editable="true">
              <desc>If the mobile application requests permissions or access to components that are not
                                strictly needed by the application, then users can lose trust in the security of the
                                application with an associated impact on the trust placed in the application provider.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.11" mitigation="20"/>
                    <countermeasure ref="MASVS-4.11" mitigation="20"/>
                    <countermeasure ref="MASVS-4.5-4.6" mitigation="20"/>
                    <countermeasure ref="MASVS-6.1" mitigation="20"/>
                    <countermeasure ref="MASVS-8.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.11" mitigation="20"/>
                <countermeasure ref="MASVS-4.11" mitigation="20"/>
                <countermeasure ref="MASVS-4.5-4.6" mitigation="20"/>
                <countermeasure ref="MASVS-6.1" mitigation="20"/>
                <countermeasure ref="MASVS-8.1" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="PROVIDE MOBILE ACCESS TO SERVICES" name="Provide mobile access to services" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web-apps. In cases in which the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker could potentially access resources that should only be available to users of a higher privilege level, or access management sections of the application, or can run queries for data that he is otherwise not supposed to.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-732">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.6" mitigation="25"/>
                    <countermeasure ref="MASVS-4.1" mitigation="25"/>
                    <countermeasure ref="MASVS-4.12" mitigation="25"/>
                    <countermeasure ref="MASVS-4.9" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.6" mitigation="25"/>
                <countermeasure ref="MASVS-4.1" mitigation="25"/>
                <countermeasure ref="MASVS-4.12" mitigation="25"/>
                <countermeasure ref="MASVS-4.9" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-WEBVIEW" name="Attackers gain access to the data through the WebView functionality" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="OWASP-MASVS" editable="true">
              <desc>An attacker employs forceful browsing to access portions of a website that are
                                otherwise unreachable through direct URL entry.

                                Usually, a front controller or similar design pattern is employed to protect access to
                                portions of a web application.

                                Forceful browsing enables an attacker to access information, perform privileged
                                operations and otherwise reach sections of the web application that have been improperly
                                protected.</desc>
              <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-749">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.10" mitigation="25"/>
                    <countermeasure ref="MASVS-6.6" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-79">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-83">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.5" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-6.10" mitigation="25"/>
                <countermeasure ref="MASVS-6.5" mitigation="25"/>
                <countermeasure ref="MASVS-6.6" mitigation="25"/>
                <countermeasure ref="MASVS-6.7" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="7k-CWE-ErrorH" name="Attackers gain unauthorised access to the application through an error handling flaw" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="OWASP-MASVS" editable="true">
              <desc>Errors and error handling represent a class of API. Errors related to error handling
                                are so common that they deserve a special kingdom of their own. As with API Abuse, there are two ways to introduce an error-related security vulnerability: the most common
                                one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-388">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.6" mitigation="50"/>
                    <countermeasure ref="MASVS-7.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.6" mitigation="50"/>
                <countermeasure ref="MASVS-7.7" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-100" name="Attackers gain unauthorised access to the application through buffer overflow flaws" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="OWASP-MASVS" editable="true">
              <desc>Buffer Overflow attacks target improper or missing bounds checking on buffer
                                operations, typically triggered by input injected by an attacker. As a consequence, an
                                attacker is able to write past the boundaries of allocated buffer regions in memory,
                                causing a program crash or potentially redirection of execution as per the attackers'
                                choice.</desc>
              <riskRating confidentiality="100" integrity="100" availability="1" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-120">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.8" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="d43b8baa-f67a-4026-b681-b260f0ea7fa0" diagramComponentId="a11e488b-6643-4fa6-9a5e-7998cf2c6b1c" ref="7e40a8c4-d66d-4fda-97b0-cf32743724f1" name="Other data store" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="other-database">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.226">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an
                        unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.386">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable
                        user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.386">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt;
                        &lt;li&gt;Weak encryption algorithms&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Loss of encryption keys&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Compromised encryption keys&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Revoked keys are still active (bad key lifecycle management)&lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.386">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="RESTRICT-ACCESS-DATABASE" name="Access the data store from an account with the least privileges necessary" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use an account with only the minimum set of permissions required to access the data
                        store. The account should not be able to perform operations that are not explicitly required by
                        the component that performs these operations. For example, if a web application needs to read
                        data from certain tables and insert and update data from others, then a database account with
                        only those specific permissions should be used by the application server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Identify the user account used by external components to access this data store.&lt;/li&gt;
                            &lt;li&gt;Check which permissions are assigned to this user account.&lt;/li&gt;
                            &lt;li&gt;Verify that they are the minimum set of permissions necessary and no unnecessary
                            permissions are assigned.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.183">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PATCH-SERVICE" name="Apply required security patches to the service" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Vendors and other maintainers of software release patches in response to security
                        flaws and other bugs in their products.&amp;nbsp; The longer a system is exposed with a known
                        security vulnerability, the easier to compromise it. &amp;nbsp;As the exploit enters the public
                        domain, they get included in automated exploitation suites like Metasploit and a wider less
                        skilled miscreant is able to leverage them.&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Apply
                        patches and other software updates in a timely manner to prevent unexpected failures or
                        exploitation.&lt;/li&gt;&lt;li&gt;Clearly define an approach for testing and applying patches,
                        in particular security patches, with expected timescales. &amp;nbsp;There is often a small
                        window between the release of a patch, and potentially malicious actors reverse-engineering the
                        patch to identify and exploit the flaw.&lt;/li&gt;&lt;li&gt;Use a threat intelligence,
                        vulnerability scanning, or other alerting services to ensure the project team is promptly aware
                        of issues within the project or its components.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-01 Configuration Management Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/152-08_02_CM-01"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CM-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check with the software or service vendor whether security vulnerabilities and
                            their associated patches are available for the version deployed.&lt;/li&gt;
                            &lt;li&gt;Evaluate the criticality of the vulnerability and schedule a fix accordingly.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.279">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" name="Encrypt personal data" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Implement encryption at rest (see guidance below) or give a risk-based explanation as to why
                        encryption was not implemented.&lt;br /&gt;&lt;br /&gt;Use well-known encryption libraries,
                        taking into account the data use, and do not invent your own.
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;personal data must be encrypted&lt;/li&gt;
                        &lt;li&gt;data that is not used by the application (e.g. passwords, ...) should be hashed so
                        they cannot be recovered easily&lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Verify that users' personal data processed by the application is encrypted at rest
                            (e.g. databases).&lt;/li&gt;
                            &lt;li&gt;If encryption is not being leveraged, verify that there is documentation outlining
                            the reasoning for that decision.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.284">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification
                        (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data.
                        For less sensitive but still restricted data, simple verification of the location of the user
                        may suffice (e.g. IP restrictions).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For non-sensitive but
                        non-public data, access could be restricted by IP address, limiting access to internal networks,
                        workstations, or gateways&lt;/li&gt;&lt;li&gt;For more sensitive data, TLS client-side
                        certificates may be appropriate&lt;/li&gt;&lt;li&gt;Where secret or other sensitive data is
                        handled, a full authentication process to identify and validate users with single or
                        multi-factor authentication may be required&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-authentication.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-21" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-21" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-21" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Try to obtain access to this information without any type of authentication, for
                            example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.284">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer to reduce exposure" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to services should be restricted to expected sources, limiting the exposure of
                        the service and its attack surface; and the likelihood of a malicious actor gaining access to
                        the system.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;Apply network layer security controls so that only the necessary and expected IP
                        addresses are permitted access to connect to the service.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-authentication.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the network access to the service is only allowed for the components
                            which need it.&lt;/li&gt;
                            &lt;li&gt;There should be a firewall protecting the network segment in which the service is
                            installed.&lt;/li&gt;
                            &lt;li&gt;Check that the firewall restricts all access and only permits the minimum
                            connections required using the principal of least privilege.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:31.284">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS SERVICE" name="Access service" desc="" library="CS-Default">
          <threats>
            <threat ref="VULN-SERVICE" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                    <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the
                                privileges of an authorized or privileged user by evading - or circumventing - an
                                authentication mechanism. The attacker is therefore able to access protected data
                                without authentication ever having taken place. This refers to an attacker gaining
                                access equivalent to an authenticated user without ever going through an authentication
                                procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected
                                access procedure that does not go through the proper checkpoints where authentication
                                should occur. For example, a web site might assume that all users will click through a
                                given link in order to access secure material and simply authenticate everyone that
                                clicks the link. However, an attacker might be able to reach secured web content by
                                explicitly entering the path to the content rather than clicking through the
                                authentication link, thereby avoiding the check entirely. This attack pattern differs
                                from other authentication attacks in that attacks of this pattern avoid authentication
                                entirely, rather than faking authentication by exploiting flaws or by stealing
                                credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data
                                subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="AUTH-DATASTORE-LEAST-PRIV" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="abe82b73-b22d-4aa0-b368-15b292ce5587" diagramComponentId="d3189187-d2ee-4b5c-83a2-fb0287f8b73a" ref="972a00a0-b3ef-4a79-b494-8088f1d45f57" name="Other database" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="other">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.049">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an
                        unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.221">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable
                        user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.222">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt;
                        &lt;li&gt;Weak encryption algorithms&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Loss of encryption keys&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Compromised encryption keys&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Revoked keys are still active (bad key lifecycle management)&lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.222">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="RESTRICT-ACCESS-DATABASE" name="Access the data store from an account with the least privileges necessary" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use an account with only the minimum set of permissions required to access the data
                        store. The account should not be able to perform operations that are not explicitly required by
                        the component that performs these operations. For example, if a web application needs to read
                        data from certain tables and insert and update data from others, then a database account with
                        only those specific permissions should be used by the application server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OWASP Juice Shop: Injection" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/injection.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Identify the user account used by external components to access this data store.&lt;/li&gt;
                            &lt;li&gt;Check which permissions are assigned to this user account.&lt;/li&gt;
                            &lt;li&gt;Verify that they are the minimum set of permissions necessary and no unnecessary
                            permissions are assigned.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:27.988">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PATCH-SERVICE" name="Apply required security patches to the service" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Vendors and other maintainers of software release patches in response to security
                        flaws and other bugs in their products.&amp;nbsp; The longer a system is exposed with a known
                        security vulnerability, the easier to compromise it. &amp;nbsp;As the exploit enters the public
                        domain, they get included in automated exploitation suites like Metasploit and a wider less
                        skilled miscreant is able to leverage them.&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Apply
                        patches and other software updates in a timely manner to prevent unexpected failures or
                        exploitation.&lt;/li&gt;&lt;li&gt;Clearly define an approach for testing and applying patches,
                        in particular security patches, with expected timescales. &amp;nbsp;There is often a small
                        window between the release of a patch, and potentially malicious actors reverse-engineering the
                        patch to identify and exploit the flaw.&lt;/li&gt;&lt;li&gt;Use a threat intelligence,
                        vulnerability scanning, or other alerting services to ensure the project team is promptly aware
                        of issues within the project or its components.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-01 Configuration Management Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/152-08_02_CM-01"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CM-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check with the software or service vendor whether security vulnerabilities and
                            their associated patches are available for the version deployed.&lt;/li&gt;
                            &lt;li&gt;Evaluate the criticality of the vulnerability and schedule a fix accordingly.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.113">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" name="Encrypt personal data" issueId="" issueLink="" platform="" cost="0" risk="54" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>Implement encryption at rest (see guidance below) or give a risk-based explanation as to why
                        encryption was not implemented.&lt;br /&gt;&lt;br /&gt;Use well-known encryption libraries,
                        taking into account the data use, and do not invent your own.
                        &lt;br /&gt;
                        &lt;ul&gt;
                        &lt;li&gt;personal data must be encrypted&lt;/li&gt;
                        &lt;li&gt;data that is not used by the application (e.g. passwords, ...) should be hashed so
                        they cannot be recovered easily&lt;/li&gt;
                        &lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Verify that users' personal data processed by the application is encrypted at rest
                            (e.g. databases).&lt;/li&gt;
                            &lt;li&gt;If encryption is not being leveraged, verify that there is documentation outlining
                            the reasoning for that decision.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.114">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" issueId="" issueLink="" platform="" cost="0" risk="61" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification
                        (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data.
                        For less sensitive but still restricted data, simple verification of the location of the user
                        may suffice (e.g. IP restrictions).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For non-sensitive but
                        non-public data, access could be restricted by IP address, limiting access to internal networks,
                        workstations, or gateways&lt;/li&gt;&lt;li&gt;For more sensitive data, TLS client-side
                        certificates may be appropriate&lt;/li&gt;&lt;li&gt;Where secret or other sensitive data is
                        handled, a full authentication process to identify and validate users with single or
                        multi-factor authentication may be required&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-authentication.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-21" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-21" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-21" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Try to obtain access to this information without any type of authentication, for
                            example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.113">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer to reduce exposure" issueId="" issueLink="" platform="" cost="1" risk="84" state="Recommended" owner="ccumming@synopsys.com" library="CS-Default" source="TEMPLATE" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to services should be restricted to expected sources, limiting the exposure of
                        the service and its attack surface; and the likelihood of a malicious actor gaining access to
                        the system.&amp;nbsp;&lt;/p&gt;
                        &lt;p&gt;Apply network layer security controls so that only the necessary and expected IP
                        addresses are permitted access to connect to the service.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/broken-authentication.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://bkimminich.gitbooks.io/pwning-owasp-juice-shop/content/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the network access to the service is only allowed for the components
                            which need it.&lt;/li&gt;
                            &lt;li&gt;There should be a firewall protecting the network segment in which the service is
                            installed.&lt;/li&gt;
                            &lt;li&gt;Check that the firewall restricts all access and only permits the minimum
                            connections required using the principal of least privilege.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2022-05-17T17:45:28.113">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS SERVICE" name="Access service" desc="" library="CS-Default">
          <threats>
            <threat ref="VULN-SERVICE" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                    <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the
                                privileges of an authorized or privileged user by evading - or circumventing - an
                                authentication mechanism. The attacker is therefore able to access protected data
                                without authentication ever having taken place. This refers to an attacker gaining
                                access equivalent to an authenticated user without ever going through an authentication
                                procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected
                                access procedure that does not go through the proper checkpoints where authentication
                                should occur. For example, a web site might assume that all users will click through a
                                given link in order to access secure material and simply authenticate everyone that
                                clicks the link. However, an attacker might be able to reach secured web content by
                                explicitly entering the path to the content rather than clicking through the
                                authentication link, thereby avoiding the check entirely. This attack pattern differs
                                from other authentication attacks in that attacks of this pattern avoid authentication
                                entirely, rather than faking authentication by exploiting flaws or by stealing
                                credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data
                                subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="AUTH-DATASTORE-LEAST-PRIV" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Expose" source="TEMPLATE" edited="false" owner="ccumming@synopsys.com" library="CS-Default" editable="true">
              <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;</desc>
              <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>
