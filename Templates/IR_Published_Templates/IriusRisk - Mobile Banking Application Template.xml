<?xml version="1.0" encoding="UTF-8"?>
<template ref="iriusrisk-mobile-banking-application-template" name="IriusRisk - Mobile Banking Application Template" tags="" modelUpdated="2024-04-17 11:03:50">
  <desc>Involves handling sensitive financial transactions and personal data, requiring stringent security protocols.</desc>
  <diagram draft="false">
    <schema></schema>
  </diagram>
  <trustZones>
    <trustZone ref="private-secured" uuid="2ab4effa-40b7-4cd2-ba81-8247d29a6f2d" name="Private Secured" desc="A secured zone within a trusted private zone" trustRating="100"/>
    <trustZone ref="internet" uuid="f0ba7722-39b6-4c81-8290-a30a248bb8d9" name="Internet" desc="Untrusted Internet public zone" trustRating="1"/>
  </trustZones>
  <questions/>
  <assets/>
  <settings/>
  <dataflows>
    <dataflow name="API gateway -&gt; Out Of Scope" ref="271e1bb3-c7b1-4b9b-9dd0-621043558852" source="b3cef635-6285-4c34-aee7-0eecf7c94841" target="13a37286-a00d-4b30-956c-a1b4b032a40c">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="API gateway -&gt; Out Of Scope" ref="834376d0-f3bd-4a4e-8bf9-4ab824a3cc92" source="b3cef635-6285-4c34-aee7-0eecf7c94841" target="fc18a151-507a-4ce9-9fcb-66e09ace4125">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Mobile Device Client -&gt; API gateway" ref="b37c6d51-218b-428f-bf4a-2937a8880dfd" source="abd4644b-4b8a-4fd0-85d1-f9f70259ad4d" target="b3cef635-6285-4c34-aee7-0eecf7c94841">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="API gateway -&gt; Out Of Scope" ref="cfa8373d-c8ca-4675-81cc-1f913288840d" source="b3cef635-6285-4c34-aee7-0eecf7c94841" target="b9246691-7274-46c9-8950-1164bb546e16">
      <assets/>
      <tags/>
    </dataflow>
  </dataflows>
  <customFields>
    <customField ref="status" value="Design"/>
  </customFields>
  <components>
    <component uuid="7de0757f-31aa-4576-abb9-f7189684691a" diagramComponentId="f88dec9f-b14c-4a7f-8505-6b4b531f45cc" ref="c2f17c07-d346-4dcd-96b2-133fcaa2276c" name="Accounts" desc="" library="IR-Functional-Components" parentComponentRef="b9246691-7274-46c9-8950-1164bb546e16" componentDefinitionRef="CD-GENERIC-FUNCTIONAL-COMPONENT">
      <tags/>
      <questions>
        <question ref="fc.answer.generic.functional.component.access.control.centralized.implemented" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.generic.functional.component.limit.unsure" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.generic.functional.component.logging.features.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.generic.functional.component.multithreading.implemented" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="C-AUTHZ-AFTER-AUTHN" name="Authorize after you authenticate" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Authorization should be conducted as an explicit check, and as necessary even after an initial authentication has been completed. Authorization depends not only on the privileges associated with an authenticated user, but also on the context of the request. The time of the request and the location of the requesting user may both need to be taken into account.&lt;/p&gt;&lt;p&gt;Sometimes a user's authorization for a system or service needs to be revoked, for example, when an employee leaves a company. If the authorization mechanism fails to allow for such revocation, the system is vulnerable to abuse by authenticated users exercising out-of-date authorizations.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Authorize After You Authenticate" url="https://cybersecurity.ieee.org/blog/2015/11/13/authorize-after-you-authenticate/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Validate that no authorization process is conducted before an authentication process has previously finished.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:43.860">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-603" name="Deploy a robust server-side validation and authentication system" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;When authentication is performed solely on the client-side, the user's credentials (e.g., username and password) are sent to the server for verification. However, an attacker can intercept and modify these credentials before they are sent to the server, allowing them to gain unauthorized access to the application.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Furthermore, client-side authentication does not provide any protection against attacks that target the server-side of the application. For example, an attacker could exploit a vulnerability in the server-side code to gain access to sensitive data or functionality without needing to authenticate at all.&lt;/p&gt;&lt;p&gt;All data on the client-side must be considered tainted. As such, decisions on authentication (or Identification and Verification - ID&amp;amp;V) must be made or validated on the server-side to prevent their subversion.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure credentials are passed securely from client to server.&lt;/li&gt;&lt;li&gt;The server should compare the credentials with those stored on the server-side (e.g. the hashed password compared against those stored for the claimed identity).&lt;/li&gt;&lt;li&gt;Implement controls to mitigate brute-force attacks; for example through rate-limiting, account lockouts, or escalating timeouts.&lt;/li&gt;&lt;li&gt;Once authenticated, a non-predictable and cryptographically secure token should be passed securely to the client-side to validate further interaction with the server.&lt;/li&gt;&lt;li&gt;Messages returned to the user during authentication, in particular when the process fails, should not reveal to the user whether the username was valid. Returning generic errors prevents an attacker enumerating valid account IDs for subsequent attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify which functions the service provides which are authenticated or performing a privileged action.&lt;/li&gt;&lt;li&gt;Try to access them without providing any type of authentication.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A clear example of what you should look for would be an API endpoint which allows a client to update a resource, you should ensure this call checks the authentication on the server side (by checking the session having validated the authentication credentials previously).&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:43.945">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.&lt;/p&gt;&lt;p&gt;One of the ways to enforce this is by following the deny-by-default principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny-by-default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:44.007">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.1" name="Ensure sensitive data is not revealed through error output messages" issueId="" issueLink="" platform="" cost="0" risk="36" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the application does not output error messages or stack traces containing sensitive
                        data that could assist an attacker, including the session id, software/framework versions and
                        personal information.</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
          </references>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application does not output error massages or stack traces containing sensitive data.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:43.832">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" name="Ensure that access control mechanisms are centralized" issueId="" issueLink="" platform="" cost="0" risk="39" state="Implemented" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Access control, authentication and authorization procedures should be centralized, and all roles, permissions, groups and users shall be controlled - or gain access - through this mechanism.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To ensure roles, groups and permissions are assigned properly to users, we need to have centralized access control, to grant or deny access easily and securely.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that access control mechanisms are centralized.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:43.811">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="36" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For API rate limiting there are several methods that can be applied:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Throttling: based on certain rules a request can be slowed down considerably to allow other requests to be served first&lt;/li&gt;&lt;li&gt;Request queues: limit the number of request in a given period of time (e.g. five requests per second)&lt;/li&gt;&lt;li&gt;Token bucket: commonly used in public APIs, each user has a number of tokens to call the API. After all tokens have been used the user has to wait until the number of tokens are renewed&lt;/li&gt;&lt;li&gt;Fixed window: requests that exceed a fixed limit in a period of time will be blocked temporarily&lt;/li&gt;&lt;li&gt;Leaky bucket: requests are put in a FIFO queue and will be served accordingly&lt;/li&gt;&lt;li&gt;Sliding log: a time-stamped log is used to identify user actions, so the rate limit can be applied for a specified user to avoid more than X actions in a period of time&lt;/li&gt;&lt;li&gt;Sliding window: combination of fixed window and sliding log&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a user perspective, implementing timeouts and calling paginated endpoints can reduce the impact of having a very large response that can freeze the system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API4:2023-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like THC-Hydra, OWASP ZAP or Burp Suite to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:44.061">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="39" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:44.314">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-THREAD-CONCURRENCY" name="Implement threading, concurrency and asynchronicity" issueId="" issueLink="" platform="" cost="0" risk="36" state="Implemented" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;In order to make your application more responsive to a user and maximize the performance of your user's computer, we have different coding techniques. Not so long ago, apps got faster simply by buying a newer PC or server and then that trend has reversed. Users still want responsive UI and business owners want servers that scale with their business. The transition to mobile and cloud and an internet-connected population of &amp;gt;3B users has resulted in a new set of software patterns.&lt;/p&gt;&lt;p&gt;Using multiple threads of execution is one of the most powerful ways to keep your application responsive to the user and at the same time make use of the processor in between or even during user events.&lt;/p&gt;&lt;p&gt;We use concurrency to take advantage of the hardware, so you can parallelize your code to distribute work across multiple processors.&lt;/p&gt;&lt;p&gt;Async programming is a key technique that makes it straightforward to handle blocking I/O and concurrent operations on multiple cores.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Parallel Processing, Concurrency, and Async Programming in .NET" url="https://docs.microsoft.com/en-us/dotnet/standard/parallel-processing-and-concurrency"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Look for bottlenecks in the workflow of the application that may cause a denial of service attack if exploited such as a misconfigured file reader that blocks the main thread if more than one file is uploaded to the application.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:43.935">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" issueId="" issueLink="" platform="" cost="2" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>
                        &lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or auto-binding when accepting values from an untrusted source and mapping them to trusted server side values increases the risk of tainted data being used unsafely.&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                         &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt;
                         &lt;li&gt;Use available features of the language or framework that allow specification of white lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt;
                         &lt;ul&gt;
                          &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible (white list) or attr_protected (black list) macros in each class that may be used in mass assignment.&lt;/li&gt;
                         &lt;/ul&gt;
                        &lt;/ul&gt;
                    </desc>
          <implementations>
            <implementation platform="Spring.java">
              <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="OWASP Juice Shop: XSS" url="https://pwning.owasp-juice.shop/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API3:2023-Broken Object Property Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the framework the component is using.&lt;/li&gt;&lt;li&gt;Check if this particular framework provides automatic binding of variables.&lt;/li&gt;&lt;li&gt;Verify if it is disabled or restricted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:39.228">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:39.501">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-137-INJECTION" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                <countermeasure ref="DATA-VAL" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130-DOS-AUTH" name="Attackers can execute Denial of Service attacks to prevent valid users from accessing the system" state="Partly-Mitigate" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An attacker leverages the security functionality of the system aimed at thwarting potential attacks (like automatic block of accounts after a number of failed login attempts) to launch a denial of service attack against a legitimate system user.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="25"/>
                <countermeasure ref="C-THREAD-CONCURRENCY" mitigation="25"/>
                <countermeasure ref="network-rate-limit" mitigation="25"/>
                <countermeasure ref="security-logging" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115-LOGIN-BYPASS" name="Attackers can bypass the login system using a less hardened alternative for accessing the system" state="Partly-Mitigate" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;The basic way to take advantage of the application's access control flaws is called "forced browsing".&lt;/p&gt;&lt;p&gt;Let's say that the website http://mysite.com It is a website that supports the authenticity of the user and the administrator will be taken to the appropriate webpage after validation. But if an attacker knows the URL, he or she can enter it in their browser, for example&lt;/p&gt;&lt;p&gt;http://mysite.com/admin_page or http://mysite.com/user_page&lt;/p&gt;&lt;p&gt;If it is a secure website, it will be redirected to the login page. But if those pages are allowed to be accessed, it will be incomplete access control and will cause damage.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" mitigation="20"/>
                <countermeasure ref="C-AUTHZ-AFTER-AUTHN" mitigation="20"/>
                <countermeasure ref="CWE-603" mitigation="20"/>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="20"/>
                <countermeasure ref="security-logging" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="3634dcd0-dff1-4f8b-9e1f-8ec553192f83" diagramComponentId="8cee13e5-c7e3-4243-bdfc-889b42fba84b" ref="b9246691-7274-46c9-8950-1164bb546e16" name="Account Service" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="out-of-scope">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="17f2402a-4825-4111-bbb4-4339bc993586" diagramComponentId="3a841ff4-f52b-4439-ba5c-e133ef36812f" ref="b3cef635-6285-4c34-aee7-0eecf7c94841" name="API gateway" desc="" library="microservices-library-dev" parentComponentRef="" componentDefinitionRef="api-gateway-microservice">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AG-LM-1" name="Framework complexities may make logging and monitoring difficult to use" state="0" impact="100" issueId="" issueLink="">
          <desc>There are many objects in a microservice which generate logs, and the capabilities of each may be very different.&amp;nbsp; This can result in a large body of disparate information, which makes it difficult to track and use effectively. In addition to routine logging features, to detect attacks and identify factors for degradation of services which may impact availability&amp;nbsp;it is necessary to monitor network traffic into and out of microservices.&amp;nbsp; The monitoring service should include analytics capabilities.&amp;nbsp;&amp;nbsp;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AG-AA-1" name="Misconfiguration with enterprise-wide authentication and authorization frameworks" state="0" impact="100" issueId="" issueLink="">
          <desc>Microservices generally communicate with each other using Application Programming Interfaces (APIs), which requires several core features to support complex interactions between a substantial number of components.&amp;nbsp; Authentication and access policy may vary depending on the type of APIs exposed by microservices-some may be public APIs; some may be private APIs; and some may be partner APIs, which are available only for business partners.&amp;nbsp; This creates a security challenge as it can be difficult ensure that all entry points are configured to the same robust settings despite their differing capabilities for doing so.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To address the challenges of authorizing of such a complex array of interfaces and services, API gateways offer a single entry point to a system.&amp;nbsp; However, while this simplifies things from the standpoint of external user access, the API Gateway will still need to effectively authenticate itself with the internal objects of the cluster.&amp;nbsp; There are a number of areas of potential weakness which must be supported to maintain the overall security of the cluster. 
&lt;/div&gt;Access tokens are a significant security measure in all systems and the internal objects of microservices should be created to use them where possible.&amp;nbsp; Integrating these successfully with API gateways can be a challenge. Distributed gateway deployments add yet more complexity as they provide an even wider variety of services and objects which must be integrated.&amp;nbsp; If authorization cannot be resolved consistently across distributed gateways, this will open up vulnerabilities which may be exploited by adversaries. Identity management is a strongly suggested strategy for configuring authentication and authorization.&amp;nbsp; It allows fine grained control of systems by allowing administrators to control which activities are authorized based on user identity and role.&amp;nbsp; API gateways must integrate with internal IAM policies as settings mismatches can result in users acting beyond their scope.&amp;nbsp; &amp;nbsp;&amp;nbsp;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="NIST-SMAS-MS-SS-12(2)" name="Connectors should be provided for integrating with identity providers (IdPs)" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When invoking IAM through an API gateway, it is essential to integrate with the identity providers in question.&amp;nbsp; This ensures that policies are robust and effective, and that changes are applied consistently from the IAM service to the gateway.&amp;nbsp; This is essential for maintaining security.&amp;nbsp; There are a number of tools available depending on the specific tools and requirements of the system.&amp;nbsp;&amp;nbsp;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="MS-SS-12" supportedStandardRef="NIST-Secure-Microservice-Strategies"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Implementation will depend on the individual API gateway in use.&amp;nbsp; Please follow the instructions in the documentation and apply according to the needs of your architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.464">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="NIST-SMAS-MS-SS-12(5)" name="Distributed gateway deployments should have a token translation (exchange) service between gateways" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The token presented to the initial gateway should have permissions with a broad scope whereas the token presented to inside gateways (or microgateways) should be more narrowly scoped with specific permissions or an entirely different token type that is appropriate for the target microservice platform. This helps to implement the least privilege paradigm. This can also work for a combination of initial gateway (that intercepts all client accesses) and microgateways (closer to microservices).</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="MS-SS-12" supportedStandardRef="NIST-Secure-Microservice-Strategies"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Implementation will depend on the individual API gateway in use.&amp;nbsp; Please follow the instructions in the documentation and apply according to the needs of your architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.465">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="NIST-SMAS-MS-SS-12(1)" name="Integrate the API gateway with an identity management application to provision credentials before activating the API" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Identity management is such a key security component that it should be integrated at the earliest stages of implementation.&amp;nbsp; API gateways which are activated without IAM capabilities immediately leave the connected services vulnerable to exploitation.&amp;nbsp; Certain services may not work at all if IAM credentials are not provided.&amp;nbsp; The complexity of microservice architectures also makes it more difficult to add these capabilities after the fact.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="MS-SS-12" supportedStandardRef="NIST-Secure-Microservice-Strategies"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Implementation will depend on the individual API gateway in use.&amp;nbsp; Please follow the instructions in the documentation and apply according to the needs of your architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.461">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="NIST-SMAS-MS-SS-12(4)" name="Securely channel all traffic information to a monitoring and/or analytics application" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>This is essential both for detecting attacks (e.g., denial of service, malicious actions) and unearthing explanations for degrading performance.&amp;nbsp; Implementation will depend on the individual API gateway in use.&amp;nbsp;&amp;nbsp;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="MS-SS-12" supportedStandardRef="NIST-Secure-Microservice-Strategies"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Implementation will depend on the individual API gateway in use.&amp;nbsp; Please follow the instructions in the documentation and apply according to the needs of your architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.465">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="NIST-SMAS-MS-SS-12(3)" name="The API gateway should have a connector to an artifact that can generate an access token for the client request" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Access token are, and should be, used widely in microservices.&amp;nbsp; They provide credentials for authorization and can be used to specify the scope that was granted during authorization.&amp;nbsp; If the API gateway cannot also access these tokens then they cannot be used to authorize any users who enter through the gateway.&amp;nbsp; An artifact should exist which provides the gateway with tokens which will be accepted by internal system objects, and which provide the same level of access control (e.g., OAuth 2.0 Authorization Server).</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="MS-SS-12" supportedStandardRef="NIST-Secure-Microservice-Strategies"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Implementation will depend on the individual API gateway in use.&amp;nbsp; Please follow the instructions in the documentation and apply according to the needs of your architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.465">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="AG-AA-1">
                  <countermeasures>
                    <countermeasure ref="NIST-SMAS-MS-SS-12(1)" mitigation="25"/>
                    <countermeasure ref="NIST-SMAS-MS-SS-12(2)" mitigation="25"/>
                    <countermeasure ref="NIST-SMAS-MS-SS-12(3)" mitigation="25"/>
                    <countermeasure ref="NIST-SMAS-MS-SS-12(5)" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="NIST-SMAS-MS-SS-12(1)" mitigation="25"/>
                <countermeasure ref="NIST-SMAS-MS-SS-12(2)" mitigation="25"/>
                <countermeasure ref="NIST-SMAS-MS-SS-12(3)" mitigation="25"/>
                <countermeasure ref="NIST-SMAS-MS-SS-12(5)" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AG-LM-1">
                  <countermeasures>
                    <countermeasure ref="NIST-SMAS-MS-SS-12(4)" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="NIST-SMAS-MS-SS-12(4)" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="33f27747-331a-42d9-81c2-90ae75c0dab7" diagramComponentId="1ce8a365-2d4c-4990-a98b-1747bd115a18" ref="13a37286-a00d-4b30-956c-a1b4b032a40c" name="Authentication" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="out-of-scope">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="4f8b8767-6a37-44f4-a8fc-dc348f274af4" diagramComponentId="e4b0a2c9-fe64-42a9-aeaf-5f198e13fc3a" ref="5ea18e17-d700-4371-bc7d-9a4e2ef91093" name="Financial Transaction" desc="" library="PCI-DSS" parentComponentRef="fc18a151-507a-4ce9-9fcb-66e09ace4125" componentDefinitionRef="CD-FINANCIAL-TRANSACTION">
      <tags/>
      <questions>
        <question ref="fc.answer.financial.transaction.admin.interface.not.applicable" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.financial.transaction.anti.phishing.unsure" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.financial.transaction.business.logic.limits.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.financial.transaction.ddos.protection.unsure" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.financial.transaction.detecting.anomalous.behavior.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.financial.transaction.reauth.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.financial.transaction.validate.redirections.not.applicable" answer="true" manuallyModified="false"/>
        <question ref="fc.financial.transaction.mfa.auth.not.applicable" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-285" name="Improper Authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not perform - or incorrectly - performs an authorization check when an actor attempts to access a resource or perform an action.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:07.295">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:59:27.168">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:07.298">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-SYSTEM-VULN-DOS" name="System is vulnerable to a Denial of Service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>A system can be vulnerable to a Denial of Service (DoS) attack if it does not have sufficient safeguards in place to protect against such attacks. There are a number of ways that a system can be vulnerable to a DoS attack, including:
1. Lack of DDoS protection: If a system does not have DDoS protection in place, it may be vulnerable to an attack that involves flooding the system with traffic.
2. Insufficient rate limiting: Rate limiting is a technique used to prevent a system from being overwhelmed with requests from a single source. If a system does not have sufficient rate limiting in place, it may be vulnerable to a DoS attack that involves a high volume of requests from a single source.
3. Inadequate filtering: Filtering is a technique used to block malicious traffic from reaching a system. If a system does not have sufficient filtering in place, it may be vulnerable to a DoS attack that involves malicious traffic.
4. Unpatched vulnerabilities: If a system has known vulnerabilities that have not been patched, it may be vulnerable to a DoS attack that exploits these vulnerabilities.
5. Inadequate capacity: If a system does not have sufficient capacity to handle the expected level of traffic, it may be vulnerable to a DoS attack that involves a volume of traffic that exceeds the system's capacity.
6. Lack of monitoring: If a system is not being actively monitored, it may be more difficult to detect a DoS attack in progress and take appropriate action to mitigate it.
By implementing measures such as DDoS protection, rate limiting, filtering, and regularly patching known vulnerabilities, it is possible to reduce the likelihood of a system being vulnerable to a DoS attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:59:27.233">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="no-alerts-access" name="There is no alert for unauthorized access" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There is no alert to notify about unauthorized access to the resources, and this access is not logged.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:59:27.198">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-451" name="User Interface (UI) Misrepresentation of Critical Information" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:46.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CWE-654" name="Authenticate users (multi - or two-factor - authentication [2FA])" issueId="" issueLink="" platform="" cost="1" risk="27" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For more sensitive applications hosting data or functionality requiring greater assurance over the identification of users, a multi - or two-factor - authentication process is recommended. Together with asserting their identity and a password/phrase/PIN (something you know), such systems require additional factors, such as biometric validation (something you are), user-initiated action such as a button press on a FIDO hardware key or a token (something you have).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement multi-factor authentication for applications providing access to sensitive data or functionality, and for highly privileged user access (e.g. administrators).&lt;/li&gt;&lt;li&gt;This should leverage something such as a soft or hard-token verification in addition to the secret password/pass-phrase for example.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
          </references>
          <standards>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.5" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.9" supportedStandardRef="nist-800-63"/>
            <standard ref="6.1.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check for authentication functions of the component.&lt;/li&gt;&lt;li&gt;Verify at least a combination of the following factors is used within the authentication process.&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Something that you are: mainly biometric characteristics of yourself such as fingerprint, facial recognition, iris recognition, etc.)&lt;/li&gt;&lt;li&gt;Something that you know: a PIN, password, pass phrase, etc.&lt;/li&gt;&lt;li&gt;Something that you have: a hardware token, a card, a dongle, a mobile phone, etc.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-USER-CONTROLLABLE-DATA" name="Avoid incorporating user-controllable data into redirection targets" issueId="" issueLink="" platform="" cost="0" risk="53" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Avoid incorporating user-controllable data into redirection targets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;To avoid incorporating user-controllable data into redirection targets is a security control that can be implemented to mitigate the risk of open redirect vulnerabilities.&lt;/p&gt;&lt;p&gt;Open redirect vulnerabilities occur when an attacker is able to manipulate a URL parameter to redirect a user to a malicious website. This can be done by tricking the user into clicking on a link that appears to be legitimate, but actually redirects them to a malicious website.&lt;/p&gt;&lt;p&gt;To implement this countermeasure, an organization can avoid incorporating user-controllable data into redirection targets. This means that any user input that is used in a redirect URL should be validated and sanitized to ensure that it cannot be manipulated by an attacker.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Whitelisting: This involves creating a list of allowed values for any user input that is used in a redirect URL. Any input that does not match the allowed values will be rejected.&lt;/p&gt;&lt;p&gt;Encoding: This involves encoding any user input that is used in a redirect URL to prevent it from being manipulated. This can be done using techniques such as URL encoding or HTML encoding.&lt;/p&gt;&lt;p&gt;Input validation: This involves validating any user input that is used in a redirect URL to ensure that it is in the expected format and does not contain any malicious code.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Unvalidated Redirects and Forwards Cheat Sheet" url="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify that the system has been updated to avoid incorporating user-controllable data into redirection targets.&lt;/li&gt;&lt;li&gt;Attempt to manipulate a redirect URL by changing a parameter value to a different value than the allowed values.&lt;/li&gt;&lt;li&gt;Verify that the system rejects the redirect and displays an error message indicating that the input is invalid.&lt;/li&gt;&lt;li&gt;Attempt to inject malicious code into a parameter value and verify that the system detects and blocks the input.&lt;/li&gt;&lt;li&gt;Verify that any user input used in a redirect URL is properly encoded to prevent it from being manipulated.&lt;/li&gt;&lt;li&gt;Verify that any input validation is performed on user input used in a redirect URL to ensure that it is in the expected format.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:43.803">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-SSS-9.1" name="Create detection mechanisms that alerts upon detection of anomalous behavior" issueId="" issueLink="" platform="" cost="0" risk="35" state="Required" owner="fscott-admin" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Software should possess basic functionality to differentiate between normal and anomalous user behavior. Examples of anomalous behavior that should be automatically detected by the software include changes in post-deployment (or post-initialization) configurations or obvious automated-attack behaviors-e.g., frequent input of a password can be an indicator of brute-force attempts.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Secure Software Standard" url="https://www.pcisecuritystandards.org/documents/Secure-Software-Program-Guide-v1.pdf"/>
          </references>
          <standards>
            <standard ref="9.1" supportedStandardRef="pci-sss"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;9.1.a: The assessor shall examine vendor evidence and test the software to confirm that, where possible, the software implements a method to validate the integrity of its own executable and any configuration options, files, and datasets that it relies upon for operation (such that unauthorized, post-deployment changes can be detected). Where the execution environment prevents this, the assessor shall examine vendor evidence and current publicly available literature on the platform and associated technologies to confirm that there are indeed no methods for validating authenticity. The assessor shall then test the software to confirm controls are implemented to minimize the associated risk.&amp;nbsp;&lt;/li&gt;&lt;li&gt;9.1.b: The assessor shall examine vendor evidence and test the software to confirm that integrity values used by the software and dataset(s) upon which it relies for secure operation are checked upon software execution, and at least every 36 hours thereafter (if the software continues execution during that time period). The assessor shall confirm what action the software takes upon failure of these checks and confirm that the processing of sensitive data is halted until this problem is remediated.&amp;nbsp;&lt;/li&gt;&lt;li&gt;9.1.c: Where cryptographic primitives are used by any anomaly-detection methods, the assessor shall examine vendor evidence and test the software to confirm that cryptographic primitives are protected.&amp;nbsp;&lt;/li&gt;&lt;li&gt;9.1.d: Where stored values are used by any anomaly-detection methods, the assessor shall examine vendor evidence and test the software to confirm that these values are considered sensitive data and protected accordingly.&amp;nbsp;&lt;/li&gt;&lt;li&gt;9.1.e: Where configuration or other dataset values can be modified by the software during execution, the assessor shall examine vendor evidence and test the software to confirm that integrity protections are implemented to allow for this update while still ensuring dataset integrity can be validated after the update.&amp;nbsp;&lt;/li&gt;&lt;li&gt;9.1.f: The assessor shall examine vendor evidence and test the software to confirm that the software implements controls to prevent brute-force attacks on account, password, or cryptographic-key input fields (e.g., input rate limiting).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:59:26.827">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-603" name="Deploy a robust server-side validation and authentication system" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;When authentication is performed solely on the client-side, the user's credentials (e.g., username and password) are sent to the server for verification. However, an attacker can intercept and modify these credentials before they are sent to the server, allowing them to gain unauthorized access to the application.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Furthermore, client-side authentication does not provide any protection against attacks that target the server-side of the application. For example, an attacker could exploit a vulnerability in the server-side code to gain access to sensitive data or functionality without needing to authenticate at all.&lt;/p&gt;&lt;p&gt;All data on the client-side must be considered tainted. As such, decisions on authentication (or Identification and Verification - ID&amp;amp;V) must be made or validated on the server-side to prevent their subversion.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure credentials are passed securely from client to server.&lt;/li&gt;&lt;li&gt;The server should compare the credentials with those stored on the server-side (e.g. the hashed password compared against those stored for the claimed identity).&lt;/li&gt;&lt;li&gt;Implement controls to mitigate brute-force attacks; for example through rate-limiting, account lockouts, or escalating timeouts.&lt;/li&gt;&lt;li&gt;Once authenticated, a non-predictable and cryptographically secure token should be passed securely to the client-side to validate further interaction with the server.&lt;/li&gt;&lt;li&gt;Messages returned to the user during authentication, in particular when the process fails, should not reveal to the user whether the username was valid. Returning generic errors prevents an attacker enumerating valid account IDs for subsequent attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify which functions the service provides which are authenticated or performing a privileged action.&lt;/li&gt;&lt;li&gt;Try to access them without providing any type of authentication.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A clear example of what you should look for would be an API endpoint which allows a client to update a resource, you should ensure this call checks the authentication on the server side (by checking the session having validated the authentication credentials previously).&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.994">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-SSS-8.1" name="Ensure that all access attempts and usage of critical assets are tracked and traceable to a unique individual" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To facilitate user accountability and to allow post-incident forensic investigation, payment software should capture and maintain historical records of all software activity involving critical assets (i.e., sensitive data and resources and usage of sensitive functions), and ensure such activity is traceable to a unique user (e.g., person), system, or other entity accessing critical assets.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Examples of activities that the software should record include:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;All individual user attempts to access sensitive data or resources&amp;nbsp;&lt;/li&gt;&lt;li&gt;Usage of or changes to sensitive functions, such as the software's identification and authentication mechanisms or activity tracking mechanisms&amp;nbsp;&lt;/li&gt;&lt;li&gt;Initialization, stopping, or pausing of sensitive functions&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This Control Objective does not mandate the logging of each encryption operation or function processing sensitive data, but it does require that access is tracked and any methods that may expose sensitive data are also tracked.&lt;/p&gt;&lt;p&gt;Note: This Secure Software Standard recognizes that some execution environments cannot support the detailed logging requirements in other PCI standards. Therefore, the term "activity tracking" is used here to differentiate the expectations of this standard with regards to logging from similar requirements in other PCI standards.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Secure Software Standard" url="https://www.pcisecuritystandards.org/documents/Secure-Software-Program-Guide-v1.pdf"/>
          </references>
          <standards>
            <standard ref="8.1" supportedStandardRef="pci-sss"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;8.1: The assessor shall examine vendor evidence and test the software to confirm that all access attempts and usage of critical assets are tracked and traceable to a unique identification for the person, system, or entity performing the access.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:59:26.781">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-306-AUTH" name="Ensure the application uses a single vetted authentication mechanism that is known to be secure" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;ul&gt;
 &lt;li&gt;Ensure that the application uses a single vetted authentication mechanism that is known to be secure, can be extended to include strong authentication, and has sufficient logging and monitoring to detect account abuse or breaches.&lt;/li&gt;
 &lt;li&gt;Ensure that all authentication pathways and identity management APIs implement consistent authentication security control strength, such that there are no weaker alternatives per the risk of the application.&lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Testing the authentication schema means understanding how the authentication process works and using that information to circumvent the authentication mechanism.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  4.5.1 Testing for Credentials Transported over an Encrypted Channel (OTG-AUTHN-001)
&lt;/div&gt;
&lt;div&gt;
  4.5.2 Testing for default credentials (OTG-AUTHN-002)
&lt;/div&gt;
&lt;div&gt;
  4.5.3 Testing for Weak lock out mechanism (OTG-AUTHN-003)
&lt;/div&gt;
&lt;div&gt;
  4.5.4 Testing for bypassing authentication schema (OTG-AUTHN-004)
&lt;/div&gt;
&lt;div&gt;
  4.5.5 Test remember password functionality (OTG-AUTHN-005)
&lt;/div&gt;
&lt;div&gt;
  4.5.6 Testing for Browser cache weakness (OTG-AUTHN-006)
&lt;/div&gt;
&lt;div&gt;
  4.5.7 Testing for Weak password policy (OTG-AUTHN-007)
&lt;/div&gt;
&lt;div&gt;
  4.5.8 Testing for Weak security question/answer (OTG-AUTHN-008)
&lt;/div&gt;
&lt;div&gt;
  4.5.9 Testing for weak password change or reset functionalities (OTG-AUTHN-009)
&lt;/div&gt;
&lt;div&gt;
  4.5.10 Testing for Weaker authentication in alternative channel (OTG-AUTHN-010)&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
   Test For Authentication On All EndPoints. You can automate this process using DAST tools like OWASP ZAP. It includes an API scanning script to automate security scanning of APIs defined using OpenAPI/Swagger or SOAP.&amp;nbsp;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;br /&gt;
 &lt;/div&gt;
 &lt;div&gt;
   Usage: zap-api-scan.py -t &amp;lt;target&amp;gt; -f &amp;lt;format&amp;gt; [options]
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -t target&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;target API definition, currently only an OpenAPI URL, eg https://www.example.com/openapi.json
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -f format&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;either openapi or soap
 &lt;/div&gt;
 &lt;div&gt;
   Options:
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -h&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print this help message
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -c config_file&amp;nbsp; &amp;nbsp; config file to use to INFO, IGNORE or FAIL warnings
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -u config_url&amp;nbsp; &amp;nbsp; &amp;nbsp;URL of config file to use to INFO, IGNORE or FAIL warnings
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -g gen_file&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;generate default config file (all rules set to WARN)
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -r report_html&amp;nbsp; &amp;nbsp; file to write the full ZAP HTML report
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -w report_md&amp;nbsp; &amp;nbsp; &amp;nbsp; file to write the full ZAP Wiki (Markdown) report
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -x report_xml&amp;nbsp; &amp;nbsp; &amp;nbsp;file to write the full ZAP XML report
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -J report_json&amp;nbsp; &amp;nbsp; file to write the full ZAP JSON document
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -a&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; include the alpha passive scan rules as well
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -d&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; show debug messages
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -P&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; specify listen port
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -D&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; delay in seconds to wait for passive scanning&amp;nbsp;
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -i&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default rules not in the config file to INFO
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -l level&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; minimum level to show: PASS, IGNORE, INFO, WARN or FAIL, use with -s to hide example URLs
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -n context_file&amp;nbsp; &amp;nbsp;context file which will be loaded prior to scanning the target
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -p progress_file&amp;nbsp; progress file which specifies issues that are being addressed
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -s&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; short output format - don't show PASSes or example URLs
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -S&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; safe mode this will skip the active scan and perform a baseline scan
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -T&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; max time in minutes to wait for ZAP to start and the passive scan to run
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -O&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; the hostname to override in the (remote) OpenAPI spec
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; -z zap_options&amp;nbsp; &amp;nbsp; ZAP command line options e.g. -z &amp;quot;-config aaa=bbb -config ccc=ddd&amp;quot;
 &lt;/div&gt;
 &lt;div&gt;
   &amp;nbsp; &amp;nbsp; --hook&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; path to python file that define your custom hooks
 &lt;/div&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.994">
              <output/>
            </source>
            <references>
              <reference name="OWASP Testing Guide v4. Testing for authentication" url="https://www.owasp.org/index.php/Testing_for_authentication"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-PCI-DSS-5" name="Implement an access control system" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;An access control model is defined and includes granting access as follows:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Appropriate access depending on the entity's business and access needs.&lt;/li&gt;&lt;li&gt;Access to system components and data resources that is based on users' job classification and functions.&lt;/li&gt;&lt;li&gt;The least privileges required (for example, user, administrator) to perform a job function.&lt;/li&gt;&lt;li&gt;Access to systems and data is limited to only the access needed to perform job functions, as defined in the related access roles.&lt;/li&gt;&lt;li&gt;Direct unfiltered (ad hoc) query access to cardholder data repositories is prohibited, unless performed by an authorized administrator.&lt;/li&gt;&lt;li&gt;Access rights and privileges are managed via mechanisms intended for that purpose.&lt;/li&gt;&lt;li&gt;Individual account access rights and privileges to systems, applications, and data are only inherited from group membership.&lt;/li&gt;&lt;li&gt;It is important to check the default configuration of access control systems because some are set by default to "allow all," thereby permitting access unless/until a rule is written to specifically deny it.&lt;/li&gt;&lt;li&gt;An account cannot be accessed except with a combination of user identity and an authentication factor. A common approach for a malicious individual to compromise a system is to exploit weak or nonexistent authentication factors (for example, passwords/passphrases). Requiring strong authentication factors helps protect against this attack.&lt;/li&gt;&lt;li&gt;Cleartext authentication factors cannot be obtained, derived, or reused from the interception of communications or from stored data.&lt;/li&gt;&lt;li&gt;Modifications to authentication factors for which user identity should be verified include but are not limited to performing password resets, provisioning new hardware or software tokens, and generating new keys.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Purpose&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Defining an access control model that is appropriate for the entity's technology and access control philosophy supports a consistent and uniform way of allocating access and reduces the possibility of errors such as the granting of excessive rights.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Good Practice&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A factor to consider when defining access needs is the separation of duties principle. This principle is intended to prevent fraud and misuse or theft of resources. For example, 1) dividing mission-critical functions and information system support functions among different individuals and/or functions, 2) establishing roles such that information system support activities are performed by different functions/individuals (for example, system management, programming, configuration management, quality assurance and testing, and network security), and 3) ensuring security personnel administering access control functions do not also administer audit functions.&lt;/p&gt;&lt;p&gt;In environments where one individual performs multiple functions, such as administration and security operations, duties may be assigned so that no single individual has end-to-end control of a process without an independent checkpoint. For example, responsibility for configuration and responsibility for approving changes could be assigned to separate individuals.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Definitions&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Key elements of an access control model include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Resources to be protected (the systems/devices/data to which access is needed),&lt;/li&gt;&lt;li&gt;Job functions that need access to the resource (for example, system administrator, call-center personnel, store clerk), and&lt;/li&gt;&lt;li&gt;Which activities each job function needs to perform (for example, read/write or query).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Once job functions, resources, and activities per job functions are defined, individuals can be granted access accordingly.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Access control models that entities can consider include role-based access control (RBAC) and attribute-based access control (ABAC). The access control model used by a given entity depends on their business and access needs.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Payment Card Industry Data Security Standard (PCI-DSS) v4.0" url="https://www.pcisecuritystandards.org/documents/PCI-DSS-v4_0.pdf"/>
          </references>
          <standards>
            <standard ref="7.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.1.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.1.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.1.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.1.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="7.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="7.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="7.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="7.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="7.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.7" supportedStandardRef="PCI-DSS-v3.2.1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;7.2.1.a: Examine documented policies and procedures and interview personnel to verify the access control model is defined in accordance with all elements specified in this requirement.&lt;/li&gt;&lt;li&gt;7.2.1.b: Examine access control model settings and verify that access needs are appropriately defined in accordance with all elements specified in this requirement.&lt;/li&gt;&lt;li&gt;7.2.2.a: Examine policies and procedures to verify they cover assigning access to users in accordance with all elements specified in this requirement.&lt;/li&gt;&lt;li&gt;7.2.2.b: Examine user access settings, including for privileged users, and interview responsible management personnel to verify that privileges assigned are in accordance with all elements specified in this requirement.&lt;/li&gt;&lt;li&gt;7.2.2.c: Interview personnel responsible for assigning access to verify that privileged user access is assigned in accordance with all elements specified in this requirement.&lt;/li&gt;&lt;li&gt;7.2.6.a: Examine policies and procedures and interview personnel to verify processes are defined for granting user access to query repositories of stored cardholder data, in accordance with all elements specified in this requirement.&lt;/li&gt;&lt;li&gt;7.2.6.b: Examine configuration settings for querying repositories of stored cardholder data to verify they are in accordance with all elements specified in this requirement.&lt;/li&gt;&lt;li&gt;7.3.1: Examine vendor documentation and system settings to verify that access is managed for each system component via an access control system(s) that restricts access based on a user's need to know and covers all system components.&lt;/li&gt;&lt;li&gt;7.3.2: Examine vendor documentation and system settings to verify that the access control system(s) is configured to enforce permissions assigned to individuals, applications, and systems based on job classification and function.&lt;/li&gt;&lt;li&gt;7.3.3: Examine vendor documentation and system settings to verify that the access control system(s) is set to "deny all" by default.&lt;/li&gt;&lt;li&gt;8.3.1.a: Examine documentation describing the authentication factor(s) used to verify that user access to system components is authenticated via at least one authentication factor specified in this requirement.&lt;/li&gt;&lt;li&gt;8.3.1.b: For each type of authentication factor used with each type of system component, observe an authentication to verify that authentication is functioning consistently with documented authentication factor(s).&lt;/li&gt;&lt;li&gt;8.3.2.a: Examine vendor documentation and system configuration settings to verify that authentication factors are rendered unreadable with strong cryptography during transmission and storage.&lt;/li&gt;&lt;li&gt;8.3.2.b: Examine repositories of authentication factors to verify that they are unreadable during storage.&lt;/li&gt;&lt;li&gt;8.3.2.c: Examine data transmissions to verify that authentication factors are unreadable during transmission.&lt;/li&gt;&lt;li&gt;8.3.3: Examine procedures for modifying authentication factors and observe security personnel to verify that when a user requests a modification of an authentication factor, the user's identity is verified before the authentication factor is modified.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.991">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="implement-monitoring-unusual-activities" name="Implement and monitor Business Logic Limits for actions and transactions" issueId="" issueLink="" platform="" cost="0" risk="27" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Implement in the application the appropriate limits for specific business actions and transactions, to enforce the correct usage of the application for each user ensuring they cannot bypass important steps in the flow. This business logic limits provide us protection against likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/p&gt;&lt;p&gt;All business actions or transactions that exceed the established limits, should be recorded in the logs and monitored as unusual events.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A04:2021-Insecure Design" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="API4:2023-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis.&lt;/li&gt;
   &lt;li&gt;Verify the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/li&gt;
  &lt;li&gt;Verify the application monitors for unusual events or activity from a business logic perspective.&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-ANTI-PHISHING-MEASURES" name="Implement anti-phishing measures such as email validation and verification processes" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement anti-phishing measures such as email validation and verification processes.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Email validation and verification processes are a security controls that can be implemented to mitigate the risk of phishing attacks. Phishing attacks are a common tactic used by attackers to trick users into providing sensitive information such as usernames, passwords, and other personal data.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Email validation: This involves verifying the sender's email address to ensure that it is legitimate and not spoofed. This can be done using email authentication protocols such as SPF, DKIM, and DMARC.&lt;/li&gt;&lt;li&gt;Verification processes: This involves implementing a process to verify the authenticity of emails before allowing users to access any links or attachments contained within them. This can be done using techniques such as two-factor authentication or by requiring users to enter a verification code sent to their phone or email.&lt;/li&gt;&lt;li&gt;User education: This involves training users on how to identify phishing emails and how to report them to the appropriate authorities. Users should be trained to look for signs such as suspicious links or attachments, misspellings, and urgent requests for personal information.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="TrendMictro Phishing" url="https://www.trendmicro.com/en_us/research/20/i/tricky-forms-of-phishing.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify that the system has been updated to include email validation and verification processes.&lt;/li&gt;&lt;li&gt;Send a test phishing email to the system and verify that it is detected and flagged as suspicious.&lt;/li&gt;&lt;li&gt;Attempt to open any links or attachments contained within the phishing email and verify that the system blocks access and displays a warning message.&lt;/li&gt;&lt;li&gt;Verify that users are required to enter a verification code or use two-factor authentication before accessing any links or attachments contained within emails.&lt;/li&gt;&lt;li&gt;Verify that users are trained on how to identify phishing emails and how to report them to the appropriate authorities.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:43.787">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-SSS-8.3" name="Implement secure retention of detailed activity records" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to identify anomalous behavior and to facilitate forensic investigation upon suspicion of potential software or data compromise, the software must facilitate the retention of detailed activity records either through native functionality (i.e., within the software itself) or support integration with other solutions such as centralized log servers, cloud-based logging solutions, or a back-end monitoring solution.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Without adequate protection of activity records, their completeness, accuracy, and integrity cannot be guaranteed, and any reliance that would otherwise be placed on them (such as during a forensic investigation) would be negated.&amp;nbsp;&lt;/p&gt;&lt;p&gt;When activity records are managed by the software, the records must be protected in accordance with all applicable requirements for the protection of sensitive data.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Secure Software Standard" url="https://www.pcisecuritystandards.org/documents/Secure-Software-Program-Guide-v1.pdf"/>
          </references>
          <standards>
            <standard ref="8.3" supportedStandardRef="pci-sss"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;8.3.a: Where the activity records are managed by the software, including only temporarily before being passed to other systems, the assessor shall examine vendor evidence and test the software to confirm that the protection methods are implemented to protect completeness, accuracy, and integrity of the activity records.&amp;nbsp;&lt;/li&gt;&lt;li&gt;8.3.b: Where the software utilizes other systems for maintenance of tracking data, such as a log server, the assessor shall examine vendor evidence to confirm that clear and sufficient guidance on the correct and complete setup and/or integration of the software with the log storage system is provided in the software vendor's implementation guidance made available to stakeholders per Control Objective 12.1. The assessor shall test the software to confirm methods are implemented to secure the authenticity of the tracking data during transmission to the log storage system, and to confirm that this protection meets the requirements of this standard-for example, authenticity parameters must be applied using strong cryptography-and any account or authentication parameters used for access to an external logging system are protected.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:59:26.802">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-SSS-8.2" name="Logs should capture enough detail to describe what happened in a specific operation" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All activity is captured in sufficient and necessary detail to accurately describe what specific activities were performed, who performed them, the time they were performed, and which critical assets were impacted.&lt;/p&gt;&lt;p&gt;By recording the details in this requirement for all attempts to access or use critical assets, malicious activity or potential software or data compromise can be quickly identified and with sufficient detail to know who performed the activity, whether the attempt was successful, when the activity occurred, what critical assets were affected, and the origination of the event.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Secure Software Standard" url="https://www.pcisecuritystandards.org/documents/Secure-Software-Program-Guide-v1.pdf"/>
          </references>
          <standards>
            <standard ref="8.2" supportedStandardRef="pci-sss"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;8.2.a: The assessor shall examine vendor evidence and test the software to confirm that the tracking method(s) implemented capture specific activity performed, including:&amp;nbsp;&lt;ul&gt;&lt;li&gt;Enablement of any privileged modes of operation&amp;nbsp;&lt;/li&gt;&lt;li&gt;Disabling of encryption of sensitive data&amp;nbsp;&lt;/li&gt;&lt;li&gt;Decryption of sensitive data&amp;nbsp;&lt;/li&gt;&lt;li&gt;Exporting of sensitive data to other systems or processes&amp;nbsp;&lt;/li&gt;&lt;li&gt;Failed authentication attempts&amp;nbsp;&lt;/li&gt;&lt;li&gt;Disabling or deleting a security control or altering security functionality&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;8.2.b: The assessor shall examine vendor evidence and test the software to confirm that the tracking method(s) implemented provide:&amp;nbsp;&lt;ul&gt;&lt;li&gt;A unique identification for the person, system, or entity performing the access&amp;nbsp;&lt;/li&gt;&lt;li&gt;A timestamp for each tracked event&amp;nbsp;&lt;/li&gt;&lt;li&gt;Details on what critical asset has been accessed&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;8.2.c: The assessor shall test the software to confirm that sensitive data is not directly recorded in the tracking data.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:59:26.793">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PCI-SSS-8.4" name="Preserve the integrity of existing activity records by handling failures in activity-tracking mechanisms" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Software security controls should be implemented to ensure that when activity-tracking mechanism(s) fail, those failures are handled in a way that maintains the integrity and confidentiality (if applicable) of the records.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Secure Software Standard" url="https://www.pcisecuritystandards.org/documents/Secure-Software-Program-Guide-v1.pdf"/>
          </references>
          <standards>
            <standard ref="8.4" supportedStandardRef="pci-sss"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;8.4.a: The assessor shall examine vendor evidence and test the software to confirm that failure of the activity tracking system does not violate the integrity of existing records. The assessor shall explicitly confirm that:&amp;nbsp;&lt;ul&gt;&lt;li&gt;The software does not overwrite existing tracking data upon a restart of the software. Each new start shall only append to existing datasets or shall create a new tracking dataset.&lt;/li&gt;&lt;li&gt;Where unique dataset names are relied upon for maintaining integrity between execution instances, the implementation ensures that other software (including another instance of the same software) cannot overwrite or render invalid existing datasets.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Where possible the software applies suitable file privileges to assist with maintaining the integrity of the tracking dataset (such as applying an append only access control to a dataset once created). Where the software does not apply such controls, the assessor shall confirm reasonable justification exists describing why this is the case, why the behavior is sufficient, and what additional mitigations are applied to maintain the integrity of the tracking data.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;8.4.b: The assessor shall examine vendor evidence, including source code, and shall test the software, including (wherever possible):&amp;nbsp;&lt;ul&gt;&lt;li&gt;Performing actions that should be tracked, force-closing and then restarting the software, and performing other tracked actions.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Performing actions that should be tracked, power-cycling the platform on which the software is executing, and then restarting the software and performing other tracked actions.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Locking access to the tracking dataset and confirming that the software handles the inability to access this dataset in a secure way, such as by creating a new dataset or preventing further use of the software.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Preventing the creation of new dataset entries by preventing further writing to the media on which the dataset is located (e.g., by using media that has insufficient available space).&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Where any of the tests above are not possible, the assessor shall interview personnel to confirm reasonable justification exists to describe why this is the case and shall confirm protections are put in place to prevent such scenarios from affecting the integrity of the tracking records.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:59:26.817">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-SESS-REAUTH" name="Require additional authentication for sensitive operations / high value transactions" issueId="" issueLink="" platform="" cost="0" risk="27" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Having gained access to an account, for example through session hijacking or cross-site scripting, an attack may compromise data and functionality accessible to the victim. This may include elevating privileges or accessing sensitive data and functionality, such as changing passwords, creating accounts, or transferring funds.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;These critical functions and sensitive data should be further protected from attack using a risk-based authentication model requiring re-authentication via multi-factor authentication, or use of a token to sign transactions or operations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement re-authentication on key functions (such as requiring the old password before setting a new one).&lt;/li&gt;&lt;li&gt;Use secondary authentication such as a transaction PIN to allow financial transfers.&lt;/li&gt;&lt;li&gt;Critical administrative functionality should require multi-factor authentication (such as a hard or soft token).&lt;/li&gt;&lt;li&gt;Consider use of signing technologies or tokens that enable the server-side to verify the authenticity of a request and mitigate Man in the Middle (MiTM) or Man in the Browser (MiTB) attacks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
          </references>
          <standards>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1" supportedStandardRef="swift-cscf"/>
            <standard ref="4.2" supportedStandardRef="swift-cscf"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2" supportedStandardRef="swift-cscf"/>
            <standard ref="5.4" supportedStandardRef="swift-cscf"/>
            <standard ref="IA-11" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-11" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-11" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical functionalities of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the risk appetite for those functionalities.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Validate that re-authentication is required for those functions if deemed
                            necessary.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.994">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-ADM-TRUST" name="Restrict access to administrative interfaces" issueId="" issueLink="" platform="" cost="1" risk="37" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Restrict access to administrative interfaces to trusted actors from trusted locations to reduce the application attack surface and likelihood of compromise.&lt;/p&gt; 
&lt;p&gt;Restrict administrative access to specific networks or hosts.&lt;/p&gt; 
&lt;div&gt;
  Use strong authentication for privileged access, for example a 2FA. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
          </references>
          <standards>
            <standard ref="2.4.10.13" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.13" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.8" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.8" supportedStandardRef="iotsf-class-1"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Try to access the administrative interface from an untrusted location. For example, if you are using a Wordpress &lt;span class="caps"&gt;CMS&lt;/span&gt; you should restrict access to /wp-admin which should not be available from the internet but only from trusted networks or IP addresses.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:31:06.993">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-PAYMENT-SYSTEM3" name="Use of a DDoS protection service for Payment System" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="PCI-DSS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use of a DDoS protection service for Payment System&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; A distributed denial of service (DDoS) attack is a type of cyber attack in which an attacker attempts to make a website or network resource unavailable by overwhelming it with traffic from multiple sources. DDoS attacks can cause significant disruptions to a payment system, making it unavailable to legitimate users. Using a DDoS protection service can help to mitigate the risk of such an attack.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Implement a DDoS protection service to protect the payment system from DDoS attacks. This can be done by deploying hardware or software solutions that are specifically designed to detect and block DDoS traffic, or by outsourcing the service to a third-party provider.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Implementing a DDoS protection service may have a slight impact on the performance of the payment system, as additional processing power is required to detect and block DDoS traffic.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Advanced DDoS Mitigation Techniques" url="https://www.nist.gov/programs-projects/advanced-ddos-mitigation-techniques"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Verify that the DDoS protection service is properly configured and that all necessary settings are in place&lt;br /&gt;
2. Test the DDoS protection service by simulating a DDoS attack and verify that the service is able to detect and block the attack&lt;br /&gt;
3. Monitor the performance of the payment system during normal usage and during simulated DDoS attacks to ensure that the service does not cause any undue performance degradation.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:59:26.864">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="PCI-DSS">
          <threats>
            <threat ref="T-DOS-ATTACK" name="Attackers perform a Denial of Service (DoS)" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="PCI-DSS" editable="true">
              <desc>&lt;p&gt;A denial of service (DoS) attack is a type of cyber attack that is designed to make a website or network resource unavailable to users. DoS attacks typically involve flooding the target with traffic, overwhelming the server or network and causing it to crash or become inaccessible. DoS attacks can be launched from a single source or can be distributed, in which case they are known as distributed denial of service (DDoS) attacks. DDoS attacks are more difficult to mitigate because they involve multiple sources of traffic, making it harder to block the attack. DoS attacks can have a significant impact on the availability and performance of a website or network, and can be difficult to defend against due to the sheer volume of traffic involved.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="W-SYSTEM-VULN-DOS">
                  <countermeasures>
                    <countermeasure ref="C-PAYMENT-SYSTEM3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-PAYMENT-SYSTEM3" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="T-ACCOUNT-TAKEOVER" name="Attackers gain unauthorized access to user accounts and make fraudulent transactions" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;In this scenario, attackers exploit vulnerabilities in the financial application's security mechanisms to illicitly infiltrate user accounts. They do this by exploiting weaknesses in authentication mechanisms, password policies, or even through social engineering attacks that trick users into revealing their credentials. Once unauthorized access is obtained, attackers can manipulate the application's features and perform fraudulent transactions on behalf of the legitimate account holders. These fraudulent transactions can include unauthorized fund transfers, purchases, or actions that compromise the user's financial assets and information.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="50"/>
              <references>
                <reference name="OWASP OAT-008 Credential Stuffing" url="https://owasp.org/www-project-automated-threats-to-web-applications/assets/oats/EN/OAT-008_Credential_Stuffing"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="C-PCI-DSS-5" mitigation="25"/>
                    <countermeasure ref="CSD-ADM-TRUST" mitigation="25"/>
                    <countermeasure ref="CWE-306-AUTH" mitigation="25"/>
                    <countermeasure ref="CWE-603" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-PCI-DSS-5" mitigation="25"/>
                <countermeasure ref="CSD-ADM-TRUST" mitigation="25"/>
                <countermeasure ref="CWE-306-AUTH" mitigation="25"/>
                <countermeasure ref="CWE-603" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="T-PHISHING-ATTACKS" name="An attacker attempts to trick users of a software module into revealing sensitive information or performing unauthorized actions by impersonating a legitimate source" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Phishing attacks refer to a type of attack where an attacker attempts to trick users of a software module into revealing sensitive information or performing unauthorized actions by impersonating a legitimate source. The attacker may use various techniques, such as email, social engineering, or fake websites, to lure users into providing personal information, such as usernames, passwords, or credit card numbers.&lt;/p&gt;&lt;p&gt;Phishing attacks can be particularly dangerous because they can compromise the confidentiality, integrity, and availability of the software and the data it processes. For example, if an attacker gains access to a user's login credentials, they can use them to steal sensitive data, modify or delete files, or launch further attacks on the system or the network.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-451">
                  <countermeasures>
                    <countermeasure ref="C-ANTI-PHISHING-MEASURES" mitigation="50"/>
                    <countermeasure ref="C-USER-CONTROLLABLE-DATA" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-ANTI-PHISHING-MEASURES" mitigation="50"/>
                <countermeasure ref="C-USER-CONTROLLABLE-DATA" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="T-INSIDER-FRAUD" name="Malicious actions by employees or insiders manipulate transactions for personal gain" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;In this threat scenario, individuals with insider access, such as employees, contractors, or trusted users, exploit their privileged positions to engage in fraudulent activities within the financial application. By virtue of their access, insiders may exploit vulnerabilities, misuse their authority, or bypass security controls to manipulate transactions. These actions are typically driven by personal gain, financial motives, or insider knowledge of the application's weaknesses. Insiders might bypass detection by acting within their authorized roles or using their familiarity with the application's infrastructure. This type of attack challenges the application's trust in its own users and can lead to significant financial losses, data breaches, and reputational damage.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="25"/>
              <references>
                <reference name="Insider Fraud in Financial Services" url="https://resources.sei.cmu.edu/asset_files/WhitePaper/2012_019_001_887049.pdf"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-285">
                  <countermeasures>
                    <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                    <countermeasure ref="CWE-654" mitigation="33"/>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                <countermeasure ref="CWE-654" mitigation="33"/>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="34"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="UC-PCI-SSS-REQUIREMENTS" name="PCI-SSS Requirements" desc="" library="PCI-DSS">
          <threats>
            <threat ref="CAPEC-170-INSUFFICIENT-LOGGING" name="Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="PCI-DSS" editable="true">
              <desc>&lt;p&gt;Insufficient logging, detection, monitoring and active response occurs any time:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditable events, such as logins, failed logins, and high-value transactions are not logged.&lt;/li&gt;&lt;li&gt;Warnings and errors generate no, inadequate, or unclear log messages.&lt;/li&gt;&lt;li&gt;Logs of applications and APIs are not monitored for suspicious activity.&lt;/li&gt;&lt;li&gt;Logs are only stored locally.&lt;/li&gt;&lt;li&gt;Appropriate alerting thresholds and response escalation processes are not in place or effective.&lt;/li&gt;&lt;li&gt;Penetration testing and scans by DAST tools (such as OWASP ZAP) do not trigger alerts.&lt;/li&gt;&lt;li&gt;The application is unable to detect, escalate, or alert for active attacks in real time or near real time.&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="PCI-SSS-8.1" mitigation="25"/>
                    <countermeasure ref="PCI-SSS-8.2" mitigation="25"/>
                    <countermeasure ref="PCI-SSS-8.3" mitigation="25"/>
                    <countermeasure ref="PCI-SSS-8.4" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PCI-SSS-8.1" mitigation="25"/>
                <countermeasure ref="PCI-SSS-8.2" mitigation="25"/>
                <countermeasure ref="PCI-SSS-8.3" mitigation="25"/>
                <countermeasure ref="PCI-SSS-8.4" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-SYSTEMS" name="Attackers access the systems without being detected" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="PCI-DSS" editable="true">
              <desc>&lt;p&gt;Attackers gain access to the systems and are not detected and consequently, changes made by attackers can not be audited or detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="25" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="no-alerts-access">
                  <countermeasures>
                    <countermeasure ref="PCI-SSS-9.1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PCI-SSS-9.1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="a4599221-35b8-4a24-8f28-70528a9e65c9" diagramComponentId="96e728e1-2aa4-42b9-9dfe-13327ce4cb78" ref="e4d4e1ab-a214-41a7-9a6c-ea82c2784932" name="Login" desc="" library="IR-Functional-Components" parentComponentRef="13a37286-a00d-4b30-956c-a1b4b032a40c" componentDefinitionRef="CD-LOGIN">
      <tags/>
      <questions>
        <question ref="fc.answer.login.access.control.centralized.implemented" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.login.clear.caches.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.login.logging.features.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.login.mfa.auth.not.applicable" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.login.prepared.statements.implemented" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.login.rate.limiting.unsure" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.login.saml.not.applicable" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.login.simultaneous.logins.unsure" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.login.sso.not.applicable" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.login.store.passwords.implemented" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.login.validate.file.format.not.applicable" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="C-SET-TIMESTAMP-ON-REQUEST" name="Attach timestamps or sequence numbers to each sent message" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To avoid replay attacks, a type of man in the middle attack, it is recommended to add a timestamp or sequence numbers in the exchanged messages, this will allow the receiver to discard messages with a duplicated sequence number or timestamp.&lt;/p&gt;&lt;p&gt;An example of sequence number in its messages is the TCP protocol with its ACK.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Transaction Authorization Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Transaction_Authorization_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Review code application.&lt;/li&gt;&lt;li&gt;Check the exchanged messages and verifies if there is a timestamp or sequence number and that no duplicates are allowed.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.205">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-654" name="Authenticate users (multi - or two-factor - authentication [2FA])" issueId="" issueLink="" platform="" cost="1" risk="39" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For more sensitive applications hosting data or functionality requiring greater assurance over the identification of users, a multi - or two-factor - authentication process is recommended. Together with asserting their identity and a password/phrase/PIN (something you know), such systems require additional factors, such as biometric validation (something you are), user-initiated action such as a button press on a FIDO hardware key or a token (something you have).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement multi-factor authentication for applications providing access to sensitive data or functionality, and for highly privileged user access (e.g. administrators).&lt;/li&gt;&lt;li&gt;This should leverage something such as a soft or hard-token verification in addition to the secret password/pass-phrase for example.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
          </references>
          <standards>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.5" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.9" supportedStandardRef="nist-800-63"/>
            <standard ref="6.1.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check for authentication functions of the component.&lt;/li&gt;&lt;li&gt;Verify at least a combination of the following factors is used within the authentication process.&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Something that you are: mainly biometric characteristics of yourself such as fingerprint, facial recognition, iris recognition, etc.)&lt;/li&gt;&lt;li&gt;Something that you know: a PIN, password, pass phrase, etc.&lt;/li&gt;&lt;li&gt;Something that you have: a hardware token, a card, a dongle, a mobile phone, etc.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.205">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AUTHZ-AFTER-AUTHN" name="Authorize after you authenticate" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Authorization should be conducted as an explicit check, and as necessary even after an initial authentication has been completed. Authorization depends not only on the privileges associated with an authenticated user, but also on the context of the request. The time of the request and the location of the requesting user may both need to be taken into account.&lt;/p&gt;&lt;p&gt;Sometimes a user's authorization for a system or service needs to be revoked, for example, when an employee leaves a company. If the authorization mechanism fails to allow for such revocation, the system is vulnerable to abuse by authenticated users exercising out-of-date authorizations.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Authorize After You Authenticate" url="https://cybersecurity.ieee.org/blog/2015/11/13/authorize-after-you-authenticate/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Validate that no authorization process is conducted before an authentication process has previously finished.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.204">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SAML-VERIFY-IDP-X509" name="Check if the X509Certificate entity is really the correct certificate for your Identity Provider" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="THREAT" priority="">
          <desc>&lt;p&gt;It is necessary to ensure the identity of the supplier by verifying the certificate of the messages, to ensure that it is the correct one.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="SAML Raider - SAML2 Burp Extension" url="https://github.com/portswigger/saml-raider"/>
            <reference name="SAML Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check if it is possible to remove the signature&lt;/li&gt;&lt;li&gt;Sign the SAML Response with own certificate&lt;/li&gt;&lt;li&gt;Check the signature algorithm in use&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.204">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-524" name="Clear caches of sensitive data" issueId="" issueLink="" platform="" cost="1" risk="56" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Applications storing or caching data locally are at risk of attack and compromise of that data. Local temporary storage, thumbnail images, and configuration files often contain excerpts of sensitive information that may be left on the device during or after the application is used.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure all temporary files, caches, and storage are purged after use and when the application is closed.&lt;/li&gt;&lt;li&gt;Do not allow the application to cache sensitive information outside of the OS provided secure stores.&lt;/li&gt;&lt;li&gt;Use OS controls to restrict thumbnails of the application in cases where sensitive information is displayed.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check the application for the use of caching.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify they are periodically emptied.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:57.814">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-IMPLEMENT-SSO" name="Consider using Single Sign-on (SSO)" issueId="" issueLink="" platform="" cost="0" risk="39" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Single Sign-on (SSO) occurs when a user logs in to one application and is then signed in to other applications automatically, regardless of the platform, technology, or domain the user is using. The user signs in only one time, hence the name of the feature (Single Sign-on).&lt;/p&gt;&lt;p&gt;SSO provides a seamless experience for users when using your applications and services. Instead of having to remember separate sets of credentials for each application or service, users can simply log in once and access your full suite of applications.&lt;/p&gt;&lt;p&gt;Whenever users go to a domain that requires authentication, they are redirected to the authentication domain where they may be asked to log in. If the user is already logged in at the authentication domain, they can be immediately redirected to the original domain without signing in again.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Single Sign-On" url="https://auth0.com/docs/authenticate/single-sign-on"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if there is any chance to connect to a SSO from your application&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.204">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-603" name="Deploy a robust server-side validation and authentication system" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;When authentication is performed solely on the client-side, the user's credentials (e.g., username and password) are sent to the server for verification. However, an attacker can intercept and modify these credentials before they are sent to the server, allowing them to gain unauthorized access to the application.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Furthermore, client-side authentication does not provide any protection against attacks that target the server-side of the application. For example, an attacker could exploit a vulnerability in the server-side code to gain access to sensitive data or functionality without needing to authenticate at all.&lt;/p&gt;&lt;p&gt;All data on the client-side must be considered tainted. As such, decisions on authentication (or Identification and Verification - ID&amp;amp;V) must be made or validated on the server-side to prevent their subversion.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure credentials are passed securely from client to server.&lt;/li&gt;&lt;li&gt;The server should compare the credentials with those stored on the server-side (e.g. the hashed password compared against those stored for the claimed identity).&lt;/li&gt;&lt;li&gt;Implement controls to mitigate brute-force attacks; for example through rate-limiting, account lockouts, or escalating timeouts.&lt;/li&gt;&lt;li&gt;Once authenticated, a non-predictable and cryptographically secure token should be passed securely to the client-side to validate further interaction with the server.&lt;/li&gt;&lt;li&gt;Messages returned to the user during authentication, in particular when the process fails, should not reveal to the user whether the username was valid. Returning generic errors prevents an attacker enumerating valid account IDs for subsequent attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify which functions the service provides which are authenticated or performing a privileged action.&lt;/li&gt;&lt;li&gt;Try to access them without providing any type of authentication.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A clear example of what you should look for would be an API endpoint which allows a client to update a resource, you should ensure this call checks the authentication on the server side (by checking the session having validated the authentication credentials previously).&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.205">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.&lt;/p&gt;&lt;p&gt;One of the ways to enforce this is by following the deny-by-default principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny-by-default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.206">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-598" name="Ensure no sensitive data is sent in the URL" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed in the URL (address bar) between client and server is likely to be exposed in logs on the server, or intermediate devices (such as proxies or other network devices), or in local browser logs/history. A common mistake is, for example, to pass a SessionID value as a parameter in the URL of a get request between hosts. To mitigate the risk of exposure of sensitive data, this sensitive data should only be sent in the body of an HTTP message (for example a POST request), or in the HTTP headers (i.e. standard headers such as the Cookie values, or a custom X- header).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure sensitive, private, or otherwise restricted data is not sent in a URL value.&lt;/li&gt;&lt;li&gt;Pass sensitive data only in appropriately protected fields in the body or headers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Sensitive Data Exposure" url="https://pwning.owasp-juice.shop/part2/sensitive-data-exposure.html"/>
          </references>
          <standards>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="A02:2021-Cryptographic Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A3:2017-Sensitive Data Exposure" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy.&lt;/li&gt;
                            &lt;li&gt;Programmatically or manually visit all authenticated content and functionality
                            within the application.&lt;/li&gt;
                            &lt;li&gt;Review logs to determine if sensitive data is sent in the URL at any point. If
                            should only be sent in HTTP headers (i.e. a cookie) or as part of the body (e.g. in a POST
                            or PUT request).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.816">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.1" name="Ensure sensitive data is not revealed through error output messages" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the application does not output error messages or stack traces containing sensitive
                        data that could assist an attacker, including the session id, software/framework versions and
                        personal information.</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
          </references>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application does not output error massages or stack traces containing sensitive data.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:57.509">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" name="Ensure that access control mechanisms are centralized" issueId="" issueLink="" platform="" cost="0" risk="39" state="Implemented" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Access control, authentication and authorization procedures should be centralized, and all roles, permissions, groups and users shall be controlled - or gain access - through this mechanism.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To ensure roles, groups and permissions are assigned properly to users, we need to have centralized access control, to grant or deny access easily and securely.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that access control mechanisms are centralized.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.202">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:57.206">
              <output/>
            </source>
            <references>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from untrusted data in logs" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:57.204">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-FORCE-LOGOUT" name="Force logout if account permissions have been revoked" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Active sessions could be used by a malicious actor even after the account has been removed or blocked from the system. This could open the door to MitM attacks and session hijacking attacks while the application connects to the IdP to confirm that the session has no more rights to operate.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Man-in-the-middle Attack" url="https://owasp.org/www-community/attacks/Manipulator-in-the-middle_attack"/>
            <reference name="Session Hijacking Attack" url="https://owasp.org/www-community/attacks/Session_hijacking_attack"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check periodically the session status with the SSO/IdP and force the log off process in case the active account was blocked/deleted.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.204">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For API rate limiting there are several methods that can be applied:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Throttling: based on certain rules a request can be slowed down considerably to allow other requests to be served first&lt;/li&gt;&lt;li&gt;Request queues: limit the number of request in a given period of time (e.g. five requests per second)&lt;/li&gt;&lt;li&gt;Token bucket: commonly used in public APIs, each user has a number of tokens to call the API. After all tokens have been used the user has to wait until the number of tokens are renewed&lt;/li&gt;&lt;li&gt;Fixed window: requests that exceed a fixed limit in a period of time will be blocked temporarily&lt;/li&gt;&lt;li&gt;Leaky bucket: requests are put in a FIFO queue and will be served accordingly&lt;/li&gt;&lt;li&gt;Sliding log: a time-stamped log is used to identify user actions, so the rate limit can be applied for a specified user to avoid more than X actions in a period of time&lt;/li&gt;&lt;li&gt;Sliding window: combination of fixed window and sliding log&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a user perspective, implementing timeouts and calling paginated endpoints can reduce the impact of having a very large response that can freeze the system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API4:2023-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like THC-Hydra, OWASP ZAP or Burp Suite to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:57.510">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-session-generation-and-expiration" name="Implement a secure Session Generation and Expiration" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID exchange mechanism based on cookies provides multiple security features in the form of Session Generation and Expiration which is tracked in a session. This session is typically stored on the server for traditional web based session management. A session identifier is then given to the user so they can identify which server-side session contains the correct user data. The client only needs to maintain this session identifier, which also keeps sensitive server-side session data off of the client.&lt;/p&gt;&lt;p&gt;Here are a few controls to consider when building or implementing session management solutions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure that the session id is long, unique and random. The session ID length must be at least 128 bits (16 bytes)&lt;/li&gt;&lt;li&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks such as when an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good PRNG (Pseudo Random Number Generator) must be used. The session ID value must provide at least 64 bits of entropy (if a good PRNG is used, this value is estimated to be half the length of the session ID).&lt;/li&gt;&lt;li&gt;The application should generate a new session or at least rotate the session id during authentication and re-authentication.&lt;/li&gt;&lt;li&gt;The application should not treat OAuth and refresh tokens as their own session identifiers. Moreover, it should allow users to terminate trust relationships with linked applications.&lt;/li&gt;&lt;li&gt;The CSPs (Credential Service Provider) should re-authenticate the subscriber if it has not been authenticated since a given inactivity period. CSPs should inform the RP (Relying Parties) the last authentication time, to know if re-authentication is needed.&lt;/li&gt;&lt;li&gt;When a user chooses to log out (or otherwise has their session terminated), the user session must be terminated on the server-side, not solely at the client-side (for example by deleting or reissuing a session ID token/cookie).&lt;ul&gt;&lt;li&gt;Revoke user sessions on the server-side.&lt;/li&gt;&lt;li&gt;Redirect users to the login page, or provide a login prompt.&lt;/li&gt;&lt;li&gt;Where possible, ensure the session is not reused by the application server.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application should implement an idle timeout after a period of inactivity and an absolute maximum lifetime for each session, after which users must re-authenticate. If the application has implemented a functionality to be always logged in, the application must force users to re-authenticate for more sensitive actions.&lt;/li&gt;&lt;li&gt;The length of the timeouts should be inversely proportional with the value of the data protected.&lt;ul&gt;&lt;li&gt;30 days&lt;/li&gt;&lt;li&gt;12 hours or 30 minutes of inactivity, 2FA optional&lt;/li&gt;&lt;li&gt;12 hours or 15 minutes of inactivity, with 2FA&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.5" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.5" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1" supportedStandardRef="nist-800-63"/>
            <standard ref="7.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7.2.1" supportedStandardRef="nist-800-63"/>
            <standard ref="AC-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check that sessions are renewed following the steps below:&lt;ul&gt;&lt;li&gt;Log in to the application.&lt;/li&gt;&lt;li&gt;Open another browser and go to the login page.&lt;/li&gt;&lt;li&gt;Log in to the application for the second time.&lt;/li&gt;&lt;li&gt;Check that the old session and session id are removed.&lt;/li&gt;&lt;li&gt;Check that a new session is created with new session id.&lt;/li&gt;&lt;li&gt;Check that the old and new session ids are different.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that sessions tokens are generated from a source with sufficient entropy and they are not predictable.&lt;/li&gt;&lt;li&gt;Check that the refresh tokens and OAuth sessions with linked applications have not been terminated by users.&lt;/li&gt;&lt;li&gt;Check the CSPs force the RP to re-authenticate after a certain period of inactivity.&lt;/li&gt;&lt;li&gt;Check that the logout and expiration invalidate the session token, following the steps below:&lt;ul&gt;&lt;li&gt;Open a browser.&lt;/li&gt;&lt;li&gt;Authenticate as a user A.&lt;/li&gt;&lt;li&gt;Get the Session ID and note it.&lt;/li&gt;&lt;li&gt;Logout of the service.&lt;/li&gt;&lt;li&gt;Set up the noted Session ID.&lt;/li&gt;&lt;li&gt;Try to access an authenticated section of the service and you should not be able to do it as user A.&lt;/li&gt;&lt;li&gt;To edit the cookies you can either use a proxy (i.e. OWASP ZAP, Burp, Fiddler, etc.) or a browser extension which allows you to tamper the cookies (i.e. Tamper Data, Cookie Manager, etc.).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check that the session expires after a certain period of inactivity following the steps below:&lt;ul&gt;&lt;li&gt;Verify the expected inactive timeout.&lt;/li&gt;&lt;li&gt;Check 'normal' use through a browser:&lt;ul&gt;&lt;li&gt;Go to the authentication feature of the component.&lt;/li&gt;&lt;li&gt;Authenticate as a user.&lt;/li&gt;&lt;li&gt;Leave the session open for a given time (check the expiration time that has been agreed to be implemented).&lt;/li&gt;&lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the session is no longer authenticated).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check the control is enforced on the server side and not using code in the browser:&lt;ul&gt;&lt;li&gt;Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and determine which cookies or other tokens are used to maintain session state. Alternatively, capture an authenticated application request for replay.&lt;/li&gt;&lt;li&gt;Store and replay the request after the timeout period to see if the application responds with authenticated data.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Review application operation and determine if any behavior artificially holds the session open, for example, heartbeat requests or calls to update data feeds sent from the client to the server are sometimes mistakenly interpreted as user activity, holding the session open.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.207">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="56" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:57.510">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-THREAD-CONCURRENCY" name="Implement threading, concurrency and asynchronicity" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to make your application more responsive to a user and maximize the performance of your user's computer, we have different coding techniques. Not so long ago, apps got faster simply by buying a newer PC or server and then that trend has reversed. Users still want responsive UI and business owners want servers that scale with their business. The transition to mobile and cloud and an internet-connected population of &amp;gt;3B users has resulted in a new set of software patterns.&lt;/p&gt;&lt;p&gt;Using multiple threads of execution is one of the most powerful ways to keep your application responsive to the user and at the same time make use of the processor in between or even during user events.&lt;/p&gt;&lt;p&gt;We use concurrency to take advantage of the hardware, so you can parallelize your code to distribute work across multiple processors.&lt;/p&gt;&lt;p&gt;Async programming is a key technique that makes it straightforward to handle blocking I/O and concurrent operations on multiple cores.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Parallel Processing, Concurrency, and Async Programming in .NET" url="https://docs.microsoft.com/en-us/dotnet/standard/parallel-processing-and-concurrency"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Look for bottlenecks in the workflow of the application that may cause a denial of service attack if exploited such as a misconfigured file reader that blocks the main thread if more than one file is uploaded to the application.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.205">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-ACCOUNT-LOCKDOWN" name="Instead of completely locking out an account, place it in a lockdown mode with limited capabilities" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Depending on how critical the application is, accounts can be entirely locked out or just flagged to have most of their permissions removed. This is useful to ensure that the user experience remains good while at the same time protect the system of potential attacks due to an account misuse.&lt;/p&gt;&lt;p&gt;Developers should check that this lockdown mode doesn't reveal any potential information that could be relevant to an attacker as well as the actions that the user can do. Developers must provide a process to recover the account to its normal behavior.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Attempt to login several times with a wrong password&lt;/li&gt;&lt;li&gt;Login with the right password and check if the behavior is the same with and without having failed the login attempts.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.203">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-TOKEN-TIMEOUT" name="Invalidate a session after a predefined idle time has passed" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to keep the authenticated state and track the users progress, applications provide users with a session identifier or token which binds the user authentication credentials to the user HTTP traffic and the appropriate access controls enforced by the web application.&lt;/p&gt;&lt;p&gt;It is mandatory to set expiration timeouts for every session, establishing the amount of time a session will remain active. Insufficient session expiration by the web application increases the exposure of other session-based attacks, as for the attacker to be able to reuse a valid session ID and hijack the associated session.&lt;/p&gt;&lt;p&gt;The session expiration timeout values must be set accordingly with the purpose and nature of the web application, and balance security and usability. There are two automatic session expiration, iddle timeout and absolute timeout. Both values are highly dependent on how critical the web application and its data are. Common idle timeouts ranges are 2-5 minutes for high-value applications and 15-30 minutes for low risk applications. Absolute timeouts depend on how long a user usually uses the application. If the application is intended to be used by an office worker for a full day, an appropriate absolute timeout range could be between 4 and 8 hours.&lt;/p&gt;&lt;p&gt;When a session expires, the web application must take active actions to invalidate the session on both sides, client and server. The latter is the most relevant and mandatory from a security perspective.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Set session timeout to the minimal value possible depending on the context of the application.&lt;/li&gt;&lt;li&gt;Avoid "infinite" session timeout.&lt;/li&gt;&lt;li&gt;Prefer declarative definition of the session timeout in order to apply a global timeout for all application sessions.&lt;/li&gt;&lt;li&gt;Trace session creation/destruction in order to analyse the creation trend and try to detect a normal number of session creations (application profiling phase in a attack).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.205">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-OTP-BRUTE-FORCE" name="Prevent brute force attacks" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement appropriate protection to prevent users from brute-forcing token generation and token checking with mechanisms such as rate limiting or CAPTCHA. And remember that OTP length must be at least 6 characters long and a combination of different characters (not only numbers, not only letters, ...).&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Protect Against Automated Attacks" url="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#protect-against-automated-attacks"/>
          </references>
          <standards>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if there is any captcha enabled and investigate if making continuous requests with an automated tool like Burp it is still accepting the request and generating or checking OTPs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:56.967">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-OTP-INVALID" name="Prevent old or used OTPs from being reused by invalidating them" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;One-time passwords (OTP) are secrets used during operations that need added security or as part of user enrollment processes. Despite their short lifespan, only one OTP should be valid at any given time, and therefore, all previous OTPs should be invalidated whenever a new one is generated or after the OTP has expired.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Forgot Password Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"/>
            <reference name="Invalidate Previous OTPs" url="https://docs.fluidattacks.com/criteria/requirements/347"/>
          </references>
          <standards>
            <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Request an OTP and try to use it a couple of times. Verify that the OTP cannot be used twice or more.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:56.968">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-PREVENT-SIMULTANEOUS-LOGIN" name="Prevent Simultaneous Logins" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;It's possible that the application needs or wants to have simultaneous session, in this case, please control the number of the total active session and limit it.&lt;/p&gt;&lt;p&gt;If the application does not want to allow simultaneous session logons, it must take effective actions after each new authentication event, implicitly terminating the previously available session, or asking the user (through the old, new or both sessions) about the session that must remain active.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="swift-cscf"/>
            <standard ref="1.4" supportedStandardRef="swift-cscf"/>
            <standard ref="1.5" supportedStandardRef="swift-cscf"/>
            <standard ref="AC-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Open different browsers, or a "normal" tab and an "anonymous" tab, and check the following points:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Have you received some notification in some tab?&lt;/li&gt;&lt;li&gt;Was it possible to log in on the new login attempt? if the answer is yes, then has the previously open session been closed?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If the first session has been closed, it is recommended to check that it has been carried out correctly. To do this, use a proxy in the process, and forward requests prior to logout and check the response.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.204">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SESSION-ID-ON-PARAMETER" name="Prevent the attacker from making the user use his session by accepting session IDs only from cookies, not from GET or POST parameters" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The preferred session ID exchange mechanism should allow defining advanced token properties, such as the token expiration date and time, or granular usage constraints. This is one of the reasons why cookies (RFCs 2109 &amp;amp; 2965 &amp;amp; 6265) are one of the most extensively used session ID exchange mechanisms, offering advanced capabilities not available in other methods.&lt;/p&gt;&lt;p&gt;The usage of specific session ID exchange mechanisms, such as those where the ID is included in the URL, might disclose the session ID (in web links and logs, web browser history and bookmarks, the Referer header or search engines), as well as facilitate other attacks, such as the manipulation of the ID or session fixation attacks.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Review the code and check where the session ID is set.&lt;/li&gt;&lt;li&gt;Functional test, review the traffic (requests and responses), and verify thtat the session ID only appears in the cookie.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.205">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="require-use-strong-passwords" name="Require the use of strong passwords" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords used either as a sole verification credentials, or as part of a multi-factor authentication, are a key aspect of application security, and strong password selection should be encouraged and enforced. The application should allow flexibility in user password selection, and enforce minimum criteria for password quality. This should include:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimum password length requirements, to mitigate brute-force and dictionary attacks.&lt;/li&gt; 
 &lt;li&gt;Encourage use of pass-phrases using multiple words, achieving longer passwords more resistant to attack.&lt;/li&gt; 
 &lt;li&gt;Enforce use of mixed case, numeric and/or special characters to increase complexity.&lt;/li&gt; 
 &lt;li&gt;Prevent or discourage use of dictionary words and common passwords through black-lists. For example, a set of commonly used passwords can be found on SecLists at &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&amp;nbsp;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password length:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password length considers the minimum and maximum length of characters comprising the password of your users. For ease of changing this length, its implementation can be configurable possibly using a properties file or xml configuration file.&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;b&gt;Minimum length. &lt;/b&gt;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Memory secrets shall be at least 8 characters long. &lt;/li&gt; 
  &lt;li&gt;Memory secrets generated automatically shall be at least 6 numeric characters.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Maximum length. &lt;/b&gt;People tend to forget their passwords easily. The longer the password, the more likely people are to enter them incorrectly for the system. However, long pass-phrases can be easily remembered, and should not be prevented through unnecessarily strict upper restrictions on length. &lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords with 64 characters or longer shall be permitted.&amp;nbsp;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;b&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password Complexity:&lt;/span&gt;&lt;/p&gt;&lt;/b&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Passwords with consecutive multiple spaces shall be coalesced and converter into only one space. After this modification, the password length shall be at least 12 characters long.&lt;/li&gt; 
 &lt;li&gt;Unicode characters shall be allowed in the password. A single Unicode code point is considered a character.&lt;/li&gt; 
 &lt;li&gt;Reject those passwords whose are commonly used and they have been already been leaked in a previous compromise. You may choose to block the top 1000 or 10000 most common passwords which meet the above length requirements and are found in compromised password lists. The following link contains the most commonly found passwords: &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Actual passwords must not be stored, to protect them against brute forcing if the database is compromised Screen reader support enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password Topologies:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ban commonly used password topologies.&lt;/li&gt; 
 &lt;li&gt;Force multiple users to use different password topologies.&lt;/li&gt; 
 &lt;li&gt;Require a minimum topology change between old and new passwords.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Additional Information:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure that every character the user types in is actually included in the password. We've seen systems that truncate the password at a length shorter than what the user provided (e.g., truncated at 15 characters when they entered 20).&lt;/li&gt; 
 &lt;li&gt;As application's require more complex password policies, they need to be very clear about what these policies are. The required policy needs to be explicitly stated on the password change page&lt;/li&gt; 
 &lt;li&gt;If the new password doesn't comply with the complexity policy, the error message should describe EVERY complexity rule that the new password does not comply with, not just the 1st rule it doesn't comply with.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Blacklist Top Leaked Passwords" url="https://github.com/danielmiessler/SecLists/tree/master/Passwords"/>
            <reference name="NIST 800-63-B: 5.1.2.2" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="Owasp CheatSheet: Authentication" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.10.1" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.1" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.11" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.14" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.14" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.4" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.4" supportedStandardRef="iotsf-class-1"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="A.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt; 
 &lt;li&gt;Verify the passwords comply with the company policy for strong passwords.&lt;/li&gt; 
 &lt;li&gt;If there is no policy, check the strength against industry standards as NIST or OWASP.&lt;/li&gt; 
&lt;/ol&gt;An example of strong password policy (&amp;nbsp; 
&lt;a href="https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls"&gt;from the OWASP Authentication Cheat Sheet&lt;/a&gt;) is: Password must meet at least 3 out of the following 4 complexity rules: 
&lt;ul&gt; 
 &lt;li&gt;at least 1 uppercase character (A-Z)&lt;/li&gt; 
 &lt;li&gt;at least 1 lowercase character (a-z)&lt;/li&gt; 
 &lt;li&gt;at least 1 digit (0-9)&lt;/li&gt; 
 &lt;li&gt;at least 1 special character (punctuation). Do not forget to treat space as special characters too&lt;/li&gt; 
 &lt;li&gt;at least 10 characters&lt;/li&gt; 
 &lt;li&gt;at most 128 characters&lt;/li&gt; 
&lt;/ul&gt;not more than 2 identical characters in a row (e.g., 111 not allowed).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.206">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-NEW-LOCATION-LOGIN-ALERT" name="Send a message to the user each time the system detects that the user is logging in from a new device or IP" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Aside from the IP address, there are a number of different factors that can be used to attempt to fingerprint a device. Some of these can be obtained passively by the server from the HTTP headers (particularly the "User-Agent" header), including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Operating system&lt;/li&gt;&lt;li&gt;Browser&lt;/li&gt;&lt;li&gt;Language&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using JavaScript it is possible to access far more information, such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Screen resolution&lt;/li&gt;&lt;li&gt;Installed fonts&lt;/li&gt;&lt;li&gt;Installed browser plugins&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using these various attributes, it is possible to create a fingerprint of the device. This fingerprint can then be matched against any browser attempting to login to the account, and if it doesn't match then the user can be prompted for additional authentication. Many users will have multiple devices or browsers that they use, so it is not practical to block attempts that do not match the existing fingerprints.&lt;/p&gt;&lt;p&gt;To take in mind: data submitted from client can be spoofed by an attacker.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Credential Stuffing Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use the application and try to log in from different devices. Note the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Does the notification arrive?&lt;/li&gt;&lt;li&gt;Are the user's trusted devices saved in server (DB)?&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.204">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-525-CACHING" name="Set Cache-Control headers on sensitive and authenticated content" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Browsers, servers, and upstream/intermediate devices may cache (temporarily store) data sent in
                        HTTP sessions for performance reasons. The protocol allows for a number of HTTP headers and
                        directives to control what data may be cached, where, and for how long. It is important to specify
                        cache-controls to prevent the exposure of sensitive data through the inappropriate caching
                        of authenticated and otherwise restricted access data, either in the users' browser or other
                        devices.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Configure the server or application to set cache-control headers on sensitive content.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The following headers are recommended:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Expires: Tue, 03 Jul 2001 06:00:00 GMT 9.4&lt;/li&gt;
                        &lt;li&gt;Last-Modified: {now} GMT&lt;/li&gt;
                        &lt;li&gt;Cache-Control: no-store, no-cache, must-revalidate, max-age=0&lt;/li&gt;
                        &lt;li&gt;Cache-Control: post-check=0, pre-check=0&lt;/li&gt;
                        &lt;li&gt;Pragma: no-cache&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
          </references>
          <standards>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to ensure appropriate cache directives are returned for all sensitive and authenticated content.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component end-points.&lt;/li&gt;&lt;li&gt;Verify the cache controls returned as part of these responses.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite):&lt;ul&gt;&lt;li&gt;Browse the site through the proxy.&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze cache headers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The following is an example of what should be set to prevent a disclosure of sensitive data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Expires: Tue, 03 Jul 2001 06:00:00 GMT 9.4&lt;/li&gt;&lt;li&gt;Last-Modified: {now} GMT&lt;/li&gt;&lt;li&gt;Cache-Control: no-store, no-cache, must-revalidate, max-age=0&lt;/li&gt;&lt;li&gt;Cache-Control: post-check=0, pre-check=0&lt;/li&gt;&lt;li&gt;Pragma: no-cache&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:57.817">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="store-passwords-unrecoverable-form" name="Store passwords in an unrecoverable form" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-family: Arial; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To protect user passwords from accidental or deliberate exposure, the application should store cryptographic hashes of passwords instead of the actual passwords.&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Do not store actual passwords in the data storage for verification during login.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Instead, create a cryptographic hash of the password using a strong hash function that includes a work factor and a built in 'salt' value, like bcrypt or scrypt. This reduces the risk of brute-force attacks and rainbow tables, and allows flexibility to adapt the hashing function to balance security and performance. Establish some restrictions, depending on the used function:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The salt length must be at least 32 bits.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If bcrypt is used, the work factor must be as large as verification server performance allows, typically at least 13.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If we use the PBKDF2, the iteration count shall be as large as verification server performance allows, and it will typically allow at least 100,000 iterations.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Alternatively, use a strong hash function like SHA-384 together with a unique 'salt' value for every account.&amp;nbsp; Apply multiple iterations of the hash to create the additional computational work required to mitigate brute-force attacks. The secret 'salt' value must be stored separately from the hashed passwords.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="Owasp CheatSheetSeries: Password Storage" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Password_Storage_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.10.6" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.6" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.5" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.5" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.8" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.8" supportedStandardRef="iotsf-class-1"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.17" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.3.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Review the mechanism for matching credentials from the client-side to stored credentials for a user.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span&gt;Best practices dictate that the system should match a strong salted hash (SHA256 or greater and a unique hash for each account) to the one stored at the time the password was set.&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;For example, it is recommended to use a system salt of 32 bits or more, a keyed HMAC hash using &lt;span style="font-family: Arial; font-size: 11pt; font-weight: 700; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;SHA-2 or SHA-3,&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and the stretching algorithm PBKDF2 with at least 10,000 iterations.&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not a clear-text password&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not an encrypted password which may be recovered (decrypted) at the server- or client- side.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hashing algorithm in use is cryptographically secure (e.g. is not SHA1/MD5 or a flawed algorithm).&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hash is created from the password together with a unique salt value for the user. This prevents the use of rainbow tables, or the identification of password collisions among users.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Consider using an algorithm with a configurable work factor, set to a high value to inhibit attacks.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/span&gt; 
&lt;span&gt;&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.005">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-IMPLEMENT-LOGOUT" name="The logout function should be prominently visible to the user" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Developers must create a logout functionality that is clearly visible for the user when navigating the application.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if the logout functionality is accessible and how hard it is to disconnect from the application.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.204">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SIGN-REQUESTS" name="Use of digital signatures to make it easier for the receiver to authenticate if the sender is really the person they think they are" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Making use of digital signatures on exchanged messages will make it more difficult for man-in-the-middle attacks to occur, so add a digital signature to your important messages if you want to verify the sender identity.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Top Ten Proactive Controls 2018 - C6: Implement Digital Identity" url="https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity"/>
            <reference name="RFC7515" url="https://tools.ietf.org/html/rfc7515"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Review code application and configuration&lt;/li&gt;&lt;li&gt;Check the exchanged messages and verify if signature is being used.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.205">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-ONE-TIME-PASSWORD" name="Use one-time passwords" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use One Time Password (TOTP) codes. This can be achieved with:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Hardware&lt;/li&gt;&lt;li&gt;Software (cheaper option).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Software option would typically involve the user installing a TOTP application on their mobile phone, and then scanning a QR code provided by the web application which provides the initial seed. The authenticator app then generates a six digit number every 30 or 60 seconds.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Multi-Factor Authentication Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Try logging into the application several times:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Do you use the same password all the time?&lt;/li&gt;&lt;li&gt;Or do you use a different password each time?&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.204">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="44" state="Implemented" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:57.205">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-RANDOM-SESSION-KEYS" name="Use random-session session keys, which are time-specific and will change with time making it difficult for an attacker to fool the receiver with an old message" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks, where an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good Cryptographically Secure Pseudorandom Number Generator must be used.&lt;/p&gt;&lt;p&gt;Additionally, a random session ID is not enough; it must also be unique to avoid duplicated IDs. A random session ID must not already exist in the current session ID space.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Log in and log out, while saving the session IDs and check:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The session id is different in every log in to the application?&lt;/li&gt;&lt;li&gt;Is it predictable? For example, one session ID is 123ABC&lt;strong&gt;D&lt;/strong&gt; and the next 123ABC&lt;strong&gt;E&lt;/strong&gt; (the example contains a short key to understanding).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To perform these checks it is possible to use DevTools from the browser or an easier way using a proxy to logall requests.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.204">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.1.5.3" name="Use short expiration time" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>A short expiration time for tokens is a means of protection against
   the following threats:&amp;nbsp;  
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;replay&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;token leak (a short expiration time will reduce impact)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;online guessing (a short expiration time will reduce the
      likelihood of success)&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;
Note: Short token duration requires more precise clock synchronization between the authorization server and resource server. Furthermore, shorter duration may require more token refreshes (access token) or repeated end-user authorization processes (authorization "code" and refresh token).</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the token expiration time in the authorization server policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.206">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:57.205">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="FILE-DATA-CHECK" name="Validate the file format before processing" issueId="" issueLink="" platform="" cost="1" risk="44" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or otherwise manipulating benign files with malicious content. As with client-side data, the application should screen uploaded content before processing it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;File contents and file-system path data must be checked for safety.&lt;/li&gt;&lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when validating filenames.&lt;/li&gt;&lt;li&gt;Verify the MIME type is correct and appropriate, and matches content.&lt;/li&gt;&lt;li&gt;Files with an structured format should be checked against the expected format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: XXE" url="https://pwning.owasp-juice.shop/part2/xxe.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A4:2017-XML External Entities (XXE)" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify structured data being processed by your component which is coming from untrusted sources.&lt;/li&gt;&lt;li&gt;Check there is a validation method for the format and the structure.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Examples of this is to check JSON against a JSON schema, XML against an XSD or a DTD, or checking that a received file which is purported to be an image is actually an image.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:57.206">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SAML-2.0-SC-C-6.4.3" name="Verify SAML assertion signatures and authenticate the issuer" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="THREAT" priority="">
          <desc>&lt;div&gt;
  The browser/POST profile requires the SAML response carrying SAML assertions to be signed, thus providing both message integrity and authentication. The Service Provider site MUST verify the signature and authenticate the issuer. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   The following recommendations were proposed in response: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Always perform schema validation on the XML document prior to using it for any security--related purposes:&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Always use local, trusted copies of schemas for validation.&lt;/li&gt; 
    &lt;li&gt;Never allow automatic download of schemas from third party locations.&lt;/li&gt; 
    &lt;li&gt;If possible, inspect schemas and perform schema hardening, to disable possible wildcard -type or relaxed processing statements.&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;li&gt;Securely validate the digital signature:&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If you expect only one signing key, use StaticKeySelector. Obtain the key directly from the identity provider, store it in local file and ignore any KeyInfo elements in the document.&lt;/li&gt; 
    &lt;li&gt;If you expect more than one signing key, use X509KeySelector (the JKS variant). Obtain these keys directly form the identity providers, store them in local JKS and ignore any KeyInfo elements in the document.&lt;/li&gt; 
    &lt;li&gt;If you expect a heterogeneous signed documents (many certificates from many identity providers, multi-level validation paths), implement full trust establishment model based on PKIX and trusted root certificates.&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;li&gt;Avoid signature-wrapping attacks.&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Never use getElementsByTagName to select security related elements in an XML document without prior validation.&lt;/li&gt; 
    &lt;li&gt;Always use absolute XPath expressions to select elements, unless a hardened schema is used for validation.&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Assertions and Protocols for SAML 2.0" url="https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf"/>
            <reference name="OWASP SAML Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/SAML_Security_Cheat_Sheet.md"/>
            <reference name="Profiles for SAML 2.0" url="https://docs.oasis-open.org/security/saml/v2.0/saml-profiles-2.0-os.pdf"/>
            <reference name="Security and Privacy Considerations for SAML 2.0" url="https://docs.oasis-open.org/security/saml/v2.0/saml-sec-consider-2.0-os.pdf"/>
          </references>
          <standards>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:58.206">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-112-OTP-GENERATION-ABUSE" name="An attacker can send a lot of OTP requests to increase the likelihood of matching one of the generated codes in a later brute force attack" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;For example, in a password reset functionality based on the delivery of a code by email or SMS to the user, an attacker can send a lot of requests to it, generating a lot of valid codes with the goal of increasing the chances of matching the code in a brute force attack. The attack takes place in the following steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Automation of requests to the password reset functionality (new codes don't invalidate older ones).&lt;/li&gt;&lt;li&gt;Creation of a custom dictionary to try to match valid codes (e.g.: if a code has only 5 numbers, the dictionary is as follows: [00000, 00001,..., 99999]).&lt;/li&gt;&lt;li&gt;Brute force attack on the functionality to check the OTP and find a match.&lt;/li&gt;&lt;li&gt;Once the attacker knows a valid code he/she can proceed with the password change.&lt;/li&gt;&lt;/ol&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-OTP-BRUTE-FORCE" mitigation="50"/>
                <countermeasure ref="C-OTP-INVALID" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-60-MALICIOUS-REPLY" name="Attackers use replay attacks to execute malicious actions" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;A replay attack is a kind of man-in-the-middle attack in which an attacker sniffs messages being sent on a channel to intercept them and resend them under the cloak of authentic messages. What makes the replay attack particularly harmful is that the attacker does not even need to decrypt the message they resend but can still fool the receiver into thinking that the received message is legitimate.&lt;/p&gt;&lt;p&gt;One example of replay attack is called pass the hash. This is referring to the hash value that is associated with a password that is sent across the network during the authentication process. If the attacker can gain access to the hash, they may be able to replay that hash back to the server and pretend that they are the original workstation.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1134.001" url="https://attack.mitre.org/techniques/T1134/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1550.004" url="https://attack.mitre.org/techniques/T1550/004"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-ONE-TIME-PASSWORD" mitigation="20"/>
                <countermeasure ref="C-RANDOM-SESSION-KEYS" mitigation="20"/>
                <countermeasure ref="C-SET-TIMESTAMP-ON-REQUEST" mitigation="20"/>
                <countermeasure ref="C-SIGN-REQUESTS" mitigation="20"/>
                <countermeasure ref="RFC6819-5.1.5.3" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-600-SESSION-REUSE" name="An attacker can reuse old session credentials or session IDs for authorization" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;At his town's public library, John logs onto his bank's Web site to transfer money from his checking account to his savings account. Once John completes his transaction he gets distracted, forgets to sign off from his bank's Web site, and walks away from the computer.&amp;nbsp;&lt;/p&gt;&lt;p&gt;A second user, Malcolm, now uses the same computer as John. Instead of using the browser to navigate to a new site, Malcolm simply explores the browser history to return to the previous URL where John's account information was displayed.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Because John's session is still active Malcolm can now transfer money, open new accounts, order additional credit cards, or perform any other actions available to John via the bank's Web site.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-IMPLEMENT-LOGOUT" mitigation="50"/>
                <countermeasure ref="C-TOKEN-TIMEOUT" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-61-SESSION-FIXATION" name="The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;The attack consists of obtaining a valid session ID (e.g. by connecting to the application), inducing a user to authenticate himself with that session ID, and then hijacking the user-validated session by the knowledge of the used session ID. The attacker has to provide a legitimate Web application session ID and try to make the victim's browser use it. There are several techniques to execute the attack; it depends on how the Web application deals with session tokens. Below are some of the most common techniques:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Session token in the URL argument.&lt;/li&gt;&lt;li&gt;Session token in a hidden form field.&lt;/li&gt;&lt;li&gt;Session ID in a cookie.&lt;/li&gt;&lt;li&gt;Client-side script.&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-SESSION-ID-ON-PARAMETER" mitigation="50"/>
                <countermeasure ref="secure-session-generation-and-expiration" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-37-SENSITIVE-DATA-URL" name="Sensitive data is compromised through query parameters in the URL" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Regardless of using encryption, the following URL will expose information in the locations detailed below:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;https://vulnerablehost.com/authuser?user=bob&amp;amp;authz_token=1234&amp;amp;expire=1500000000&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The parameter values for user, authz_token, and expire will be exposed in the following locations when using HTTP or HTTPS:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Referer Header&lt;/li&gt;&lt;li&gt;Web Logs&lt;/li&gt;&lt;li&gt;Shared Systems&lt;/li&gt;&lt;li&gt;Browser History&lt;/li&gt;&lt;li&gt;Browser Cache&lt;/li&gt;&lt;li&gt;Shoulder Surfing&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="CWE-598" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-180-SAML-SPOOFING" name="Attackers can modify the SAML response from the Identify Provider and change assertions' values to impersonate valid users in the Service Provider" state="Not Applicable" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Sometimes not only does the Service Provider fail to check the validity of the signature in the SAML response, but it doesn't even verify its mere presence. The equivalent of a Service Provider accepting unsigned SAML assertions is accepting a username without checking the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-SAML-VERIFY-IDP-X509" mitigation="50"/>
                <countermeasure ref="SAML-2.0-SC-C-6.4.3" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115-LOGIN-BYPASS" name="Attackers can bypass the login system using a less hardened alternative for accessing the system" state="Partly-Mitigate" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;The basic way to take advantage of the application's access control flaws is called "forced browsing".&lt;/p&gt;&lt;p&gt;Let's say that the website http://mysite.com It is a website that supports the authenticity of the user and the administrator will be taken to the appropriate webpage after validation. But if an attacker knows the URL, he or she can enter it in their browser, for example&lt;/p&gt;&lt;p&gt;http://mysite.com/admin_page or http://mysite.com/user_page&lt;/p&gt;&lt;p&gt;If it is a secure website, it will be redirected to the login page. But if those pages are allowed to be accessed, it will be incomplete access control and will cause damage.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" mitigation="20"/>
                <countermeasure ref="C-AUTHZ-AFTER-AUTHN" mitigation="20"/>
                <countermeasure ref="CWE-603" mitigation="20"/>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="20"/>
                <countermeasure ref="security-logging" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130-DOS-AUTH" name="Attackers can execute Denial of Service attacks to prevent valid users from accessing the system" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An attacker leverages the security functionality of the system aimed at thwarting potential attacks (like automatic block of accounts after a number of failed login attempts) to launch a denial of service attack against a legitimate system user.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="25"/>
                <countermeasure ref="C-THREAD-CONCURRENCY" mitigation="25"/>
                <countermeasure ref="network-rate-limit" mitigation="25"/>
                <countermeasure ref="security-logging" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-49-BRUTE-FORCE-AUTH" name="Attackers can brute force the authentication system to find valid credentials" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Hackers launch brute-force attacks using widely available tools that utilize wordlists and smart rulesets to intelligently and automatically guess user passwords. Although such attacks are easy to detect, they are not so easy to prevent.&lt;/p&gt;&lt;p&gt;For example, many HTTP brute-force tools can relay requests through a list of open proxy servers. Since each request appears to come from a different IP address, you cannot block these attacks simply by blocking the IP address. To further complicate things, some tools try a different username and password on each attempt, so you cannot lock out a single account for failed password attempts.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="50"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1110.001" url="https://attack.mitre.org/techniques/T1110/001"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="16"/>
                <countermeasure ref="C-ACCOUNT-LOCKDOWN" mitigation="16"/>
                <countermeasure ref="CWE-654" mitigation="16"/>
                <countermeasure ref="network-rate-limit" mitigation="20"/>
                <countermeasure ref="require-use-strong-passwords" mitigation="16"/>
                <countermeasure ref="security-logging" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-593-SSO-SYNC" name="Attackers are able to keep their application session active after the SSO/IdP blocks/deletes their account" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If a user successfully logs in via SSO and falls prey to a phishing attack, the attacker gets access to all the endpoints of the external applications within the cloud that the user is provisioned for.&lt;/p&gt;&lt;p&gt;If the attack is detected, the user account can be disabled. However, the user may still remain logged in. This could allow the attacker to stay logged on with access to the linked application.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-FORCE-LOGOUT" mitigation="50"/>
                <countermeasure ref="security-logging" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-INJECTION" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Partly-Mitigate" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="CWE-89-PREPARED" mitigation="20"/>
                <countermeasure ref="DATA-VAL" mitigation="20"/>
                <countermeasure ref="FILE-DATA-CHECK" mitigation="20"/>
                <countermeasure ref="SER-UNTRUST" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-575-ENUM-USERS" name="Attackers can enumerate the existence of valid accounts in the system using error/informational messages" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If your login page has different error messages for unrecognized usernames and incorrect passwords, an attacker can write a script to submit lengthy lists of common usernames and test the response. With those results, the attacker can then infer which usernames are valid.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="security-logging" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-37-CACHED-DATA" name="Sensitive data is compromised by inspecting cached data in the client side" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="CWE-524" mitigation="50"/>
                <countermeasure ref="CWE-525-CACHING" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-37-CRACK-PASSWORD-HASH" name="A malicious user has access to the users' password hashes and tries to crack the passwords" state="Mitigate" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Although it is not possible to "decrypt" password hashes to obtain the original passwords, it is possible to "crack" the hashes in some circumstances.&lt;/p&gt;&lt;p&gt;The basic steps are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Select a password you think the victim has chosen (e.g.password1!).&lt;/li&gt;&lt;li&gt;Calculate the hash.&lt;/li&gt;&lt;li&gt;Compare the hash you calculated with the hash of the victim. If they match, you have correctly "cracked" the hash and now know the plaintext value of their password.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This process is repeated for a large number of potential passwords. Different methods can be used to select candidate passwords, including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lists of passwords obtained from other compromised sites.&lt;/li&gt;&lt;li&gt;Brute force (trying every possible candidate).&lt;/li&gt;&lt;li&gt;Dictionaries or wordlists of common passwords&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="store-passwords-unrecoverable-form" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-600-CRED-STUFFING" name="Attackers take control of another user's account without being detected if they get to know the password for that account" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Credential stuffing is the automated injection of stolen username and password pairs ("credentials") in to website login forms, in order to fraudulently gain access to user accounts.&lt;/p&gt;&lt;p&gt;Since many users will re-use the same password and username/email, when those credentials are exposed (by a database breach or phishing attack, for example) submitting those sets of stolen credentials into dozens or hundreds of other sites can allow an attacker to compromise those accounts too.&lt;/p&gt;&lt;p&gt;Credential Stuffing is a subset of the brute force attack category. Brute forcing will attempt to try multiple passwords against one or multiple accounts; guessing a password, in other words. Credential Stuffing typically refers to specifically using known (breached) username / password pairs against other websites.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="50"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1110.004" url="https://attack.mitre.org/techniques/T1110/004"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-IMPLEMENT-SSO" mitigation="20"/>
                <countermeasure ref="C-NEW-LOCATION-LOGIN-ALERT" mitigation="20"/>
                <countermeasure ref="C-PREVENT-SIMULTANEOUS-LOGIN" mitigation="20"/>
                <countermeasure ref="CWE-654" mitigation="20"/>
                <countermeasure ref="security-logging" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="a7e05659-7372-400c-aa08-47c7e042218c" diagramComponentId="3d7ea4e9-aa07-40b6-b660-5699eb56c8b4" ref="f14dfea1-4f9f-46b6-8348-76f9502f3d4a" name="Logout" desc="" library="IR-Functional-Components" parentComponentRef="13a37286-a00d-4b30-956c-a1b4b032a40c" componentDefinitionRef="CD-LOGOUT">
      <tags/>
      <questions>
        <question ref="fc.answer.logout.csrf.protection.implemented" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.logout.logging.features.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.logout.session.invalidation.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.logout.sso.not.applicable" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.logout.visible.logout.implemented" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-384" name="Application allows for leveraging a session ID not produced by the application" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                    Authenticating a user, or otherwise establishing a new user session, without invalidating any session identifier gives an attacker the opportunity to steal authenticated sessions. Such a scenario is commonly observed when:
                    &lt;/div&gt;
                    &lt;div&gt;
                    &lt;ul&gt;
                    &lt;li&gt;A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.&lt;/li&gt;
                    &lt;li&gt;An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.&lt;/li&gt;
                    &lt;li&gt;The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.&lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:53:57.822">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100" issueId="" issueLink="">
          <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:53:57.887">
              <output/>
            </source>
            <references>
              <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-FORCE-LOGOUT" name="Force logout if account permissions have been revoked" issueId="" issueLink="" platform="" cost="0" risk="56" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Active sessions could be used by a malicious actor even after the account has been removed or blocked from the system. This could open the door to MitM attacks and session hijacking attacks while the application connects to the IdP to confirm that the session has no more rights to operate.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Man-in-the-middle Attack" url="https://owasp.org/www-community/attacks/Manipulator-in-the-middle_attack"/>
            <reference name="Session Hijacking Attack" url="https://owasp.org/www-community/attacks/Session_hijacking_attack"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check periodically the session status with the SSO/IdP and force the log off process in case the active account was blocked/deleted.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:43.865">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-session-generation-and-expiration" name="Implement a secure Session Generation and Expiration" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID exchange mechanism based on cookies provides multiple security features in the form of Session Generation and Expiration which is tracked in a session. This session is typically stored on the server for traditional web based session management. A session identifier is then given to the user so they can identify which server-side session contains the correct user data. The client only needs to maintain this session identifier, which also keeps sensitive server-side session data off of the client.&lt;/p&gt;&lt;p&gt;Here are a few controls to consider when building or implementing session management solutions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure that the session id is long, unique and random. The session ID length must be at least 128 bits (16 bytes)&lt;/li&gt;&lt;li&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks such as when an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good PRNG (Pseudo Random Number Generator) must be used. The session ID value must provide at least 64 bits of entropy (if a good PRNG is used, this value is estimated to be half the length of the session ID).&lt;/li&gt;&lt;li&gt;The application should generate a new session or at least rotate the session id during authentication and re-authentication.&lt;/li&gt;&lt;li&gt;The application should not treat OAuth and refresh tokens as their own session identifiers. Moreover, it should allow users to terminate trust relationships with linked applications.&lt;/li&gt;&lt;li&gt;The CSPs (Credential Service Provider) should re-authenticate the subscriber if it has not been authenticated since a given inactivity period. CSPs should inform the RP (Relying Parties) the last authentication time, to know if re-authentication is needed.&lt;/li&gt;&lt;li&gt;When a user chooses to log out (or otherwise has their session terminated), the user session must be terminated on the server-side, not solely at the client-side (for example by deleting or reissuing a session ID token/cookie).&lt;ul&gt;&lt;li&gt;Revoke user sessions on the server-side.&lt;/li&gt;&lt;li&gt;Redirect users to the login page, or provide a login prompt.&lt;/li&gt;&lt;li&gt;Where possible, ensure the session is not reused by the application server.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application should implement an idle timeout after a period of inactivity and an absolute maximum lifetime for each session, after which users must re-authenticate. If the application has implemented a functionality to be always logged in, the application must force users to re-authenticate for more sensitive actions.&lt;/li&gt;&lt;li&gt;The length of the timeouts should be inversely proportional with the value of the data protected.&lt;ul&gt;&lt;li&gt;30 days&lt;/li&gt;&lt;li&gt;12 hours or 30 minutes of inactivity, 2FA optional&lt;/li&gt;&lt;li&gt;12 hours or 15 minutes of inactivity, with 2FA&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.5" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.5" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1" supportedStandardRef="nist-800-63"/>
            <standard ref="7.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7.2.1" supportedStandardRef="nist-800-63"/>
            <standard ref="AC-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check that sessions are renewed following the steps below:&lt;ul&gt;&lt;li&gt;Log in to the application.&lt;/li&gt;&lt;li&gt;Open another browser and go to the login page.&lt;/li&gt;&lt;li&gt;Log in to the application for the second time.&lt;/li&gt;&lt;li&gt;Check that the old session and session id are removed.&lt;/li&gt;&lt;li&gt;Check that a new session is created with new session id.&lt;/li&gt;&lt;li&gt;Check that the old and new session ids are different.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that sessions tokens are generated from a source with sufficient entropy and they are not predictable.&lt;/li&gt;&lt;li&gt;Check that the refresh tokens and OAuth sessions with linked applications have not been terminated by users.&lt;/li&gt;&lt;li&gt;Check the CSPs force the RP to re-authenticate after a certain period of inactivity.&lt;/li&gt;&lt;li&gt;Check that the logout and expiration invalidate the session token, following the steps below:&lt;ul&gt;&lt;li&gt;Open a browser.&lt;/li&gt;&lt;li&gt;Authenticate as a user A.&lt;/li&gt;&lt;li&gt;Get the Session ID and note it.&lt;/li&gt;&lt;li&gt;Logout of the service.&lt;/li&gt;&lt;li&gt;Set up the noted Session ID.&lt;/li&gt;&lt;li&gt;Try to access an authenticated section of the service and you should not be able to do it as user A.&lt;/li&gt;&lt;li&gt;To edit the cookies you can either use a proxy (i.e. OWASP ZAP, Burp, Fiddler, etc.) or a browser extension which allows you to tamper the cookies (i.e. Tamper Data, Cookie Manager, etc.).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check that the session expires after a certain period of inactivity following the steps below:&lt;ul&gt;&lt;li&gt;Verify the expected inactive timeout.&lt;/li&gt;&lt;li&gt;Check 'normal' use through a browser:&lt;ul&gt;&lt;li&gt;Go to the authentication feature of the component.&lt;/li&gt;&lt;li&gt;Authenticate as a user.&lt;/li&gt;&lt;li&gt;Leave the session open for a given time (check the expiration time that has been agreed to be implemented).&lt;/li&gt;&lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the session is no longer authenticated).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check the control is enforced on the server side and not using code in the browser:&lt;ul&gt;&lt;li&gt;Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and determine which cookies or other tokens are used to maintain session state. Alternatively, capture an authenticated application request for replay.&lt;/li&gt;&lt;li&gt;Store and replay the request after the timeout period to see if the application responds with authenticated data.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Review application operation and determine if any behavior artificially holds the session open, for example, heartbeat requests or calls to update data feeds sent from the client to the server are sometimes mistakenly interpreted as user activity, holding the session open.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:53:47.428">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="56" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:44.314">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-TOKEN-TIMEOUT" name="Invalidate a session after a predefined idle time has passed" issueId="" issueLink="" platform="" cost="0" risk="24" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;In order to keep the authenticated state and track the users progress, applications provide users with a session identifier or token which binds the user authentication credentials to the user HTTP traffic and the appropriate access controls enforced by the web application.&lt;/p&gt;&lt;p&gt;It is mandatory to set expiration timeouts for every session, establishing the amount of time a session will remain active. Insufficient session expiration by the web application increases the exposure of other session-based attacks, as for the attacker to be able to reuse a valid session ID and hijack the associated session.&lt;/p&gt;&lt;p&gt;The session expiration timeout values must be set accordingly with the purpose and nature of the web application, and balance security and usability. There are two automatic session expiration, iddle timeout and absolute timeout. Both values are highly dependent on how critical the web application and its data are. Common idle timeouts ranges are 2-5 minutes for high-value applications and 15-30 minutes for low risk applications. Absolute timeouts depend on how long a user usually uses the application. If the application is intended to be used by an office worker for a full day, an appropriate absolute timeout range could be between 4 and 8 hours.&lt;/p&gt;&lt;p&gt;When a session expires, the web application must take active actions to invalidate the session on both sides, client and server. The latter is the most relevant and mandatory from a security perspective.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Set session timeout to the minimal value possible depending on the context of the application.&lt;/li&gt;&lt;li&gt;Avoid "infinite" session timeout.&lt;/li&gt;&lt;li&gt;Prefer declarative definition of the session timeout in order to apply a global timeout for all application sessions.&lt;/li&gt;&lt;li&gt;Trace session creation/destruction in order to analyse the creation trend and try to detect a normal number of session creations (application profiling phase in a attack).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:43.940">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="37" state="Implemented" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. A token/identifier that is not accessible to the attacker is needed to mitigate this and would not be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For maximum security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on the server-side is problematic, an alternative defense is to use the double-submit cookie technique. This technique is easy to implement and is stateless. In this technique, a random value is sent in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudo random value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudo-random value as a hidden form value (or other request parameter/header). If both of them match on the server-side, the server accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely on examining an HTTP request header value. Firstly, determining the origin the request is coming from (source origin). This can be achieved via Origin and/or referer headers. Secondly, determining the origin the request is going to (target origin). On the server-side verify if both of these match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, discard the request (meaning that the request originated from a cross-domain). Reliability of these headers comes from the fact they cannot be altered programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.- Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:53:48.409">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-18.8" name="Reject requests containing unexpected or missing content type headers" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Reject requests containing unexpected or missing content type headers with HTTP response status
                        &amp;quot;406 Unacceptable&amp;quot; or &amp;quot;415 Unsupported Media Type&amp;quot;.
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Validate request content-type" url="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Validate_request_content_types"/>
            <reference name="Spring docs: CSRF" url="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html"/>
          </references>
          <standards>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that HTTP requests with non-valid Content-type are rejected.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:53:48.006">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-SESS-REAUTH" name="Require additional authentication for sensitive operations / high value transactions" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Having gained access to an account, for example through session hijacking or cross-site scripting, an attack may compromise data and functionality accessible to the victim. This may include elevating privileges or accessing sensitive data and functionality, such as changing passwords, creating accounts, or transferring funds.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;These critical functions and sensitive data should be further protected from attack using a risk-based authentication model requiring re-authentication via multi-factor authentication, or use of a token to sign transactions or operations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement re-authentication on key functions (such as requiring the old password before setting a new one).&lt;/li&gt;&lt;li&gt;Use secondary authentication such as a transaction PIN to allow financial transfers.&lt;/li&gt;&lt;li&gt;Critical administrative functionality should require multi-factor authentication (such as a hard or soft token).&lt;/li&gt;&lt;li&gt;Consider use of signing technologies or tokens that enable the server-side to verify the authenticity of a request and mitigate Man in the Middle (MiTM) or Man in the Browser (MiTB) attacks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
          </references>
          <standards>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1" supportedStandardRef="swift-cscf"/>
            <standard ref="4.2" supportedStandardRef="swift-cscf"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2" supportedStandardRef="swift-cscf"/>
            <standard ref="5.4" supportedStandardRef="swift-cscf"/>
            <standard ref="IA-11" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-11" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-11" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical functionalities of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the risk appetite for those functionalities.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Validate that re-authentication is required for those functions if deemed
                            necessary.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:53:48.039">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-IMPLEMENT-LOGOUT" name="The logout function should be prominently visible to the user" issueId="" issueLink="" platform="" cost="0" risk="24" state="Implemented" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Developers must create a logout functionality that is clearly visible for the user when navigating the application.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if the logout functionality is accessible and how hard it is to disconnect from the application.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-02-29T12:55:43.871">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-593-SSO-SYNC" name="Attackers are able to keep their application session active after the SSO/IdP blocks/deletes their account" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If a user successfully logs in via SSO and falls prey to a phishing attack, the attacker gets access to all the endpoints of the external applications within the cloud that the user is provisioned for.&lt;/p&gt;&lt;p&gt;If the attack is detected, the user account can be disabled. However, the user may still remain logged in. This could allow the attacker to stay logged on with access to the linked application.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-FORCE-LOGOUT" mitigation="50"/>
                <countermeasure ref="security-logging" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-600-SESSION-REUSE" name="An attacker can reuse old session credentials or session IDs for authorization" state="Partly-Mitigate" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;At his town's public library, John logs onto his bank's Web site to transfer money from his checking account to his savings account. Once John completes his transaction he gets distracted, forgets to sign off from his bank's Web site, and walks away from the computer.&amp;nbsp;&lt;/p&gt;&lt;p&gt;A second user, Malcolm, now uses the same computer as John. Instead of using the browser to navigate to a new site, Malcolm simply explores the browser history to return to the previous URL where John's account information was displayed.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Because John's session is still active Malcolm can now transfer money, open new accounts, order additional credit cards, or perform any other actions available to John via the bank's Web site.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-IMPLEMENT-LOGOUT" mitigation="50"/>
                <countermeasure ref="C-TOKEN-TIMEOUT" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-61" name="An attacker induces a client to establish a session with the target software using a session identifier provided by the attacker" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>The attacker induces a client to establish a session with the target software using a
                                session identifier provided by the attacker. Once the user successfully authenticates to
                                the target software, the attacker uses the (now privileged) session identifier in their
                                own transactions. This attack leverages the fact that the target software either relies
                                on client-generated session identifiers or maintains the same session identifiers after
                                privilege elevation.
                                &lt;br /&gt;
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-384">
                  <countermeasures>
                    <countermeasure ref="secure-session-generation-and-expiration" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="secure-session-generation-and-expiration" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-62" name="An attacker crafts malicious web links and distributes them hoping to induce users to click on the link and execute a malicious action" state="Partly-Mitigate" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level.
&lt;br&gt;This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply "riding" the existing session cookie.
&lt;br&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="ASVS-18.8" mitigation="34"/>
                    <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                    <countermeasure ref="cwe-352-csrf" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-18.8" mitigation="34"/>
                <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                <countermeasure ref="cwe-352-csrf" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="bafd9b5b-9ad5-4106-956a-e839e691c0ab" diagramComponentId="c4f4bbe5-8c54-4b97-98b0-f52acaa5219f" ref="abd4644b-4b8a-4fd0-85d1-f9f70259ad4d" name="Mobile Device Client" desc="" library="OWASP-MASVS" parentComponentRef="" componentDefinitionRef="mobile-device-client">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-388" name="An error condition is not properly handled (Error Handling)" state="0" impact="100" issueId="" issueLink="">
          <desc>Errors and error handling represent a class of API. Errors related to error handling are so
                        common that they deserve a special kingdom of their own. As with "API Abuse", there
                        are two ways to introduce an error-related security vulnerability: the most common one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.141">
              <output/>
            </source>
            <references>
              <reference name="CWE-388: An error condition is not properly handled (Error Handling)" url="https://cwe.mitre.org/data/definitions/388.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-120" name="Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" state="0" impact="100" issueId="" issueLink="">
          <desc>The program copies an input buffer to an output buffer without verifying that the size of the
                        input buffer is less than the size of the output buffer, leading to a buffer overflow.
                        &lt;br /&gt;A buffer overflow condition exists when a program attempts to put more data in a
                        buffer than it can hold, or when a program attempts to put data in a memory area outside of the
                        boundaries of a buffer. The simplest type of error, and the most common cause of buffer
                        overflows, is the &amp;quot;classic&amp;quot; case in which the program copies the buffer
                        without restricting how much is copied. Other variants exist, but the existence of a classic
                        overflow strongly suggests that the programmer is not considering even the most basic of
                        security protections.
                        &lt;br /&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.139">
              <output/>
            </source>
            <references>
              <reference name="CWE-120: Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" url="https://cwe.mitre.org/data/definitions/120.html"/>
              <reference name="Smashing The Stack For Fun And Profit" url="https://insecure.org/stf/smashstack.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-494" name="Download of Code Without Integrity Check" state="0" impact="100" issueId="" issueLink="">
          <desc>The product downloads source code or an executable from a remote location and executes the
                        code without sufficiently verifying the origin and integrity of the code.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.142">
              <output/>
            </source>
            <references>
              <reference name="CWE-494: Download of Code Without Integrity Check" url="https://cwe.mitre.org/data/definitions/494.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.141">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-749" name="Exposed Dangerous Method or Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software provides an Applications Programming Interface (API) or similar interface for
                        interaction with external actors, but the interface includes a dangerous method or function that
                        is not properly restricted.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.142">
              <output/>
            </source>
            <references>
              <reference name="CWE-749: Exposed Dangerous Method or Function" url="https://cwe.mitre.org/data/definitions/749.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-79" name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes user-controllable input before it
                        is placed in output that is used as a web page that is served to other users. Cross-site
                        scripting (XSS) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;There are three main kinds of XSS:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 1: Reflected XSS (or Non-Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The server reads data directly from the HTTP request and reflects it back in the HTTP response.
                        Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a
                        vulnerable web application, which is then reflected back to the victim and executed by the web
                        browser. The most common mechanism for delivering malicious content is to include it as a
                        parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed
                        in this manner constitute the core of many phishing schemes, whereby an attacker convinces a
                        victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's
                        content back to the victim, the content is executed by the victim's browser.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 2: Stored XSS (or Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The application stores dangerous data in a database, message forum, visitor log, or other
                        trusted data store. At a later time, the dangerous data is subsequently read back into the
                        application and included in dynamic content. From an attacker's perspective, the optimal place
                        to inject malicious content is in an area that is displayed to either many users or particularly
                        interesting users. Interesting users typically have elevated privileges in the application or
                        interact with sensitive data that is valuable to the attacker. If one of these users executes
                        malicious content, the attacker may be able to perform privileged operations on behalf of the
                        user or gain access to sensitive data belonging to the user. For example, the attacker might
                        inject XSS into a log message, which might not be handled properly when an administrator views
                        the logs.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 0: DOM-Based XSS&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        In DOM-based XSS, the client performs the injection of XSS into the page; in the other types,
                        the server performs the injection. DOM-based XSS generally involves server-controlled, trusted
                        script that is sent to the client, such as Javascript that performs sanity checks on a form
                        before the user submits it. If the server-supplied script processes user-supplied data and then
                        injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is
                        possible.Once the malicious script is injected, the attacker can perform a variety of malicious
                        activities. The attacker could transfer private information, such as cookies that may include
                        session information, from the victim's machine to the attacker. The attacker could send
                        malicious requests to a web site on behalf of the victim, which could be especially dangerous to
                        the site if the victim has administrator privileges to manage that site. Phishing attacks could
                        be used to emulate trusted web sites and trick the victim into entering a password, allowing the
                        attacker to compromise the victim's account on that web site. Finally, the script could exploit
                        a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes
                        referred to as &amp;quot;drive-by hacking&amp;quot;.
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;br /&gt;
                        &lt;/blockquote&gt;In many cases, the attack can be launched without the victim even being aware
                        of it. Even with careful users, attackers frequently use a variety of methods to encode the
                        malicious portion of the attack, such as URL encoding or Unicode, so the request looks less
                        suspicious.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.142">
              <output/>
            </source>
            <references>
              <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-83" name="Improper Neutralization of Script in Attributes in a Web Page" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes "javascript:" or other URIs from
                        dangerous attributes within tags, such as onmouseover, onload, onerror, or style.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.142">
              <output/>
            </source>
            <references>
              <reference name="CWE-83: Improper Neutralization of Script in Attributes in a Web Page" url="https://cwe.mitre.org/data/definitions/83.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MASVS-EMULATION-TOOLS" name="Inappropriate use of emulation tools" state="0" impact="100" issueId="" issueLink="">
          <desc>The inappropriate use of emulation tools are not detected by the app, and attackers can
                        leverage them to obtain information about the app.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.142">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MASVS-REVERSE-ENGINEERING-TOOLS" name="Inappropriate use of reverse engineering tools" state="0" impact="100" issueId="" issueLink="">
          <desc>The inappropriate use of the reverse engineering tools is not detected by the app, and
                        attackers can leverage them to obtain information about the app.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.142">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100" issueId="" issueLink="">
          <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.

When a resource is given a permission setting that provides access to a wider range of actors than required, it can lead to the exposure of sensitive information or to the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.142">
              <output/>
            </source>
            <references>
              <reference name="CWE-732: Incorrect Permission Assignment for Critical Resource" url="https://cwe.mitre.org/data/definitions/732.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-215" name="Information Exposure Through Debug Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The application contains debugging code that can expose sensitive information to untrusted parties.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.141">
              <output/>
            </source>
            <references>
              <reference name="CWE-215: Information Exposure Through Debug Information" url="https://cwe.mitre.org/data/definitions/215.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.143">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-489" name="Leftover Debug Code" state="0" impact="100" issueId="" issueLink="">
          <desc>The application can be deployed with active debugging code that can create unintended entry
                        points.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.142">
              <output/>
            </source>
            <references>
              <reference name="CWE-489: Leftover Debug Code" url="https://cwe.mitre.org/data/definitions/489.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="MEMORY-LEAKAGE" name="Memory Leakage" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.142">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="OUTDATED-LIBRARIES" name="Outdated libraries" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.143">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-656" name="Reliance on Security Through Obscurity" state="0" impact="100" issueId="" issueLink="">
          <desc>The software uses a protection mechanism whose strength depends heavily on its obscurity, such
                        that knowledge of its algorithms or key data is sufficient to defeat the mechanism.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:54.142">
              <output/>
            </source>
            <references>
              <reference name="CWE-656: Reliance on Security Through Obscurity" url="https://cwe.mitre.org/data/definitions/656.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="MASVS-7.9" name="Activate the Free Security Features" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>For Android:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;We shall activate the Obfuscation of the code and strip unneeded debugging information.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;For iOS:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;We shall activate:&amp;nbsp;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;ARC (Automatic Reference Counting): memory management feature, adds retain and release messages when required.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Stack Canary: helps prevent buffer overflow attacks.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;PIE (Position Independent Executable): enables full ASLR for binary.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing Obfuscation" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0051/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing for Debugging Code and Verbose Error Logging" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0041/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing for Debugging Symbols" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0040/"/>
          </references>
          <standards>
            <standard ref="MASVS-RESILIENCE-3" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.831">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.6" name="Allow only the minimum set of protocol handlers required" issueId="" issueLink="" platform="" cost="1" risk="70" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Configure the WebViews to allow only the minimum set of protocol handlers required (ideally, only https). Potentially dangerous handlers, such as file, tel and app-id, are disabled.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing JavaScript Execution in WebViews" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0031/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing WebView Protocol Handlers" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0032/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing WebViews Cleanup" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0037/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing for Java Objects Exposed Through WebViews" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0033/"/>
          </references>
          <standards>
            <standard ref="MASVS-PLATFORM-2" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the set of protocol handlers are deactivated.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.829">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.9" name="Apply 2FA Authentication on remote services" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  A second factor of authentication exists at the remote endpoint and the 2FA requirement is consistently enforced. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.828">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.13" name="Apply application level payload encryption" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;As a defense in depth, next to having solid hardening of the communicating parties, application level payload encryption can be applied to further impede eavesdropping.&lt;/span&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.835">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.6" name="Catch and handle the possible exceptions" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement a well-designed and unified scheme to handle exceptions. Make sure the application has centralized handlers for exceptions that result in similar behavior. This can be a static class for instance. For specific exceptions given the methods context, specific catch blocks should be provided.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2023-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the exceptions are well-designed and are catched and handled well.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.830">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.5" name="Check for weaknesses in 3rd party libraries" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;iOS applications often make use of third party libraries. These third party libraries accelerate development as the developer has to write less code in order to solve a problem. There are two categories of libraries:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are not (or should not) be packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt;&lt;/span&gt;&lt;span&gt; used for testing.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;Alamofire&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;These libraries can lead to unwanted side-effects:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;A library can contain a vulnerability, which will make the application vulnerable. A good example is &lt;/span&gt;&lt;span&gt;&lt;code&gt;AFNetworking&lt;/code&gt;&lt;/span&gt;&lt;span&gt; version 2.5.1, which contained a bug that disabled certificate validation. This vulnerability would allow attackers to execute man-in-the-middle attacks against apps that are using the library to connect to their APIs.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can no longer be maintained or hardly be used, which is why no vulnerabilities are reported and/or fixed. This can lead to having bad and/or vulnerable code in your application through the library.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can use a license, such as LGPL2.1, which requires the application author to provide access to the source code for those who use the application and request insight in its sources. In fact the application should then be allowed to be redistributed with modifications to its source code. This can endanger the intellectual property (IP) of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Note: there are two widely used package management tools: Carthage and CocoaPods. Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;iOS applications often make use of third party libraries. These third party libraries accelerate development as the developer has to write less code in order to solve a problem. There are two categories of libraries:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are not (or should not) be packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;OHHTTPStubs&lt;/code&gt;&lt;/span&gt;&lt;span&gt; used for testing.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Libraries that are packed within the actual production application, such as &lt;/span&gt;&lt;span&gt;&lt;code&gt;Alamofire&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;These libraries can lead to unwanted side-effects:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;A library can contain a vulnerability, which will make the application vulnerable. A good example is &lt;/span&gt;&lt;span&gt;&lt;code&gt;AFNetworking&lt;/code&gt;&lt;/span&gt;&lt;span&gt; version 2.5.1, which contained a bug that disabled certificate validation. This vulnerability would allow attackers to execute man-in-the-middle attacks against apps that are using the library to connect to their APIs.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can no longer be maintained or hardly be used, which is why no vulnerabilities are reported and/or fixed. This can lead to having bad and/or vulnerable code in your application through the library.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;A library can use a license, such as LGPL2.1, which requires the application author to provide access to the source code for those who use the application and request insight in its sources. In fact the application should then be allowed to be redistributed with modifications to its source code. This can endanger the intellectual property (IP) of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Note: there are two widely used package management tools: Carthage and CocoaPods. Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.&lt;/span&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-CODE-3 - Checking for Weaknesses in Third Party Libraries" url="https://mas.owasp.org/MASTG/tests/android/MASVS-CODE/MASTG-TEST-0042/"/>
          </references>
          <standards>
            <standard ref="MASVS-CODE-3" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt;The dynamic analysis of this section comprises validating whether the copyrights of the licenses have been adhered to. This often means that the application should have an &lt;/span&gt; 
&lt;span&gt;&lt;code&gt;about&lt;/code&gt;&lt;/span&gt; 
&lt;span&gt; or &lt;/span&gt; 
&lt;span&gt;&lt;code&gt;EULA&lt;/code&gt;&lt;/span&gt; 
&lt;span&gt; section in which the copy-right statements are noted as required by the license of the third party library.&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.830">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.15" name="Clean local storage after several failed attempts to authenticate user" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The app's local storage should be wiped after an excessive number of failed authentication attempts.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that local storage is cleaned after failed attempts to authenticate</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.826">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.10" name="Clear WebView's resources" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;A WebView's cache, storage, and loaded resources (JavaScript, etc.) should be cleared before the WebView is destroyed.&lt;/span&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.829">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-1.9" name="Create a mechanism to force updates on application" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Starting from Android 5.0 (API level 21), together with the Play Core Library, apps can be forced to be updated. This mechanism is based on using the &lt;/span&gt;&lt;span&gt;&lt;code&gt;AppUpdateManager&lt;/code&gt;&lt;/span&gt;&lt;span&gt;. Before that, other mechanisms were used, such as doing http calls to the Google Play Store, which are not as reliable as the APIs of the Play Store might change. Alternatively, Firebase could be used to check for possible forced updates as well (see this &lt;/span&gt;&lt;/span&gt;&lt;a href="https://medium.com/@sembozdemir/force-your-users-to-update-your-app-with-using-firebase-33f1e0bcec5a" target="_blank"&gt;&lt;span&gt;&lt;span&gt;blog&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;). Enforced updating can be really helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily patched by means of forced updates.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;For iOS, enforced updating can be really helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily patched by means of forced updates. The challenge with iOS however, is that Apple does not provide any APIs yet to automate this process, instead, developers will have to create their own mechanism, such as described at various &lt;/span&gt;&lt;/span&gt;&lt;a href="https://mobikul.com/show-update-application-latest-version-functionality-ios-app-swift-3/" target="_blank"&gt;&lt;span&gt;&lt;span&gt;blogs&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; which boil down to looking up properties of the app using &lt;/span&gt;&lt;span&gt;&lt;code&gt;http://itunes.apple.com/lookup\?id\&amp;lt;BundleId&amp;gt;&lt;/code&gt;&lt;/span&gt;&lt;span&gt; or third party libraries, such as &lt;/span&gt;&lt;/span&gt;&lt;a href="https://github.com/ArtSabintsev/Siren" target="_blank"&gt;&lt;span&gt;&lt;span&gt;Siren&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; and &lt;/span&gt;&lt;/span&gt;&lt;a href="https://www.npmjs.com/package/react-native-appstore-version-checker" target="_blank"&gt;&lt;span&gt;&lt;span&gt;react-native-appstore-version-checker&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;. Most of these implementations will require a certain given version offered by an API or just "latest in the appstore", which means users can be frustrated with having to update the app, even though no business/security need for an update is truly there.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle management is key here. Similarly, when a user is not forced to update, do not forget to test older versions of your app against your API and/or use proper API versioning.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-CODE-2 - Testing Enforced Updating" url="https://mas.owasp.org/MASTG/tests/android/MASVS-CODE/MASTG-TEST-0036/"/>
          </references>
          <standards>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="MASVS-CODE-2" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span style="white-space: pre;"&gt;In order to test for proper updating: try downloading an older version of the application with a security vulnerability, either by a release from the developers or by using a third party app-store. Next, verify whether or not you can continue to use the application without updating it. If an update prompt is given, verify if you can still use the application by canceling the prompt or otherwise circumventing it through normal application usage. This includes validating whether the backend will stop calls to vulnerable backends and/or whether the vulnerable app-version itself is blocked by the backend. Lastly, see if you can play with the version number of a man-in-the-middled app and see how the backend responds to this (and if it is recorded at all for instance).&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.824">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.12" name="Create an authorization model on remote endpoints" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;Authorization models should be defined and enforced at the remote endpoint.&lt;/span&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.828">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.5-4.6" name="Create a strong password policy" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;Password strength is a key concern when passwords are used for authentication. The password policy defines requirements to which end users should adhere. A password policy typically specifies password length, password complexity, and password topologies. A "strong" password policy makes manual or automated password cracking difficult or impossible.&lt;/span&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt;Automated password guessing attacks can be performed using a number of tools. For HTTP(S) services, using an interception proxy is a viable option. For example, you can use &lt;/span&gt; 
&lt;a href="https://portswigger.net/burp/help/intruder_using.html" target="_blank"&gt;&lt;span&gt;Burp Suite Intruder&lt;/span&gt;&lt;/a&gt; 
&lt;span&gt; to perform both wordlist-based and brute-force attacks.&lt;/span&gt; 
&lt;div&gt; 
 &lt;span&gt;&lt;br&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span&gt;&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Execute the following steps for a wordlist based brute force attack with Burp Intruder:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Start Burp Suite Professional.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Create a new project (or open an existing one).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Set up your mobile device to use Burp as the HTTP/HTTPS proxy. Log into the mobile app and intercept the authentication request sent to the backend service.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Right-click this request on the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Proxy/HTTP History&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab and select &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Send to Intruder&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; in the context menu.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Select the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Intruder&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab. For further information on how to use &lt;/span&gt;&lt;/span&gt;&lt;a href="https://portswigger.net/burp/documentation/desktop/tools/intruder/using" target="_blank"&gt;&lt;span&gt;&lt;span&gt;Burp Intruder&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; read the official documentation on Portswigger.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Make sure all parameters in the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Target&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Positions&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;, and &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Options&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tabs are appropriately set and select the &lt;/span&gt;&lt;span&gt;&lt;strong&gt;Payload&lt;/strong&gt;&lt;/span&gt;&lt;span&gt; tab.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
   &lt;li&gt; 
    &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
     &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Load or paste the list of passwords you want to try. There are several resources available that offer password lists, like &lt;/span&gt;&lt;/span&gt;&lt;a href="https://github.com/fuzzdb-project/fuzzdb/" target="_blank"&gt;&lt;span&gt;&lt;span&gt;FuzzDB&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;, the built-in lists in Burp Intruder or the files available in &lt;/span&gt;&lt;span&gt;&lt;code&gt;/usr/share/wordlists&lt;/code&gt;&lt;/span&gt;&lt;span&gt; on Kali Linux.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    &lt;/div&gt;&lt;/li&gt; 
  &lt;/ul&gt;&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Once everything is configured and you have a word-list selected, you're ready to start the attack!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.828">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.11" name="Create the functionality to verify the app uses a minimum device-access-security policy" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Different checks on the Android device can be implemented by querying different system preferences from Settings.Secure. The Device Administration API offers different mechanisms to create security aware applications, that are able to enforce password policies or encryption of the device.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-STORAGE-1 - Testing Local Storage for Sensitive Data" url="https://mas.owasp.org/MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0001/"/>
            <reference name="OWASP MASTG - MASVS-STORAGE-1 - Testing the Device-Access-Security Policy" url="https://mas.owasp.org/MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0012/"/>
          </references>
          <standards>
            <standard ref="MASVS-STORAGE-1" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the app verifies the mobile device complies with the minimum
                            device-access-security policy.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.825">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.7" name="Deny the access by default when an uncaught exception appears" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Deny the access by default to prevent the app crashing because of uncaught exception and to avoid unauthorized access.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2023-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the application denies access to the session when the exceptions appear.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.830">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.5" name="Disable JavaScript by default in a WebView if it is not necessary" issueId="" issueLink="" platform="" cost="1" risk="70" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>JavaScript is disabled by default in a WebView and if not needed shouldn't be enabled. This reduces the attack surface and potential threats to the app.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing JavaScript Execution in WebViews" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0031/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing WebView Protocol Handlers" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0032/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing WebViews Cleanup" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0037/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing for Java Objects Exposed Through WebViews" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0033/"/>
          </references>
          <standards>
            <standard ref="MASVS-PLATFORM-2" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Search in the code the following instruction:
                            webview.getSettings().setJavaScriptEnabled(true);&lt;/li&gt;
                            &lt;li&gt;Check that this instruction doesn't exist in the code.&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;For iOS:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the JavaScript is disabled and configured as following:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            #import &amp;quot;ViewController.h&amp;quot;&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            #import @interface ViewController () @property(strong,nonatomic) WKWebView *webView;
                            &lt;/div&gt;
                            &lt;div&gt;
                            @end @implementation ViewController - (void)viewDidLoad { NSURL *url = [NSURL
                            URLWithString:@&amp;quot;http://www.example.com/&amp;quot;];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            NSURLRequest *request = [NSURLRequest requestWithURL:url];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            WKPreferences *pref = [[WKPreferences alloc] init]; //Disable javascript execution: [pref
                            setJavaScriptEnabled:NO];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [pref setJavaScriptCanOpenWindowsAutomatically:NO];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            WKWebViewConfiguration *conf = [[WKWebViewConfiguration alloc] init];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [conf setPreferences:pref]; _webView = [[WKWebView
                            alloc]initWithFrame:CGRectMake(self.view.frame.origin.x,85, self.view.frame.size.width,
                            self.view.frame.size.height-85) configuration:conf] ;&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [_webView loadRequest:request];&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            [self.view addSubview:_webView]; }
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.829">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.5" name="Disable keyboard cache on sensitive data text inputs" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>A general best practice is overwriting different functions in the input field to disable the clipboard specifically for it. Also longclickable should be deactivated for the input field.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing Deep Links" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing for App Permissions" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing for Sensitive Functionality Exposure Through IPC" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing for Vulnerable Implementation of PendingIntent" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0030/"/>
            <reference name="OWASP MASTG - MASVS-STORAGE-2 - Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services" url="https://mas.owasp.org/MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0004/"/>
            <reference name="OWASP MASTG - MASVS-STORAGE-2 - Determining Whether Sensitive Data Is Shared with Third Parties via Notifications" url="https://mas.owasp.org/MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0005/"/>
            <reference name="OWASP MASTG - MASVS-STORAGE-2 - Determining Whether the Keyboard Cache Is Disabled for Text Input Fields" url="https://mas.owasp.org/MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0006/"/>
            <reference name="OWASP MASTG - MASVS-STORAGE-2 - Testing Backups for Sensitive Data" url="https://mas.owasp.org/MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0009/"/>
            <reference name="OWASP MASTG - MASVS-STORAGE-2 - Testing Logs for Sensitive Data" url="https://mas.owasp.org/MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0003/"/>
            <reference name="OWASP MASTG - MASVS-STORAGE-2 - Testing Memory for Sensitive Data" url="https://mas.owasp.org/MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0011/"/>
          </references>
          <standards>
            <standard ref="MASVS-PLATFORM-1" supportedStandardRef="owasp-masvs-testing-guide"/>
            <standard ref="MASVS-STORAGE-2" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the clipboard is disabled when sensitive data is used.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.827">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.10" name="Do not use the SSAID for 'device binding'" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Do not use the SSAID for device binding because the behavior of the SSAID has changed since
                        Android O and the behavior of MAC addresses have changed in Android N.

                        Google has set a new set of recommendations in their SDK documentation regarding identifiers as
                        well. Because of this new behavior, we recommend developers not rely on the SSAID alone, as the
                        identifier has become less stable. For instance: The SSAID might change upon a factory reset or
                        when the app is reinstalled after the upgrade to Android O. Please note that there are a number
                        of devices which have the same ANDROID_ID and/or have an ANDROID_ID that can be overridden.
                        Also, the Build.Serial was often used but now apps targeting Android O will get "UNKNOWN" when
                        they request the Build.Serial.
                    </desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Dynamic Analysis using an Emulator.&lt;/li&gt;
                            &lt;li&gt;Run the application on an Emulator.&lt;/li&gt;
                            &lt;li&gt;Make sure you can raise the trust in the instance of the application (e.g.
                            authenticate).&lt;/li&gt;
                            &lt;li&gt;Retrieve the data from the Emulator. This has a few steps:&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;ol&gt;
                            &lt;ol&gt;
                            &lt;li&gt;ssh to your emulator using ADB shell&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;run-as&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;chmod 777 the contents of cache and shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;exit the current user&lt;/li&gt;
                            &lt;li&gt;copy the contents of /dat/data//cache &amp;amp; shared-preferences to the sdcard&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;use ADB or the DDMS to pull the contents&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Install the application on another Emulator&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;&amp;nbsp;Overwrite the data from step 3 in the data folder of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;copy the contents of step 3 to the sdcard of the second emulator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;ssh to your emulator using ADB shell&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;run-as&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;chmod 777 the folders cache and shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;copy the older contents of the sdcard to /dat/data//cache &amp;amp;
                            shared-preferences&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Can you continue in an authenticated state? If so, then binding might not be
                            working properly.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.834">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.3" name="Don't write any sensitive data on logs" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;There are many legitimate reasons for creating log files on a mobile device, including keeping track of crashes or errors that are stored locally while the device is offline (so that they can be sent to the app's developer once online), and storing usage statistics. However, logging sensitive data, such as credit card numbers and session information, may expose the data to attackers or malicious applications. Log files can be created in several ways.&amp;nbsp;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;The following list includes two classes that are available for Android:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Log Class&lt;/li&gt; 
 &lt;li&gt;Logger Class&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Use a centralized logging class and mechanism and remove logging statements from the production release because other applications may be able to read them.&lt;/p&gt; 
&lt;p&gt;The following list shows the methods available on iOS:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;NSLog Method&lt;/li&gt; 
 &lt;li&gt;printf-like function&lt;/li&gt; 
 &lt;li&gt;NSAssert-like function&lt;/li&gt; 
 &lt;li&gt;Macro&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M2: Insecure Data Storage" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt; 
 &lt;li&gt;Review app logs in search of sensitive data&lt;/li&gt; 
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.826">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.11" name="Encrypt and pack all executable files and libraries belonging to the app" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that all executable files and libraries belonging to the app are encrypted on the file level and/or important code and data segments inside the executables are encrypted or packed.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing Obfuscation" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0051/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing for Debugging Code and Verbose Error Logging" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0041/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing for Debugging Symbols" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0040/"/>
          </references>
          <standards>
            <standard ref="MASVS-RESILIENCE-3" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all executable files and libraries belonging to the app are encrypted or
                            packed.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.835">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.14" name="Encrypt sensitive data stored locally" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If sensitive data is still required to be stored locally, it should be encrypted using a key derived from hardware backed storage which requires authentication</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that sensitive data is not stored in plain text.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.826">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.13" name="Ensure sensitive data is not stored locally on the mobile device" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>No sensitive data should be stored locally on the mobile device. Instead, data should be retrieved from a remote endpoint when needed and only be kept in memory.</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if any sensitive data is stored on the device and analyze if it is necessary.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.826">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-2.6" name="Ensure that no sensitive stored data has been exposed via IPC mechanisms" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Inter Process Communication (IPC) allows processes to send each other messages and data. For processes that need to communicate with each other, there are different ways to implement IPC on iOS:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;XPC Services: XPC is a structured, asynchronous library that provides basic interprocess communication. It is managed by launchd. It is the most secure and flexible implementation of IPC on iOS and should be the preferred method. It runs in the most restricted environment possible: sandboxed with no root privilege escalation and minimal file system access and network access. Two different APIs are used with XPC Services:&lt;ul&gt;&lt;li&gt;NSXPCConnection API&lt;/li&gt;&lt;li&gt;XPC Services API&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Mach Ports: All IPC communication ultimately relies on the Mach Kernel API. Mach Ports allow local communication (intra-device communication) only. They can be implemented either natively or via Core Foundation (CFMachPort) and Foundation (NSMachPort) wrappers.&lt;/li&gt;&lt;li&gt;NSFileCoordinator: The class NSFileCoordinator can be used to manage and send data to and from apps via files that are available on the local file system to various processes. NSFileCoordinator methods run synchronously, so your code will be blocked until they stop executing. That's convenient because you don't have to wait for an asynchronous block callback, but it also means that the methods block the running thread.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;No sensitive data should be exposed via IPC mechanisms.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing Deep Links" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing for App Permissions" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing for Sensitive Functionality Exposure Through IPC" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing for Vulnerable Implementation of PendingIntent" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0030/"/>
          </references>
          <standards>
            <standard ref="MASVS-PLATFORM-1" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;For Android:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The first step is to look at AndroidManifest.xml to detect content providers exposed by the app. You can identify content providers by the &amp;lt;provider&amp;gt; element. Complete the following steps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Determine whether the value of the export tag (android:exported) is "true". Even if it is not, the tag will be set to "true" automatically if an &amp;lt;intent-filter&amp;gt; has been defined for the tag. If the content is meant to be accessed only by the app itself, set android:exported to "false". If not, set the flag to "true" and define proper read/write permissions.&lt;/li&gt;&lt;li&gt;Determine whether the data is being protected by a permission tag (android:permission). Permission tags limit exposure to other apps.&lt;/li&gt;&lt;li&gt;Determine whether the android:protectionLevel attribute has the value signature. This setting indicates that the data is intended to be accessed only by apps from the same enterprise (i.e., signed with the same key). To make the data accessible to other apps, apply a security policy with the &amp;lt;permission&amp;gt; element and set a proper android:protectionLevel. If you use android:permission, other applications must declare corresponding &amp;lt;uses-permission&amp;gt; elements in their manifests to interact with your content provider. You can use the android:grantUriPermissions attribute to grant more specific access to other apps; you can limit access with the &amp;lt;grant-uri-permission&amp;gt; element.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Inspect the source code to understand how the content provider is meant to be used. Search for the following keywords:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;android.content.ContentProvider&lt;/li&gt;&lt;li&gt;android.database.Cursor&lt;/li&gt;&lt;li&gt;android.database.sqlite&lt;/li&gt;&lt;li&gt;.query&lt;/li&gt;&lt;li&gt;.update&lt;/li&gt;&lt;li&gt;.delete&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;To avoid SQL injection attacks within the app, use parameterized query methods, such as query, update, and delete. Be sure to properly sanitize all method arguments; for example, the selection argument could lead to SQL injection if it is made up of concatenated user input.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If you expose a content provider, determine whether parameterized &lt;a href="https://developer.android.com/reference/android/content/ContentProvider.html#query%28android.net.Uri%2C%20java.lang.String%5B%5D%2C%20java.lang.String%2C%20java.lang.String%5B%5D%2C%20java.lang.String%29"&gt;query methods&lt;/a&gt; (query, update, and delete) are being used to prevent SQL injection. If so, make sure all their arguments are properly sanitized.&lt;/p&gt;&lt;p&gt;We will use the vulnerable password manager app &lt;a href="https://github.com/mwrlabs/drozer/releases/download/2.3.4/sieve.apk"&gt;Sieve&lt;/a&gt; as an example of a vulnerable content provider.&lt;/p&gt;&lt;h4&gt;Inspect the Android Manifest&lt;/h4&gt;&lt;p&gt;Identify all defined &amp;lt;provider&amp;gt; elements:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&amp;lt;provider&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;android:authorities="com.mwr.example.sieve.DBContentProvider"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;android:exported="true"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;android:multiprocess="true"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;android:name=".DBContentProvider"&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;&amp;lt;path-permission&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;android:path="/Keys"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;android:readPermission="com.mwr.example.sieve.READ_KEYS"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;android:writePermission="com.mwr.example.sieve.WRITE_KEYS"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; /&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;/provider&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;lt;provider&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;android:authorities="com.mwr.example.sieve.FileBackupProvider"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;android:exported="true"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;android:multiprocess="true"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;android:name=".FileBackupProvider"&lt;/p&gt;&lt;p&gt;/&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;As shown in the AndroidManifest.xml above, the application exports two content providers. Note that one path ("/Keys") is protected by read and write permissions.&lt;/p&gt;&lt;h4&gt;Inspect the source code&lt;/h4&gt;&lt;p&gt;Inspect the query function in the DBContentProvider.java file to determine whether any sensitive information is being leaked:&lt;/p&gt;&lt;p&gt;Example in Java:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;public Cursor query(final Uri uri, final String[] array, final String s, final String[] array2, final String s2) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;final int match = this.sUriMatcher.match(uri);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;final SQLiteQueryBuilder sqLiteQueryBuilder = new SQLiteQueryBuilder();&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;if (match &amp;gt;= 100 &amp;amp;&amp;amp; match &amp;lt; 200) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sqLiteQueryBuilder.setTables("Passwords");&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;}&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;else if (match &amp;gt;= 200) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sqLiteQueryBuilder.setTables("Key");&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;}&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(), array, s, array2, (String)null, (String)null, s2);&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Example in Kotlin:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;fun query(uri: Uri?, array: Array&amp;lt;String?&amp;gt;?, s: String?, array2: Array&amp;lt;String?&amp;gt;?, s2: String?): Cursor {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;val match: Int = this.sUriMatcher.match(uri)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;val sqLiteQueryBuilder = SQLiteQueryBuilder()&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;if (match &amp;gt;= 100 &amp;amp;&amp;amp; match &amp;lt; 200) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sqLiteQueryBuilder.tables = "Passwords"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;} else if (match &amp;gt;= 200) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sqLiteQueryBuilder.tables = "Key"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;}&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(), array, s, array2, null as String?, null as String?, s2)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;}&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Here we see that there are actually two paths, "/Keys" and "/Passwords", and the latter is not being protected in the manifest and is therefore vulnerable.&lt;/p&gt;&lt;p&gt;When accessing a URI, the query statement returns all passwords and the path Passwords/. We will address this in the "Dynamic Analysis" section and show the exact URI that is required.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt;&lt;/p&gt;&lt;h4&gt;Testing Content Providers&lt;/h4&gt;&lt;p&gt;To dynamically analyze an application's content providers, first enumerate the attack surface: pass the app's package name to the Drozer module app.provider.info:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run app.provider.info -a com.mwr.example.sieve&lt;/p&gt;&lt;p&gt;&amp;nbsp;Package: com.mwr.example.sieve&lt;/p&gt;&lt;p&gt;&amp;nbsp;Authority: com.mwr.example.sieve.DBContentProvider&lt;/p&gt;&lt;p&gt;&amp;nbsp;Read Permission: null&lt;/p&gt;&lt;p&gt;&amp;nbsp;Write Permission: null&lt;/p&gt;&lt;p&gt;&amp;nbsp;Content Provider: com.mwr.example.sieve.DBContentProvider&lt;/p&gt;&lt;p&gt;&amp;nbsp;Multiprocess Allowed: True&lt;/p&gt;&lt;p&gt;&amp;nbsp;Grant Uri Permissions: False&lt;/p&gt;&lt;p&gt;&amp;nbsp;Path Permissions:&lt;/p&gt;&lt;p&gt;&amp;nbsp;Path: /Keys&lt;/p&gt;&lt;p&gt;&amp;nbsp;Type: PATTERN_LITERAL&lt;/p&gt;&lt;p&gt;&amp;nbsp;Read Permission: com.mwr.example.sieve.READ_KEYS&lt;/p&gt;&lt;p&gt;&amp;nbsp;Write Permission: com.mwr.example.sieve.WRITE_KEYS&lt;/p&gt;&lt;p&gt;&amp;nbsp;Authority: com.mwr.example.sieve.FileBackupProvider&lt;/p&gt;&lt;p&gt;&amp;nbsp;Read Permission: null&lt;/p&gt;&lt;p&gt;&amp;nbsp;Write Permission: null&lt;/p&gt;&lt;p&gt;&amp;nbsp;Content Provider: com.mwr.example.sieve.FileBackupProvider&lt;/p&gt;&lt;p&gt;&amp;nbsp;Multiprocess Allowed: True&lt;/p&gt;&lt;p&gt;&amp;nbsp;Grant Uri Permissions: False&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In this example, two content providers are exported. Both can be accessed without permission, except for the /Keys path in the DBContentProvider. With this information, you can reconstruct part of the content URIs to access the DBContentProvider (the URIs begin with content://).&lt;/p&gt;&lt;p&gt;To identify content provider URIs within the application, use Drozer's scanner.provider.finduris module. This module guesses paths and determines accessible content URIs in several ways:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run scanner.provider.finduris -a com.mwr.example.sieve&lt;/p&gt;&lt;p&gt;Scanning com.mwr.example.sieve...&lt;/p&gt;&lt;p&gt;Unable to Query content://com.mwr.example.sieve.DBContentProvider/&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;&lt;p&gt;Unable to Query content://com.mwr.example.sieve.DBContentProvider/Keys&lt;/p&gt;&lt;p&gt;Accessible content URIs:&lt;/p&gt;&lt;p&gt;content://com.mwr.example.sieve.DBContentProvider/Keys/&lt;/p&gt;&lt;p&gt;content://com.mwr.example.sieve.DBContentProvider/Passwords&lt;/p&gt;&lt;p&gt;content://com.mwr.example.sieve.DBContentProvider/Passwords/&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Once you have a list of accessible content providers, try to extract data from each provider with the app.provider.query module:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical&lt;/p&gt;&lt;p&gt;_id: 1&lt;/p&gt;&lt;p&gt;service: Email&lt;/p&gt;&lt;p&gt;username: incognitoguy50&lt;/p&gt;&lt;p&gt;password: PSFjqXIMVa5NJFudgDuuLVgJYFD+8w== (Base64 - encoded)&lt;/p&gt;&lt;p&gt;email: incognitoguy50@gmail.com&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You can also use Drozer to insert, update, and delete records from a vulnerable content provider:&lt;/p&gt;&lt;p&gt;Insert record&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run app.provider.insert content://com.vulnerable.im/messages&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--string date 1331763850325&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--string type 0&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--integer _id 7&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Update record&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run app.provider.update content://settings/secure&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--selection "name=?"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--selection-args assisted_gps_enabled&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--integer value 0&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Delete record&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run app.provider.delete content://settings/secure&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--selection "name=?"&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;--selection-args my_setting&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;SQL Injection in Content Providers&lt;/h4&gt;&lt;p&gt;The Android platform promotes SQLite databases for storing user data. Because these databases are based on SQL, they may be vulnerable to SQL injection. You can use the Drozer module app.provider.query to test for SQL injection by manipulating the projection and selection fields that are passed to the content provider:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "'"&lt;/p&gt;&lt;p&gt;unrecognized token: "' FROM Passwords" (code 1): , while compiling: SELECT ' FROM Passwords&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;dz&amp;gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection "'"&lt;/p&gt;&lt;p&gt;unrecognized token: "')" (code 1): , while compiling: SELECT * FROM Passwords WHERE (')
&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If an application is vulnerable to SQL Injection, it will return a verbose error message. SQL Injection on Android may be used to modify or query data from the vulnerable content provider. In the following example, the Drozer module app.provider.query is used to list all the database tables:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "*&lt;/p&gt;&lt;p&gt;FROM SQLITE_MASTER WHERE type='table';--"&lt;/p&gt;&lt;p&gt;| type &amp;nbsp;| name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; | tbl_name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; | rootpage | sql &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;/p&gt;&lt;p&gt;| table | android_metadata | android_metadata | 3 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| CREATE TABLE ... |&lt;/p&gt;&lt;p&gt;| table | Passwords &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| Passwords &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| 4 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| CREATE TABLE ... |&lt;/p&gt;&lt;p&gt;| table | Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| Key &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| 5 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| CREATE TABLE ... |
&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;SQL Injection may also be used to retrieve data from otherwise protected tables:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection "* FROM Key;--"&lt;/p&gt;&lt;p&gt;| Password | pin |&lt;/p&gt;&lt;p&gt;| thisismypassword | 9876 |&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;You can automate these steps with the scanner.provider.injection module, which automatically finds vulnerable content providers within an app:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run scanner.provider.injection -a com.mwr.example.sieve&lt;/p&gt;&lt;p&gt;Scanning com.mwr.example.sieve...&lt;/p&gt;&lt;p&gt;Injection in Projection:&lt;/p&gt;&lt;p&gt;&amp;nbsp;content://com.mwr.example.sieve.DBContentProvider/Keys/&lt;/p&gt;&lt;p&gt;&amp;nbsp;content://com.mwr.example.sieve.DBContentProvider/Passwords&lt;/p&gt;&lt;p&gt;&amp;nbsp;content://com.mwr.example.sieve.DBContentProvider/Passwords/&lt;/p&gt;&lt;p&gt;Injection in Selection:&lt;/p&gt;&lt;p&gt;&amp;nbsp;content://com.mwr.example.sieve.DBContentProvider/Keys/&lt;/p&gt;&lt;p&gt;&amp;nbsp;content://com.mwr.example.sieve.DBContentProvider/Passwords&lt;/p&gt;&lt;p&gt;&amp;nbsp;content://com.mwr.example.sieve.DBContentProvider/Passwords/
&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;File System Based Content Providers&lt;/h4&gt;&lt;p&gt;Content providers can provide access to the underlying filesystem. This allows apps to share files (the Android sandbox normally prevents this). You can use the Drozer modules app.provider.read and app.provider.download to read and download files, respectively, from exported file-based content providers. These content providers are susceptible to directory traversal, which allows otherwise protected files in the target application's sandbox to be read.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run app.provider.download content://com.vulnerable.app.FileProvider/../../../../../../../../data/data/com.vulnerable.app/database.db /home/user/database.db
Written 24488 bytes
&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Use the scanner.provider.traversal module to automate the process of finding content providers that are susceptible to directory traversal:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;dz&amp;gt; run scanner.provider.traversal -a com.mwr.example.sieve&lt;/p&gt;&lt;p&gt;Scanning com.mwr.example.sieve...&lt;/p&gt;&lt;p&gt;Vulnerable Providers:&lt;/p&gt;&lt;p&gt;&amp;nbsp;content://com.mwr.example.sieve.FileBackupProvider/&lt;/p&gt;&lt;p&gt;&amp;nbsp;content://com.mwr.example.sieve.FileBackupProvider&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Note that adb can also be used to query content providers:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;$ adb shell content query --uri content://com.owaspomtg.vulnapp.provider.CredentialProvider/credentials&lt;/p&gt;&lt;p&gt;Row: 0 id=1, username=admin, password=StrongPwd&lt;/p&gt;&lt;p&gt;Row: 1 id=2, username=test, password=test&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;For iOS:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The following section summarizes keywords that you should look for to identify IPC implementations within iOS source code.&lt;/p&gt;&lt;h4&gt;XPC Services&lt;/h4&gt;&lt;p&gt;Several classes may be used to implement the NSXPCConnection API:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;NSXPCConnection&lt;/li&gt;&lt;li&gt;NSXPCInterface&lt;/li&gt;&lt;li&gt;NSXPCListener&lt;/li&gt;&lt;li&gt;NSXPCListenerEndpoint&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can set security attributes for the connection. The attributes should be verified.&lt;/p&gt;&lt;p&gt;Check for the following two files in the Xcode project for the XPC Services API (which is C-based):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;xpc.h&lt;/li&gt;&lt;li&gt;connection.h&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Mach Ports&lt;/h4&gt;&lt;p&gt;Keywords to look for in low-level implementations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;mach_port_t&lt;/li&gt;&lt;li&gt;mach_msg_*&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Keywords to look for in high-level implementations (Core Foundation and Foundation wrappers):&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CFMachPort&lt;/li&gt;&lt;li&gt;CFMessagePort&lt;/li&gt;&lt;li&gt;NSMachPort&lt;/li&gt;&lt;li&gt;NSMessagePort&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;NSFileCoordinator&lt;/h4&gt;&lt;p&gt;Keywords to look for:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;NSFileCoordinator&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Verify IPC mechanisms with static analysis of the iOS source code. No iOS tool is currently available to verify IPC usage.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.827">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.7" name="Ensure that the app responds correctly against tampering, debugging and emulation" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the app implements multiple different responses to tampering, debugging and emulation,
                        including stealthy responses that don't simply terminate the app.
                    </desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Making Sure that the App is Properly Signed" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0038/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Testing File Integrity Checks" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0047/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Testing Runtime Integrity Checks" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0050/"/>
          </references>
          <standards>
            <standard ref="MASVS-RESILIENCE-2" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the app implements multiple different responses to tampering, debugging and
                            emulation, including stealthy responses that don't simply terminate the app.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.835">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.6" name="Ensure the app only depends on up-to-date connectivity and security libraries" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Android relies on a security provider to provide SSL/TLS-based connections. The problem with this kind of security provider (one example is OpenSSL), which comes with the device, is that it often has bugs and/or vulnerabilities. To avoid known vulnerabilities, developers need to make sure that the application will install a proper security provider. Since July 11, 2016, Google has been rejecting Play Store application submissions (both new applications and updates) that use vulnerable versions of OpenSSL.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-NETWORK-1 - Testing Data Encryption on the Network" url="https://mas.owasp.org/MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0019/"/>
            <reference name="OWASP MASTG - MASVS-NETWORK-1 - Testing Endpoint Identify Verification" url="https://mas.owasp.org/MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/"/>
            <reference name="OWASP MASTG - MASVS-NETWORK-1 - Testing the Security Provider" url="https://mas.owasp.org/MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0023/"/>
            <reference name="OWASP MASTG - MASVS-NETWORK-1 - Testing the TLS Settings" url="https://mas.owasp.org/MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0020/"/>
          </references>
          <standards>
            <standard ref="MASVS-NETWORK-1" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;When you have the source code:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Run the application in debug mode, then create a breakpoint where the app will first contact the endpoint(s).&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Right click the highlighted code and select &lt;/span&gt;&lt;span&gt;&lt;code&gt;Evaluate Expression&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Type &lt;/span&gt;&lt;span&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/span&gt;&lt;span&gt; and press enter.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Check the providers and try to find &lt;/span&gt;&lt;span&gt;&lt;code&gt;GmsCore_OpenSSL&lt;/code&gt;&lt;/span&gt;&lt;span&gt;, which should be the new top-listed provider.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;When you do not have the source code:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Use Xposed to hook into the &lt;/span&gt;&lt;span&gt;&lt;code&gt;java.security&lt;/code&gt;&lt;/span&gt;&lt;span&gt; package, then hook into &lt;/span&gt;&lt;span&gt;&lt;code&gt;java.security.Security&lt;/code&gt;&lt;/span&gt;&lt;span&gt; with the method &lt;/span&gt;&lt;span&gt;&lt;code&gt;getProviders&lt;/code&gt;&lt;/span&gt;&lt;span&gt; (with no arguments). The return value will be an array of &lt;/span&gt;&lt;span&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;Determine whether the first provider is &lt;/span&gt;&lt;span&gt;&lt;code&gt;GmsCore_OpenSSL&lt;/code&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.829">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.4" name="Ensure the logout functionality terminates the session" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The purpose of this test case is verifying logout functionality and determining whether it effectively terminates the session on both client and server and invalidates a stateless token.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Failing to destroy the server-side session is one of the most common logout functionality implementation errors. This error keeps the session or token alive, even after the user logs out of the application. An attacker who gets valid authentication information can continue to use it and hijack a user's account.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Many mobile apps don't automatically log users out. There can be various reasons, such as: because it is inconvenient for customers, or because of decisions made when implementing stateless authentication. The application should still have a logout function, and it should be implemented according to best practices, destroying all locally stored tokens or session identifiers. If session information is stored on the server, it should also be destroyed by sending a logout request to that server. In case of a high-risk application, tokens should be blacklisted. Not removing tokens or session identifiers can result in unauthorized access to the application in case the tokens are leaked. Note that other sensitive types of information should be removed as well, as any information that is not properly cleared may be leaked later, for example during a device backup.&lt;/span&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Use an interception proxy for dynamic application analysis and execute the following steps to check whether the logout is implemented properly:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Log in to the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Access a resource that requires authentication, typically a request for private information belonging to your account.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Log out of the application.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Try to access the data again by resending the request from step 2.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;If the logout is correctly implemented on the server, an error message or redirect to the login page will be sent back to the client. On the other hand, if you receive the same response you got in step 2, the token or session ID is still valid and hasn't been correctly terminated on the server.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.828">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.11" name="Implement a device blocking functionality" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;For applications which require L2 protection, the MASVS states that they should inform the user about all login activities within the app with the possibility of blocking certain devices. This can be broken down into various scenarios:&lt;/span&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides a push notification the moment their account is used on another device to notify the user of different activities. The user can then block this device after opening the app via the push-notification.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides an overview of the last session after login. If the previous session was with a different configuration (e.g. location, device, app-version) compared to the current configuration, then the user should have the option to report suspicious activities and block devices used in the previous session.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application provides an overview of the last session after login at all times.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application has a self-service portal in which the user can see an audit-log. This allows the user to manage the different devices that are logged in.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The developer can make use of specific meta-information and associate it to each different activity or event within the application. This will make it easier for the user to spot suspicious behavior and block the corresponding device. The meta-information may include:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Device: The user can clearly identify all devices where the app is being used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Date and Time: The user can clearly see the latest date and time when the app was used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Location: The user can clearly identify the latest locations where the app was used.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;The application can provide a list of activities history which will be updated after each sensitive activity within the application. The choice of which activities to audit needs to be done for each application based on the data it handles and the level of security risk the team is willing to have. Below is a list of common sensitive activities that are usually audited:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Login attempts&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Password changes&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Personal Identifiable Information changes (name, email address, telephone number, etc.)&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Sensitive activities (purchase, accessing important resources, etc.)&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Consent to Terms and Conditions clauses&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Paid content requires special care, and additional meta-information (e.g., operation cost, credit, etc.) might be used to ensure user's knowledge about the whole operation's parameters.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;In addition, non-repudiation mechanisms should be applied to sensitive transactions (e.g. payed content access, given consent to Terms and Conditions clauses, etc.) in order to prove that a specific transaction was in fact performed (integrity) and by whom (authentication).&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;In all cases, you should verify whether different devices are detected correctly. Therefore, the binding of the application to the actual device should be tested. In iOS, a developer can use&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;identifierForVendor&lt;/code&gt;&lt;/span&gt;&lt;span&gt;, which is related to the bundle ID: the moment you change a bundle ID, the method will return a different value. When the app is ran for the first time, make sure you store the value returned by&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;identifierForVendor&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;to the KeyChain, so that changes to it can be detected at an early stage.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;&lt;span&gt;&lt;span&gt;In Android, the developer can use&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;Settings.Secure.ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;till Android 8.0 (API level 26) to identify an application instance. Note that starting at Android 8.0 (API level 26),&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;is no longer a device unique ID. Instead, it becomes scoped by the combination of app signing key, user and device. So validating&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for device blocking could be tricky for these Android versions. Because if an app changes its signing key, the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;will change and it won't be able to recognize old users devices. Therefore, it's better to store the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;encrypted and privately in a private a shared preferences file using a randomly generated key from the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;AndroidKeyStore&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;and preferably AES_GCM encryption. The moment the app signature changes, the application can check for a delta and register the new&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;ANDROID_ID&lt;/code&gt;&lt;/span&gt;&lt;span&gt;. The moment this new ID changes without a new application signing key, it should indicate that something else is wrong. Next, the device binding can be extended by signing requests with a key stored in the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;Keychain&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;for iOS and in the&amp;nbsp;&lt;/span&gt;&lt;span&gt;&lt;code&gt;KeyStore&lt;/code&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;in Android can reassure strong device binding. You should also test if using different IPs, different locations and/or different time-slots will trigger the right type of information in all scenarios.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Lastly, the blocking of the devices should be tested, by blocking a registered instance of the app and see if it is then no longer allowed to authenticate. Note: in case of an application which requires L2 protection, it can be a good idea to warn a user even before the first authentication on a new device. Instead: warn the user already when a second instance of the app is registered.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.828">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.1" name="Implement detection and response functionalities for root detection" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement detection and response functionalities to detect rooted devices and if the device is rooted, the app shall respond in two ways:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The app notifies the user that their device is rooted and it's not secure to continue with the app.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Terminate the session and the app, because sensitive data is vulnerable.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-1 - Testing Emulator Detection" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0049/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-1 - Testing Root Detection" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0045/"/>
          </references>
          <standards>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M9: Reverse Engineering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="MASVS-RESILIENCE-1" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Check that the app has two or more functionalities with independent methods to
                            detect a rooted device.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that if the device is rooted, the user is alerted or the app is terminated.&lt;/li&gt;
                            &lt;/ul&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.831">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.3" name="Implement functionality to alert when the app code changes" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement functionality to detect, notify and respond when the app is modified by executable files or by anti-debugging tools within its own sandbox. When the injection is detected the app shall alert the user and terminate the session.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Making Sure that the App is Properly Signed" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0038/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Testing File Integrity Checks" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0047/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Testing Runtime Integrity Checks" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0050/"/>
          </references>
          <standards>
            <standard ref="MASVS-RESILIENCE-2" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For the application source integrity checks, run the app on the device in an
                            unmodified state and make sure that everything works.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Then apply simple patches to the classes.dex and any .so libraries contained in
                            the app package. Re-package and re-sign the app.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the app alerts the user and/or terminates the session.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.835">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.6" name="Implement functionality to detect and respond to, modifications of process memory" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create functionality to detect &amp;quot;hostile&amp;quot; code in its memory and respond
                        accordingly. Controls in this category verify the integrity of the app's own memory space, with
                        the goal of protecting against memory patches applied during runtime. This includes unwanted
                        changes to binary code or bytecode, functions pointer tables, and important data structures, as
                        well as rogue code loaded into process memory.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;div&gt;
                        Integrity can be verified either by:&amp;nbsp;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Comparing the contents of memory, or a checksum over the contents, with known good
                        values.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Searching memory for signatures of unwanted modifications.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Making Sure that the App is Properly Signed" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0038/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Testing File Integrity Checks" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0047/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Testing Runtime Integrity Checks" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0050/"/>
          </references>
          <standards>
            <standard ref="MASVS-RESILIENCE-2" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Disable all file-based detection of reverse engineering tools.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Then inject code using Xposed, Frida and Substrate, and attempt to install native
                            hooks and Java method hooks.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that the app detects the &amp;quot;hostile&amp;quot; code in its memory and
                            responds accordingly.&lt;/li&gt;
                            &lt;/ul&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.835">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.5" name="Implement functionality to detect if the app is being run inside an emulator" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create and implement functionality to detect when the app is being run inside an emulator. If
                        the app is running inside an emulator, the app shall terminate the session.
                    </desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-1 - Testing Emulator Detection" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0049/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-1 - Testing Root Detection" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0045/"/>
          </references>
          <standards>
            <standard ref="MASVS-RESILIENCE-1" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Install and run the app within an emulator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the app detects this and terminates the session.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.835">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.4" name="Implement functionality to detect the presence of widely used reverse engineering tools" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Create functionality to detect the presence of widely used reverse engineering tools, such as
                        code injection tools, hooking frameworks and debugging servers. If any reverse engineering tool
                        is detected, the app shall force termination of the session.
                    </desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-4 - Testing Anti-Debugging Detection" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0046/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-4 - Testing Reverse Engineering Tools Detection" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0048/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-4 - Testing whether the App is Debuggable" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0039/"/>
          </references>
          <standards>
            <standard ref="MASVS-RESILIENCE-4" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Launch the app systematically with various apps and frameworks installed, such as the
                            following:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Substrate for Android&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Xposed&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Frida&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Introspy-Android&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Drozer&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;RootCloak&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Android SSL Trust Killer&amp;nbsp;&lt;/li&gt;
                            &lt;/ul&gt;The app should alert the user and/or terminate the app.
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.835">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.2" name="Implement functionality to notify when debugging mechanisms are presented within the app" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement anti-debugging mechanisms to prohibit debug mode being activated. Anti-debugging
                        features can be preventive or reactive. As the name implies, preventive anti-debugging
                        techniques prevent the debugger from attaching in the first place, while reactive techniques
                        attempt to detect whether a debugger is present and react to it in some way (e.g. terminating
                        the app, or triggering some kind of hidden behavior).&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The &amp;quot;more-is-better&amp;quot; rule applies: To maximize effectiveness, defenders
                        combine multiple methods of prevention and detection which operate on different API layers and
                        are distributed throughout the app.
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-4 - Testing Anti-Debugging Detection" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0046/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-4 - Testing Reverse Engineering Tools Detection" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0048/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-4 - Testing whether the App is Debuggable" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0039/"/>
          </references>
          <standards>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M9: Reverse Engineering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="MASVS-RESILIENCE-4" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check for the presence of anti-debugging mechanisms and verify if with the following
                            criteria the anti-debugging mechanisms are bypassed:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Attaching JDB and ptrace based debuggers either fails or causes the app to
                            terminate or malfunction&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Multiple detection methods are scattered throughout the app (as opposed to putting
                            everything into a single method or function);&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;The anti-debugging defenses operate on multiple API layers (Java, native library
                            functions, Assembler/system calls);&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;The mechanisms show some level of originality (vs. copy/paste from StackOverflow
                            or other sources);&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.835">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.4" name="Insert the condition DEVELOPER-MODE to remove the debugging code, log verbose errors or debugging messages in the production version" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Insert the policy in the if statement with DEVELOPER_MODE as condition. The DEVELOPER_MODE has
                        to be disabled for release build in order to disable StrictMode too.&amp;nbsp;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Remove the debugging code, log verbose errors or debugging messages in the production version.
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing Obfuscation" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0051/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing for Debugging Code and Verbose Error Logging" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0041/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing for Debugging Symbols" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0040/"/>
          </references>
          <standards>
            <standard ref="M10: Extraneous Functionality" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="MASVS-RESILIENCE-3" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
                            &lt;li&gt;Check that there is only one method to activate the DEVELOPMENT_MODE.&lt;/li&gt;
                            &lt;li&gt;Check that the debugging code was removed.&lt;/li&gt;
                            &lt;/ul&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.830">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.9-8.12" name="Obfuscate all executable files, libraries, important code and data segments" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Obfuscation is the process of transforming code and data in order to make it more difficult to comprehend. It is an integral part of every software protection scheme. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If the goal of obfuscation is to protect sensitive computations, an obfuscation scheme is used that is both appropriate for the particular task and robust against manual and automated de-obfuscation methods, considering currently published research. The effectiveness of the obfuscation scheme must be verified through manual testing. Note that hardware-based isolation features are preferred over obfuscation whenever possible. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing Obfuscation" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0051/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing for Debugging Code and Verbose Error Logging" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0041/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing for Debugging Symbols" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0040/"/>
          </references>
          <standards>
            <standard ref="MASVS-RESILIENCE-3" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;Attempt to decompile the byte-code, disassemble any included library files, and perform static analysis. At the very least, the app's core functionality (i.e., the functionality meant to be obfuscated) shouldn't be easily discerned. Verify that&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;meaningful identifiers, such as class names, method names, and variable names, have been discarded,&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;string resources and strings in binaries are encrypted,&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
 &lt;li&gt; 
  &lt;div class="reset-3c756112--listItemContent-756c9114"&gt; 
   &lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;code and data related to the protected functionality is encrypted, packed, or otherwise concealed.&lt;/span&gt;&lt;/p&gt; 
  &lt;/div&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span class="text-4505230f--TextH400-3033861f--textContentFamily-49a318e1"&gt;For a more detailed assessment, you need a detailed understanding of the relevant threats and the obfuscation methods used.&lt;/span&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.836">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.7" name="Only JavaScript provided with the app code is allowed" issueId="" issueLink="" platform="" cost="1" risk="70" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If native methods of the app are exposed to a WebView, verify that the WebView only renders JavaScript contained within the app package.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing JavaScript Execution in WebViews" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0031/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing WebView Protocol Handlers" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0032/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing WebViews Cleanup" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0037/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-2 - Testing for Java Objects Exposed Through WebViews" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0033/"/>
          </references>
          <standards>
            <standard ref="MASVS-PLATFORM-2" supportedStandardRef="owasp-masvs-testing-guide"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>- Produce a JavaScript payload.
                            - Inject it into the file that the app is requesting. The injection could be done either
                            through a MITM attack or by directly modifying the file in case it is stored on external
                            storage. The whole process could be done through Drozer that uses weasel (MWR's advanced
                            exploitation payload) which is able to install a full agent, injecting a limited agent into
                            a running process, or connecting a reverse shell to act as a Remote Access Tool (RAT).
                            - Check that only the JavaScript provided with the app is allowed.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.830">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-4.1" name="Perform authentication process on remote services" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  If the app provides users access to a remote service, some form of authentication, such as username/password authentication, is performed at the remote endpoint. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M6: Insecure Authorization" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.828">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.3" name="Remove or obfuscate the debugging symbols from native binaries" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>As a general rule of thumb, as little explanative information as possible should be provided
                        along with the compiled code. Some metadata such as debugging information, line numbers and
                        descriptive function or method names make the binary or bytecode easier to understand for the
                        reverse engineer, but isn't actually needed in a release build and can therefore be safely
                        discarded without impacting the functionality of the app.

                        This data shall be removed from the release version or shall be obfuscated in order to be
                        inaccessible to the reverse engineer.
                    </desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing Obfuscation" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0051/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing for Debugging Code and Verbose Error Logging" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0041/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-3 - Testing for Debugging Symbols" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0040/"/>
          </references>
          <standards>
            <standard ref="MASVS-RESILIENCE-3" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Symbols are usually stripped during the build process, so you need the compiled byte-code
                            and libraries to verify whether any unnecessary metadata has been discarded. First find the
                            nm binary in your Android NDK and export it (or create an alias).
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            export $NM =
                            $ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            To display debug symbols:
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            $ $NM -a
                            libfoo.so/tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm:
                            libfoo.so: no symbols&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;To display dynamic symbols:
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            $ $NM -D libfoo.so&amp;nbsp;
                            &lt;/blockquote&gt;Alternatively, open the file in your favorite disassembler and check the
                            symbol tables manually. Dynamic symbols can be stripped using the visibility compiler flag.
                            Adding this flag causes gcc to discard the function names while still preserving the names
                            of functions declared as JNIEXPORT.&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;br /&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            Check if the following was added to build.gradle:&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            externalNativeBuild { cmake { cppFlags &amp;quot;-fvisibility=hidden&amp;quot; } }&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;br /&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;For iOS:&amp;nbsp;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            Use gobjdump to inspect the main binary and any included dylibs for Stabs and DWARF symbols.
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;div&gt;
                            $ gobjdump --stabs --dwarf TargetApp&amp;nbsp;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;In archive MyTargetApp:&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            - armv5te: file format mach-o-arm - aarch64: file format mach-o-arm64 Gobjdump is part of
                            binutils and can be installed via Homebrew on Mac OS X.
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.830">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-6.1" name="Request only the minimum required permissions from the mobile operating system" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security best practice dictates the practice of least-privilege is followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Request only the minimum required permissions from the mobile operating system. For example, if there is no requirement to use the camera then the application should not request this permission. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Review features and functionality present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them and associated OS permissions. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing Deep Links" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing for App Permissions" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing for Sensitive Functionality Exposure Through IPC" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/"/>
            <reference name="OWASP MASTG - MASVS-PLATFORM-1 - Testing for Vulnerable Implementation of PendingIntent" url="https://mas.owasp.org/MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0030/"/>
          </references>
          <standards>
            <standard ref="M1: Improper Platform Usage" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M4: Insecure Authentication" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="M7: Client Code Quality" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="MASVS-PLATFORM-1" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>For Android applications:&amp;nbsp;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Install the application and review the permissions the application is asking for.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check they are actually needed.&lt;/li&gt;
                            &lt;/ol&gt;For iOS applications:&amp;nbsp;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Install the application and use its main functionality, iOS will ask for the
                            permission when it is needed.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify those permissions requests are in accordance with the minimum set of
                            permissions needed by the application.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.829">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.836">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-5.1-5.2" name="Secure channels with TLS" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  One of the core mobile app functions is sending/receiving data over untrusted networks like the Internet. If the data is not properly protected in transit, an attacker with access to any part of the network infrastructure (e.g., a Wi-Fi access point) may intercept, read, or modify it. This is why plaintext network protocols are rarely advisable. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The vast majority of apps rely on HTTP for communication with the backend. HTTPS wraps HTTP in an encrypted connection (the acronym HTTPS originally referred to HTTP over Secure Socket Layer (SSL); SSL is the deprecated predecessor of TLS). TLS allows authentication of the backend service and ensures confidentiality and integrity of the network data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensuring proper TLS configuration on the server side is also important. The SSL protocol is deprecated and should no longer be used. Also TLS v1.0 and TLS v1.1 have known vulnerabilities and their usage is deprecated in all major browsers by 2020. TLS v1.2 and TLS v1.3 are considered best practice for secure transmission of data. Starting with Android 10 (API level 29) TLS v1.3 will be enabled by default for faster and secure communication. The major change with TLS v1.3 is that customizing cipher suites is no longer possible and that all of them are enabled when TLS v1.3 is enabled, whereas Zero Round Trip (0-RTT) mode isn't supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When both the client and server are controlled by the same organization and used only for communicating with one another, you can increase security by hardening the configuration. 
&lt;/div&gt; 
&lt;div&gt;
  If a mobile application connects to a specific server, its networking stack can be tuned to ensure the highest possible security level for the server's configuration. Lack of support in the underlying operating system may force the mobile application to use a weaker configuration. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="M3: Insecure Communication" supportedStandardRef="owasp-mobile-top-10-2016"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Intercept the tested app's incoming and outgoing network traffic and make sure that this traffic is encrypted. You can intercept network traffic in any of the following ways: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Capture all HTTP(S) and Websocket traffic with an interception proxy like OWASP ZAP or Burp Suite and make sure all requests are made via HTTPS instead of HTTP.&lt;/li&gt; 
  &lt;li&gt;Interception proxies like Burp and OWASP ZAP will show HTTP(S) traffic only. You can, however, use a Burp plugin such as Burp-non-HTTP-Extension or the tool mitm-relay to decode and visualize communication via XMPP and other protocols.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.828">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.8" name="Secure in the unmanaged code, the allocated memory, freed memory and used memory" issueId="" issueLink="" platform="" cost="1" risk="68" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Memory corruption bugs are a popular mainstay for hackers. This class of bug results from a programming error that causes the program to access an unintended memory location. Under the right conditions, attackers can capitalize on this behavior to hijack the execution flow of the vulnerable program and execute arbitrary code.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This kind of vulnerability occurs in a number of ways: 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;b&gt;Buffer overflows:&lt;/b&gt; This describes a programming error where an app writes beyond an allocated memory range for a particular operation. An attacker can use this flaw to overwrite important control data located in adjacent memory, such as function pointers. Buffer overflows were formerly the most common type of memory corruption flaw, but have become less prevalent over the years due to a number of factors. Notably, awareness among developers of the risks in using unsafe C library functions is now a common best practice plus, catching buffer overflow bugs is relatively simple. However, it is still worth testing for such defects.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Out-of-bounds-access: &lt;/b&gt;Buggy pointer arithmetic may cause a pointer or index to reference a position beyond the bounds of the intended memory structure (e.g. buffer or list). When an app attempts to write to an out-of-bounds address, a crash or unintended behavior occurs. If the attacker can control the target offset and manipulate the content written to some extent, code execution exploit is likely possible.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Dangling pointers:&lt;/b&gt; These occur when an object with an incoming reference to a memory location is deleted or deallocated, but the object pointer is not reset. If the program later uses the dangling pointer to call a virtual function of the already deallocated object, it is possible to hijack execution by overwriting the original vtable pointer. Alternatively, it is possible to read or write object variables or other memory structures referenced by a dangling pointer.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Use-after-free:&lt;/b&gt; This refers to a special case of dangling pointers referencing released (deallocated) memory. After a memory address is cleared, all pointers referencing the location become invalid, causing the memory manager to return the address to a pool of available memory. When this memory location is eventually re-allocated, accessing the original pointer will read or write the data contained in the newly allocated memory. This usually leads to data corruption and undefined behavior, but crafty attackers can set up the appropriate memory locations to leverage control of the instruction pointer.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Integer overflows: &lt;/b&gt;When the result of an arithmetic operation exceeds the maximum value for the integer type defined by the programmer, this results in the value "wrapping around" the maximum integer value, inevitably resulting in a small value being stored. Conversely, when the result of an arithmetic operation is smaller than the minimum value of the integer type, an integer underflow occurs where the result is larger than expected. Whether a particular integer overflow/underflow bug is exploitable depends on how the integer is used - for example, if the integer type were to represent the length of a buffer, this could create a buffer overflow vulnerability.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;&lt;b&gt;Format string vulnerabilities: &lt;/b&gt;When unchecked user input is passed to the format string parameter of the printf() family of C functions, attackers may inject format tokens such as '%c' and '%n' to access memory. Format string bugs are convenient to exploit due to their flexibility. Should a program output the result of the string formatting operation, the attacker can read and write to memory arbitrarily, thus bypassing protection features such as ASLR.&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;b&gt;Remediation:&amp;nbsp;&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   A best practice to fix the Memory Corruption Bugs are the following:&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;When using integer variables for array indexing, buffer length calculations, or any other security-critical operation, verify that unsigned integer types are used and perform precondition tests to prevent the possibility of integer wrapping.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Ensure the app does not use unsafe string functions such as strcpy, most other functions beginning with the "str" prefix, sprint, vsprintf, gets, etc.; If the app contains C++ code, ANSI C++ string classes are used; iOS apps written in Objective-C use NSString class. C apps on iOS should use CFString, the Core Foundation representation of a string. No untrusted data is concatenated into format strings.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-CODE-4 - Make Sure That Free Security Features Are Activated" url="https://mas.owasp.org/MASTG/tests/android/MASVS-CODE/MASTG-TEST-0044/"/>
            <reference name="OWASP MASTG - MASVS-CODE-4 - Memory Corruption Bugs" url="https://mas.owasp.org/MASTG/tests/android/MASVS-CODE/MASTG-TEST-0043/"/>
            <reference name="OWASP MASTG - MASVS-CODE-4 - Testing Implicit Intents" url="https://mas.owasp.org/MASTG/tests/android/MASVS-CODE/MASTG-TEST-0026/"/>
            <reference name="OWASP MASTG - MASVS-CODE-4 - Testing Local Storage for Input Validation" url="https://mas.owasp.org/MASTG/tests/android/MASVS-CODE/MASTG-TEST-0002/"/>
            <reference name="OWASP MASTG - MASVS-CODE-4 - Testing Object Persistence" url="https://mas.owasp.org/MASTG/tests/android/MASVS-CODE/MASTG-TEST-0034/"/>
            <reference name="OWASP MASTG - MASVS-CODE-4 - Testing for Injection Flaws" url="https://mas.owasp.org/MASTG/tests/android/MASVS-CODE/MASTG-TEST-0025/"/>
            <reference name="OWASP MASTG - MASVS-CODE-4 - Testing for URL Loading in WebViews" url="https://mas.owasp.org/MASTG/tests/android/MASVS-CODE/MASTG-TEST-0027/"/>
          </references>
          <standards>
            <standard ref="MASVS-CODE-4" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if some of the different Memory Corruption bugs appear when you try to use them to
                            gain access to the system.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.831">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-8.8" name="Set the detection mechanism to trigger different alarms" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span style="white-space: pre;"&gt;The detection mechanisms trigger responses of different types, including delayed and stealthy responses.&lt;/span&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.836">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="MASVS-7.1" name="Sign the app and provision with valid certificate with a properly protected key" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="OWASP-MASVS" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Code signing your app assures users that it is from a known source and the app hasn't been modified since it was last signed. This process can prevent an app from being tampered with, or modified to include malicious code.</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Making Sure that the App is Properly Signed" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0038/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Testing File Integrity Checks" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0047/"/>
            <reference name="OWASP MASTG - MASVS-RESILIENCE-2 - Testing Runtime Integrity Checks" url="https://mas.owasp.org/MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0050/"/>
          </references>
          <standards>
            <standard ref="M8: Code Tampering" supportedStandardRef="owasp-mobile-top-10-2016"/>
            <standard ref="MASVS-RESILIENCE-2" supportedStandardRef="owasp-masvs-testing-guide"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the app is correctly signed.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.830">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="CAPEC-122-MOBILE" name="Users lose trust in the application because it requests unnecessary privileges" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="OWASP-MASVS" editable="true">
              <desc>If the mobile application requests permissions or access to components that are not
                                strictly needed by the application, then users can lose trust in the security of the
                                application with an associated impact on the trust placed in the application provider.
                            </desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.11" mitigation="20"/>
                    <countermeasure ref="MASVS-4.11" mitigation="20"/>
                    <countermeasure ref="MASVS-4.5-4.6" mitigation="20"/>
                    <countermeasure ref="MASVS-6.1" mitigation="20"/>
                    <countermeasure ref="MASVS-8.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.11" mitigation="20"/>
                <countermeasure ref="MASVS-4.11" mitigation="20"/>
                <countermeasure ref="MASVS-4.5-4.6" mitigation="20"/>
                <countermeasure ref="MASVS-6.1" mitigation="20"/>
                <countermeasure ref="MASVS-8.1" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-133" name="An attacker attempts to invoke all common switches and options to discover weaknesses" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="OWASP-MASVS" editable="true">
              <desc>An attacker attempts to invoke all common switches and options in the target
                                application for the purpose of discovering weaknesses in the target. For example, in
                                some applications, adding the --debug switch causes debugging information to be
                                displayed, which can sometimes reveal sensitive processing or configuration information
                                to an attacker.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                This attack differs from other forms of API abuse in that the attacker is blindly
                                attempting to invoke options in the hope that one of them will work rather than
                                specifically targeting a known option. Nonetheless, even if the attacker is familiar
                                with the published options of a targeted application this attack method may still be
                                fruitful as it might discover unpublicized functionality.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-215">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.3" mitigation="15"/>
                    <countermeasure ref="MASVS-7.4" mitigation="5"/>
                    <countermeasure ref="MASVS-8.2" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-489">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.4" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-656">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.13" mitigation="5"/>
                    <countermeasure ref="MASVS-2.14" mitigation="5"/>
                    <countermeasure ref="MASVS-2.3" mitigation="5"/>
                    <countermeasure ref="MASVS-5.1-5.2" mitigation="5"/>
                    <countermeasure ref="MASVS-7.9" mitigation="5"/>
                    <countermeasure ref="MASVS-8.11" mitigation="5"/>
                    <countermeasure ref="MASVS-8.13" mitigation="5"/>
                    <countermeasure ref="MASVS-8.8" mitigation="5"/>
                    <countermeasure ref="MASVS-8.9-8.12" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MEMORY-LEAKAGE">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.15" mitigation="5"/>
                    <countermeasure ref="MASVS-2.5" mitigation="5"/>
                    <countermeasure ref="MASVS-4.4" mitigation="5"/>
                  </countermeasures>
                </weakness>
                <weakness ref="OUTDATED-LIBRARIES">
                  <countermeasures>
                    <countermeasure ref="MASVS-1.9" mitigation="5"/>
                    <countermeasure ref="MASVS-5.6" mitigation="5"/>
                    <countermeasure ref="MASVS-7.5" mitigation="5"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-1.9" mitigation="5"/>
                <countermeasure ref="MASVS-2.13" mitigation="5"/>
                <countermeasure ref="MASVS-2.14" mitigation="5"/>
                <countermeasure ref="MASVS-2.15" mitigation="5"/>
                <countermeasure ref="MASVS-2.3" mitigation="5"/>
                <countermeasure ref="MASVS-2.5" mitigation="5"/>
                <countermeasure ref="MASVS-4.4" mitigation="5"/>
                <countermeasure ref="MASVS-5.1-5.2" mitigation="5"/>
                <countermeasure ref="MASVS-5.6" mitigation="5"/>
                <countermeasure ref="MASVS-7.3" mitigation="15"/>
                <countermeasure ref="MASVS-7.4" mitigation="5"/>
                <countermeasure ref="MASVS-7.5" mitigation="5"/>
                <countermeasure ref="MASVS-7.9" mitigation="5"/>
                <countermeasure ref="MASVS-8.11" mitigation="5"/>
                <countermeasure ref="MASVS-8.13" mitigation="5"/>
                <countermeasure ref="MASVS-8.2" mitigation="5"/>
                <countermeasure ref="MASVS-8.8" mitigation="5"/>
                <countermeasure ref="MASVS-8.9-8.12" mitigation="5"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-188" name="Attacker gains access to sensitive data by modifying the application's expected behavior" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="OWASP-MASVS" editable="true">
              <desc>An attacker discovers the structure, function, and composition of an object, resource,
                                or system by using a variety of analysis techniques to effectively determine how the
                                analyzed entity was constructed or operates. The goal of reverse engineering is often to
                                duplicate the function, or a part of the function, of an object in order to duplicate or
                                &amp;quot;back engineer&amp;quot; some aspect of its functioning.&amp;nbsp;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Reverse engineering techniques can be applied to mechanical objects, electronic devices,
                                or software, although the methodology and techniques involved in each type of analysis
                                differ widely. When adversaries are reverse engineering software, methodologies fall
                                into two broad categories, 'white box' and 'black box.' White box techniques involve
                                methods which can be applied to a piece of software when an executable or some other
                                compiled object can be directly subjected to analysis, revealing at least a portion of
                                its machine instructions that can be observed upon execution.
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                'Black Box' methods involve interacting with the software indirectly, in the absence of
                                the ability to measure, instrument, or analyze an executable object directly. Such
                                analysis typically involves interacting with the software at the boundaries of where the
                                software interfaces with a larger execution environment, such as input-output vectors,
                                libraries, or APIs.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="MASVS-EMULATION-TOOLS">
                  <countermeasures>
                    <countermeasure ref="MASVS-8.5" mitigation="20"/>
                    <countermeasure ref="MASVS-8.7" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="MASVS-REVERSE-ENGINEERING-TOOLS">
                  <countermeasures>
                    <countermeasure ref="MASVS-8.10" mitigation="20"/>
                    <countermeasure ref="MASVS-8.4" mitigation="20"/>
                    <countermeasure ref="MASVS-8.6" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-8.10" mitigation="20"/>
                <countermeasure ref="MASVS-8.4" mitigation="20"/>
                <countermeasure ref="MASVS-8.5" mitigation="20"/>
                <countermeasure ref="MASVS-8.6" mitigation="20"/>
                <countermeasure ref="MASVS-8.7" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="OWASP-MASVS" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-494">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.1" mitigation="34"/>
                    <countermeasure ref="MASVS-8.3" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.1" mitigation="34"/>
                <countermeasure ref="MASVS-8.3" mitigation="33"/>
                <countermeasure ref="use-analysis-static-code" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="PROVIDE MOBILE ACCESS TO SERVICES" name="Provide mobile access to services" desc="" library="OWASP-MASVS">
          <threats>
            <threat ref="7k-CWE-ErrorH" name="Attackers gain unauthorised access to the application through an error handling flaw" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="OWASP-MASVS" editable="true">
              <desc>Errors and error handling represent a class of API. Errors related to error handling
                                are so common that they deserve a special kingdom of their own. As with API Abuse, there are two ways to introduce an error-related security vulnerability: the most common
                                one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-388">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.6" mitigation="50"/>
                    <countermeasure ref="MASVS-7.7" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.6" mitigation="50"/>
                <countermeasure ref="MASVS-7.7" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ACCESS-WEBVIEW" name="Attackers gain access to the data through the WebView functionality" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="OWASP-MASVS" editable="true">
              <desc>An attacker employs forceful browsing to access portions of a website that are
                                otherwise unreachable through direct URL entry.

                                Usually, a front controller or similar design pattern is employed to protect access to
                                portions of a web application.

                                Forceful browsing enables an attacker to access information, perform privileged
                                operations and otherwise reach sections of the web application that have been improperly
                                protected.
                            </desc>
              <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-749">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.10" mitigation="25"/>
                    <countermeasure ref="MASVS-6.6" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-79">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-83">
                  <countermeasures>
                    <countermeasure ref="MASVS-6.5" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-6.10" mitigation="25"/>
                <countermeasure ref="MASVS-6.5" mitigation="25"/>
                <countermeasure ref="MASVS-6.6" mitigation="25"/>
                <countermeasure ref="MASVS-6.7" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="OWASP-MASVS" editable="true">
              <desc>&lt;p&gt;In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web-apps. In cases in which the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker could potentially access resources that should only be available to users of a higher privilege level, or access management sections of the application, or can run queries for data that he is otherwise not supposed to.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-732">
                  <countermeasures>
                    <countermeasure ref="MASVS-2.6" mitigation="25"/>
                    <countermeasure ref="MASVS-4.1" mitigation="25"/>
                    <countermeasure ref="MASVS-4.12" mitigation="25"/>
                    <countermeasure ref="MASVS-4.9" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-2.6" mitigation="25"/>
                <countermeasure ref="MASVS-4.1" mitigation="25"/>
                <countermeasure ref="MASVS-4.12" mitigation="25"/>
                <countermeasure ref="MASVS-4.9" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-100" name="Attackers gain unauthorised access to the application through buffer overflow flaws" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="OWASP-MASVS" editable="true">
              <desc>Buffer Overflow attacks target improper or missing bounds checking on buffer
                                operations, typically triggered by input injected by an attacker. As a consequence, an
                                attacker is able to write past the boundaries of allocated buffer regions in memory,
                                causing a program crash or potentially redirection of execution as per the attackers'
                                choice.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="1" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-120">
                  <countermeasures>
                    <countermeasure ref="MASVS-7.8" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="MASVS-7.8" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ed3fd291-8617-400e-8456-48732dea798a" diagramComponentId="a65e8be1-f8eb-429f-9800-f5da57963cf0" ref="c12eee51-c7b4-4b58-807f-367e3d97861a" name="Reset Password" desc="" library="IR-Functional-Components" parentComponentRef="13a37286-a00d-4b30-956c-a1b4b032a40c" componentDefinitionRef="CD-RESET-PASSWORD">
      <tags/>
      <questions>
        <question ref="fc.answer.reset.password.logging.features.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.reset.password.object.serialization.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.reset.password.prepared.statements.implemented" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.reset.password.rate.limiting.unsure" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.reset.password.validate.file.format.not.applicable" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="C-REFERRER-POLICY-RESET-PASSWORD" name="Consider using a Referrer-Policy HTTP header for the reset password page" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If you use URL tokens to reset password, ensure that the reset password page adds the Referrer Policy tag with the noreferrer value in order to avoid referrer leakage.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Forgot Password Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"/>
            <reference name="Testing for Weak Password Change or Reset Functionalities" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check the application configuration to verify if the Referrer header is configured&lt;/li&gt;&lt;li&gt;Check the traffic on the password reset functionality and verify the headers&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:56.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-598" name="Ensure no sensitive data is sent in the URL" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed in the URL (address bar) between client and server is likely to be exposed in logs on the server, or intermediate devices (such as proxies or other network devices), or in local browser logs/history. A common mistake is, for example, to pass a SessionID value as a parameter in the URL of a get request between hosts. To mitigate the risk of exposure of sensitive data, this sensitive data should only be sent in the body of an HTTP message (for example a POST request), or in the HTTP headers (i.e. standard headers such as the Cookie values, or a custom X- header).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure sensitive, private, or otherwise restricted data is not sent in a URL value.&lt;/li&gt;&lt;li&gt;Pass sensitive data only in appropriately protected fields in the body or headers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Sensitive Data Exposure" url="https://pwning.owasp-juice.shop/part2/sensitive-data-exposure.html"/>
          </references>
          <standards>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="A02:2021-Cryptographic Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A3:2017-Sensitive Data Exposure" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy.&lt;/li&gt;
                            &lt;li&gt;Programmatically or manually visit all authenticated content and functionality
                            within the application.&lt;/li&gt;
                            &lt;li&gt;Review logs to determine if sensitive data is sent in the URL at any point. If
                            should only be sent in HTTP headers (i.e. a cookie) or as part of the body (e.g. in a POST
                            or PUT request).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:55.944">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.1" name="Ensure sensitive data is not revealed through error output messages" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the application does not output error messages or stack traces containing sensitive
                        data that could assist an attacker, including the session id, software/framework versions and
                        personal information.</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
          </references>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application does not output error massages or stack traces containing sensitive data.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:55.231">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="44" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:55.603">
              <output/>
            </source>
            <references>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from untrusted data in logs" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:55.601">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For API rate limiting there are several methods that can be applied:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Throttling: based on certain rules a request can be slowed down considerably to allow other requests to be served first&lt;/li&gt;&lt;li&gt;Request queues: limit the number of request in a given period of time (e.g. five requests per second)&lt;/li&gt;&lt;li&gt;Token bucket: commonly used in public APIs, each user has a number of tokens to call the API. After all tokens have been used the user has to wait until the number of tokens are renewed&lt;/li&gt;&lt;li&gt;Fixed window: requests that exceed a fixed limit in a period of time will be blocked temporarily&lt;/li&gt;&lt;li&gt;Leaky bucket: requests are put in a FIFO queue and will be served accordingly&lt;/li&gt;&lt;li&gt;Sliding log: a time-stamped log is used to identify user actions, so the rate limit can be applied for a specified user to avoid more than X actions in a period of time&lt;/li&gt;&lt;li&gt;Sliding window: combination of fixed window and sliding log&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a user perspective, implementing timeouts and calling paginated endpoints can reduce the impact of having a very large response that can freeze the system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API4:2023-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like THC-Hydra, OWASP ZAP or Burp Suite to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:55.232">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-password-recovery" name="Implement Secure Password Recovery Mechanism" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;It is common for an application to have a mechanism for a user to gain access to their account in the event they forget their password. A good design workflow for a password recovery feature will use multi-factor authentication elements. For example, it may ask a security question - something they know, and then send a generated token to a device - something they own.&lt;/p&gt;&lt;p&gt;To get this control in our approach, we have to abide by the following steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Send a Token Over a Protected Side-Channel: &lt;/strong&gt;Send a multi-factor token challenge with a randomly-generated code longer than 6 characters (containing both letters and numbers), by a secure channel, such TLS and&amp;nbsp;valid for a specific time period (no longer than 20 minutes) or until the password is successfully reset.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Allow user to change password in the existing session:&lt;/strong&gt; Display a simple HTML form with one input field for the code, one for the new password, and one to confirm the new password. Verify the correct code is provided and be sure to enforce all password complexity requirements that exist in other areas of the application. Avoid sending the username as a parameter when the form is submitted.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Notify user: &amp;nbsp;&lt;/strong&gt;Ensure the application notifies the user, when the password is changed.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Logging:&lt;/strong&gt; It is important to keep audit records when password change requests are submitted, when reset messages were sent to users and when users utilize them. It is especially important to log failed attempts to answer security questions and failed attempted use of expired tokens. This data can be used to detect abuse and malicious behavior. Data such as time, IP address, and browser information can be used to spot trends of suspicious use.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Other Considerations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Whenever a successful password reset occurs, all other sessions should be invalidated.&lt;/li&gt;&lt;li&gt;Strength of the questions used for password reset should vary based on the nature of the credentials. Administrator credentials should have a higher requirement.&lt;/li&gt;&lt;li&gt;The ideal implementation should rotate the questions asked in order to avoid automation.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Owasp CheatSheetSeries: Forgot Password" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Forgot_Password_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.5.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.5.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.5.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.5.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="6.1.2.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A.3" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check the recovery secret code is not sent in clear text to the user.&lt;/li&gt;&lt;li&gt;Check that&amp;nbsp;password hints or secret questions are not present.&lt;/li&gt;&lt;li&gt;Check that&amp;nbsp;password credential recovery does not reveal the current password in any way..&lt;/li&gt;&lt;li&gt;Check that the user is notified, when&amp;nbsp;an authentication factor is changed or replaced.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:56.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="49" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:55.232">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-DELETE-SESSIONS-MENU" name="Offer to destroy all active sessions when users change their password" issueId="" issueLink="" platform="" cost="0" risk="49" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID must be renewed or regenerated by the web application after any privilege level change within the associated user session. The most common scenario where the session ID regeneration is mandatory is during the authentication process, as the privilege level of the user changes from the unauthenticated (or anonymous) state to the authenticated state though in some cases still not yet the authorized state.&lt;/p&gt;&lt;p&gt;Common scenarios to consider include; password changes, permission changes, or switching from a regular user role to an administrator role within the web application. For all sensitive pages of the web application, any previous session IDs must be ignored, only the current session ID must be assigned to every new request received for the protected resource, and the old or previous session ID must be destroyed.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;The most common web development frameworks provide session functions and methods to renew the session ID, such as request.getSession(true) &amp;amp; HttpSession.invalidate() (J2EE), Session.Abandon() &amp;amp; Response.Cookies.Add(new...) (ASP .NET), or session_start() &amp;amp; session_regenerate_id(true) (PHP).&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:56.432">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-OTP-BRUTE-FORCE" name="Prevent brute force attacks" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement appropriate protection to prevent users from brute-forcing token generation and token checking with mechanisms such as rate limiting or CAPTCHA. And remember that OTP length must be at least 6 characters long and a combination of different characters (not only numbers, not only letters, ...).&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Protect Against Automated Attacks" url="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#protect-against-automated-attacks"/>
          </references>
          <standards>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if there is any captcha enabled and investigate if making continuous requests with an automated tool like Burp it is still accepting the request and generating or checking OTPs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:56.191">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-OTP-INVALID" name="Prevent old or used OTPs from being reused by invalidating them" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;One-time passwords (OTP) are secrets used during operations that need added security or as part of user enrollment processes. Despite their short lifespan, only one OTP should be valid at any given time, and therefore, all previous OTPs should be invalidated whenever a new one is generated or after the OTP has expired.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Forgot Password Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"/>
            <reference name="Invalidate Previous OTPs" url="https://docs.fluidattacks.com/criteria/requirements/347"/>
          </references>
          <standards>
            <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Request an OTP and try to use it a couple of times. Verify that the OTP cannot be used twice or more.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:56.192">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="pseudo-random-number-generator" name="Use a cryptographically secure pseudo-random number generator" issueId="" issueLink="" platform="" cost="0" risk="39" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use a well-vetted algorithm that is currently considered to be strong and secure by experts in the field and ensure well-tested implementation with adequate length seeds. In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in a security-sensitive context.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Ensure that all random numbers, especially those used for cryptographic parameters (keys, IV's, MAC tags), random file names, random GUIDs, and random strings are generated in a cryptographically strong fashion.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Ensure that random algorithms are seeded with sufficient entropy, containing at least 112 bits of entropy (typically a six digit random number is sufficient).&amp;nbsp; If less than 112 bits of entropy, ensure salting with a unique and random 32-bit salt and hashed with an approved one-way hash.&lt;/p&gt;&lt;p&gt;Use a secure pseudo-random number generator ensuring it leverages an appropriate length seed. The recommendation by FIPS 140-2 is 256-bit seed.&lt;/p&gt;&lt;p&gt;Ensure that the challenge nonce was generated with at least 64 bits and it is unique over the lifetime of the cryptographic device.&lt;/p&gt;&lt;p&gt;Tools like NIST RNG Test tool (as used in PCI PTS Derived Test Requirements) can be used to comprehensively assess the quality of a Random Number Generator by reading e.g. 128MB of data from the RNG source and then assessing its randomness properties with the tool.&amp;nbsp;&lt;/p&gt;&lt;p&gt;The following libraries are considered weak random numbers generators and should not be used.&amp;nbsp;&lt;/p&gt;&lt;p&gt;C library: random(), rand() instead use getrandom(2)&amp;nbsp;&lt;/p&gt;&lt;p&gt;Java library: java.util.Random() instead use java.security.SecureRandom&lt;/p&gt;&lt;p&gt;For secure random number generation, refer to NIST SP 800-90A. CTR-DRBG, HASH-DRBG, HMAC-DRBG. Refer to NIST SP800-22 A Statistical Test Suite for Random and Pseudorandom Number Generators for Cryptographic Applications, and the testing toolkit.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST Security Policies for Random and Pseudorandom Number Generators for Cryptographic Applications" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-22r1a.pdf"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
          </references>
          <standards>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="2.7.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.7.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.7.2" supportedStandardRef="nist-800-63"/>
            <standard ref="6.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt;&lt;span style="font-size: 11pt; font-family: Arial; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Check that an adequately strong algorithm is used to generate random values, and that those random values are of a minimum 256-bit seed.&lt;/span&gt;&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:56.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-MFA-FOR-PASSWORD-RECOVERY" name="Use MFA to implement a secure self-service password recovery process" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Multi-factor authentication can be used as a safe method to recover a lost password.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Go to the Recover password functionality of the application&lt;/li&gt;&lt;li&gt;Follow the necessary steps until a MFA process shows up&lt;/li&gt;&lt;li&gt;Check that the MFA process works successfully&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:56.432">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="44" state="Implemented" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:55.602">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:55.603">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="FILE-DATA-CHECK" name="Validate the file format before processing" issueId="" issueLink="" platform="" cost="1" risk="44" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or otherwise manipulating benign files with malicious content. As with client-side data, the application should screen uploaded content before processing it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;File contents and file-system path data must be checked for safety.&lt;/li&gt;&lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when validating filenames.&lt;/li&gt;&lt;li&gt;Verify the MIME type is correct and appropriate, and matches content.&lt;/li&gt;&lt;li&gt;Files with an structured format should be checked against the expected format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: XXE" url="https://pwning.owasp-juice.shop/part2/xxe.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A4:2017-XML External Entities (XXE)" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify structured data being processed by your component which is coming from untrusted sources.&lt;/li&gt;&lt;li&gt;Check there is a validation method for the format and the structure.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Examples of this is to check JSON against a JSON schema, XML against an XSD or a DTD, or checking that a received file which is purported to be an image is actually an image.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:55.603">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-37-SENSITIVE-DATA-URL" name="Sensitive data is compromised through query parameters in the URL" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Regardless of using encryption, the following URL will expose information in the locations detailed below:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;https://vulnerablehost.com/authuser?user=bob&amp;amp;authz_token=1234&amp;amp;expire=1500000000&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The parameter values for user, authz_token, and expire will be exposed in the following locations when using HTTP or HTTPS:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Referer Header&lt;/li&gt;&lt;li&gt;Web Logs&lt;/li&gt;&lt;li&gt;Shared Systems&lt;/li&gt;&lt;li&gt;Browser History&lt;/li&gt;&lt;li&gt;Browser Cache&lt;/li&gt;&lt;li&gt;Shoulder Surfing&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="CWE-598" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-112-OTP-GENERATION-ABUSE" name="An attacker can send a lot of OTP requests to increase the likelihood of matching one of the generated codes in a later brute force attack" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;For example, in a password reset functionality based on the delivery of a code by email or SMS to the user, an attacker can send a lot of requests to it, generating a lot of valid codes with the goal of increasing the chances of matching the code in a brute force attack. The attack takes place in the following steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Automation of requests to the password reset functionality (new codes don't invalidate older ones).&lt;/li&gt;&lt;li&gt;Creation of a custom dictionary to try to match valid codes (e.g.: if a code has only 5 numbers, the dictionary is as follows: [00000, 00001,..., 99999]).&lt;/li&gt;&lt;li&gt;Brute force attack on the functionality to check the OTP and find a match.&lt;/li&gt;&lt;li&gt;Once the attacker knows a valid code he/she can proceed with the password change.&lt;/li&gt;&lt;/ol&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-OTP-BRUTE-FORCE" mitigation="50"/>
                <countermeasure ref="C-OTP-INVALID" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-59-BRUTE-FORCE-TOKENS" name="Attackers may attempt to detect patterns in the password reset tokens and try all possible combinations of letters and numbers" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If tokens are generated based on known values, such as by taking the MD5 hash of the user's email with md5($email), an attacker will be able to generate password reset tokens for any account to compromise any account.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="pseudo-random-number-generator" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115-PASS-RESET-BYPASS" name="Attackers can bypass the change password process using a less hardened alternative for accessing the system" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;The password reset process provides an alternative mechanism to access a user's account, and so should be at least as secure as the usual authentication process. However, it can provide an easier way to compromise the account, especially if it uses weaker authentication factors such as security questions.&lt;/p&gt;&lt;p&gt;The majority of pre-generated security questions are fairly simplistic in nature and can lead to insecure answers. For example:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The answers may be known to family members or close friends of the user, e.g. "What is your mother's maiden name?", "What is your date of birth?".&lt;/li&gt;&lt;li&gt;The answers may be easily guessable, e.g. "What is your favorite color?", "What is your favorite baseball team?".&lt;/li&gt;&lt;li&gt;The answers may be brute forcible, e.g. "What is the first name of your favorite high school teacher?" - the answer is probably on some easily downloadable lists of popular first names, and therefore a simple brute force attack can be scripted.&lt;/li&gt;&lt;li&gt;The answers may be publicly discoverable, e.g. "What is your favorite movie?" - the answer may easily be found on the user's social media profile page.&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-MFA-FOR-PASSWORD-RECOVERY" mitigation="50"/>
                <countermeasure ref="secure-password-recovery" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-131-REFERRER-TOKEN" name="A potential attacker that manages an external site can access the password reset token for an account inspecting the HTTP Referrer header" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If the page that the user is taken to includes content from other parties (such as loading scripts from other domains), then the reset token in the URL may be exposed in the HTTP Referer header sent in these requests.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-REFERRER-POLICY-RESET-PASSWORD" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-114-CRED-CHANGE" name="An attacker abuses the password change functionallity to change the password of other users without knowing their credentials" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Example 1 (password change):&lt;/p&gt;&lt;p&gt;Step 1. An attacker logs in with their account and go to the change password function.&lt;/p&gt;&lt;p&gt;Step 2. The attacker uses an HTTP proxy to intercept the request.&lt;/p&gt;&lt;p&gt;Step 3. After intercepting the request, they modify the user ID of the request and they update it to the victim user ID. If the server process sucessfully this request the attacker was able to change the password of the user ID account to one of their election.&lt;/p&gt;&lt;p&gt;Example 2 (password reset):&lt;/p&gt;&lt;p&gt;Step 1. An attacker does a password reset in their account.&lt;/p&gt;&lt;p&gt;Step 2. The attacker receives the password reset link and this includes two parameters in the URL: the user ID and the token (https://host.com/resetpassword?userid=1232&amp;amp;token=xodkdosff32eksl)&lt;/p&gt;&lt;p&gt;Step 3. The attacker copy the received URL, edit the userid parameter (victim account) and launches the request. If the server process sucessfully this request the attacker was able to reset the password of the user ID account to one of their election.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="secure-password-recovery" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-575-ENUM-USERS" name="Attackers can enumerate the existence of valid accounts in the system using error/informational messages" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If your login page has different error messages for unrecognized usernames and incorrect passwords, an attacker can write a script to submit lengthy lists of common usernames and test the response. With those results, the attacker can then infer which usernames are valid.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="security-logging" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-INJECTION" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Partly-Mitigate" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="CWE-89-PREPARED" mitigation="20"/>
                <countermeasure ref="DATA-VAL" mitigation="20"/>
                <countermeasure ref="FILE-DATA-CHECK" mitigation="20"/>
                <countermeasure ref="SER-UNTRUST" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-180-SESS-PERSISTENCE" name="Attackers keep their stolen sessions active even after the legitimate users have reset their passwords" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An attacker is able to persist their access to a victim account in the application even when the legitimate user of the account reset their password.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-DELETE-SESSIONS-MENU" mitigation="50"/>
                <countermeasure ref="security-logging" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="03b4966a-b8ed-43d3-b247-85429b55ec2f" diagramComponentId="cf2bd445-0f06-4836-857a-5b78490c97ba" ref="fc18a151-507a-4ce9-9fcb-66e09ace4125" name="Transaction Service" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="out-of-scope">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="f1a8bea1-c447-446c-9236-e8b2fa9692dc" diagramComponentId="68a26100-1613-4f3c-bd32-33e3001237be" ref="0b8c96f6-d384-46b6-8ac6-4bb4212741e3" name="User Profile" desc="" library="IR-Functional-Components" parentComponentRef="13a37286-a00d-4b30-956c-a1b4b032a40c" componentDefinitionRef="CD-USER-PROFILE">
      <tags/>
      <questions>
        <question ref="fc.answer.user.profile.access.control.centralized.implemented" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.user.profile.deny.by.default.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.user.profile.logging.features.required" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.user.profile.object.serialization.not.applicable" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.user.profile.prepared.statements.implemented" answer="true" manuallyModified="false"/>
        <question ref="fc.answer.user.profile.validate.file.format.required" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="CWE-285" name="Apply authorization checks to segregate and control access to user data" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Applications protecting sensitive or otherwise restricted resources must ensure that only appropriate and authorized users can access the application data. It is important that an application prevent unauthorized users gaining inappropriate access to each other's data. Although user A and user B may both be trusted to access data within the application, they may be only authorized to access different subsets of the protected resources.&amp;nbsp; E.g. user A should not be able to access user B's personal data by manipulating a request (typical examples are the manipulation of an ID value or other object reference sent in the URL or body of an HTTP request).&lt;/p&gt;&lt;p&gt;It is not sufficient to rely on obscurity, for example obfuscated or secret URLs or filenames. The application must validate each request for protected data against the proven identity of the user. Before providing access to restricted resources the application must:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure the user has undergone appropriate authentication (identification and verification, or ID&amp;amp;V). E.g. they must have provided their identity and confirmed this with a password, token, or other verification. Typically this is done by checking the validity of the session token issued after login.&lt;/li&gt;&lt;li&gt;Confirm the user is authorized to access the data or resource they are requesting. E.g. their confirmed identify is checked against a server-side access control matrix to determine whether they may access the requested resource.&lt;/li&gt;&lt;li&gt;Access controls should be granular and make it possible to issue to individual resources to individual users or roles.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;URL and asset based access control is provided by most web-frameworks, and it is preferable to use an established and proven framework.&lt;/p&gt;&lt;p&gt;Object-level authorization checks should be considered in every function that accesses a data source using input from the user.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Favor not using an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.&lt;/li&gt;&lt;li&gt;Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an input from the client to access a record in the database.&lt;/li&gt;&lt;li&gt;Use random and unpredictable values as GUIDs for records' IDs.&lt;/li&gt;&lt;li&gt;Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break these tests.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA CM-07 Least Functionality" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/158-08_02_CM-07"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.1" supportedStandardRef="swift-cscf"/>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="1.4" supportedStandardRef="swift-cscf"/>
            <standard ref="1.5" supportedStandardRef="swift-cscf"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="5.15" supportedStandardRef="iso-27002-2022"/>
            <standard ref="5.18" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.2" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.3" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Using two different browsers configured with an intercepting proxy:&lt;/li&gt;&lt;li&gt;Login as user A in browser A.&lt;/li&gt;&lt;li&gt;Login as user B in browser B.&lt;/li&gt;&lt;li&gt;For every operation that displays sensitive data belonging to user A:&lt;ol&gt;&lt;li&gt;Perform the operation as user A and view their sensitive data.&lt;/li&gt;&lt;li&gt;Obtain the session ID of user B.&lt;/li&gt;&lt;li&gt;Configure the proxy to intercept.&lt;/li&gt;&lt;li&gt;Perform the operation as user A again, but this time intercept all the requests and replace user A's session ID with that of user B.&lt;/li&gt;&lt;li&gt;Ensure that user A's sensitive data is &lt;strong&gt;not &lt;/strong&gt;visible.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To ensure object-level authorization checks are in place:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Map out all locations in the application in which user input is used to reference objects directly. For example, locations where user input is used to access a database row, a file, application page, etc.&lt;/li&gt;&lt;li&gt;Modify the value of the parameter used to reference objects to see if the application raises an authorization error.&lt;/li&gt;&lt;li&gt;Assess whether it is possible to retrieve objects belonging to other users or otherwise bypass authorization.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.962">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="deny-default-enf" name="Assure that the principle of deny by default exists for new users/roles" issueId="" issueLink="" platform="" cost="1" risk="48" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Deny by default is the principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny by default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C7]: Enforce Access Controls" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"/>
          </references>
          <standards>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.963">
              <output/>
            </source>
            <references>
              <reference name="Testing for Bypassing Authorization Schema (OTG-AUTHZ-002)" url="https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)"/>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-USER-INTERACTION-BASED-PROTECTION" name="Consider implementing user interaction based protection for highly sensitive operations" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implementing user interaction based protection is one of the principles that should be followed to defend against Cross-Site Request Forgery (CSRF). CSRF is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated.&lt;/p&gt;&lt;p&gt;While other techniques do not require any user interaction, sometimes it's easier or more appropriate to involve the user in the transaction to prevent unauthorized operations. The following are some examples of techniques that can act as strong CSRF defense when implemented correctly.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Authorization mechanism&lt;/li&gt;&lt;li&gt;One-time Token&lt;/li&gt;&lt;li&gt;CAPTCHA&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if the post requests are using CSRF token or captcha.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.321">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-CSP" name="Define a restrictive 'least privilege' Content Security Policy" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Content-Security-Policy instructs compliant browsers on how they may interact with external sites while in the current context. This enables the server to control interactive code and content from third parties, mitigating some client-side code injection attacks. The policy allows the server to specify what connections are permitted for each type of resource.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example, the following policy tells the browser to allow connections (including websockets) to the same domain to which the page was served: *.iriusrisk.com.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src 'self' wss://*.iriusrisk.com; img-src 'self' data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define and set a Content-Security-Policy with least-privileges to allow only those interactions which are explicitly required.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to determine if a&amp;nbsp;&lt;i&gt;Content-Security-Policy&amp;nbsp;&lt;/i&gt;header is returned, and if so, that it follows the security practice of least-privilege.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component end-points.&lt;/li&gt;&lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite):&lt;ul&gt;&lt;li&gt;Browse the site through the proxy.&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For more information on &lt;i&gt;Content-Security-Policy&lt;/i&gt; policy setup, see:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.355">
              <output/>
            </source>
            <references>
              <reference name="Mozilla Developer Documentation - CSP" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AVOID-GET-SENSITIVE-OPERATIONS" name="Do not use GET requests for state changing operations" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use GET requests to retrieve resource representation/information only - and not modify it in any way. As GET requests do not change the resource's state, these are said to be safe methods.&lt;/p&gt;&lt;p&gt;Additionally, GET APIs should be idempotent. Making multiple identical requests must produce the same result every time until another API (POST or PUT) has changed the state of the resource on the server.&lt;/p&gt;&lt;p&gt;If the Request-URI refers to a data-producing process, it is the produced data that shall be returned as the entity in the response and not the source text of the process, unless that text happens to be the output of the process.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTTP Methods" url="https://restfulapi.net/http-methods/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Validate all GET controller methods and ensure that they don't modify the state of the server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.320">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.&lt;/p&gt;&lt;p&gt;One of the ways to enforce this is by following the deny-by-default principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny-by-default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.963">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" name="Ensure that access control mechanisms are centralized" issueId="" issueLink="" platform="" cost="0" risk="48" state="Implemented" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Access control, authentication and authorization procedures should be centralized, and all roles, permissions, groups and users shall be controlled - or gain access - through this mechanism.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To ensure roles, groups and permissions are assigned properly to users, we need to have centralized access control, to grant or deny access easily and securely.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that access control mechanisms are centralized.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.960">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="FEAT-ACC-CTRL" name="Ensure that attribute or feature-based access control is used" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that attribute or feature-based access control is used whereby the code checks the user's authorization for a feature/data item rather than just their role. Permissions should still be allocated using roles.
&lt;br /&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.963">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="44" state="N/A" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.613">
              <output/>
            </source>
            <references>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from untrusted data in logs" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.611">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="46" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.321">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CDS-USER-TRACK" name="Log details of user actions within the system" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To maintain proper accountability, logs should be maintained with sufficient
                        information to track user actions within the system. These logs should be forensically sound,
                        non-repudiable, and contain comprehensive details about activity. While the exact data for an
                        event may vary, the following should be captured at a minimum:&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Timestamps against a proven external source (e.g. an NTP server).&lt;/li&gt;
                        &lt;li&gt;Origin (with this field we mark if the logs are provided by a trusted or untrusted
                        source).&lt;/li&gt;
                        &lt;li&gt;Event, status, and/or&amp;nbsp;error codes (with sensitive data masked as appropriate
                        or not introduced in logs).&lt;/li&gt;
                        &lt;li&gt;Service, command, application or function name and details.&lt;/li&gt;
                        &lt;li&gt;User or system account associated with an event.&lt;/li&gt;
                        &lt;li&gt;Devices used (e.g. source and destination IPs, terminal session ID, web browser, etc.).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        Source:&amp;nbsp;&amp;nbsp;
                        &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA AU-10 Non-Repudiation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/179-08_02_AU-10"/>
            <reference name="OSA CA-07 Continuous Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/166-08_02_CA-07"/>
            <reference name="OSA IR-05 Incident Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/139-08_02_IR-05"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(a)(1)(A)" supportedStandardRef="hipaa-required"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.17" supportedStandardRef="iso-27002-2022"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.15" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.24" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.32" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AU-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Perform several different actions on the service.&lt;/li&gt;&lt;li&gt;Inspect the log files to see if the format and content complies with the company policy.&lt;/li&gt;&lt;li&gt;If there is no company policy, check that at least the following data is included: timestamp event, status, error codes, service/command/application username or system account associated with an eventDevice used (e.g. source and destination IPs, terminal session ID, web browser, etc).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Source:&amp;nbsp;&lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt; https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.962">
              <output/>
            </source>
            <references>
              <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. A token/identifier that is not accessible to the attacker is needed to mitigate this and would not be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For maximum security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on the server-side is problematic, an alternative defense is to use the double-submit cookie technique. This technique is easy to implement and is stateless. In this technique, a random value is sent in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudo random value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudo-random value as a hidden form value (or other request parameter/header). If both of them match on the server-side, the server accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely on examining an HTTP request header value. Firstly, determining the origin the request is coming from (source origin). This can be achieved via Origin and/or referer headers. Secondly, determining the origin the request is going to (target origin). On the server-side verify if both of these match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, discard the request (meaning that the request originated from a cross-domain). Reliability of these headers comes from the fact they cannot be altered programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.- Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:53.321">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="excessive-permissions" name="Request only the minimum required permissions" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Security best practices dictate that the practice of least-privilege be followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
  Request only the minimum required permissions. For example, if there is no requirement to use the camera then the application should not request this permission.
&lt;/div&gt;
&lt;div&gt;
  Review features and functionalities present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them along with associated OS permissions.
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that the application only requests the necessary permissions to work correctly.
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.963">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="44" state="Implemented" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.612">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.612">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="FILE-DATA-CHECK" name="Validate the file format before processing" issueId="" issueLink="" platform="" cost="1" risk="44" state="Required" owner="fscott-admin" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="RULES" priority="">
          <desc>&lt;p&gt;Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or otherwise manipulating benign files with malicious content. As with client-side data, the application should screen uploaded content before processing it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;File contents and file-system path data must be checked for safety.&lt;/li&gt;&lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when validating filenames.&lt;/li&gt;&lt;li&gt;Verify the MIME type is correct and appropriate, and matches content.&lt;/li&gt;&lt;li&gt;Files with an structured format should be checked against the expected format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: XXE" url="https://pwning.owasp-juice.shop/part2/xxe.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A4:2017-XML External Entities (XXE)" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify structured data being processed by your component which is coming from untrusted sources.&lt;/li&gt;&lt;li&gt;Check there is a validation method for the format and the structure.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Examples of this is to check JSON against a JSON schema, XML against an XSD or a DTD, or checking that a received file which is purported to be an image is actually an image.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-10T10:30:52.612">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-103-CLICKJACKING" name="An attacker uses multiple transparent or opaque layers to trick a user into clicking on a button or link on another page when they were intending to click on the top level page" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;For example, imagine an attacker who builds a web site that has a button on it that says "click here for a free iPod". However, on top of that web page, the attacker has loaded an iframe with your mail account, and lined up exactly the "delete all messages" button directly on top of the "free iPod" button. The victim tries to click on the "free iPod" button but instead actually clicked on the invisible "delete all messages" button. In essence, the attacker has "hijacked" the user's click, hence the name "Clickjacking".&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="WEB-CSP" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-INJECTION" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Partly-Mitigate" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="CWE-89-PREPARED" mitigation="20"/>
                <countermeasure ref="DATA-VAL" mitigation="20"/>
                <countermeasure ref="FILE-DATA-CHECK" mitigation="20"/>
                <countermeasure ref="SER-UNTRUST" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-180-BROKEN-ACCESS-CONTROL" name="An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the application" state="Partly-Mitigate" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An Access Control functionality often spans many areas of software depending on the complexity of the access control system. For example, managing access control metadata or building caching for scalability purposes are often additional components in an access control system that need to be built or managed. Vulnerabilities appear when a user is able to successfully request access to something they usually shouldn't have access to. Oftentimes this is found when the authorization is not implemented properly. A typical example would be a certain endpoint on a website that throws a 403 forbidden error which is then bypassed by adding an X-Forwarded-For: "127.0.0.1" header.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1574.010" url="https://attack.mitre.org/techniques/T1574/010"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" mitigation="14"/>
                <countermeasure ref="CDS-USER-TRACK" mitigation="14"/>
                <countermeasure ref="CWE-285" mitigation="16"/>
                <countermeasure ref="FEAT-ACC-CTRL" mitigation="14"/>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="14"/>
                <countermeasure ref="deny-default-enf" mitigation="14"/>
                <countermeasure ref="excessive-permissions" mitigation="14"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-50-MALICIOUS-PROFILE-UPDATE" name="An attacker can force users to update their profile without noticing it" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. This attack could allow an attacker to change one's account information (for example the "Name " or "Adress" attributes) without having to login to victim account or without having to login but only by using CSRF technique.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-AVOID-GET-SENSITIVE-OPERATIONS" mitigation="25"/>
                <countermeasure ref="C-USER-INTERACTION-BASED-PROTECTION" mitigation="25"/>
                <countermeasure ref="cwe-352-csrf" mitigation="25"/>
                <countermeasure ref="security-logging" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>
