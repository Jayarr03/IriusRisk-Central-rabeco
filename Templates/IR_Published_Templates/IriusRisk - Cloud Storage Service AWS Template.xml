<?xml version="1.0" encoding="UTF-8"?>
<template ref="iriusrisk-cloud-storage-service-aws-template" name="IriusRisk - Cloud Storage Service AWS Template" tags="" modelUpdated="2024-04-17 10:58:25">
  <desc>Involves storing, accessing, and managing data over the cloud, necessitating secure data transmission and storage.</desc>
  <diagram draft="false">
    <schema></schema>
  </diagram>
  <trustZones>
    <trustZone ref="internet" uuid="f0ba7722-39b6-4c81-8290-a30a248bb8d9" name="Internet" desc="Untrusted Internet public zone" trustRating="1"/>
    <trustZone ref="public-cloud" uuid="b61d6911-338d-46a8-9f39-8dcd24abfe91" name="Public Cloud" desc="Public cloud services" trustRating="60"/>
  </trustZones>
  <questions/>
  <assets>
    <asset type="" name="Customer Data" desc="Data that uniquely identifies customers." identifier="">
      <classification name="Personally Identifiable Information" desc="&#10;                Any information relating to an identified or identifiable natural person ('Data Subject');&#10;                an identifiable person is one who can be identified, directly or indirectly,&#10;                in particular by reference to an identification number or to one or more factors specific to his&#10;                physical, physiological, mental, economic, cultural or social identity.&#10;                " confidentiality="80" integrity="80" availability="20"/>
    </asset>
    <asset type="" name="Personally Identifiable Information" desc="Any information relating to an identified or identifiable natural person &#13;&#10;('Data Subject') an identifiable person is one who can be identified, &#13;&#10;directly or indirectly, in particular by reference to an identification &#13;&#10;number or to one or more factors specific to his physical, physiological, &#13;&#10;mental, economic, cultural or social identity." identifier="">
      <classification name="Personally Identifiable Information" desc="&#10;                Any information relating to an identified or identifiable natural person ('Data Subject');&#10;                an identifiable person is one who can be identified, directly or indirectly,&#10;                in particular by reference to an identification number or to one or more factors specific to his&#10;                physical, physiological, mental, economic, cultural or social identity.&#10;                " confidentiality="80" integrity="80" availability="20"/>
    </asset>
  </assets>
  <settings/>
  <dataflows>
    <dataflow name="AWS CloudFront -&gt; AWS CloudWatch" ref="10318019-4a8c-49a7-b9cd-c76264773ef8" source="bc1c6824-9516-4f66-8cee-2066c34c07ea" target="58c935f9-4ecf-499f-9e66-65ed95852637">
      <assets/>
      <tags>
        <tag tag="object_not_found"/>
      </tags>
    </dataflow>
    <dataflow name="AWS Lambda -&gt; AWS Glacier" ref="31261cc8-4845-426d-a708-c09d4042e30d" source="e9c1a161-dfb2-44ff-ba9e-bccc4e9b5bf2" target="69b65d4e-3c92-492a-b078-083bef33419d">
      <assets/>
      <tags>
        <tag tag="trigger_restore"/>
      </tags>
    </dataflow>
    <dataflow name="AWS CloudFront -&gt; AWS S3 (Simple Storage Service)" ref="7179b2f7-7657-4a04-a575-aca5548d4b45" source="bc1c6824-9516-4f66-8cee-2066c34c07ea" target="2f86badd-0dbf-4f3b-9e42-8e973bb09a5b">
      <assets/>
      <tags>
        <tag tag="retrieve_object"/>
      </tags>
    </dataflow>
    <dataflow name="AWS CloudWatch -&gt; AWS Lambda" ref="76fc0071-d847-4ca6-8868-e2f003989cf3" source="58c935f9-4ecf-499f-9e66-65ed95852637" target="e9c1a161-dfb2-44ff-ba9e-bccc4e9b5bf2">
      <assets/>
      <tags>
        <tag tag="trigger_lambda"/>
      </tags>
    </dataflow>
    <dataflow name="User -&gt; AWS CloudFront" ref="94c3c079-cde0-42fc-8300-f078e3ea0493" source="cd051b43-00ed-41d2-9f74-f87f38795134" target="bc1c6824-9516-4f66-8cee-2066c34c07ea">
      <assets/>
      <tags>
        <tag tag="request_data"/>
      </tags>
    </dataflow>
    <dataflow name="AWS Glacier -&gt; AWS S3 (Simple Storage Service)" ref="fb319287-9cce-45fa-a6a9-6025c752745e" source="69b65d4e-3c92-492a-b078-083bef33419d" target="2f86badd-0dbf-4f3b-9e42-8e973bb09a5b">
      <assets/>
      <tags>
        <tag tag="restore_object"/>
      </tags>
    </dataflow>
  </dataflows>
  <customFields>
    <customField ref="status" value="Design"/>
  </customFields>
  <components>
    <component uuid="7d8ed541-d535-47ce-81de-6baae0465f57" diagramComponentId="7001e925-7e76-4251-ad3e-4f77c55e99e6" ref="bc1c6824-9516-4f66-8cee-2066c34c07ea" name="AWS CloudFront" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="cf-cloudfront">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-693" name="Protection Mechanism Failure" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection
                        mechanism that provides sufficient defense against directed attacks against the
                        product.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.227">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.226">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="PROOF-DOS" name="There are no proofs of a DoS" state="0" impact="100" issueId="" issueLink="">
          <desc>System is not configured to alert system administrators that a denial of service attack is happening or happened.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.225">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="aws-tier-3.12" name="Configure HTTP to HTTPS Redirects with a CloudFront Viewer Protocol Policy" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Configure the Viewer Protocol Policy for your CloudFront cache to redirect HTTP requests to HTTPS requests or to require that viewers use only the HTTPS protocol to access your objects in the CloudFront cache. You should also configure one or more cache behaviors in the same distribution to allow both HTTP and HTTPS, so you can require HTTPS for some objects but not for others. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  In order to use HTTPS, a SSL\TLS certificate must be attached. This depends on your data classification policy and needs to be configured according to your encryption policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For configuring "ViewerProtocolPolicy" first save locally the current distribution config:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Edit and replace "ViewerProtocolPolicy" element in /tmp/cf-distribution.json with the below section:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "ViewerProtocolPolicy": "redirect-to-https", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; -- distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get streaming distribution config" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-streaming-distribution-config.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Secure Connections" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="3.12" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the "ViewerProtocolPolicy" used by application Cloudfront distributions (it should be set as redirect-to-https):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, ViewerProtocolPolicy:DefaultCacheBehavior.ViewerProtocolPolicy}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.131">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.17" name="Configure TLS1.1+ for CloudFront to Origin connection" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  CloudFront can connect to your origin using only HTTP, only HTTPS, or to connect by matching the protocol used by the viewer. Our recommendation is to use HTTPS only. In 
  this case you can choose which SSL\TLS protocols CloudFront is allowed to use when 
  establishing an HTTPS connection to your origin. Ensure that you are using only TLS1.1+ as 
  the SSL\TLS protocol. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For configuring Origin SSL protocols first save locally the current distribution config:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Edit and replace "OriginSslProtocols" element in /tmp/cf-distribution.json with the below section:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "OriginSslProtocols": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    &amp;nbsp;"Items": [ 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "TLSv1.1", 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "TLSv1.2" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    ], 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Quantity": 2 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    }, 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; -- distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon Cloudfront New Origin Security Features" url="https://aws.amazon.com/about-aws/whats-new/2016/01/amazon-cloudfront-adds-new-origin-security-features/"/>
            <reference name="Get distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-distribution.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="1.17" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Check the "OriginSslProtocols" used by application Cloudfront distributions (only TLSv1.1 and TLSv1.2 should be present):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, OriginSslProtocols:Origins.Items[*].CustomOriginConfig.OriginSslProtocols.Items[*]}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.131">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.3" name="Enable AWS Cloudfront logging" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront is a web service that speeds up distribution of your static and dynamic web content, for example, .html, .css, .php, image, and media files, to end users. CloudFront delivers your content through a worldwide network of edge locations. When an end user requests content that you're serving with CloudFront, the user is routed to the edge location that provides the lowest latency, so content is delivered with the best possible performance. If the content is already in that edge location, CloudFront delivers it immediately. If the content is not currently in that edge location, CloudFront retrieves it from a customer defined Origin, such as AWS S3, AWS ELB or EC2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For enabling logging first save locally the current distribution config:&lt;/li&gt; 
 &lt;/ul&gt; 
  aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Edit and replace "Logging" element in /tmp/cf-distribution.json with the below section: "Logging": { "Bucket": "&amp;lt;s3_bucket_name&amp;gt;", "Prefix": "cloudfrontlogs", "Enabled": true, "IncludeCookies": false },&lt;/li&gt; 
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag"&lt;/li&gt; 
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; --distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get distribution config" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-distribution-config.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="5.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="5.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all Cloudfront distributions and identify your application Distribution and Origin IDs. Note the "Id:" element:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;span style="white-space:pre"&gt; &lt;/span&gt;aws cloudfront list-distributions 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Using the distribution Id from the previous step display the distribution settings, and check if the "Enabled" element is True or False:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;span style="white-space:pre"&gt; &lt;/span&gt;aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig.Logging" 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.131">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.4" name="Enable Geo-Restriction within Cloudfront Distribution" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront is a web service that speeds up distribution of your static and dynamic 
  web content, for example, .html, .css, .php, image, and media files, to end users. CloudFront 
  delivers your content through a worldwide network of edge locations. When an end user 
  requests content that you're serving with CloudFront, the user is routed to the edge 
  location that provides the lowest latency, so content is delivered with the best possible 
  performance. If the content is already in that edge location, CloudFront delivers it 
  immediately. If the content is not currently in that edge location, CloudFront retrieves it 
  from a customer defined Origin, such as AWS S3, AWS ELB or EC2. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;For enabling GeoRestrictions first save locally the current distribution config: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "DistributionConfig" &amp;gt; /tmp/cf-distribution.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Edit the GeoRestrictions section in /tmp/cf-distribution.json with the desired configuration (similar to the below sample):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    "Restrictions": { 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     "GeoRestriction": { 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt;
      "RestrictionType": "&amp;lt;blacklist|whitelist&amp;gt;", 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt;
      &amp;nbsp;"Quantity": 3, 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt;
      &amp;nbsp;"Items": ["&amp;lt;country_code_1&amp;gt;", "&amp;lt;country_code_2&amp;gt;"] 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt;
     } 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    }, 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Retrieve the current ETag of your CloudFront distribution: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront get-distribution-config --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "ETag" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Update the CloudFront distribution using the edited config and the above Etag: &lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront update-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; -- distribution-config file:///tmp/cf-distribution.json --if-match &amp;lt;application_cfn_distribution_etag&amp;gt;&amp;nbsp; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/get-distribution.html"/>
            <reference name="Update distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/update-distribution.html"/>
          </references>
          <standards>
            <standard ref="6.4" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Check if geo restrictions are enabled on your application CloudFront distribution:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     aws cloudfront get-distribution --id &amp;lt;application_cfn_distribution_id&amp;gt; --query "Distribution.DistributionConfig.Restrictions.GeoRestriction" 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.131">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-7" name="Prevent viewer requests from bypassing the CDN and accessing the origin content directly" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;When you deliver web content through a CDN such as CloudFront, a best practice is to prevent viewer requests from bypassing the CDN and accessing your origin content directly. For more information, see the blog post How to enhance Amazon CloudFront origin security with AWS WAF and AWS Secrets Manager.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
            <reference name="How to enhance Amazon CloudFront origin security with AWS WAF and AWS Secrets Manager" url="https://aws.amazon.com/blogs/security/how-to-enhance-amazon-cloudfront-origin-security-with-aws-waf-and-aws-secrets-manager/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that the CDN is not bypassed by auditing the logs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.129">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="PROOF-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.3" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-1.17" mitigation="25"/>
                    <countermeasure ref="aws-tier-3.12" mitigation="25"/>
                    <countermeasure ref="aws-tier-6.4" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-1.17" mitigation="25"/>
                <countermeasure ref="aws-tier-3.12" mitigation="25"/>
                <countermeasure ref="aws-tier-5.3" mitigation="25"/>
                <countermeasure ref="aws-tier-6.4" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-AWS-SRA-7" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ca8df89f-080c-46c5-8434-c67837c2f365" diagramComponentId="687b47ee-8551-4143-a86d-ff7e127c998a" ref="58c935f9-4ecf-499f-9e66-65ed95852637" name="AWS CloudWatch" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="cloudwatch">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.876">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-Network-5.1" name="Insufficient resource identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Resources are not registered in the safety net systems, and/or additional unidentified resources exist. As such, additional weakness might be introduced.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.875">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.874">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.875">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.875">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-CLOUDWATCH7" name="Connect to CloudWatch using Interface VPC Endpoints" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Connect to CloudWatch using Interface VPC Endpoints&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; If you use Amazon Virtual Private Cloud (Amazon VPC) to host your AWS resources, you can establish a private connection between your VPC, CloudWatch, and CloudWatch Synthetics. You can use these connections to enable CloudWatch and CloudWatch Synthetics to communicate with your resources on your VPC without going through the public internet.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Creating a VPC Endpoint for CloudWatch&lt;/p&gt; 
&lt;p&gt;To start using CloudWatch with your VPC, create an interface VPC endpoint for CloudWatch. The service name to choose is com.amazonaws.region.monitoring.&lt;/p&gt; 
&lt;p&gt;You do not need to change the settings for CloudWatch. CloudWatch calls other AWS services using either public endpoints or private interface VPC endpoints, whichever are in use. For example, if you create an interface VPC endpoint for CloudWatch, and you already have metrics flowing to CloudWatch from resources located on your VPC, these metrics begin flowing through the interface VPC endpoint by default.&lt;/p&gt; 
&lt;p&gt;Controlling Access to Your CloudWatch VPC Endpoint&lt;/p&gt; 
&lt;p&gt;A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or modify the endpoint. If you don't attach a policy when you create an endpoint, Amazon VPC attaches a default policy for you that allows full access to the service. An endpoint policy doesn't override or replace IAM user policies or service-specific policies. It's a separate policy for controlling access from the endpoint to the specified service.&lt;/p&gt; 
&lt;p&gt;Endpoint policies must be written in JSON format.&lt;/p&gt; 
&lt;p&gt;To edit the VPC endpoint policy for CloudWatch&lt;/p&gt; 
&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Endpoints.&lt;/p&gt; 
&lt;p&gt;3. If you have not already created the endpoint for CloudWatch, choose Create Endpoint. Select com.amazonaws.region.monitoring, and then choose Create endpoint.&lt;/p&gt; 
&lt;p&gt;4. Select the com.amazonaws.region.monitoring endpoint, and then choose the Policy tab.&lt;/p&gt; 
&lt;p&gt;5. Choose Edit Policy, and then make your changes.&lt;/p&gt; 
&lt;p&gt;Creating a VPC Endpoint for CloudWatch Synthetics&lt;/p&gt; 
&lt;p&gt;To start using CloudWatch Synthetics with your VPC, create an interface VPC endpoint for CloudWatch Synthetics. The service name to choose is com.amazonaws.region.synthetics. For more information, see Creating an Interface Endpoint in the Amazon VPC User Guide.&lt;/p&gt; 
&lt;p&gt;You do not need to change the settings for CloudWatch Synthetics. CloudWatch Synthetics communicates with other AWS services using either public endpoints or private interface VPC endpoints, whichever are in use. For example, if you create an interface VPC endpoint for CloudWatch Synthetics, and you already have an interface endpoint for Amazon S3, CloudWatch Synthetics begins communicating with Amazon S3 through the interface VPC endpoint by default.&lt;/p&gt; 
&lt;p&gt;Controlling Access to Your CloudWatch Synthetics VPC Endpoint&lt;/p&gt; 
&lt;p&gt;A VPC endpoint policy is an IAM resource policy that you attach to an endpoint when you create or modify the endpoint. If you don't attach a policy when you create an endpoint, we attach a default policy for you that allows full access to the service. An endpoint policy doesn't override or replace IAM user policies or service-specific policies. It's a separate policy for controlling access from the endpoint to the specified service.&lt;/p&gt; 
&lt;p&gt;Endpoint policies must be written in JSON format.&lt;/p&gt; 
&lt;p&gt;To edit the VPC endpoint policy for CloudWatch Synthetics&lt;/p&gt; 
&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Endpoints.&lt;/p&gt; 
&lt;p&gt;3. If you have not already created the endpoint for CloudWatch Synthetics, choose Create Endpoint. Select com.amazonaws.region.synthetics and then choose Create endpoint.&lt;/p&gt; 
&lt;p&gt;4. Select the com.amazonaws.region.synthetics endpoint and then choose the Policy tab.&lt;/p&gt; 
&lt;p&gt;5. Choose Edit Policy, and then make your changes.&lt;/p&gt; 
&lt;p&gt;The following are the general steps for setting up an interface endpoint:&lt;/p&gt; 
&lt;p&gt;1. Choose the VPC in which to create the interface endpoint, and provide the name of the AWS service, endpoint service, or AWS Marketplace service to which you're connecting.&lt;/p&gt; 
&lt;p&gt;2. Choose a subnet in your VPC to use the interface endpoint. We create an endpoint network interface in the subnet. You can specify more than one subnet in different Availability Zones (as supported by the service) to help ensure that your interface endpoint is resilient to Availability Zone failures. In that case, we create an endpoint network interface in each subnet that you specify.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; An endpoint network interface is a requester-managed network interface. You can view it in your account, but you cannot manage it yourself. For more information, see Elastic Network Interfaces.&lt;/p&gt; 
&lt;p&gt;3. Specify the security groups to associate with the endpoint network interface. The security group rules control the traffic to the endpoint network interface from resources in your VPC. If you do not specify a security group, we associate the default security group for the VPC.&lt;/p&gt; 
&lt;p&gt;4. (Optional, AWS services and AWS Marketplace Partner services only) Enable private DNS for the endpoint to enable you to make requests to the service using its default DNS hostname.&lt;/p&gt; 
&lt;p&gt;Important&lt;br&gt; Private DNS is enabled by default for endpoints created for AWS services and AWS Marketplace Partner services.&lt;/p&gt; 
&lt;p&gt;Private DNS is enabled in the other subnets which are in the same VPC and Availability Zone or Local Zone.&lt;/p&gt; 
&lt;p&gt;5. When the service provider and the consumer are in different accounts, see Interface endpoint Availability Zone considerations for information about how to use Availability Zone IDs to identify the interface endpoint Availability Zone.&lt;/p&gt; 
&lt;p&gt;6. After you create the interface endpoint, it's available to use when it's accepted by the service provider. The service provider must configure the service to accept requests automatically or manually. AWS services and AWS Marketplace services generally accept all endpoint requests automatically.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using CloudWatch and CloudWatch Synthetics with Interface VPC Endpoints" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-and-interface-VPC.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Viewing your interface endpoint&lt;br /&gt;
After you've created an interface endpoint, you can view information about it using the Console or the Command line.&lt;/p&gt;

	&lt;p&gt;To view information about an interface endpoint using the console:&lt;/p&gt;

	&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Endpoints and select your interface endpoint.&lt;/p&gt;

	&lt;p&gt;3. To view information about the interface endpoint, choose Details. The DNS Names field displays the DNS names to use to access the service.&lt;/p&gt;

	&lt;p&gt;4. To view the subnets in which the interface endpoint has been created, and the ID of the endpoint network interface in each subnet, choose Subnets.&lt;/p&gt;

	&lt;p&gt;5. To view the security groups that are associated with the endpoint network interface, choose Security Groups.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.784">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDWATCH1" name="Control access to Amazon CloudWatch resources" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Control access to Amazon CloudWatch resources&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Every AWS resource is owned by an AWS account, and permissions to create or access a resource are governed by permissions policies. An account administrator can attach permissions policies to IAM identities (that is, users, groups, and roles), and some services (such as AWS Lambda) also support attaching permissions policies to resources.&lt;br&gt; Policies attached to an IAM identity are referred to as identity-based policies (IAM policies) and policies attached to a resource are referred to as resource-based policies. CloudWatch supports only identity-based policies.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following shows an example of a permissions policy.&lt;/p&gt; 
&lt;p&gt;{ "Version": "2012-10-17", &lt;a&gt;Statement&lt;/a&gt; &lt;a&gt;Effect&lt;/a&gt;"Allow", &lt;a&gt;Action&lt;/a&gt;"cloudwatch:GetMetricStatistics","cloudwatch:ListMetrics"], &lt;a&gt;Resource&lt;/a&gt;"*", &lt;a&gt;Condition&lt;/a&gt; &lt;a&gt;Bool&lt;/a&gt; &lt;a&gt;aws:SecureTransport&lt;/a&gt;"true" } } } ]&lt;br&gt; }&lt;/p&gt; 
&lt;p&gt;This sample policy has one statement that grants permissions to a group for two CloudWatch actions (cloudwatch:GetMetricStatistics, and cloudwatch:ListMetrics), but only if the group uses SSL with the request (&lt;a&gt;aws:SecureTransport&lt;/a&gt;"true").&lt;/p&gt; 
&lt;p&gt;For further information please see Reference URLs.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Overview of Managing Access Permissions to Your CloudWatch Resources" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/iam-access-control-overview-cw.html"/>
            <reference name="Sharing CloudWatch Dashboards" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-dashboard-sharing.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for CloudWatch" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/iam-identity-based-access-control-cw.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.782">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-4.1" name="Create a SNS topic for sending out notifications from Cloudwatch Alarms" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  For the Cloudwatch alarms and Auto-Scaling Groups to be able to send out notifications, a SNS topic should be created. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Amazon Simple Notification Service (Amazon SNS) is a web service that coordinates and manages the delivery or sending of messages to subscribing endpoints or clients. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  When using Amazon SNS, you (as the owner) create a topic and control access to it by defining policies that determine which publishers and subscribers can communicate with the topic. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Cloudwatch alarms and certain actions inside Auto-Scaling Groups needs to be sent out to administrators, in order to be acted upon. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Using the Amazon unified CLI: 
 &lt;/div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a new topic, and note the topic-arn value:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws sns create-topic --name &amp;lt;sns_topic_name&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Create a subscription to the new topic:&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div style=""&gt;
     aws sns subscribe --topic-arn &amp;lt;sns_topic_arn&amp;gt; --protocol &amp;lt;protocol_for_sns&amp;gt; --notification-endpoint &amp;lt;sns_subscription_endpoints&amp;gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon docs: sns get topic attributes" url="https://docs.aws.amazon.com/cli/latest/reference/sns/get-topic-attributes.html"/>
            <reference name="Amazon docs: sns list subscriptions by topic" url="https://docs.aws.amazon.com/cli/latest/reference/sns/list-subscriptions-by-topic.html"/>
            <reference name="Amazon docs: sns set topic attributes" url="https://docs.aws.amazon.com/cli/latest/reference/sns/create-topic.html"/>
            <reference name="Amazon docs: sns subscribe" url="https://docs.aws.amazon.com/cli/latest/reference/sns/subscribe.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="4.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified CLI: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List all cloudwatch alarms and filter by alarm action (review &amp;quot;AlarmActions&amp;quot;: []):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudwatch describe-alarms --query 'MetricAlarms[*].{AlarmName:AlarmName, AlarmActions:AlarmActions, Dimensions:Dimensions}' 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List SNS topic attributes:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws sns list-topic-attributes --topic-arn &amp;lt;sns_topic_arn&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List SNS topic subscriptions (endpoint which receives messages captured by the SNS topic):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws sns list-subscriptions-by-topic --topic-arn &amp;lt;sns_topic_arn&amp;gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.784">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDWATCH4" name="Create CloudWatch Alarms based on Anomaly Detection" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create CloudWatch Alarms based on Anomaly Detection&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; When you enable anomaly detection for a metric, CloudWatch applies statistical and machine learning algorithms. These algorithms continuously analyze metrics of systems and applications, determine normal baselines, and surface anomalies with minimal user intervention.&lt;br&gt; You can create an alarm based on CloudWatch anomaly detection, which mines past metric data and creates a model of expected values. The expected values take into account the typical hourly, daily, and weekly patterns in the metric.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; To create an alarm based on anomaly detection&lt;/p&gt; 
&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Alarms, Create Alarm.&lt;/p&gt; 
&lt;p&gt;3. Choose Select Metric and do one of the following:&lt;/p&gt; 
&lt;p&gt;- Choose the service namespace that contains the metric that you want. To narrow the choices, continue choosing options as they appear. When a list of metrics appears, select the check box next to the metric that you want.&lt;/p&gt; 
&lt;p&gt;- In the search box, enter the name of a metric, dimension, or resource ID and press Enter. Then choose one of the results and continue until a list of metrics appears. Select the check box next to the metric that you want.&lt;/p&gt; 
&lt;p&gt;4. Choose the Graphed metrics tab.&lt;/p&gt; 
&lt;p&gt;a. Under Statistic , choose one of the statistics or predefined percentiles, or specify a custom percentile (for example, p95.45).&lt;/p&gt; 
&lt;p&gt;b. Under Period, choose the evaluation period for the alarm. When evaluating the alarm, each period is aggregated into one data point. For anomaly detection alarms, the value must be one minute or longer.&lt;/p&gt; 
&lt;p&gt;You can also choose whether the y-axis legend appears on the left or right while you're creating the alarm. This preference is used only while you're creating the alarm.&lt;/p&gt; 
&lt;p&gt;c. Choose Select metric.&lt;/p&gt; 
&lt;p&gt;The Specify metric and conditions page appears, showing a graph and other information about the metric and statistic you have selected.&lt;/p&gt; 
&lt;p&gt;5. Under Conditions, specify the following:&lt;/p&gt; 
&lt;p&gt;a. Choose Anomaly detection.&lt;/p&gt; 
&lt;p&gt;If the model for this metric and statistic already exists, CloudWatch displays the anomaly detection band in the sample graph at the top of the screen. If the model does not already exist, the model will be generated when you finish creating the alarm. It takes up to 15 minutes for the actual anomaly detection band generated by the model to appear in the graph. Before that, the band you see is an approximation of the anomaly detection band. To see the graph in a longer time frame, choose Edit at the top right of the page.&lt;/p&gt; 
&lt;p&gt;b. For Whenever metric is, specify whether the metric must be greater than, lower than, or outside (in either direction) the band to trigger the alarm.&lt;/p&gt; 
&lt;p&gt;c. For Anomaly detection threshold, choose the number to use for the anomaly detection threshold. A higher number creates a thicker band of "normal" values that is more tolerant of metric changes, and a lower number creates a thinner band that will go to ALARM state with smaller metric deviations. The number does not have to be a whole number.&lt;/p&gt; 
&lt;p&gt;d. Choose Additional configuration. For Datapoints to alarm, specify how many evaluation periods (data points) must be in the ALARM state to trigger the alarm. If the two values here match, you create an alarm that goes to ALARM state if that many consecutive periods are breaching.&lt;/p&gt; 
&lt;p&gt;To create an M out of N alarm, specify a lower number for the first value than you specify for the second value. For more information, see Evaluating an Alarm.&lt;/p&gt; 
&lt;p&gt;e. For Missing data treatment, choose how to have the alarm behave when some data points are missing. For more information, see Configuring How CloudWatch Alarms Treat Missing Data.&lt;/p&gt; 
&lt;p&gt;f. If the alarm uses a percentile as the monitored statistic, a Percentiles with low samples box appears. Use it to choose whether to evaluate or ignore cases with low sample rates. If you choose ignore (maintain alarm state), the current alarm state is always maintained when the sample size is too low. For more information, see Percentile-Based CloudWatch Alarms and Low Data Samples.&lt;/p&gt; 
&lt;p&gt;6. Choose Next.&lt;/p&gt; 
&lt;p&gt;7. Under Notification, select an SNS topic to notify when the alarm is in ALARM state, OK state, or INSUFFICIENT_DATA state.&lt;/p&gt; 
&lt;p&gt;To have the alarm send multiple notifications for the same alarm state or for different alarm states, choose Add notification.&lt;/p&gt; 
&lt;p&gt;To have the alarm not send notifications, choose Remove.&lt;/p&gt; 
&lt;p&gt;8. To have the alarm perform EC2 actions when it changes state or create a Systems Manager OpsItem when it goes into ALARM state, choose the appropriate button and choose the alarm state and action to perform.&lt;/p&gt; 
&lt;p&gt;9. When finished, choose Next.&lt;/p&gt; 
&lt;p&gt;10. Enter a name and description for the alarm. The name must contain only ASCII characters. Then choose Next.&lt;/p&gt; 
&lt;p&gt;11. Under Preview and create, confirm that the information and conditions are what you want, then choose Create alarm.&lt;/p&gt; 
&lt;p&gt;Modifying an Anomaly Detection Model&lt;/p&gt; 
&lt;p&gt;Once you have created an alarm, you can adjust the anomaly detection model. You can exclude certain time periods from being used in the model creation. It is critical that you exclude unusual events such as system outages, deployments, and holidays from the training data. You can also specify whether to adjust the model for daylight savings time changes.&lt;/p&gt; 
&lt;p&gt;To adjust the anomaly detection model for an alarm&lt;/p&gt; 
&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Alarms.&lt;/p&gt; 
&lt;p&gt;3. Choose the name of the alarm. Use the search box to find the alarm if necessary.&lt;/p&gt; 
&lt;p&gt;4. Choose View in metrics.&lt;/p&gt; 
&lt;p&gt;5. In the lower part of the screen, choose Edit model.&lt;/p&gt; 
&lt;p&gt;6. To exclude a time period from being used to produce the model, choose Add another time range to exclude from training. Then select or enter the days and times to exclude from training, and choose Apply.&lt;/p&gt; 
&lt;p&gt;7. If the metric is sensitive to daylight savings time changes, select the appropriate time zone in the Metric timezone box.&lt;/p&gt; 
&lt;p&gt;8. Choose Update.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Using anomaly detection models for alarms incurs charges on your AWS account.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Creating a CloudWatch Alarm Based on Anomaly Detection" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Anomaly_Detection_Alarm.html"/>
            <reference name="Using CloudWatch Anomaly Detection" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you have created Anomaly Detection alarms properly.&lt;/p&gt;

	&lt;p&gt;After you create a model, it constantly updates itself, using the latest data from the metric.&lt;/p&gt;

	&lt;p&gt;After you enable anomaly detection on a metric, you can choose to exclude specified time periods of the metric from being used to train the model. This way, you can exclude deployments or other unusual events from being used for model training, ensuring the most accurate model is created.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.783">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDWATCH2" name="Follow the security best practices for CloudWatch Synthetics Canaries" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Follow the security best practices for CloudWatch Synthetics Canaries&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; You can use Amazon CloudWatch Synthetics to create canaries, configurable scripts that run on a schedule, to monitor your endpoints and APIs. Canaries follow the same routes and perform the same actions as a customer, which makes it possible for you to continually verify your customer experience even when you don't have any customer traffic on your applications.&lt;br&gt; However, there are several security issues that you should consider when creating and running canaries in Synthetics. AWS recommends to follow the undermentioned security best practices.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; The following sections explain security issues that you should consider when creating and running canaries in Synthetics.&lt;/p&gt; 
&lt;p&gt;Use Secure Connections&lt;/p&gt; 
&lt;p&gt;Because canary code and the results from canary test runs can contain sensitive information, do not have your canary connect to endpoints over unencrypted connections. Always use encrypted connections, such as those that begin with https://.&lt;/p&gt; 
&lt;p&gt;Canary Naming Considerations&lt;/p&gt; 
&lt;p&gt;The Amazon Resource Name (ARN) of a canary is included in the user-agent header as a part of outbound calls made from the Puppeteer-driven Chromium browser that is included as a part of the CloudWatch Synthetics wrapper library. This helps identify CloudWatch Synthetics canary traffic and relate it back to the canaries that are making calls.&lt;/p&gt; 
&lt;p&gt;The canary ARN includes the canary name. Choose canary names that do not reveal proprietary information.&lt;/p&gt; 
&lt;p&gt;Additionally, be sure to point your canaries only at websites and endpoints that you control.&lt;/p&gt; 
&lt;p&gt;Secrets in Canary Code&lt;/p&gt; 
&lt;p&gt;AWS recommends that you don't include secrets, such as access keys or database credentials, in your canary source code.&lt;/p&gt; 
&lt;p&gt;Permissions Considerations&lt;/p&gt; 
&lt;p&gt;AWS recommends that you restrict access to resources that are created or used by CloudWatch Synthetics. Use tight permissions on the Amazon S3 buckets where canaries store test run results and other artifacts, such as logs and screenshots.&lt;/p&gt; 
&lt;p&gt;Similarly, keep tight permissions on the locations where your canary source code is stored, so that no user accidentally or maliciously deletes the Lambda layers or Lambda functions used for the canary.&lt;/p&gt; 
&lt;p&gt;To help make sure you run the canary code you intend, you can use object versioning on the Amazon S3 bucket where your canary code is stored. Then when you specify this code to run as a canary, you can include the object versionId as part of the path, as in the following examples:&lt;/p&gt; 
&lt;p&gt;https://bucket.s3.amazonaws.com/path/object.zip?versionId=version-id&lt;br&gt; https://s3.amazonaws.com/bucket/path/object.zip?versionId=version-id&lt;br&gt; https://bucket.s3-region.amazonaws.com/path/object.zip?versionId=version-id&lt;/p&gt; 
&lt;p&gt;Stack Traces and Exception Messages&lt;/p&gt; 
&lt;p&gt;By default, CloudWatch Synthetics canaries capture any exception thrown by your canary script, no matter whether the script is custom or is from a blueprint. CloudWatch Synthetics logs both the exception message and the stack trace to three locations:&lt;/p&gt; 
&lt;p&gt;- Back into the CloudWatch Synthetics service to speed up debugging when you describe test runs&lt;/p&gt; 
&lt;p&gt;- Into CloudWatch Logs according to the configuration that your Lambda functions are created with&lt;/p&gt; 
&lt;p&gt;- Into the Synthetics log file, which is a plaintext file that is uploaded to the Amazon S3 location specified by the value you set for the resultsLocation of the canary&lt;/p&gt; 
&lt;p&gt;If you want to send and store less information, you can capture exceptions before they return to the CloudWatch Synthetics wrapper library.&lt;/p&gt; 
&lt;p&gt;Scope Your IAM Roles Narrowly&lt;/p&gt; 
&lt;p&gt;AWS recommends that you do not configure your canary to visit potentially malicious URLs or endpoints. Pointing your Canary to untrusted or unknown websites or endpoints could expose your Lambda function code to malicious user's scripts. Assuming a malicious website can break out of Chromium, it could have access to your Lambda code in a similar way to if you connected to it using an internet browser.&lt;/p&gt; 
&lt;p&gt;Run your Lambda function with an IAM execution role that has scoped-down permissions. This way, if your Lambda function is compromised by a malicious script, it is limited in the actions it can take when running as your canary's AWS account.&lt;/p&gt; 
&lt;p&gt;When you use the CloudWatch console to create a canary, it is created with a scoped-down IAM execution role.&lt;/p&gt; 
&lt;p&gt;Header Logging&lt;/p&gt; 
&lt;p&gt;By default, canary header logging logs only the request URL, response code, and response status. Within your canary script, you can customize the logging to log more or less information.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Considerations for Synthetics Canaries" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that you are following security best practices for CloudWatch Synthetics Canaries.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.783">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-5.1" name="Tag all resources" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
 &lt;b&gt;Description&lt;/b&gt;:
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Tags enable customers to categorize AWS resources in different ways, for example, by purpose, owner, or environment.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  Each tag consists of a key and an optional value, both of which customer's define.
  You should define a set of tags for the following items to help you track each instance's owner and operating environment, cost center, and other items.
&lt;/div&gt;
&lt;div&gt;
 &lt;ol&gt;
  &lt;li&gt;Amazon EC2 instances&lt;/li&gt;
  &lt;li&gt;ELB&lt;/li&gt;
  &lt;li&gt;EBS Volumes&lt;/li&gt;
  &lt;li&gt;S3 Buckets&lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
  A resource may have up to 10 tags associated with key &amp;amp; value such as:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Key=tier, Value=app&lt;/li&gt;
  &lt;li&gt;Key=environment, Value=production&lt;/li&gt;
  &lt;li&gt;Key=costcenter, Value=sales&lt;/li&gt;
 &lt;/ul&gt;
 &lt;div&gt;
  &lt;b&gt;Remediation:&lt;/b&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;&lt;br&gt;&lt;/b&gt;
  Tag all your 3 tier Web Application resources based on their tier membership (Web, App, Data), and your organizational requirements.
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="PCI Cloud Compliance" url="https://d0.awsstatic.com/whitepapers/compliance/AWS_Anitian_Wookbook_PCI_Cloud_Compliance.pdf"/>
            <reference name="Resource groups and tagging" url="https://aws.amazon.com/blogs/aws/resource-groups-and-tagging/"/>
          </references>
          <standards>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="5.1" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify tags are being used.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.784">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDWATCH6" name="Use CloudWatch Agent to collect system-level metrics" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use CloudWatch Agent to collect system-level metrics&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; The unified CloudWatch agent enables you to do the following:&lt;/p&gt; 
&lt;p&gt;- Collect internal system-level metrics from Amazon EC2 instances across operating systems. The metrics can include in-guest metrics, in addition to the metrics for EC2 instances. The additional metrics that can be collected are listed in Metrics Collected by the CloudWatch Agent.&lt;/p&gt; 
&lt;p&gt;- Collect system-level metrics from on-premises servers. These can include servers in a hybrid environment as well as servers not managed by AWS.&lt;/p&gt; 
&lt;p&gt;- Retrieve custom metrics from your applications or services using the StatsD and collectd protocols. StatsD is supported on both Linux servers and servers running Windows Server. collectd is supported only on Linux servers.&lt;/p&gt; 
&lt;p&gt;- Collect logs from Amazon EC2 instances and on-premises servers, running either Linux or Windows Server.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Installation Process Overview&lt;/p&gt; 
&lt;p&gt;You can download and install the CloudWatch agent manually using the command line, or you can integrate it with SSM. The general flow of installing the CloudWatch agent using either method is as follows:&lt;/p&gt; 
&lt;p&gt;1. Create IAM roles or users that enable the agent to collect metrics from the server and optionally to integrate with AWS Systems Manager.&lt;/p&gt; 
&lt;p&gt;2. Download the agent package.&lt;/p&gt; 
&lt;p&gt;3. Modify the CloudWatch agent configuration file and specify the metrics that you want to collect.&lt;/p&gt; 
&lt;p&gt;4. Install and start the agent on your servers. As you install the agent on an EC2 instance, you attach the IAM role that you created in step 1. As you install the agent on an on-premises server, you specify a named profile that contains the credentials of the IAM user that you created in step 1.&lt;/p&gt; 
&lt;p&gt;For further information please see Reference URL.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Please follow Reference URL to check for Supported Operating Systems.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Collecting Metrics and Logs from Amazon EC2 Instances and On-Premises Servers with the CloudWatch Agent" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Install-CloudWatch-Agent.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify That the CloudWatch Agent Is Running&lt;/p&gt;

	&lt;p&gt;You can query the CloudWatch agent to find whether it's running or stopped. You can use AWS Systems Manager to do this remotely. You can also use the command line, but only to check the local server.&lt;/p&gt;

	&lt;p&gt;To query the status of the CloudWatch agent using Run Command&lt;/p&gt;

	&lt;p&gt;1. Open the Systems Manager console at https://console.aws.amazon.com/systems-manager/.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Run Command.&lt;/p&gt;

	&lt;p&gt;&lt;del&gt;or&lt;/del&gt;&lt;/p&gt;

	&lt;p&gt;If the AWS Systems Manager home page opens, scroll down and choose Explore Run Command.&lt;/p&gt;

	&lt;p&gt;3. Choose Run command.&lt;/p&gt;

	&lt;p&gt;4. In the Command document list, choose the button next to AmazonCloudWatch-ManageAgent.&lt;/p&gt;

	&lt;p&gt;5. In the Action list, choose status.&lt;/p&gt;

	&lt;p&gt;6. For Optional Configuration Source choose default and keep Optional Configuration Location blank.&lt;/p&gt;

	&lt;p&gt;7. In the Target area, choose the instance to check.&lt;/p&gt;

	&lt;p&gt;8. Choose Run.&lt;/p&gt;

	&lt;p&gt;If the agent is running, the output resembles the following.&lt;/p&gt;

	&lt;p&gt;{
       "status": "running",
       "starttime": "2017-12-12T18:41:18",
       "version": "1.73.4"&lt;br /&gt;
}&lt;/p&gt;

	&lt;p&gt;If the agent is stopped, the "status" field displays "stopped".&lt;/p&gt;


	&lt;p&gt;To query the status of the CloudWatch agent locally using the command line&lt;/p&gt;

	&lt;p&gt;- On a Linux server, enter the following:&lt;/p&gt;

	&lt;p&gt;sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status&lt;/p&gt;

	&lt;p&gt;- On a server running Windows Server, enter the following in PowerShell as an administrator:&lt;/p&gt;

	&lt;p&gt;&amp;amp; $Env:ProgramFiles\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1 -m ec2 -a status&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.784">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-CLOUDWATCH5" name="Use CloudWatch metric streams" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use CloudWatch metric streams&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; You can use metric streams to continually stream CloudWatch metrics to a destination of your choice, with near-real-time delivery and low latency. Supported destinations include AWS destinations such as Amazon Simple Storage Service and several third-party service provider destinations.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; How to use the CloudWatch console to set up a metric stream to another AWS service&lt;/p&gt; 
&lt;p&gt;When you use the console to set up a metric stream, you have the option of choosing the Quick S3 Setup. This method works well if want the final output as JSON or to be queried by Amazon Athena. If you want the final format to be Parquet format or Optimized Row Columnar (ORC), you should create your own Kinesis Data Firehose delivery stream and choose Select an existing Firehose owned by your account instead of choosing Quick S3 Setup.&lt;/p&gt; 
&lt;p&gt;To set up a metric stream to an AWS service&lt;/p&gt; 
&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt; 
&lt;p&gt;2. In the navigation pane, choose Streams, Create stream.&lt;/p&gt; 
&lt;p&gt;3. Choose the CloudWatch metric namespaces to include in the metric stream.&lt;/p&gt; 
&lt;p&gt;- To include all or most of your metric namespaces in the metric stream, choose All metrics.&lt;/p&gt; 
&lt;p&gt;Then, if you want to exclude some metric namespaces from the stream, choose Exclude metric namespaces and select the namespaces to exclude.&lt;/p&gt; 
&lt;p&gt;- To include only a few metric namespaces in the metric stream, choose Selected namespaces and then select the namespaces to include.&lt;/p&gt; 
&lt;p&gt;Note&lt;br&gt; Consider carefully whether to stream all metrics, because the more metrics that you stream the higher your metric stream charges will be.&lt;/p&gt; 
&lt;p&gt;4. Choose one of the following:&lt;/p&gt; 
&lt;p&gt;- For a quick setup, choose Quick S3 setup. CloudWatch will create all necessary resources including the Kinesis Data Firehose delivery stream and the necessary IAM roles. The default format for this option is JSON, but you can change the format later in this procedure.&lt;/p&gt; 
&lt;p&gt;- To use a Kinesis Data Firehose delivery stream that already exists, choose Select an existing Firehose owned by your account. The Kinesis Data Firehose delivery stream must be in the same account. The default format for this option is OpenTelemetry, but you can change the format later in this procedure.&lt;/p&gt; 
&lt;p&gt;Then select the Kinesis Data Firehose delivery stream to use under Select your Kinesis Data Firehose delivery stream.&lt;/p&gt; 
&lt;p&gt;5. (Optional) If you're using Quick S3 Setup, you can choose Select existing resources to use an existing S3 bucket or existing IAM roles instead of having CloudWatch create new ones for you.&lt;/p&gt; 
&lt;p&gt;6. (Optional) If you're using Select an existing Firehose owned by your account, you can choose Select existing service role to use an existing IAM role instead of having CloudWatch create a new one for you.&lt;/p&gt; 
&lt;p&gt;7. (Optional) To change the output format from the default format for your scenario, choose Change output format. The supported formats are JSON and OpenTelemetry 0.7.0.&lt;/p&gt; 
&lt;p&gt;8. (Optional) Customize the name of the new metric stream under Metric stream name.&lt;/p&gt; 
&lt;p&gt;9. Choose Create metric stream.&lt;/p&gt; 
&lt;p&gt;Setting up a metric stream to a third-party solution&lt;/p&gt; 
&lt;p&gt;To set up a CloudWatch metric stream to stream metrics to a third-party solution, follow the instructions provided by that third-party provider.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; Consider carefully whether to stream all metrics, because the more metrics that you stream the higher your metric stream charges will be.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Metric stream operation and maintenance" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-metric-streams-operation.html"/>
            <reference name="Using metric streams" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Metric-Streams.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Metric streams are always in one of two states, Running or Stopped.&lt;/p&gt;

	&lt;p&gt;Running - The metric stream is running correctly. There might not be any metric data streamed to the destination because of the filters on the stream.&lt;/p&gt;

	&lt;p&gt;Stopped - The metric stream has been explicitly stopped by someone, and not because of an error. It might be useful to stop your stream to temporarily pause the streaming of data without deleting the stream.&lt;/p&gt;

	&lt;p&gt;If you stop and restart a metric stream, the metric data that was published to CloudWatch while the metric stream was stopped is not backfilled to the metric stream.&lt;/p&gt;

	&lt;p&gt;If you change the output format of a metric stream, in certain cases you might see a small amount of metric data written to the destination in both the old format and the new format. To avoid this situation, you can create a new Kinesis Data Firehose delivery stream with the same configuration as your current one, then change to the new Kinesis Data Firehose delivery stream and change the output format at the same time. This way, the Kinesis records with different output format are stored on Amazon S3 in separate objects. Later, you can direct the traffic back to the original Kinesis Data Firehose delivery stream and delete the second delivery stream.&lt;/p&gt;

	&lt;p&gt;To view, edit, stop, and start your metric streams&lt;/p&gt;

	&lt;p&gt;1. Open the CloudWatch console.&lt;/p&gt;

	&lt;p&gt;2. In the navigation pane, choose Streams.&lt;/p&gt;

	&lt;p&gt;The list of streams appears, and the Status column displays whether each stream is running or stopped.&lt;/p&gt;

	&lt;p&gt;3. To stop or start a metric stream, select the stream and choose Stop or Start.&lt;/p&gt;

	&lt;p&gt;4. To see the details about a metric stream, select the stream and choose View details.&lt;/p&gt;

	&lt;p&gt;5. To change the stream's output format, filters, destination Kinesis Data Firehose stream, or roles, choose Edit and make the changes that you want.&lt;/p&gt;

	&lt;p&gt;If you change the filters, there might be some gaps in the metric data during the transition.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.784">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-VPC5" name="Use VPC security groups" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use VPC security groups&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. When you launch an instance in a VPC, you can assign up to five security groups to the instance. Security groups act at the instance level, not the subnet level. Therefore, each instance in a subnet in your VPC can be assigned to a different set of security groups.&lt;/p&gt;&lt;p&gt;If you launch an instance using the Amazon EC2 API or a command line tool and you don't specify a security group, the instance is automatically assigned to the default security group for the VPC. If you launch an instance using the Amazon EC2 console, you have an option to create a new security group for the instance.&lt;/p&gt;&lt;p&gt;For each security group, you add rules that control the inbound traffic to instances, and a separate set of rules that control the outbound traffic.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;To create a security group using the console&lt;/p&gt;&lt;p&gt;Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;Choose Create Security Group.&lt;/p&gt;&lt;p&gt;Enter a name for the security group (for example, my-security-group) and provide a description. Select the ID of your VPC from the VPC menu and choose Yes, Create.&lt;/p&gt;&lt;p&gt;To create a security group use the command line&lt;/p&gt;&lt;p&gt;create-security-group (AWS CLI)&lt;/p&gt;&lt;p&gt;New-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;Describe one or more security groups using the command line&lt;/p&gt;&lt;p&gt;describe-security-groups (AWS CLI)&lt;/p&gt;&lt;p&gt;Get-EC2SecurityGroup (AWS Tools for Windows PowerShell)&lt;/p&gt;&lt;p&gt;By default, new security groups start with only an outbound rule that allows all traffic to leave the instances. You must add rules to enable any inbound traffic or to restrict the outbound traffic.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Review your security groups using the console:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Open the Amazon VPC console.&lt;/p&gt;&lt;p&gt;2. In the navigation pane, choose Security Groups.&lt;/p&gt;&lt;p&gt;3. Select a security group to see the details.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.784">
              <output/>
            </source>
            <references>
              <reference name="Security groups for your VPC" url="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDWATCH1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDWATCH1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDWATCH2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDWATCH2" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOGGING AND MONITORING" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDWATCH4" mitigation="25"/>
                    <countermeasure ref="AWS-CLOUDWATCH5" mitigation="25"/>
                    <countermeasure ref="AWS-CLOUDWATCH6" mitigation="25"/>
                    <countermeasure ref="aws-tier-4.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDWATCH4" mitigation="25"/>
                <countermeasure ref="AWS-CLOUDWATCH5" mitigation="25"/>
                <countermeasure ref="AWS-CLOUDWATCH6" mitigation="25"/>
                <countermeasure ref="aws-tier-4.1" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-CLOUDWATCH7" mitigation="33"/>
                    <countermeasure ref="AWS-VPC5" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-Network-5.1">
                  <countermeasures>
                    <countermeasure ref="aws-tier-5.1" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-CLOUDWATCH7" mitigation="33"/>
                <countermeasure ref="AWS-VPC5" mitigation="34"/>
                <countermeasure ref="aws-tier-5.1" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="6a9cac0f-5a67-418c-a714-225f0d4e6d5f" diagramComponentId="75660534-258a-45df-8b03-0765d522a95b" ref="69b65d4e-3c92-492a-b078-083bef33419d" name="AWS Glacier" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="glacier">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.549">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-IAM-2.7" name="Misconfigured credentials for groups and roles" state="0" impact="100" issueId="" issueLink="">
          <desc>Credentials for groups and roles not properly configured. User accounts are configured with excessive privileges.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.548">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.549">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-NET-01" name="Unauthorized connection attempts are allowed on open ports" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Receiving unauthorized connections to open ports makes systems vulnerable to attacks. To avoid this, access to network must be as restricted as possible, so that only the necessary ports are open and the minimum inbound traffic is accepted.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.549">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-GLACIER1" name="Control access to AWS Glacier using IAM and Vault Policies" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Control access to AWS Glacier using IAM and Vault Policies 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  A permissions policy describes who has access to what. Policies attached to an IAM identity are referred to as identity-based policies (IAM polices) and policies attached to a resource are referred to as resource-based policies (vault policies). AWS Glacier supports both identity-based (IAM policies) and resource-based policies. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  The following shows an example of a permissions policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; "Version": "2012-10-17", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; "Statement": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; "Effect": "Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; "Action": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "glacier:CreateVault", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "glacier:DescribeVault", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "glacier:ListVaults" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; "Resource": "arn:aws:glacier:us-west-2:123456789012:vaults/*" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; } 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; ] 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The policy grants permissions for three S3 Glacier vault-related actions (glacier:CreateVault, glacier:DescribeVault and glacier:ListVaults), on a resource using the Amazon Resource Name (ARN) that identifies all of the vaults in the us-west-2 AWS Region. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The wildcard character (*) at the end of the ARN means that this statement can match any vault name. The statement allows the glacier:DescribeVault action on any vault in the specified AWS Region, us-west-2. If you want to limit permissions for this action to a specific vault only, you replace the wildcard character (*) with a vault name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Resource-Based Policies (Vault Policies) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Example 1: Grant Cross-Account Permissions for Specific Amazon S3 Glacier Actions 
&lt;/div&gt; 
&lt;div&gt;
  The following example policy grants cross-account permissions to two AWS accounts for a set of S3 Glacier operations on a vault named examplevault. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  The account that owns the vault is billed for all costs associated with the vault. All requests, data transfer, and retrieval costs made by allowed external accounts are billed to the account that owns the vault. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; "Version":"2012-10-17", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; "Statement":[ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;{ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Sid":"cross-account-upload", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Principal": { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"AWS": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "arn:aws:iam::123456789012:root", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "arn:aws:iam::444455556666:root" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;] 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }, 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Effect":"Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Action": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"glacier:UploadArchive", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"glacier:InitiateMultipartUpload", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"glacier:AbortMultipartUpload", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"glacier:CompleteMultipartUpload" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Resource": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"arn:aws:glacier:us-west-2:999999999999:vaults/examplevault"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ] 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;} 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; ] 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Example 2: Grant Cross-Account Permissions for MFA Delete Operations 
&lt;/div&gt; 
&lt;div&gt;
  You can use multi-factor authentication (MFA) to protect your S3 Glacier resources. To provide an extra level of security, MFA requires users to prove physical possession of an MFA device by providing a valid MFA code. For more information about configuring MFA access, see Configuring MFA-Protected API Access in the IAM User Guide. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The example policy grants an AWS account with temporary credentials permission to delete archives from a vault named examplevault, provided the request is authenticated with an MFA device. The policy uses the aws:MultiFactorAuthPresent condition key to specify this additional requirement. For more information, see Available Keys for Conditions in the IAM User Guide. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; "Version": "2012-10-17", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; "Statement": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;{ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Sid": "add-mfa-delete-requirement", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Principal": { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"AWS": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "arn:aws:iam::123456789012:root" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;] 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }, 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Effect": "Allow", 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Action": [&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"glacier:Delete*"&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Resource": [ 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"arn:aws:glacier:us-west-2:999999999999:vaults/examplevault" 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Condition": { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;"Bool": { 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "aws:MultiFactorAuthPresent": true 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;} 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;} 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; ] 
&lt;/div&gt; 
&lt;div&gt;
  } 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Using Identity-Based Policies for Amazon S3 Glacier (IAM Policies)" url="https://docs.aws.amazon.com/amazonglacier/latest/dev/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for Amazon S3 Glacier (Vault Policies)" url="https://docs.aws.amazon.com/amazonglacier/latest/dev/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>With the IAM policy simulator, you can test and troubleshoot identity-based policies, IAM permissions boundaries, Organizations service control policies, and resource-based policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.457">
              <output/>
            </source>
            <references>
              <reference name="Testing IAM policies with the IAM policy simulator" url="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest for Amazon S3" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Encrypt sensitive data at rest for Amazon S3&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Data protection at rest refers to protecting data while it is stored on disks in Amazon S3 data centers.&lt;/p&gt;&lt;p&gt;You have the following options for protecting data at rest in Amazon S3:&lt;/p&gt;&lt;p&gt;- Server-Side Encryption - Request Amazon S3 to encrypt your object before saving it on disks in its data centers and then decrypt it when you download the objects.&lt;/p&gt;&lt;p&gt;- Client-Side Encryption - Encrypt data client-side and upload the encrypted data to Amazon S3. In this case, you manage the encryption process, the encryption keys, and related tools.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Server-Side Encryption&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;You can't apply different types of server-side encryption to the same object simultaneously.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)&lt;/p&gt;&lt;p&gt;When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a root key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256) GCM, to encrypt your data. For objects encrypted prior to AES-GCM, AES-CBC is still supported to decrypt those objects.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with KMS keys Stored in AWS Key Management Service (SSE-KMS)&lt;/p&gt;&lt;p&gt;Server-Side Encryption with AWS KMS keys (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a KMS key that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your KMS key was used and by whom. Additionally, you can create and manage customer managed keys or use AWS managed keys that are unique to you, your service, and your Region.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Customer-Provided Keys (SSE-C)&lt;/p&gt;&lt;p&gt;With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.&lt;/p&gt;&lt;p&gt;Client-Side Encryption&lt;/p&gt;&lt;p&gt;To enable client-side encryption, you have the following options:&lt;/p&gt;&lt;p&gt;- Use a key stored in AWS Key Management Service (AWS KMS).&lt;/p&gt;&lt;p&gt;- Use a key that you store within your application.&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;Amazon S3 supports only symmetric encryption KMS keys, and not asymmetric KMS keys.&lt;/p&gt;&lt;p&gt;For more information about each encryption option, please see Reference URLs.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Protecting data using client-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingClientSideEncryption.html"/>
            <reference name="Protecting data using server-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.458">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-GLACIER2" name="Use Amazon S3 VPC Endpoints to access AWS Glacier" issueId="" issueLink="" platform="" cost="0" risk="47" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use Amazon S3 VPC Endpoints to access AWS Glacier 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  A virtual private cloud (VPC) endpoint enables you to privately connect your VPC to supported AWS services and VPC endpoint services powered by AWS PrivateLink without requiring an internet gateway, NAT device, VPN connection, or AWS Direct Connect connection. Although S3 Glacier does not support VPC endpoints directly, you can take advantage of Amazon Simple Storage Service (Amazon S3) VPC endpoints if you access S3 Glacier as a storage tier integrated with Amazon S3. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  How to create a VPC Endpoint for Amazon S3 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Start by opening up the VPC Dashboard and selecting the desired region. Locate the Endpoints item in the navigation bar and click on it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. If you have already created some VPC Endpoints, they will appear in the list. 
&lt;/div&gt; 
&lt;div&gt;
  Click on Create Endpoint, choose the desired VPC, and customize the access policy. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. The access policy on the VPC Endpoint allows you disallow requests to untrusted S3 buckets (by default a VPC Endpoint can access any S3 bucket). You can also use access policies on your S3 buckets to control access from a specific VPC or VPC Endpoint. These access policies would use the new aws:SourceVpc and aws:SourceVpce conditions. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. Choose the VPC subnets that will be allowed to access the endpoint: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. Open connections using an instance's public IP address in the affected subnets will be dropped when you create the VPC Endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  6. Once you create the VPC Endpoint, the S3 public endpoints and DNS names will continue to work as expected. The Endpoint simply changes the way in which the requests are routed from EC2 to S3. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Internetwork Traffic Privacy" url="https://docs.aws.amazon.com/amazonglacier/latest/dev/InternetworkTrafficPrivacy.html"/>
            <reference name="VPC Endpoint for Amazon S3" url="https://aws.amazon.com/blogs/aws/new-vpc-endpoint-for-amazon-s3/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that you can access AWS Glacier through the VPC endpoint. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  aws glacier list-vaults 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you want, you can try some other AWS CLI commands for AWS Glacier. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.458">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-GLACIER3" name="Use CloudWatch alarms to monitor AWS Glacier via AWS S3" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use CloudWatch alarms to monitor AWS Glacier via AWS S3 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Rationale: 
&lt;/div&gt; 
&lt;div&gt;
  When using S3 Glacier via Amazon S3, you can use Amazon CloudWatch alarms to watch a single metric over a time period that you specify. If the metric exceeds a given threshold, a notification is sent to an Amazon SNS topic or AWS Auto Scaling policy. CloudWatch alarms do not invoke actions because they are in a particular state. Rather the state must have changed and been maintained for a specified number of periods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Remediation: 
&lt;/div&gt; 
&lt;div&gt;
  To enable and configure event notifications for an S3 bucket 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Sign in to the AWS Management Console and open the Amazon S3 console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the Bucket name list, choose the name of the bucket that you want to enable events for. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Choose Properties. 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  4. Under Advanced settings, choose Events. 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  5. Choose Add notification. 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  6. In Name, enter a descriptive name for your event notification. 
&lt;/div&gt; 
&lt;div&gt;
  If you don't enter a name, a GUID is generated and used for the name. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  7. Under Events, select one or more events. 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  8. To filter event notifications by a prefix or suffix, enter a Prefix or a Suffix. 
&lt;/div&gt; 
&lt;div&gt;
  For example, you can set up a prefix filter so that you receive notifications only when files are added to a specific folder (for example, images/). 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  9. Choose the event notification destination: SNS Topic, SQS Queue, or Lambda Function. 
&lt;/div&gt; 
&lt;div&gt;
  When you choose your Send to destination, a box appears for you to enter your specific SNS, SQS, or Lambda function destination. In the example image below, the Send To location is SNS Topic, and you can see a SNS box for the SNS topic name. 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  10. In the box that appears, choose or enter the destination SNS, SQS, or Lambda function. 
&lt;/div&gt; 
&lt;div&gt;
  You can choose or enter the SNS, SQS, or Lambda function name, or you can choose to the destination Amazon Resource Name (ARN). The example screenshot below shows the Add SNS topic ARN option. 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; &amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  11. If you chose Add ARN, enter the SNS topic, SQS queue, or Lambda function ARN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  12. Choose Save. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Amazon S3 sends a test message to the event notification destination. 
&lt;/div&gt; 
&lt;div&gt;
  Impact: 
&lt;/div&gt; 
&lt;div&gt;
  None 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Logging and Monitoring in Amazon S3 Glacier" url="https://docs.aws.amazon.com/amazonglacier/latest/dev/glacier-incident-response.html"/>
            <reference name="Monitoring metrics with Amazon CloudWatch" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  To test your rule that triggers on an API call, you have to trigger it with its Specific operation as defined into the Cloudwatch console. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note 
&lt;/div&gt; 
&lt;div&gt;
  In CloudWatch Events, it is possible to create rules that lead to infinite loops, where a rule is fired repeatedly. For example, a rule might detect that ACLs have changed on an S3 bucket, and trigger software to change them to the desired state. If the rule is not written carefully, the subsequent change to the ACLs fires the rule again, creating an infinite loop. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To prevent this, write the rules so that the triggered actions do not re-fire the same rule. For example, your rule could fire only if ACLs are found to be in a bad state, instead of after any change. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An infinite loop can quickly cause higher than expected charges. AWS recommends that you use budgeting, which alerts you when charges exceed your specified limit. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To view metrics using the CloudWatch console 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  1. Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  2. In the navigation pane, choose Metrics. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  3. Choose the S3 namespace. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  4. (Optional) To view a metric, enter the metric name in the search box. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  5. (Optional) To filter by the StorageType dimension, enter the name of the storage class in the search box. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To view a list of valid metrics stored for your AWS account using the AWS CLI 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  - At a command prompt, use the following command. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  aws cloudwatch list-metrics --namespace "AWS/S3" 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:55.458">
              <output/>
            </source>
            <references>
              <reference name="Creating a CloudWatch Events Rule That Triggers on an AWS API Call Using AWS CloudTrail" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Create-CloudWatch-Events-CloudTrail-Rule.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authorization" name="Authorization" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="AWS-LOSS-CONTROL-ENV" name="Attackers gain unauthorized access to the control of the environment" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized access to the control of the environment, due to improper definition and configuration of user accounts or role groups.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-IAM-2.7">
                  <countermeasures>
                    <countermeasure ref="AWS-GLACIER1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-GLACIER1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="AWS-GLACIER3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-GLACIER3" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="UNAUTHORIZED-CONECTIONS-AWS" name="Attackers gain unauthorized network access" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers could gain unauthorized network access to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-NET-01">
                  <countermeasures>
                    <countermeasure ref="AWS-GLACIER2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-GLACIER2" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="4e1e41f7-02a3-4d60-b3ff-e83779fb7e13" diagramComponentId="b667175c-6a01-4595-8766-ff1e7c4e1191" ref="e9c1a161-dfb2-44ff-ba9e-bccc4e9b5bf2" name="AWS Lambda" desc="" library="aws-lambda" parentComponentRef="" componentDefinitionRef="aws-lambda-function">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-LAMBDA-W10" name="All Lambda functions have the same permissions" state="0" impact="100" issueId="" issueLink="">
          <desc>Setting of permissions is done at the function level. Because there could be many functions, the job of configuring permissions on each one is all too often ignored or forgotten, leading to security weak spots.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-592" name="Authentication Bypass Issues" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not properly perform authentication, allowing it to be bypassed through various methods.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.141">
              <output/>
            </source>
            <references>
              <reference name="CWE-592: Authentication Bypass Issues" url="https://cwe.mitre.org/data/definitions/592.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-VPC-IP-ADDRESS-DEPLETION-WEAKNESS" name="AWS VPC IP address depletion" state="0" impact="100" issueId="" issueLink="">
          <desc>Organizations that deploy AWS Lambda functions in VPC (Virtual Private Cloud) environments should also pay attention to the potential exhaustion of IP addresses in the VPC subnet.  
 An attacker might cause a denial of service scenario by forcing more and more function instances to execute, and deplete the VPC subnet from available IP addresses.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W12" name="Containers aren't monitored" state="0" impact="100" issueId="" issueLink="">
          <desc>Monitoring is needed to understand the relationships between all of the objects across a virtual environment's topology, recognize the difference between inconsequential anomalies and actual performance problems. This will show you the root cause and recommended actions for remediation. This way, you can understand what needs your attention, and how to narrow a problem to the relevant components.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.360">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W4" name="Data in transit is sent using a weak encryption algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>When the SSL/TLS service is present this is good but does introduce complexities that must be overcome:&amp;nbsp; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;SSL/TLS protocols, ciphers, keys and renegotiation must be properly configured.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Certificate validity must be ensured.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.360">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W20" name="DynamoDB APIs are vulnerable to XSS" state="0" impact="100" issueId="" issueLink="">
          <desc>DynamoDB is a NoSQL database and as such is schemaless. NoSQL databases provide looser consistency restrictions than traditional SQL databases. By requiring fewer relational constraints and consistency checks, NoSQL databases often offer performance and scaling benefits. Yet these databases are still potentially vulnerable to injection attacks, even if they aren't using the traditional SQL syntax.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.140">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W8" name="Environment variables are not stored securely" state="0" impact="100" issueId="" issueLink="">
          <desc>Environment variables were stored in plain text configuration files and stored in the code repository</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W15" name="Functions consume too much memory" state="0" impact="100" issueId="" issueLink="">
          <desc>Default limits and poor configuration can lead to successful DDoS attacks.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.791">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W16" name="Functions don't have a rate limit or aren't throttled" state="0" impact="100" issueId="" issueLink="">
          <desc>An attacker can try to freeze the system with huge amounts of requests. 
 If your concurrency limits are set and high, an attacker can still execute a lot of requests and it will cost you a lot of money. It's important to set some limits on services or functions.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.791">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W14" name="Functions have poor concurrency limits" state="0" impact="100" issueId="" issueLink="">
          <desc>If your concurrency limits are too small, scaling will not be as flexible as you would like. If your concurrency limits are too high, DoS could be a problem.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.791">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W17" name="Functions take too long to execute" state="0" impact="100" issueId="" issueLink="">
          <desc>The function is taken too long to execute. This could be because the function is doing too much or recursive patterns are used.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.854">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-841" name="Improper Enforcement of Behavioral Workflow" state="0" impact="100" issueId="" issueLink="">
          <desc>The software supports a session in which more than one behavior
                        must be performed by an actor, but it does not properly ensure that the actor
                        performs the behaviors in the required sequence.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.066">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W22" name="Messages exposed to end users reveal information about serverless functions and the logic used" state="0" impact="100" issueId="" issueLink="">
          <desc>Messages to end users must only contain general information and not leak data relating to software implementation or the underlying technology.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.573">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W19" name="No validation for asynchronous events" state="0" impact="100" issueId="" issueLink="">
          <desc>Lambda can handle several different event types that can trigger a serverless function. These event types don't necessarily need to be HTTP requests (e.g. S3, SNS, SES, CloudWatch Events, etc.). This increases the potential attack surface and introduces complexities to secure the serverless functions.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W11" name="The container has processes, pieces of code or temporary files lingering around" state="0" impact="100" issueId="" issueLink="">
          <desc>Container lifetime is important, but also the correct execution and cleanup of your functions. If the container has lingering temporary files or - for example - static data in memory, an attacker could steal this information and leverage it for building a more destructive attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.359">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W2" name="The Data Store is directly exposed to the internet" state="0" impact="100" issueId="" issueLink="">
          <desc>Data Stores are accessible by the public internet with no - or weak - authentication.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.572">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W9" name="The function takes untrusted input" state="0" impact="100" issueId="" issueLink="">
          <desc>Developers should avoid writing code that passes user-controlled input to dangerous functions. This is one of the basics of secure programming. Whenever a function has the capability to execute a dangerous action, it should either not receive user input, or the user-controlled data should be sanitized in order to prevent a malicious user from breaking the intended functionality.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.360">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W18" name="The retry mechanism of asynchronous sources are not configured correctly" state="0" impact="100" issueId="" issueLink="">
          <desc>Asynchronous events (e.g. S3, SNS, SES, CloudWatch Events, etc.) uses queues before invoking, so retry behavior must be taken in account.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.792">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W6" name="Unused functions are more risk from a security standpoint as they are often not maintained" state="0" impact="100" issueId="" issueLink="">
          <desc>Unused functions are mostly unmaintained. Therefore code may not be regularly reviewed. And because the code isn't under your attention, this can impose a security risk, especially if the functionality of your application changes over time.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.636">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W21" name="Verbose error messages are left in the code and are not removed before moving to production" state="0" impact="100" issueId="" issueLink="">
          <desc>Error messages or debugging information must be removed before moving to the production/release branch. This type of information gives an attacker additional insight on the internal working of the application/functions and on the technology used.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.573">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-LAMBDA-W7" name="Your AWS credentials were stored in a code repositories such as GitHub" state="0" impact="100" issueId="" issueLink="">
          <desc>Monitoring is needed to understand the relationships between all of the objects across a virtual environment's topology and recognize the difference between inconsequential anomalies and actual performance problems. 
 This will identify root causes and recommended actions for remediation. This way, you can understand what needs your attention, and how to narrow down a problem to the relevant components.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.141">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="AWS-LAMBDA-C20" name="Change the default memory usage to the amount of memory the function really needs" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Specify the amount of memory you want to allocate for your Lambda function. CloudWatch logs can contain memory usage on each function execution. Set the default memory usage to the amount of memory that the function really needs. By default, it set to of 1024 MB.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Update the memory size of your functions using the following AWS CLI command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda update-function-configuration --function-name myfunction --memory-size 256&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;In the example, we change the amount memory for the function to 256 MB.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Limits" url="https://docs.aws.amazon.com/lambda/latest/dg/limits.html"/>
            <reference name="Best practices for AWS Lambda timeouts" url="https://epsagon.com/development/best-practices-for-aws-lambda-timeouts/"/>
            <reference name="Function configuration" url="https://docs.aws.amazon.com/lambda/latest/dg/resource-model.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the AWS Lambda console at https://console.aws.amazon.com/lambda/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Choose a function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Settings are on the first page shown.&lt;/li&gt; 
 &lt;li&gt;Check that each function has got the really necessary amount of memory.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.718">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C12" name="Configure IAM Role statements on a per-function basis" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;You should spend time crafting suitable, minimal roles for each of your functions. This leverages the principle of least privilege. If you are using the API Gateway, you can also set Lambda authorizers. A Lambda function should do one specific task, so ensure the following model is followed: One function, one use case, one permission.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;b&gt; Remediation: &lt;br /&gt;&lt;/b&gt; UsingAWSConsole: &lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Login to theAWSManagement Console.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Navigate to the Lambda dashboard at https://console.aws.amazon.com/lambda/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the navigation panel, underAWSLambda section, choose Functions.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Choose the Lambda function that you want to examine then click on the function name to access its configuration page.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Select the Configuration tab then click the Execution role to expand the panel with theIAMrole that defines the permissions for the selected function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Copy the name of theIAMexecution role currently available in the Existing role drop-down list.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Now navigate to theIAMdashboard at https://console.aws.amazon.com/iam/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the left navigation panel, choose Roles.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Paste the name of the execution role copied at step no. 6 in the Search box and press Enter.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Click on the AmazonIAMexecution role returned as the result.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;On theIAMrole configuration page, select the Permissions tab from the bottom panel.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Click on the attachedIAMpolicy name available within Policy name column to access the policy document (JSONformat).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Include inside the {}JSONpanel, the policy document defined for the selectedIAMexecution role.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Add the Action and Resource elements&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;and their current values, if the element values are set to "*"&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;and the Effect is set to "Allow",the selected Amazon Lambda function has admin privileges (we have to restrict the admin privileges in the Amazon Lambda function)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Repeat step no. 12 and 13 to add otherIAMpolicies attached to the selected execution role.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Repeat steps no. 4 - 16 to add theIAMexecution role permissions for other Amazon Lambda functions created within the current region.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Change theAWSregion from the navigation bar and repeat the process for the other regions.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;UsingAWSConsole:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Login to theAWSManagement Console.&lt;/li&gt; 
 &lt;li&gt;Navigate to the Lambda dashboard at https://console.aws.amazon.com/lambda/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the navigation panel, underAWSLambda section, choose Functions.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Choose the Lambda function that you want to examine then click on the function name to access its configuration page.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Select the Configuration tab then click the Execution role to expand the panel with theIAMrole that defines the permissions for the selected function.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Copy the name of theIAMexecution role currently available in the Existing role drop-down list.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Now navigate to theIAMdashboard at https://console.aws.amazon.com/iam/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the left navigation panel, choose Roles.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Paste the name of the execution role copied at step no. 6 in the Search box and press Enter.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Click on the AmazonIAMexecution role returned as the result.&lt;/li&gt; 
 &lt;li&gt;On theIAMrole configuration page, select the Permissions tab from the bottom panel.&lt;/li&gt; 
 &lt;li&gt;Click on the attachedIAMpolicy name available within Policy name column to access the policy document (JSONformat).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Inside the {}JSONpanel, verify the policy document defined for the selectedIAMexecution role. Identify Action and Resource elements and their current values. If the element values are set to "*" and the Effect is set to "Allow",the selected Amazon Lambda function has admin privileges&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&amp;nbsp;Repeat step no. 12 and 13 to verify otherIAMpolicies attached to the selected execution role.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Repeat steps no. 4 - 15 to verify theIAMexecution role permissions for other Amazon Lambda functions created within the current region.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Change theAWSregion from the navigation bar and repeat the process for the other regions.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.247">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C26" name="Configure the retry settings of asynchronous sources" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Any Lambda function invoked asynchronously is retried twice before the event is discarded. If the retries fail and you're unsure why, use Dead Letter Queues (DLQ) to direct unprocessed events to an Amazon SQS queue or an Amazon SNS topic to analyze the failure.&lt;/p&gt; 
&lt;p&gt;AWS Lambda directs events that cannot be processed to the specified Amazon SNS topic or Amazon SQS queue. Functions that don't specify a DLQ will discard events after they have exhausted their retries. For more information about retry policies, see AWS Lambda Retry Behavior.&lt;/p&gt; 
&lt;p&gt;You configure a DLQ by specifying the Amazon Resource Name TargetArn value on the Lambda function's DeadLetterConfig parameter.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Update the timeout of your functions using the following AWS CLI command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda update-function-configuration --function-name myfunction --dead-letter-config (structure)&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;A dead letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see Dead Letter Queues in the references.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; Shorthand Syntax:&lt;/p&gt; 
 &lt;p&gt; TargetArn=string&lt;/p&gt; 
 &lt;p&gt; JSON Syntax:&lt;/p&gt; 
 &lt;p&gt;{ "TargetArn": "string"&lt;/p&gt; 
 &lt;p&gt; }&lt;/p&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Retry Behavior" url="https://docs.aws.amazon.com/lambda/latest/dg/retries-on-errors.html"/>
            <reference name="AWS Lambda update function configuration" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/update-function-configuration.html"/>
            <reference name="Dead Letter Queue" url="https://docs.aws.amazon.com/lambda/latest/dg/dlq.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use AWS CLI and use the following command to view the timeout limit per function:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws lambda get-function --function-name function-name&amp;nbsp;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check all function and verify that they have got set a well the timeout limit.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.719">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC" name="Detect and notify the usage of automated tools or unusual behavior" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Don't allow users to manipulate a system or guess its behavior based on input or output timing and detect the usage of automated tools or unusual behavior, such as actions not performed in reasonable "human time" or other abnormal time patterns.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;When the usage of automated tools is detected, the application should respond by denying access and notifying the security group.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2" supportedStandardRef="swift-cscf"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use several automated tools to perform normal user actions.&lt;/li&gt;
                            &lt;li&gt;Check that the applications detects these actions, denies the users access and
                            notifies the security group.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:51.890">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C11" name="Enable and set up Request Validation in API Gateway" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To perform the API Gateway basic validation, we have to enable and set up the Request Validation in the API Gateway.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; To enable basic validation, you specify validation rules in a request validator, add the validator to the API's map of request validators, and assign the validator to individual API methods.&lt;/p&gt; 
&lt;p&gt;To set up a basic validation, we have some possibilities to configure it:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;by Importing OpenAPI Definition&lt;/li&gt; 
 &lt;li&gt;using the API Gateway REST API&lt;/li&gt; 
 &lt;li&gt;using the API Gateway Console&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Using the API Gateway Console:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;The API Gateway console lets you set up the basic request validation on a method using one of the three validators:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Validate body: This is the body-only validator.&lt;/li&gt; 
  &lt;li&gt;Validate query string parameters and headers: This is the parameters-only validator.&lt;/li&gt; 
  &lt;li&gt;Validate body, query string parameters, and headers: This validator is for both body and parameters validation.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;When you choose one of the above validators to enable it on an API method, the API Gateway console will add the validator to the API's RequestValidators map, if the validator has not already been added to the validators map of the API. To enable a request validator on a method:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the API Gateway console, if not already logged in.&lt;/li&gt; 
  &lt;li&gt;Create a new or choose an existing API.&lt;/li&gt; 
  &lt;li&gt;Create a new or choose an existing resource of the API.&lt;/li&gt; 
  &lt;li&gt;Create a new or choose an existing method the resource.&lt;/li&gt; 
  &lt;li&gt;Choose Method Request.&lt;/li&gt; 
  &lt;li&gt;Choose the pencil icon of Request Validator under Settings.&lt;/li&gt; 
  &lt;li&gt;Choose Validate body, Validate query string parameters and headers or Validate body, query string parameters, and headers from the Request Validator drop-down list and then choose the check mark icon to save your choice.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;For more information see the references.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Enable Request Validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html"/>
            <reference name="Set up basic request validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-validation-set-up.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Verify in the code if input parameters for functions are validated&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.717">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C16" name="Ensure it only exists one user to access to the API gateway" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The API gateway sits between the Lambda functions and the user. You must create an API gateway user that only has the ability to communicate with Lambda functions. It can only communicate between your internal perimeter. If the user is manipulated to send from a source other than theAPIgateway, access should be denied. You can also set Lambda authorizers in the API Gateway. &lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation: &lt;/b&gt;&lt;br /&gt; Configure the Lambda authorizers on API methods: &lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the API Gateway console.&lt;/li&gt; 
 &lt;li&gt;Create an API method and choose Authorizers under that API.&lt;/li&gt; 
 &lt;li&gt;Give the permissions to access to the Lambda Functions only to one user.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Set Up an IAM to Invoke Lambda Functions" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/integrating-api-with-aws-services-lambda.html#api-as-lambda-proxy-setup-iam-role-policies"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify that Lambda authorizers are configured on API methods:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the API Gateway console.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Select each existing API and choose Authorizers under that API.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Check that it exist only one API gateway user with the permissions to access to the Lambda Functions.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-SUBNET-AVAILABILITY-ZONE" name="Ensure that each Lambda Function has got at least one VPC subnet in each Availability Zone" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;By specifying subnets in each of the Availability Zones, your Lambda function can run in another Availability Zone if one goes down or runs out of IP addresses.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Review each function and verify that each function has got at least one associated subnet Id in different Availability Zone with the following command:&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;aws lambda get-function --function-name&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If there is any function without associated Subnet Id per Availability Zone, we can update the Lambda function and assign a subnet from a specific Availability Zone with the following command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda update-function-configuration --function-name --vpc-config &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more information, see VPC Settings .&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; Shorthand Syntax:&lt;/p&gt; 
 &lt;p&gt;SubnetIds=string,string,SecurityGroupIds=string,string&lt;/p&gt; 
 &lt;p&gt; JSON Syntax:&lt;/p&gt; 
 &lt;p&gt;{ "SubnetIds": ["string", ...], "SecurityGroupIds": ["string", ...]&lt;/p&gt; 
 &lt;p&gt; }&lt;/p&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda get function" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/get-function.html#output"/>
            <reference name="AWS Lambda update function configuration" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/update-function-configuration.html"/>
            <reference name="Configuring a Lambda Function to Access Resources in an Amazon VPC" url="https://docs.aws.amazon.com/lambda/latest/dg/vpc.html"/>
          </references>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that all Lambda functions have got at least one associate VPN subnet per Availability Zone with the following command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-function --function-name &lt;/p&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.719">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C8" name="Ensure that sensitive data is not committed to the repository" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Create the mechanisms to ensure that sensitive data, such personal data or credentials is not uploaded to a repository. There are different ways to implement it. One of them is with the git pre-commit hooks, this way is described in the references.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Preventing AWS credential leaks in Git with pre-commit" url="https://www.unixdaemon.net/cloud/preventing-aws-creds-in-git-with-pre-commit/"/>
            <reference name="Prevents you from committing secrets and credentials into git repositories" url="https://github.com/awslabs/git-secrets"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Check that there is not any sensitive data in the code from a repository.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.008">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C29" name="Ensure that sensitive data is not saved into logs files" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Review periodically all logs to ensure that sensitive data is not presented in the logs files.&lt;/p&gt;

	&lt;p&gt;AWS introduces a new security service Macie recognizing sensitive data such as personally identifiable information (PII) or intellectual property, and provides you with dashboards and alerts that give visibility into how this data is being accessed or moved.&lt;/p&gt;

	&lt;p&gt;You can also use the Amazon Macie service to classify all data and find if there is sensitive data in the logs files.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CloudWatch user guide" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html"/>
            <reference name="AWS Macie" url="https://aws.amazon.com/macie/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Verify if the log files don't contain sensitive data.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.522">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ACCESS-CONTROL-CENTRALIZED-AWS-LAMBDA" name="Ensure that the access control through API is centralized" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The access control, authentication and authorization procedures through API shall be centralized. To implement it into Lambda functions, we have got the two options:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Lambda authorizers are Lambda functions that control access to REST API methods using bearer token authentication as well as information described by headers, paths, query strings, stage variables, or context variables request parameters.&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;TOKEN type Lambda authorizers grant a caller permissions to invoke a given request using an authorization token passed in a header. The token could be, for example, an OAuth token.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;REQUEST type Lambda authorizers grant a caller permissions to invoke a given request using request parameters, including headers, query strings, stage variables, or context parameters.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Amazon Cognito user pools let you create customizable authentication and authorization solutions for your REST APIs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt; Create an API Gateway Lambda Authorizer Lambda Function:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Before creating an API Gateway Lambda authorizer, you must first create the AWS Lambda function that implements the logic to authorize and, if necessary, to authenticate the caller. You can do so in the Lambda console, using the code template available from the API Gateway Lambda Authorizer blueprint.&lt;/li&gt; 
 &lt;li&gt;To grant IAM principals in the account that owns the API permission to call authorizer:create or create-authorizer to control the Lambda function used in your Lambda authorizer, you can create the following IAM policy.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt;
    { 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;quot;Statement&amp;quot;: [ 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; { 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;Action&amp;quot;: [ 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;apigateway:POST&amp;quot; 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;Resource&amp;quot;: [ 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;arn:aws:apigateway:region::/restapis/restapi_id/authorizers&amp;quot; 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ], 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //Create Authorizer operation is allowed only with the following Lambda function 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;Condition&amp;quot;: { 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;StringEquals&amp;quot;: { 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;apigateway:AuthorizerUri&amp;quot;: &amp;quot;arn:aws:lambda:region:account-id:function:lambda-function-name&amp;quot; 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    &amp;nbsp; &amp;nbsp; ] 
  &lt;/blockquote&gt; 
  &lt;blockquote&gt;
    } 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;p&gt;&lt;/p&gt; 
 &lt;p&gt;Create a Lambda Function for a Lambda Authorizer of the TOKEN type&lt;br /&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;In the code editor of the Lambda console, enter the following Node.js code as an example of the API Gateway Lambda authorizer of the TOKEN type.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;p&gt;// A simple TOKEN authorizer example to demonstrate how to use an authorization token&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// to allow or deny a request. In this example, the caller named 'user' is allowed to invoke&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// a request if the client-supplied token value is 'allow'. The caller is not allowed to invoke&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// the request if the token value is 'deny'. If the token value is 'Unauthorized', the function&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// returns the 'Unauthorized' error with an HTTP status code of 401. For any other token value,&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// the authorizer returns an 'Invalid token' error.&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&lt;br /&gt;&lt;/p&gt; 
   &lt;p&gt;exports.handler =&amp;nbsp; function(event, context, callback) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var token = event.authorizationToken;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; switch (token.toLowerCase()) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case 'allow':&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(null, generatePolicy('user', 'Allow', event.methodArn));&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case 'deny':&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(null, generatePolicy('user', 'Deny', event.methodArn));&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case 'unauthorized':&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(&amp;quot;Unauthorized&amp;quot;);&amp;nbsp; &amp;nbsp;// Return a 401 Unauthorized response&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default:&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(&amp;quot;Error: Invalid token&amp;quot;);&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt; 
   &lt;p&gt;};&lt;/p&gt; 
   &lt;p&gt;&lt;br /&gt;&lt;/p&gt; 
   &lt;p&gt;// Help function to generate an IAM policy&lt;/p&gt; 
   &lt;p&gt;var generatePolicy = function(principalId, effect, resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var authResponse = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; authResponse.principalId = principalId;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; if (effect &amp;amp;&amp;amp; resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var policyDocument = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Version = '2012-10-17';&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Statement = [];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var statementOne = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Action = 'execute-api:Invoke';&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Effect = effect;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Resource = resource;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Statement[0] = statementOne;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; authResponse.policyDocument = policyDocument;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Optional output with custom properties of the String, Number or Boolean type.&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; authResponse.context = {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;stringKey&amp;quot;: &amp;quot;stringval&amp;quot;,&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;numberKey&amp;quot;: 123,&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;booleanKey&amp;quot;: true&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; };&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; return authResponse;&lt;/p&gt; 
   &lt;p&gt;}&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;p&gt;Create a Lambda Function of a Lambda Authorizer of the REQUEST type&lt;br /&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;In the code editor of the Lambda console, enter the following Node.js code for a simplified Lambda function as an example of the API Gateway Lambda authorizers of the REQUEST type.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;p&gt;&lt;/p&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;p&gt;exports.handler = function(event, context, callback) {&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; console.log('Received event:', JSON.stringify(event, null, 2));&lt;/p&gt; 
   &lt;p&gt;&lt;br /&gt;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // A simple REQUEST authorizer example to demonstrate how to use request&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // parameters to allow or deny a request. In this example, a request is&amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // authorized if the client-supplied HeaderAuth1 header, QueryString1 query parameter,&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // stage variable of StageVar1 and the accountId in the request context all match&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // specified values of 'headerValue1', 'queryValue1', 'stageValue1', and&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // '123456789012', respectively.&lt;/p&gt; 
   &lt;p&gt;&lt;br /&gt;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Retrieve request parameters from the Lambda function input:&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var headers = event.headers;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var queryStringParameters = event.queryStringParameters;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var pathParameters = event.pathParameters;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var stageVariables = event.stageVariables;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var requestContext = event.requestContext;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Parse the input for the parameter values&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var tmp = event.methodArn.split(':');&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var apiGatewayArnTmp = tmp[5].split('/');&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var awsAccountId = tmp[4];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var region = tmp[3];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var restApiId = apiGatewayArnTmp[0];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var stage = apiGatewayArnTmp[1];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var method = apiGatewayArnTmp[2];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var resource = '/'; // root resource&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; if (apiGatewayArnTmp[3]) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; resource += apiGatewayArnTmp[3];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Perform authorization to return the Allow policy for correct parameters and&amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // the 'Unauthorized' error, otherwise.&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var authResponse = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var condition = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; condition.IpAddress = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; if (headers.HeaderAuth1 === &amp;quot;headerValue1&amp;quot;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; queryStringParameters.QueryString1 === &amp;quot;queryValue1&amp;quot;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; stageVariables.StageVar1 === &amp;quot;stageValue1&amp;quot;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; requestContext.accountId === &amp;quot;123456789012&amp;quot;) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(null, generateAllow('me', event.methodArn));&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&amp;nbsp; else {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; callback(&amp;quot;Unauthorized&amp;quot;);&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt; 
   &lt;p&gt;}&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;// Help function to generate an IAM policy&lt;/p&gt; 
   &lt;p&gt;var generatePolicy = function(principalId, effect, resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Required output:&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; var authResponse = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; authResponse.principalId = principalId;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; if (effect &amp;amp;&amp;amp; resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var policyDocument = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Version = '2012-10-17'; // default version&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Statement = [];&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var statementOne = {};&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Action = 'execute-api:Invoke'; // default action&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Effect = effect;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; statementOne.Resource = resource;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; policyDocument.Statement[0] = statementOne;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; authResponse.policyDocument = policyDocument;&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; // Optional output with custom properties of the String, Number or Boolean type.&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; authResponse.context = {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;stringKey&amp;quot;: &amp;quot;stringval&amp;quot;,&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;numberKey&amp;quot;: 123,&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;quot;booleanKey&amp;quot;: true&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; };&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; return authResponse;&lt;/p&gt; 
   &lt;p&gt;}&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;var generateAllow = function(principalId, resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; return generatePolicy(principalId, 'Allow', resource);&lt;/p&gt; 
   &lt;p&gt;}&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt; 
   &lt;p&gt;var generateDeny = function(principalId, resource) {&lt;/p&gt; 
   &lt;p&gt;&amp;nbsp; &amp;nbsp; return generatePolicy(principalId, 'Deny', resource);&lt;/p&gt; 
   &lt;p&gt;}&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;div&gt; 
  &lt;p&gt;Amazon Cognito&lt;/p&gt; 
  &lt;p&gt;&lt;/p&gt; 
  &lt;ul&gt; 
   &lt;li&gt;To create and configure an Amazon Cognito user pool for your API, you perform the following tasks:&lt;/li&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Use the Amazon Cognito console, CLI/SDK, or API to create a user pool-or use one that's owned by another AWS account.&lt;/li&gt; 
    &lt;li&gt;Use the API Gateway console, CLI/SDK, or API to create an API Gateway authorizer with the chosen user pool.&lt;/li&gt; 
    &lt;li&gt;Use the API Gateway console, CLI/SDK, or API to enable the authorizer on selected API methods.&lt;/li&gt; 
   &lt;/ol&gt; 
   &lt;li&gt;To call any API methods with a user pool enabled, your API clients perform the following tasks:&lt;/li&gt; 
   &lt;ol&gt; 
    &lt;li&gt;Use the Amazon Cognito CLI/SDK or API to sign a user in to the chosen user pool, and obtain an identity token or access token.&lt;/li&gt; 
    &lt;li&gt;Use a client-specific framework to call the deployed API Gateway API and supply the appropriate token in the Authorization header.&lt;/li&gt; 
   &lt;/ol&gt; 
  &lt;/ul&gt; 
  &lt;p&gt;&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Control Access to a REST API Using Amazon Cognito User Pools as Authorizer" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html"/>
            <reference name="Controlling and managing access to a REST API in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Check that access control mechanisms for the API are centralized.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.007">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C14" name="Ensure that there is no user in production with the permission to delete permission on any service" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure that there is no user in production that can delete services, functions and perhaps even data. This will ensure that nobody deletes items by accident. If delete actions are required in production, ensure that you have proper guidelines in place to prevent accidental deletion.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; To view a function's resource-based policy, use the get-policy command.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-policy --function-name my-function --output text&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For versions and aliases, append the version number or alias to the function name.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-policy --function-name my-function:PROD&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To remove permissions from your function, use remove-permission.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda remove-permission --function-name example --statement-id sns&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Use the get-layer-version-policy command to view the permissions on a layer, and remove-layer-version-permission to remove statements from the policy.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-layer-version-policy --layer-name my-layer --version-number 3 --output text&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;aws lambda remove-layer-version-permission --layer-name my-layer --version-number 3 --statement-id engineering-org&lt;/p&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use the following command to view the remove permission over a certain function:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-layer-version-policy --layer-name my-layer --version-number 3 --output text&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;Verify that the command above doesn't show the permissions defined with "Action": ["lambda:DeleteFunction"]&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-IP-ADDRESSES-VPC" name="Ensure that your VPC Lambda subnet has enough IP addresses to scale" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The subnets you specify should have sufficient available IP addresses to match the number of ENIs. If your VPC does not have sufficient ENIs or subnet IPs, your Lambda function will not scale as requests increase, and you will see an increase in invocation errors with EC2 error types like EC2ThrottledException. For asynchronous invocation, if you see an increase in errors without corresponding CloudWatch Logs, invoke the Lambda function synchronously in the console to get the error responses. &lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Review each function and verify that each function has got at least one associated subnet Id with the following command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-function --function-name &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;If there is any function without associated Subnet Id, we can update the function and assign a subnet with the following command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda update-function-configuration --function-name --vpc-config &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can only access resources and the internet through that VPC. For more information, see VPC Settings .&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; Shorthand Syntax:&lt;/p&gt; 
 &lt;p&gt;SubnetIds=string,string,SecurityGroupIds=string,string&lt;/p&gt; 
 &lt;p&gt; JSON Syntax:&lt;/p&gt; 
 &lt;p&gt;{ "SubnetIds": ["string", ...], "SecurityGroupIds": ["string", ...]&lt;/p&gt; 
 &lt;p&gt; }&lt;/p&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda get function" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/get-function.html#output"/>
            <reference name="AWS Lambda update function configuration" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/update-function-configuration.html"/>
            <reference name="Configuring a Lambda Function to Access Resources in an Amazon VPC" url="https://docs.aws.amazon.com/lambda/latest/dg/vpc.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that all functions have got at least one associate VPN subnet with the following command:&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws lambda get-function --function-name &lt;/p&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.719">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LOGS-INTEGRITY" name="Ensure the integrity of the logging system" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable AWS Log integrity for the application generated logs, such as storing logs on write-once media, forwarding a copy of the logs to a centralized SIEM or generating message digests for each log file.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;AWS Management Console:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;To enable log file integrity validation with the CloudTrail console, choose Yes for the Enable log file validation option when you create or update a trail. By default, this feature is enabled for new trails.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
 &lt;li&gt;AWS CLI:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;To enable log file integrity validation with the AWS CLI, use the --enable-log-file-validation option with the create-trail or update-trail commands.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;To disable log file integrity validation, use the --no-enable-log-file-validation option.&lt;/li&gt; 
  &lt;li&gt;For example:&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;p&gt;aws cloudtrail update-trail --name your-trail-name --enable-log-file-validation&lt;/p&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CloudTrail API:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;To enable log file integrity validation with the CloudTrail API, set the EnableLogFileValidation request parameter to true when calling CreateTrail or UpdateTrail.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI describe trails" url="https://docs.aws.amazon.com/cli/latest/reference/cloudtrail/describe-trails.html"/>
            <reference name="Enabling Log File Integrity Validation for CloudTrail" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation-enabling.html"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-04 Audit Storage Capacity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/173-08_02_AU-04"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.15" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.32" supportedStandardRef="iso-27002-2022"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the AWS Logs Integrity is enabled if the output of the following command in the AWS CLI has got the variable "LogFileValidationEnabled" set to true.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws cloudtrail describe-trails&lt;/p&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.751">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C5" name="Ensure you store your encryption keys in a Key Management System" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;AWS Key Management Service (KMS) is a managed service that makes it easy for you to create and control the encryption keys used to encrypt your data, and uses FIPS 140-2 validated hardware security modules to protect the security of your keys. AWS Key Management Service is integrated with most other AWS services to help you protect the data you store with these services. AWS Key Management Service is also integrated with AWS CloudTrail to provide you with logs of all key usage to help meet your regulatory and compliance needs.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Verify that you are using the Key Management Service. You can see a list of your customer managed keys in the AWS Management Console.&lt;br /&gt; To view your CMKs (console): &lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the AWS Management Console and open the AWS Identity and Access Management (IAM) console at https://console.aws.amazon.com/iam/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the left navigation pane, choose Encryption keys.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For Region, choose the appropriate AWS Region. Do not use the region selector in the navigation bar (top right corner). The console shows all the CMKs in your AWS account in the chosen region, including customer-managed and AWS managed CMKs. The page displays the alias, key ID, status, and creation date for each CMK.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;If you need to create a CMK:&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the AWS Management Console and open the AWS Key Management Service (AWS KMS) console at https://console.aws.amazon.com/kms.&lt;/li&gt; 
 &lt;li&gt;To change the AWS Region, use the Region selector in the upper-right corner of the page.&lt;/li&gt; 
 &lt;li&gt;In the navigation pane, choose Customer managed keys.&lt;/li&gt; 
 &lt;li&gt;Choose Create key.&lt;/li&gt; 
 &lt;li&gt;Type an alias for the CMK. The alias name cannot begin with aws/. The aws/ prefix is reserved by Amazon Web Services to represent AWS managed CMKs in your account.&lt;/li&gt; 
 &lt;li&gt;An alias is a display name that you can use to identify the CMK. We recommend that you choose an alias that indicates the type of data you plan to protect or the application you plan to use with the CMK.&lt;/li&gt; 
 &lt;li&gt;Aliases are required when you create a CMK in the AWS Management Console. They are optional when you use the CreateKey operation.&lt;/li&gt; 
 &lt;li&gt;(Optional) Type a description for the CMK.&lt;/li&gt; 
 &lt;li&gt;We recommend that you choose a description that explains the type of data you plan to protect or the application you plan to use with the CMK.&lt;/li&gt; 
 &lt;li&gt;Choose Next.&lt;/li&gt; 
 &lt;li&gt;(Optional) Type a tag key and an optional tag value. To add more than one tag to the CMK, choose Add tag.&lt;/li&gt; 
 &lt;li&gt;When you add tags to your AWS resources, AWS generates a cost allocation report with usage and costs aggregated by tags. For information about tagging CMKs, see Tagging Keys.&lt;/li&gt; 
 &lt;li&gt;Choose Next.&lt;/li&gt; 
 &lt;li&gt;Select the IAM users and roles that can administer the CMK.&lt;/li&gt; 
 &lt;li&gt;(Optional) To prevent the selected IAM users and roles from deleting this CMK, in the Key deletion section at the bottom of the page, clear the Allow key administrators to delete this key check box.&lt;/li&gt; 
 &lt;li&gt;Choose Next.&lt;/li&gt; 
 &lt;li&gt;Select the IAM users and roles that can use the CMK for cryptographic operations.&lt;/li&gt; 
 &lt;li&gt;(Optional) You can allow other AWS accounts to use this CMK for cryptographic operations. To do so, in the Other AWS accounts section at the bottom of the page, choose Add another AWS account and enter the AWS account identification number of an external account. To add multiple external accounts, repeat this step.&lt;/li&gt; 
 &lt;li&gt;Choose Next.&lt;/li&gt; 
 &lt;li&gt;Review the key policy document that was created from your choices. You can edit it, too.&lt;/li&gt; 
 &lt;li&gt;Choose Finish to create the CMK.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Key management service documentation" url="https://docs.aws.amazon.com/kms/latest/developerguide/getting-started.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check that you are using the Key Management Service. To view a list of your customer managed keys in the AWS Management Console.&lt;/li&gt; 
 &lt;li&gt;To view your CMKs (console):&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Sign in to the AWS Management Console and open the AWS Identity and Access Management (IAM) console at https://console.aws.amazon.com/iam/.&lt;/li&gt; 
  &lt;li&gt;In the left navigation pane, choose Encryption keys.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;For Region, choose the appropriate AWS Region. Do not use the region selector in the navigation bar (top right corner). The console shows all the CMKs in your AWS account in the chosen region, including customer-managed and AWS managed CMKs. The page displays the alias, key ID, status, and creation date for each CMK.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.315">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-LOG-SPECIFICS" name="Increase log reports with serverless-specific information" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Organizations adopting serverless architectures, are encouraged to augment log reports with serverless-specific information such as:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Logging of API access keys related to successful/failed logins (authentication)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Attempts to invoke serverless functions with inadequate permissions (authorizations)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Successful/failed deployment of new serverless functions or configurations (change)&lt;/li&gt; 
 &lt;li&gt;Changes to function permissions or execution roles (change)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Changes to files or access permissions on relevant cloud storage services (change)&lt;/li&gt; 
 &lt;li&gt;Changes in function trigger definitions (change)&lt;/li&gt; 
 &lt;li&gt;Anomalous interaction or irregular flow between serverless functions (change)&lt;/li&gt; 
 &lt;li&gt;Changes to 3rd party dependencies (modules, libraries or APIs)&lt;/li&gt; 
 &lt;li&gt;Outbound connections initiated by serverless functions (network)&lt;/li&gt; 
 &lt;li&gt;Execution of serverless functions or access to data from an external 3rd party account not related to the main account to which the serverless application belongs (resource access)&lt;/li&gt; 
 &lt;li&gt;Serverless function execution timeouts (failure reports)&lt;/li&gt; 
 &lt;li&gt;Concurrent serverless function execution limits reached (failure reports)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Organizations are also encouraged to adopt serverless application logic/code runtime tracing and debugging facilities in order to gain better understanding of the overall system and data flow. For example: AWS X-Ray&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt; To log more actions with the CloudTrail, we only have to create a trail as following:&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Create a trail. By default, when you create a trail in a region in the CloudTrail console, the trail applies to all regions.&lt;/li&gt; 
 &lt;li&gt;Create an Amazon S3 bucket or specify an existing bucket where you want the log files delivered. By default, log files from all regions in your account are delivered to the bucket that you specify.&lt;/li&gt; 
 &lt;li&gt;Configure your trail to log read-only, write-only, or all management events, and all or a subset of data events. By default, trails log all management events and no data events.&lt;/li&gt; 
 &lt;li&gt;Create an Amazon SNS topic to receive notifications when log files are delivered. Delivery notifications from all regions are sent to the topic that you specify.&lt;/li&gt; 
 &lt;li&gt;Configure CloudWatch Logs to receive your logs from CloudTrail so that you can monitor for specific log events.&lt;/li&gt; 
 &lt;li&gt;Change the encryption method for your log files from server-side encryption with Amazon S3-managed encryption keys (SSE-S3) to server-side encryption with AWS KMS-managed keys (SSE-KMS).&lt;/li&gt; 
 &lt;li&gt;Turn on integrity validation for log files. This enables the delivery of digest files that you can use to validate the integrity of log files after CloudTrail has delivered them.&lt;/li&gt; 
 &lt;li&gt;Add tags (custom key-value pairs) to your trail.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI describe trails" url="https://docs.aws.amazon.com/cli/latest/reference/cloudtrail/describe-trails.html"/>
            <reference name="AWS Lambda Metrics and Dimensions - CloudWatch" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html"/>
            <reference name="AWS-X-Ray" url="https://aws.amazon.com/xray/"/>
            <reference name="Creating a Trail For Your AWS Account" url="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-and-update-a-trail.html"/>
            <reference name="Logging AWS Lambda API Calls by Using AWS CloudTrail" url="https://docs.aws.amazon.com/lambda/latest/dg/logging-using-cloudtrail.html"/>
            <reference name="Logging AWS Serverless Application Repository API Calls with AWS CloudTrail" url="https://docs.aws.amazon.com/serverlessrepo/latest/devguide/logging-using-cloudtrail.html"/>
            <reference name="Troubleshooting &amp; Monitoring Lambda-based Apps with CloudWatch" url="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that the new logs are included in CloudTrail, we can get all trails with the following command: &lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; aws cloudtrail describe-trails&lt;/p&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.750">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C17" name="Limit the lifetime of your containers" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure that your containers and functions lifecycles are handled correctly and no lingering processes exist.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Use CloudWatch metrics to view the number of tasks in your services that are in the RUNNING state and set a CloudWatch alarm for this metric to alert you if the number of running tasks in your service falls below a specified value.&lt;/p&gt; 
&lt;p&gt; To view the number of running tasks in a service&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&lt;/li&gt; 
 &lt;li&gt;On the navigation pane, choose Metrics.&lt;/li&gt; 
 &lt;li&gt;On the All metrics tab, choose ECS.&lt;/li&gt; 
 &lt;li&gt;Choose ClusterName, ServiceName and then choose any metric (either CPUUtilization or MemoryUtilization) that corresponds to the service to view running tasks in.&lt;/li&gt; 
 &lt;li&gt;On the Graphed metrics tab, change Period to 1 Minute and Statistic to Sample Count.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To create a CloudWatch alarm on a metric&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&lt;/li&gt; 
 &lt;li&gt;On the left navigation, choose Alarms, Create Alarm.&lt;/li&gt; 
 &lt;li&gt;In the CloudWatch Metrics by Category section, choose ECS Metrics &amp;gt; ClusterName.&lt;/li&gt; 
 &lt;li&gt;On the Modify Alarm page, choose the MemoryReservation metric for the default cluster and choose Next.&lt;/li&gt; 
 &lt;li&gt;In the Alarm Threshold section, enter a name and description for your alarm.&lt;/li&gt; 
 &lt;li&gt;Set the threshold and time period requirement to MemoryReservation greater than 75% for 1 period.&lt;/li&gt; 
 &lt;li&gt;Configure a notification to send when the alarm is triggered. You can also choose to delete the notification if you don't want to configure one now.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="CloudWatch metrics" url="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-metrics.html#available_cloudwatch_metrics"/>
            <reference name="Tutorial: Scaling container instances with CloudWatch alarms" url="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch_alarm_autoscaling.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check CloudWatch data on containers and services that are in the RUNNING state.&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&lt;/li&gt; 
 &lt;li&gt;On the navigation pane, choose Metrics.&lt;/li&gt; 
 &lt;li&gt;On the All metrics tab, choose ECS.&lt;/li&gt; 
 &lt;li&gt;Choose ClusterName, ServiceName and then choose any metric (either CPUUtilization or MemoryUtilization) that corresponds to the service to view running tasks in.&lt;/li&gt; 
 &lt;li&gt;On the Graphed metrics tab, change Period to 1 Minute and Statistic to Sample Count.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.313">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-RESTRICT-NUMBER-ACCOUNT-TO-LOGS" name="Limit the number of accounts with privileges allowing modification and/or deletion of audit logs files" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Limit the number of accounts with privileges to modify and/or delete audit logs files.&lt;/p&gt; 
&lt;p&gt;The following AWS managed policies, which you can attach to users in your account, are specific to CloudWatch Logs:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CloudWatchLogsFullAccess - Grants full access to CloudWatch Logs.&lt;/li&gt; 
 &lt;li&gt;CloudWatchLogsReadOnlyAccess - Grants read-only access to CloudWatch Logs.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;By default, all user shall only have got the managed policy "CloudWatchLogsReadOnlyAccess", and only few users shall have got the managed policy "CloudWatchLogsFullAccess".&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to the AWS CLI.&lt;/li&gt; 
 &lt;li&gt;List all users, with the following command:&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws iam list-users&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run the following command per user to ensure that only the desired users have got the managed policy "CloudWatchLogsFullAccess" and the other users the managed policy "CloudWatchLogsReadOnlyAccess", to do it run the following command per username:&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws iam list-attached-user-policies --user-name [userName]&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;If there is at least user with the managed policy "CloudWatchLogsFullAccess" and it shall not be allowed, we have to change the managed policy for these users.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Run the following command per each user to remove the managed policy:&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws iam delete-user-policy --user-name [userName] --policy-name CloudWatchLogsFullAccess&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Run the following command per each user to add a new managed policy:&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess --user-name [userName]&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI assign policy to user" url="https://docs.aws.amazon.com/cli/latest/reference/iam/attach-user-policy.html"/>
            <reference name="AWS CLI list policies per user" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-attached-user-policies.html"/>
            <reference name="AWS CLI list users" url="https://docs.aws.amazon.com/cli/latest/reference/iam/list-users.html"/>
            <reference name="AWS CLI remove policy per user" url="https://docs.aws.amazon.com/cli/latest/reference/iam/delete-user-policy.html"/>
            <reference name="AWS Managed (Predefined) Policies for CloudWatch Logs" url="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-identity-based-access-control-cwl.html#managed-policies-cwl"/>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Go to the AWS CLI.&lt;/li&gt; 
 &lt;li&gt;List all users, with the following command: aws iam list-users&lt;/li&gt; 
 &lt;li&gt;Run the following command per user and check that only the desired users have got the managed policy "CloudWatchLogsFullAccess" and the other users the managed policy "CloudWatchLogsReadOnlyAccess", to do it run the following command per username: aws iam list-attached-user-policies --user-name [userName]&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.751">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C18" name="Monitor the containers for processes hanging" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use CloudWatch to monitor the containers and the processes&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Before your container instances can send log data to CloudWatch Logs, you must create an IAM policy to allow your container instances to use the CloudWatch Logs APIs, and then you must attach that policy to ecsInstanceRole.&lt;/p&gt; 
&lt;p&gt;To create the ECS-CloudWatchLogs IAM policy&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the IAM console at https://console.aws.amazon.com/iam/.&lt;/li&gt; 
 &lt;li&gt;In the navigation pane, choose Policies.&lt;/li&gt; 
 &lt;li&gt;Choose Create policy, JSON.&lt;/li&gt; 
 &lt;li&gt;Enter the following policy:{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": [ "logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents", "logs:DescribeLogStreams" ], "Resource": [ "arn:aws:logs:&lt;strong&gt;:*:&lt;/strong&gt;" ] } ]}&lt;/li&gt; 
 &lt;li&gt;Choose Review policy.&lt;/li&gt; 
 &lt;li&gt;On the Review policy page, enter ECS-CloudWatchLogs for the Name and choose Create policy.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To attach the ECS-CloudWatchLogs policy to ecsInstanceRole&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the IAM console at https://console.aws.amazon.com/iam/.&lt;/li&gt; 
 &lt;li&gt;In the navigation pane, choose Roles.&lt;/li&gt; 
 &lt;li&gt;Choose ecsInstanceRole. If the role does not exist, follow the procedures in Amazon ECS Container Instance IAM Role to create the role.&lt;/li&gt; 
 &lt;li&gt;Choose Permissions, Attach policy.&lt;/li&gt; 
 &lt;li&gt;To narrow the available policies to attach, for Filter, type ECS-CloudWatchLogs.&lt;/li&gt; 
 &lt;li&gt;Check the box to the left of the ECS-CloudWatchLogs policy and choose Attach policy.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To install the CloudWatch Logs agent:&lt;br /&gt; Run the following command to install the CloudWatch Logs agent.&lt;br /&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt; sudo yum install -y awslogs&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;To configure the CloudWatch Logs agent:&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Back up the existing CloudWatch Logs agent configuration file: sudo mv /etc/awslogs/awslogs.conf /etc/awslogs/awslogs.conf.bak&lt;/li&gt; 
 &lt;li&gt;Create a blank configuration file: sudo touch /etc/awslogs/awslogs.conf&lt;/li&gt; 
 &lt;li&gt;Open the /etc/awslogs/awslogs.conf file with a text editor, and copy the example file above into it.&lt;/li&gt; 
 &lt;li&gt;Install the jq JSON query utility: sudo yum install -y jq&lt;/li&gt; 
 &lt;li&gt;Query the Amazon ECS introspection API to find the cluster name and set it to an environment variable: cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')&lt;/li&gt; 
 &lt;li&gt;Replace the {cluster} placeholders in the file with the value of the environment variable you set in the previous step: sudo sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf&lt;/li&gt; 
 &lt;li&gt;Query the Amazon ECS introspection API operation to find the container instance ID and set it to an environment variable: container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )&lt;/li&gt; 
 &lt;li&gt;Replace the {container_instance_id} placeholders in the file with the value of the environment variable you set in the previous step: sudo sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To configure the CloudWatch Logs agent Region:&lt;br /&gt; By default, the CloudWatch Logs agent sends data to the us-east-1 region. To send your data to a different region, such as the Region in which your cluster is located, you can set the Region in the /etc/awslogs/awscli.conf file.&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the /etc/awslogs/awscli.conf file with a text editor.&lt;/li&gt; 
 &lt;li&gt;In the [default] section, replace us-east-1 with the Region from which to view log data.&lt;/li&gt; 
 &lt;li&gt;Save the file and exit your text editor.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To start the CloudWatch Logs agent&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Start the CloudWatch Logs agent with the following command.&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Linux: sudo service awslogs start&lt;/li&gt; 
  &lt;li&gt;Amazon Linux 2: sudo systemctl start awslogsd&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Ensure that the CloudWatch Logs agent starts at every system boot with the following command.&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Amazon Linux: sudo chkconfig awslogs on&lt;/li&gt; 
  &lt;li&gt;Amazon Linux 2: sudo systemctl enable awslogsd.service&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon ECS CloudWatch Metrics" url="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-metrics.html"/>
            <reference name="Using CloudWatch Logs with Container Instances" url="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using_cloudwatch_logs.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that each container throws their logs and follow the next steps to do it.&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Open the CloudWatch console at https://console.aws.amazon.com/cloudwatch/.&lt;/li&gt; 
 &lt;li&gt;In the left navigation pane, choose Logs.&lt;/li&gt; 
 &lt;li&gt;You should see the log groups you configured in Configuring and Starting the CloudWatch Logs Agent.&lt;/li&gt; 
 &lt;li&gt;Choose a log group to view.&lt;/li&gt; 
 &lt;li&gt;Choose a log stream to view. The streams are identified by the cluster name and container instance ID that sent the logs.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.315">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C2" name="Not expose your data stores directly to internet" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;When using S3 buckets ensure you disable public read access, unless you are using the bucket for storing images or a static website. Ensure data stores are properly protected with firewall settings and gateways. Create specific internal users to access the data store and ensure that only those users can access the data store.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt; To set ACL access permissions for an S3 bucket: &lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the AWS Management Console and open the Amazon S3 console at https://console.aws.amazon.com/s3/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the Bucket name list, choose the name of the bucket that you want to set permissions for.&lt;/li&gt; 
 &lt;li&gt;Choose Permissions .&lt;/li&gt; 
 &lt;li&gt;You can manage bucket access permissions for the following: Owner access, Access for other AWS accounts, Public access or S3 log delivery group.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How Do I Set ACL Bucket Permissions?" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-bucket-permissions.html"/>
            <reference name="Identifying Public Buckets Using Bucket Permissions Check" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/bucket-permissions-check.html"/>
            <reference name="S3 Access Control List (ACL) Overview" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html"/>
          </references>
          <standards>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the access permissions for an S3 bucket: &lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the AWS Management Console and open the Amazon S3 console at https://console.aws.amazon.com/s3/.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;In the Bucket name list, choose the name of the bucket that you want to set permissions for.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Choose Permissions.&lt;/li&gt; 
 &lt;li&gt;Check that the permissions are defined well.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.521">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC-006" name="Restrict actions of users that follow unusual patterns" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict actions that users can do outside of the approved/required business process flow.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This is important because without this safeguard in place attackers may be able to bypass or circumvent work-flows and checks allowing them to prematurely enter or skip required sections of the application potentially allowing actions/transactions to be completed without successfully completing the entire business process, leaving the system with incomplete back-end tracking information.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing for the circumvention of work flows" url="https://www.owasp.org/index.php/Testing_for_the_Circumvention_of_Work_Flows_(OTG-BUSLOGIC-006)"/>
          </references>
          <standards>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application only processes business logic flows in sequential step order and in realistic human time.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:51.891">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C7" name="Review and remove unused functions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Review the current Lambda Functions and remove those unused functions from the system.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; To list all functions:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to the AWS CLI, and write the following command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws list-functions&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review all functions search those unused functions.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;To remove a certain function:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Go to the AWS CLI, and write the following command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt; aws delete-function -function-name &lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS CLI Delete function" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/delete-function.html"/>
            <reference name="AWS CLI List functions" url="https://docs.aws.amazon.com/cli/latest/reference/lambda/list-functions.html"/>
            <reference name="Automating the discovery of unused AWS Lambda functions" url="https://aws.amazon.com/blogs/mt/automating-the-discovery-of-unused-aws-lambda-functions/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Write the following command in the AWS CLI and check that all listed functions are not unused functions:&amp;nbsp;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;aws list-functions&lt;/p&gt; 
&lt;/blockquote&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.585">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C22" name="Set a concurrency limits for your functions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Lambda provides a concurrent execution limit control at both the account level and the function level. By default, AWS Lambda limits the total concurrent executions across all functions within a given region to 1000. The function level concurrent execution limit is by default enforced against the sum of the concurrent executions of all functions.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; To set a concurrency limit for your Lambda function using the AWS CLI, do the following:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use the PutFunctionConcurrency operation and pass in the function name and concurrency limit you want allocated to this function:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt; aws lambda put-function-concurrency --function-name function-name --reserved-concurrent-executions limit value&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Managing Concurrency" url="https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html"/>
            <reference name="Set Concurrency Limits on Individual AWS Lambda Functions" url="https://aws.amazon.com/about-aws/whats-new/2017/11/set-concurrency-limits-on-individual-aws-lambda-functions/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use AWS CLI and use the following command to view the concurrency limit per function:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws lambda get-function --function-name function-name&amp;nbsp;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check all function and verify that they have got set a well the concurrency limit.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.718">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C25" name="Set time-outs on invocations of functions" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To prevent your Lambda function from running indefinitely, you specify a timeout. You shall set this value based on your expected execution time. The default for functions created in the console is 3 seconds. To ensure that you write clean code also verify that the termination criteria are met every time to prevent endless or long invocations.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Update the timeout of your functions using the following AWS CLI command:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws lambda update-function-configuration --function-name myfunction --timeout 3&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;In the example, we change the timeout limit to 3 seconds&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Limits" url="https://docs.aws.amazon.com/lambda/latest/dg/limits.html"/>
            <reference name="Best practices for AWS Lambda timeouts" url="https://epsagon.com/development/best-practices-for-aws-lambda-timeouts/"/>
            <reference name="Function configuration" url="https://docs.aws.amazon.com/lambda/latest/dg/resource-model.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Use AWS CLI and use the following command to view the timeout limit per function:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;p&gt;aws lambda get-function --function-name function-name&amp;nbsp;&lt;/p&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check all function and verify that they have got set a well the timeout limit.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.718">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C9" name="Store your environment variables in a secure place" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Plain text environment variables should not be pushed to code repositories. You can use KMS to encrypt environment variables.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;br /&gt;&lt;/b&gt; Step 1: Create the Lambda Function (If you've already created the Lambda function, skip this step)&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Sign in to the AWS Management Console and open the AWS Lambda console at https://console.aws.amazon.com/lambda/.&lt;/li&gt; 
 &lt;li&gt;Choose Create a Lambda function.&lt;/li&gt; 
 &lt;li&gt;In Select blueprint, choose the Author from scratch button.&lt;/li&gt; 
 &lt;li&gt;In Basic information, do the following:&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;In Name, specify your Lambda function name.&lt;/li&gt; 
  &lt;li&gt;In Role, choose Choose an existing role.&lt;/li&gt; 
  &lt;li&gt;In Existing role, choose lambda_basic_execution.&lt;/li&gt; 
  &lt;li&gt;Note: If the policy of the execution role does not have the decrypt permission, you will need add it.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Choose Create function.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Step 2: Configure the Lambda Function&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Under Configuration, specify the Runtime of your choice.&lt;/li&gt; 
 &lt;li&gt;Under the Lambda function code section you can take advantage of the Edit code inline option to replace the Lambda function handler code with your custom code.&lt;/li&gt; 
 &lt;li&gt;Note the Triggers tab. Under the Triggers page, you can optionally choose a service that automatically triggers your Lambda function by choosing the Add trigger button and then choosing the gray box with ellipses (...) to display a list of available services. For this example, do not configure a trigger and choose Configuration.&lt;/li&gt; 
 &lt;li&gt;Note the Monitoring tab. This page will provide immediate CloudWatch metrics for your Lambda function invocations, as well as links to other helpful guides, including Using AWS X-Ray.&lt;/li&gt; 
 &lt;li&gt;Expand the Environment variables section.&lt;/li&gt; 
 &lt;li&gt;Enter your key-value pair. Expand the Encryption configuration section. Note that Lambda provides a default service key under KMS key to encrypt at rest which encrypts your information after it has been uploaded. If the information you provided is sensitive, you can additionally check the Enable helpers for encryption in transit checkbox and supply a custom key. This masks the value you entered and results in a call to AWS KMS to encrypt the value and return it as Ciphertext. If you haven't created a KMS key for your account, you will be provided a link to the AWS IAM console to create one. The account must have have encrypt and decrypt permissions for that key. Note that the Encrypt button toggles to Decrypt after you choose it. This affords you the option to update the information. Once you have done that, choose the Encrypt button.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Environment Variables" url="https://docs.aws.amazon.com/lambda/latest/dg/env_variables.html#env_encrypt"/>
            <reference name="Storing Lambda function encrypted secrets using environment variables and KMS" url="https://docs.aws.amazon.com/lambda/latest/dg/tutorial-env_console.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Under Configuration, specify the Runtime of your choice.&lt;br /&gt;
2. Expand the Environment variables section.&lt;br /&gt;
3. Check that the Environment variables are configured well in this section.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.008">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C23" name="Use a profiler tool to improve the application" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;When using a profiler tool, the execution of your functions are monitored. It will reveal which functions are called, number of invocations, execution times, memory usage and CPU use.&lt;/p&gt;

	&lt;p&gt;You can use it to find and identify bottlenecks and address them. Therefore, you shall use a profiler tool to improve the time of use, memory usage and CPU usage of the function.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Limits" url="https://docs.aws.amazon.com/lambda/latest/dg/limits.html"/>
            <reference name="Best practices for AWS Lambda timeouts" url="https://epsagon.com/development/best-practices-for-aws-lambda-timeouts/"/>
            <reference name="Function configuration" url="https://docs.aws.amazon.com/lambda/latest/dg/resource-model.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Check that a profiler tool is used to improve the Lambda function.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.718">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-LAMBDA-C24" name="Use the API gateway Plans to throttle incoming API calls or rate limit the requests" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Throttling or rate limiting will limit the rate of transactions passing through the API Gateway. When limits are exceeded the API gateway will respond with a HTTP response error code. There are several possibilities to set throttling but the use of an API key and usage plan is a best practice.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;In the Amazon API Gateway main navigation pane, choose Usage Plans, and then choose Create.&lt;/li&gt; 
 &lt;li&gt;Under Create Usage Plan, do the following:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;For Name, type a name for your plan (for example, Plan_A).&lt;/li&gt; 
  &lt;li&gt;For Description, type a description for your plan.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select Enable throttling, and set Rate (for example, 100) and Burst (for example, 200).&lt;/li&gt; 
  &lt;li&gt;Choose Enable quota, and set its limit (for example, 5000) for a selected time interval (for example, Month).&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;li&gt;To add a stage to the plan, do the following in the Associated API Stages pane:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Choose Add API Stage.&lt;/li&gt; 
  &lt;li&gt;Choose an API (for example, PetStore) from the API drop-down list.&lt;/li&gt; 
  &lt;li&gt;Choose a stage (for example, Stage_1) from the Stage drop-down list.&lt;/li&gt; 
  &lt;li&gt;Choose the checkmark icon to save.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;li&gt;To configure method throttling, do the following:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Choose Configure Method Throttling.&lt;/li&gt; 
  &lt;li&gt;Choose Add Resource/Method.&lt;/li&gt; 
  &lt;li&gt;Choose the resource from the Resource drop-down menu.&lt;/li&gt; 
  &lt;li&gt;Choose the method from the Method drop-down menu.&lt;/li&gt; 
  &lt;li&gt;Set Rate (requests per second) (for example, 100) and Burst (for example, 200).&lt;/li&gt; 
  &lt;li&gt;Choose the checkmark icon to save.&lt;/li&gt; 
  &lt;li&gt;Choose Close.&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;li&gt;To add a key to the plan, do the following in the API Keys tab:&lt;/li&gt; 
 &lt;ol&gt; 
  &lt;li&gt;To use an existing key, choose Add API Key to Usage Plan.&lt;/li&gt; 
  &lt;li&gt;For Name, type a name for the key you want to add (for example, MyFirstKey).&lt;/li&gt; 
  &lt;li&gt;Choose the checkmark icon to save.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;As needed, repeat the preceding steps to add other existing API keys to this usage plan.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS API gateway Limits" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/limits.html"/>
            <reference name="Create and Use Usage Plans with API Keys" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-usage-plans.html"/>
            <reference name="Create, Configure, and Test Usage Plans Using the API Gateway CLI and REST API" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-usage-plans-with-rest-api.html"/>
            <reference name="Create, Configure, and Test Usage Plans with the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-usage-plans-with-console.html"/>
            <reference name="Throttle API Requests for Better Throughput" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Check that all API Gateway Plans are configured well.&lt;/li&gt; 
 &lt;li&gt;Go to the API Gateway main navigation pane, choose Usage Plans.&lt;/li&gt; 
 &lt;li&gt;Choose a usage plan from the list of usage plans.&lt;/li&gt; 
 &lt;li&gt;From within the specified plan, choose API Keys.&lt;/li&gt; 
 &lt;li&gt;Choose an API key, and then choose Usage to view Subscriber's Traffic from the plan you're monitoring, and verify that all works well&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:52.718">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL-GENERIC" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="aws-lambda" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received shall be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies, or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms, these can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;/p&gt; 
&lt;p&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one end of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/p&gt; 
&lt;p&gt;As such, all data received must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria.&lt;/p&gt; 
&lt;p&gt; Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."&lt;br /&gt; Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&lt;/p&gt; 
&lt;p&gt; While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&lt;/p&gt; 
&lt;p&gt; Validate all data received from the client, including values such as HTTP headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Enable Request Validation in API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-request-validation.html"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Input Validation Cheat Sheet" url="https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet"/>
            <reference name="OWASP Testing for Input Validation" url="https://www.owasp.org/index.php/Testing_for_Input_Validation"/>
          </references>
          <standards>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify all data input points for the application, for example:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt; 
 &lt;li&gt;API calls&lt;/li&gt; 
 &lt;li&gt;HTTP Headers&lt;/li&gt; 
 &lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt; 
 &lt;li&gt;Serialized Java objects&lt;/li&gt; 
 &lt;li&gt;Any data structure received&lt;/li&gt; 
 &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt; 
 &lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt; 
 &lt;li&gt;For each of the inputs, ensure that the data is validated against the whitelists (for example with a regular expression) before being processed.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;To test data validation:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt; 
 &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt; 
 &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;A number of tools can be used to aid in testing: &lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Directly with your browser and with the Developer Tools&lt;/li&gt; 
 &lt;li&gt;Use a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data)&lt;/li&gt; 
 &lt;li&gt;Use a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:53.008">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="aws-lambda">
          <threats>
            <threat ref="CAPEC-94" name="Man in the Middle Attack" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W4">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LAMBDA-T12" name="Attackers force to increase the Amazon billing through overloading the resources" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;One of the principles of Lambda functions is that you pay for the amount of time your code is running. This pushes the developer to write efficient code. Efficient code should also be limited in execution time. An attacker could try to force services to overload resources and push the boundaries.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W16">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C22" mitigation="20"/>
                    <countermeasure ref="AWS-LAMBDA-C24" mitigation="20"/>
                    <countermeasure ref="AWS-LAMBDA-C25" mitigation="20"/>
                    <countermeasure ref="AWS-LAMBDA-C26" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W19">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C11" mitigation="20"/>
                    <countermeasure ref="AWS-LAMBDA-C26" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C11" mitigation="20"/>
                <countermeasure ref="AWS-LAMBDA-C22" mitigation="20"/>
                <countermeasure ref="AWS-LAMBDA-C24" mitigation="20"/>
                <countermeasure ref="AWS-LAMBDA-C25" mitigation="20"/>
                <countermeasure ref="AWS-LAMBDA-C26" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1499.003" url="https://attack.mitre.org/techniques/T1499/003"/>
              </references>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W14">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C22" mitigation="13"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W15">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C20" mitigation="13"/>
                    <countermeasure ref="AWS-LAMBDA-C23" mitigation="13"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W16">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C22" mitigation="13"/>
                    <countermeasure ref="AWS-LAMBDA-C24" mitigation="13"/>
                    <countermeasure ref="AWS-LAMBDA-C25" mitigation="12"/>
                    <countermeasure ref="AWS-LAMBDA-C26" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W17">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C25" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W18">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C26" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-VPC-IP-ADDRESS-DEPLETION-WEAKNESS">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-IP-ADDRESSES-VPC" mitigation="12"/>
                    <countermeasure ref="AWS-LAMBDA-SUBNET-AVAILABILITY-ZONE" mitigation="12"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C20" mitigation="13"/>
                <countermeasure ref="AWS-LAMBDA-C22" mitigation="13"/>
                <countermeasure ref="AWS-LAMBDA-C23" mitigation="13"/>
                <countermeasure ref="AWS-LAMBDA-C24" mitigation="13"/>
                <countermeasure ref="AWS-LAMBDA-C25" mitigation="12"/>
                <countermeasure ref="AWS-LAMBDA-C26" mitigation="12"/>
                <countermeasure ref="AWS-LAMBDA-IP-ADDRESSES-VPC" mitigation="12"/>
                <countermeasure ref="AWS-LAMBDA-SUBNET-AVAILABILITY-ZONE" mitigation="12"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LAMBDA-T5" name="Lambda function is exploited by a non-HTTP event through code injection" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;A Lambda function can be triggered by a non-HTTP event (e.g. S3, SNS, SES, CloudWatch Events, etc.). When input validation is non-existing or not strong, malicious code can be injected through the input parameters. This may lead to complete compromise of the application and data stores.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W9">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C11" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C11" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LAMBDA-T9" name="Lambda functions are accessible through an unclean container" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;Cloud providers run your functions in a container. Because you want your function to execute as fast and efficient as possible, the containers are kept warm. This means that a container will be persistent for a while after a function is executed. This could leave room for a successful attack on the container.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W11">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C17" mitigation="25"/>
                    <countermeasure ref="AWS-LAMBDA-C20" mitigation="25"/>
                    <countermeasure ref="AWS-LAMBDA-C23" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W12">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C18" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C17" mitigation="25"/>
                <countermeasure ref="AWS-LAMBDA-C18" mitigation="25"/>
                <countermeasure ref="AWS-LAMBDA-C20" mitigation="25"/>
                <countermeasure ref="AWS-LAMBDA-C23" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-172" name="Attackers subvert the intended workflow of the application in order to perform unauthorised operations" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;If an application enforces an order in workflows, then attackers could attempt to bypass this order so that they can perform operations for which they are not authorized. The technique can also be used to gain access to unauthorized data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-841">
                  <countermeasures>
                    <countermeasure ref="OTG-BUSLOGIC" mitigation="50"/>
                    <countermeasure ref="OTG-BUSLOGIC-006" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="OTG-BUSLOGIC" mitigation="50"/>
                <countermeasure ref="OTG-BUSLOGIC-006" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LAMBDA-T15" name="Lambda function is compromised through a code injection attack" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;When input validation is non-existent or not strong, malicious code can be injected through the input parameters. This may compromise the complete application and data stores.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W9">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL-GENERIC" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL-GENERIC" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHORIZATION" name="Authorization" desc="" library="aws-lambda">
          <threats>
            <threat ref="CAPEC-233" name="Privilege Escalation" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W10">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C12" mitigation="50"/>
                    <countermeasure ref="AWS-LAMBDA-C14" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C12" mitigation="50"/>
                <countermeasure ref="AWS-LAMBDA-C14" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W10">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C12" mitigation="50"/>
                    <countermeasure ref="AWS-LAMBDA-C16" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C12" mitigation="50"/>
                <countermeasure ref="AWS-LAMBDA-C16" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="SENSITIVE INFORMATION IN DATA STORES" name="Sensitive information in data stores" desc="" library="aws-lambda">
          <threats>
            <threat ref="AWS-LAMBDA-T1" name="Sensitive information is leaked from data stores" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;Sensitive information is exfiltrated from a data store because there is no encryption applied or the server was misconfigured&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W2">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C2" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="SENSITIVE INFORMATION IN LOGS" name="Sensitive information in logs" desc="" library="aws-lambda">
          <threats>
            <threat ref="AWS-LAMBDA-T14" name="Sensitive data is leaked through non-sanitized debugging/logging statements" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;Whilst logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships, ensuring sensitive user data and system information are not exposed to potential attackers.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W21">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C29" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W22">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C29" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C29" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="AUTHENTICATION" name="Authentication" desc="" library="aws-lambda">
          <threats>
            <threat ref="AWS-LAMBDA-T13" name="Attackers gain access to a Lambda function through a Cross-site scripting attack on the DynamoDB API" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;Through a Cross-site scripting attack an attacker retrieves credentials. The parameters weren't validated, resulting in an injection of code to retrieve sensitive data such as as credentials.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W20">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL-GENERIC" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL-GENERIC" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-LAMBDA-T4" name="Attackers gain access to the AWS account through leaked credentials" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;By storing your account information or environment variables in a "public" resource or storing them as plain text, attackers can find that information. Attackers will scan GitHub repositories or scrape/crawl files on your resources to find this kind of information.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W7">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C8" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-LAMBDA-W8">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C9" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C8" mitigation="50"/>
                <countermeasure ref="AWS-LAMBDA-C9" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-592">
                  <countermeasures>
                    <countermeasure ref="ACCESS-CONTROL-CENTRALIZED-AWS-LAMBDA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ACCESS-CONTROL-CENTRALIZED-AWS-LAMBDA" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="PATCHING" name="Patching" desc="" library="aws-lambda">
          <threats>
            <threat ref="AWS-LAMBDA-T3" name="Attackers exploit an unused function to enter the system" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;A &amp;quot;problem&amp;quot; with serverless architecture is that you don't pay for functions that aren't used. This means that your unused functions will not appear on your bill. If the unused functions become forgotten, they can become a threat. Those functions will not be updated or patched.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-LAMBDA-W6">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-C7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-C7" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="MONITORING AND LOGGING" name="Monitoring and Logging" desc="" library="aws-lambda">
          <threats>
            <threat ref="CAPEC-93" name="An attacker injects, manipulates or forges malicious log entries in the log file, allowing her to mislead a log audit, cover traces of attack, or perform other malicious actions" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="aws-lambda" editable="true">
              <desc>	&lt;p&gt;This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="AWS-LAMBDA-LOG-SPECIFICS" mitigation="33"/>
                    <countermeasure ref="AWS-LOGS-INTEGRITY" mitigation="34"/>
                    <countermeasure ref="AWS-RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-LAMBDA-LOG-SPECIFICS" mitigation="33"/>
                <countermeasure ref="AWS-LOGS-INTEGRITY" mitigation="34"/>
                <countermeasure ref="AWS-RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="43ded5ab-1824-4a3f-a610-bf6a45a4593d" diagramComponentId="0c62f9f0-a546-4ea3-8ec9-42091a5f8dfd" ref="2f86badd-0dbf-4f3b-9e42-8e973bb09a5b" name="AWS S3 (Simple Storage Service)" desc="" library="Hydras-AWS-Foundation" parentComponentRef="" componentDefinitionRef="s3">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="public-cloud"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AWS-S3-7.2" name="Data is easily removed" state="0" impact="100" issueId="" issueLink="">
          <desc>Someone without credentials can remove sensitive data, the remove function is not protected
                        for an MFA.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.352">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="misconfigured-s3-access-policies" name="Misconfigured S3 access policies" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                        Amazon S3 buckets use misconfigured policies that allow unauthorized users to:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt; Read sensitive information. &lt;br /&gt;&lt;/li&gt;
                        &lt;li&gt;Add malicious content to a bucket and overwrite content.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.353">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.4" name="Sensitive data is accessible" state="0" impact="100" issueId="" issueLink="">
          <desc>Sensitive data is not encrypted and is exposed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.352">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.3" name="Sensitive data is exposed in transit" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Sensitive data is not encrypted in transit with HTTPS or SSL, and is accessible while traversing the network.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.352">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="SYSTEM-VUL-DOS" name="System is vulnerable to a denial of service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Attackers can perform a successful denial of service on the system</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.353">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AWS-S3-7.1" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently, the data cannot be easily recovered or they cannot be recovered at all.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.351">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="Hydras-AWS-IAM-2.7" name="Allocate privileges via groups or roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Granting least privilege ensures that users only have the permissions required to complete
                their jobs rather than additional privileges that are not required. Following this model ensures
                that, should an account be compromised, the blast radius of damage is limited.
                &lt;br /&gt;
                &lt;br /&gt;
                &lt;b&gt;Remediation:&lt;/b&gt;
                &lt;div&gt;
                &lt;ul&gt;
                &lt;li&gt;Allocate privileges via groups or roles via the recommendation in &amp;quot;Use RBAC
                with pre-defined policies added into groups or roles&amp;quot;.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;/div&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="AWS Lambda Permissions Model" url="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html"/>
            <reference name="AWS Use API Gateway Lambda Authorizers" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html"/>
            <reference name="Configure Lambda Authorizer Using the API Gateway Console" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/configure-api-gateway-lambda-authorization-with-console.html"/>
            <reference name="Security best practices in Amazon API Gateway" url="https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html"/>
            <reference name="Using Identity-Based Policies (IAM Policies) for AWS Lambda" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html"/>
            <reference name="Using Resource-Based Policies for AWS Lambda (Lambda Function Policies)" url="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Follow the audit check in &amp;quot;Use RBAC with pre-defined policies added into
                            groups or roles&amp;quot;.&lt;/li&gt;
                            &lt;li&gt;Ensure the privileges granted to these groups or roles only give the user the
                            ability to perform their and no more.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.113">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-EC2-6.3" name="Apply IAM roles" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Applications that run on an Amazon EC2/S3 instance need credentials in order to access other AWS services. To provide credentials to the application in a secure way, use IAM roles. A role is an entity that has its own set of permissions, but that isn't a user or group. Roles also don't have their own permanent set of credentials the way IAM users do. In the case of Amazon EC2/S3, IAM dynamically provides temporary credentials to the EC2/S3 instance, and these credentials are automatically rotated for you. 
&lt;br /&gt; 
&lt;br /&gt;When you launch an EC2/S3 instance, you can specify a role for the instance as a launch parameter. Applications that run on the EC2/S3 instance can use the role's credentials when they access AWS resources. The role's permissions determine what the application is allowed to do. It is recommended that all EC2/S3 instances are launched with a role, even if the role has no permissions (as they can be added later if desired). 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;br /&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt; 
  &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt; 
  &lt;li&gt;Select &amp;quot;Launch Instance&amp;quot;.&lt;/li&gt; 
  &lt;li&gt;Complete the wizard until step 3 at which point ensure an IAM role is selected for the &amp;quot;IAM role&amp;quot; option (note the role must already exist).&lt;/li&gt; 
  &lt;li&gt;Complete the wizard to launch the instance.&lt;/li&gt; 
 &lt;/ol&gt;NB: You cannot add a role to an instance that has been launched without one. In these cases create an AMI from an existing instance and launch a new instance, assigning an IAM role as detailed above. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; &lt;br /&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.18" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Login to the AWS Management Console.&lt;/li&gt;
                            &lt;li&gt;Select EC2/S3 from the services menu.&lt;/li&gt;
                            &lt;li&gt;Select &amp;quot;Instances&amp;quot; from the left hand menu.&lt;/li&gt;
                            &lt;li&gt;For each instance in the list:&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;select the instance&lt;/li&gt;
                            &lt;li&gt;in the preview pane confirm the instance has an &amp;quot;IAM Role&amp;quot;
                            assigned (if a hyphen &amp;quot;-&amp;quot; is shown then your instance has no role
                            assigned).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.113">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-3.11" name="Configure S3 bucket versioning for sensitive data" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To add an extra layer of security to data stored within S3 it is possible to enable object versioning. Object versioning enables the recovery of objects from accidental overwrite or accidental deletion. If an object is deleted, instead of being removed, S3 write a delete marker which becomes the current version that means previous versions can always be recovered. It is recommended that versioning be enabled for buckets storing sensitive data. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;div&gt;
   aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled 
 &lt;/div&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-versioning.html"/>
            <reference name="List buckets" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket versioning" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-versioning.html"/>
            <reference name="S3 Versioning" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/Versioning.html"/>
          </references>
          <standards>
            <standard ref="3.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="3.11" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;If you don't see &amp;quot;Status&amp;quot;: &amp;quot;Enabled&amp;quot;
                            then your bucket has no versioning enabled.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.114">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-1" name="Discover, classify and secure all data" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Amazon S3 buckets can contain sensitive data, that for security purposes should be discovered, monitored, classified and protected. Macie along with other 3rd party tools can automatically provide an inventory of Amazon S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Using a Cloud service or 3rd Party software to continuously monitor and automate the process of data discovery and classification for S3 buckets using machine learning and pattern matching is a strong defense in protecting that information.&lt;/p&gt;&lt;p&gt;Amazon Macie is a fully managed data security and data privacy service that uses machine learning and pattern matching to discover and protect your sensitive data in AWS.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Perform the steps below to enable and configure Amazon Macie From Console:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Log on to the Macie console at https://console.aws.amazon.com/macie/&lt;/li&gt;&lt;li&gt;Click Get started.&lt;/li&gt;&lt;li&gt;Click Enable Macie.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Setup a repository for sensitive data discovery results&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the Left pane, under Settings, click Discovery results.&lt;/li&gt;&lt;li&gt;Make sure Create bucket is selected.&lt;/li&gt;&lt;li&gt;Create a bucket, enter a name for the bucket. The name must be unique across all S3 buckets. In addition, the name must start with a lowercase letter or a number.&lt;/li&gt;&lt;li&gt;Click on Advanced.&lt;/li&gt;&lt;li&gt;Block all public access, make sure Yes is selected.&lt;/li&gt;&lt;li&gt;KMS encryption, specify the AWS KMS key that you want to use to encrypt the results. The key must be a symmetric, customer master key (CMK) that's in the same Region as the S3 bucket.&lt;/li&gt;&lt;li&gt;Click on Save&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Create a job to discover sensitive data&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click S3 buckets. Macie displays a list of all the S3 buckets for your account.&lt;/li&gt;&lt;li&gt;Select the check box for each bucket that you want Macie to analyze as part of the job&lt;/li&gt;&lt;li&gt;Click Create job.&lt;/li&gt;&lt;li&gt;Click Quick create.&lt;/li&gt;&lt;li&gt;For the Name and description step, enter a name and, optionally, a description of the job.&lt;/li&gt;&lt;li&gt;Then click Next.&lt;/li&gt;&lt;li&gt;For the Review and create step, click Submit.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Review your findings&lt;/p&gt;&lt;ol&gt;&lt;li&gt;In the left pane, click Findings.&lt;/li&gt;&lt;li&gt;To view the details of a specific finding, choose any field other than the check box for the finding.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;If you are using a 3rd Party tool to manage and protect your s3 data, follow the Vendor documentation for implementing and configuring that tool.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.4" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform the following steps to determine if Macie is running: From Console:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the Macie console at https://console.aws.amazon.com/macie/&amp;nbsp;&lt;/li&gt;&lt;li&gt;In the left hand pane click on By job under findings.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Confirm that you have a Job setup for your S3 Buckets&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;When you log into the Macie console if you aren't taken to the summary page and you don't have a job setup and running then refer to the remediation procedure below. If you are using a 3rd Party tool to manage and protect your s3 data you meet this recommendation.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.111">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-3" name="Enable cross-region replication on S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enabling cross-Region replication on S3 buckets ensures that multiple versions of the data are available in different distinct Regions. This allows you to store data at even greater distances, minimize latency, increase operational efficiency, and protect against DDoS and data corruption events.&lt;/p&gt;&lt;p&gt;This is one method used to implement system hardening configuration.&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;To enable S3 bucket replication&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Amazon S3 console at https://console.aws.amazon.com/s3/.&lt;/li&gt;&lt;li&gt;Choose the S3 bucket that does not have cross-region replication enabled.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Management&lt;/strong&gt;, then choose &lt;strong&gt;Replication&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Add rule&lt;/strong&gt;. If versioning is not already enabled, you are prompted to enable it.&lt;/li&gt;&lt;li&gt;Choose your source bucket - &lt;strong&gt;Entire bucket&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose your destination bucket. If versioning is not already enabled on the destination bucket for your account, you are prompted to enable it.&lt;/li&gt;&lt;li&gt;Choose an IAM role. For more information on setting up permissions for replication, see the &lt;i&gt;Amazon Simple Storage Service User Guide&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;Enter a rule name, choose &lt;strong&gt;Enabled&lt;/strong&gt; for the status, then choose &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;Choose &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS PCI-DSS Controls" url="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-pci-controls.html"/>
          </references>
          <standards>
            <standard ref="2.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.113">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AWS-S3-2" name="Enable Object-level logging for read and write events" issueId="" issueLink="" platform="" cost="0" risk="45" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;S3 object-level API operations such as GetObject, DeleteObject, and PutObject are called data events. By default, CloudTrail trails don't log data events and so it is recommended to enable Object-level logging for S3 buckets.&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Enabling object-level logging will help you meet data compliance requirements within your organization, perform comprehensive security analysis, monitor specific patterns of user behavior in your AWS account or take immediate actions on any object-level API activity within your S3 Buckets using Amazon CloudWatch Events.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;Click on the Object-level logging setting, enter the CloudTrail name for the recording activity. You can choose an existing Cloudtrail or create a new one by navigating to the Cloudtrail console link https://console.aws.amazon.com/cloudtrail/&lt;/li&gt;&lt;li&gt;Once the Cloudtrail is selected, check the Write event checkbox, so that object-level logging for Write events is enabled.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to enable object-level logging of write events for other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;To enable object-level data events logging for S3 buckets within your AWS account, run put-event-selectors command using the name of the trail that you want to reconfigure as identifier: aws cloudtrail put-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --event-selectors '[{ "ReadWriteType": "WriteOnly", "IncludeManagementEvents":true, "DataResources": [{ "Type": "AWS::S3::Object", "Values": ["arn:aws:s3:::&amp;lt;s3-bucket-name&amp;gt;/"] }] }]'&lt;/li&gt;&lt;li&gt;The command output will be object-level event trail configuration.&lt;/li&gt;&lt;li&gt;If you want to enable it for all buckets at once then change Values parameter to ["arn:aws:s3"] in command given above.&lt;/li&gt;&lt;li&gt;Repeat step 1 for each s3 bucket to update object-level logging of write events.&lt;/li&gt;&lt;li&gt;Change the AWS region by updating the --region command parameter and perform the process for other regions.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.10" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="3.11" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;From Console:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Login to the AWS Management Console and navigate to S3 dashboard at https://console.aws.amazon.com/s3/&lt;/li&gt;&lt;li&gt;In the left navigation panel, click buckets and then click on the S3 Bucket Name that you want to examine.&lt;/li&gt;&lt;li&gt;Click Properties tab to see in detail bucket configuration.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Disabled, then object-level logging of read/write events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;If the current status for Object-level logging is set to Enabled, but the Read event check-box is unchecked, then object-level logging of read events for the selected s3 bucket is not set.&lt;/li&gt;&lt;li&gt;Repeat steps 2 to 5 to verify object level logging status of other S3 buckets.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;From Command Line:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1. Run list-trails command to list the names of all Amazon CloudTrail trails currently available in the selected AWS region:&amp;nbsp;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail list-trails --region &amp;lt;region-name&amp;gt; --query Trails[*].Name&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2. The command output will be a list of the requested trail names.&lt;/p&gt;&lt;p&gt;3. Run get-event-selectors command using the name of the trail returned at the previous step and custom query filters to determine if Data events logging feature is enabled within the selected CloudTrail trail configuration for s3bucket resources:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;aws cloudtrail get-event-selectors --region &amp;lt;region-name&amp;gt; --trail-name &amp;lt;trail-name&amp;gt; --query EventSelectors[*].DataResources[]&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;4. The command output should be an array that contains the configuration of the AWS resource(S3 bucket) defined for the Data events selector.&lt;/p&gt;&lt;p&gt;5. If the get-event-selectors command returns an empty array '[]', the Data events are not included into the selected AWS Cloudtrail trail logging configuration, therefore the S3 object-level API operations performed within your AWS account are not recorded.&lt;/p&gt;&lt;p&gt;6. Repeat steps 1 to 5 for auditing each s3 bucket to identify other trails that are missing the capability to log Data events.&lt;/p&gt;&lt;p&gt;7. Change the AWS region by updating the --region command parameter and perform the audit process for other regions.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.113">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.4" name="Encrypt sensitive data at rest for Amazon S3" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Encrypt sensitive data at rest for Amazon S3&lt;/p&gt;&lt;p&gt;Rationale:&lt;/p&gt;&lt;p&gt;Data protection at rest refers to protecting data while it is stored on disks in Amazon S3 data centers.&lt;/p&gt;&lt;p&gt;You have the following options for protecting data at rest in Amazon S3:&lt;/p&gt;&lt;p&gt;- Server-Side Encryption - Request Amazon S3 to encrypt your object before saving it on disks in its data centers and then decrypt it when you download the objects.&lt;/p&gt;&lt;p&gt;- Client-Side Encryption - Encrypt data client-side and upload the encrypted data to Amazon S3. In this case, you manage the encryption process, the encryption keys, and related tools.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;p&gt;Server-Side Encryption&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;You can't apply different types of server-side encryption to the same object simultaneously.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3)&lt;/p&gt;&lt;p&gt;When you use Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3), each object is encrypted with a unique key. As an additional safeguard, it encrypts the key itself with a root key that it regularly rotates. Amazon S3 server-side encryption uses one of the strongest block ciphers available, 256-bit Advanced Encryption Standard (AES-256) GCM, to encrypt your data. For objects encrypted prior to AES-GCM, AES-CBC is still supported to decrypt those objects.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with KMS keys Stored in AWS Key Management Service (SSE-KMS)&lt;/p&gt;&lt;p&gt;Server-Side Encryption with AWS KMS keys (SSE-KMS) is similar to SSE-S3, but with some additional benefits and charges for using this service. There are separate permissions for the use of a KMS key that provides added protection against unauthorized access of your objects in Amazon S3. SSE-KMS also provides you with an audit trail that shows when your KMS key was used and by whom. Additionally, you can create and manage customer managed keys or use AWS managed keys that are unique to you, your service, and your Region.&lt;/p&gt;&lt;p&gt;Server-Side Encryption with Customer-Provided Keys (SSE-C)&lt;/p&gt;&lt;p&gt;With Server-Side Encryption with Customer-Provided Keys (SSE-C), you manage the encryption keys and Amazon S3 manages the encryption, as it writes to disks, and decryption, when you access your objects.&lt;/p&gt;&lt;p&gt;Client-Side Encryption&lt;/p&gt;&lt;p&gt;To enable client-side encryption, you have the following options:&lt;/p&gt;&lt;p&gt;- Use a key stored in AWS Key Management Service (AWS KMS).&lt;/p&gt;&lt;p&gt;- Use a key that you store within your application.&lt;/p&gt;&lt;p&gt;Note&lt;/p&gt;&lt;p&gt;Amazon S3 supports only symmetric encryption KMS keys, and not asymmetric KMS keys.&lt;/p&gt;&lt;p&gt;For more information about each encryption option, please see Reference URLs.&lt;/p&gt;&lt;p&gt;Impact:&lt;/p&gt;&lt;p&gt;None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Protecting data using Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingEncryption.html"/>
            <reference name="Protecting data using client-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingClientSideEncryption.html"/>
            <reference name="Protecting data using server-side encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt; 
 &lt;p&gt;aws s3api head-object --bucket my-bucket --key my-key &lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt; Look for the line "ServerSideEncryption" and verify that it is set to "aws:kms" which indicates KMS Encryption.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.114">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-audit-s3" name="Identify and audit all your Amazon S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Identification of your IT assets is a crucial aspect of governance and security. You need to have visibility of all your Amazon S3 resources to assess their security posture and take action on potential areas of weakness. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Use Tag Editor to identify security-sensitive or audit-sensitive resources, then use those tags when you need to search for these resources. For more information, see Searching for Resources to Tag. 
&lt;/div&gt; 
&lt;br /&gt;Use Amazon S3 inventory to audit and report on the replication and encryption status of your objects for business, compliance, and regulatory needs. For more information, see Amazon S3 Inventory. 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
  Create resource groups for your Amazon S3 resources. For more information, see What Is AWS Resource Groups? 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            <reference name="Searching for Resources to Tag" url="https://docs.aws.amazon.com/ARG/latest/userguide/tag-editor.html"/>
            <reference name="What Is AWS Resource Groups?" url="https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Use Amazon S3 inventory tool to review the replication and encryption status of your S3 buckets. 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.114">
              <output/>
            </source>
            <references>
              <reference name="Amazon S3 Inventory" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-1.16" name="Require server-side and in transit encryption" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Data in transit is data being accessed over the network, and therefore could be intercepted by someone else on the network or with access to the physical media the network uses. On an ethernet network, that could be someone with the ability to tap a cable, configure a switch to mirror traffic, or fool your client or a router into directing traffic to them before it moves on to the final destination. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Server-side encryption (SSE) is about data encryption at rest-that is, Amazon S3 encrypts your data at the object level as it writes it to disks in its data centers and decrypts it for you when you access it. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; Amazon S3 offers 3 options of encrypting data at rest, depending on how you choose to manage the encryption keys: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use SSE with Amazon S3-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with AWS KMS-Managed Keys&lt;/li&gt; 
  &lt;li&gt;Use SSE with Customer-Provided Keys&lt;/li&gt; 
 &lt;/ul&gt; At the time of object creation-that is, when you are uploading a new object or making a copy of an existing object-you can specify if you want Amazon S3 to encrypt your data by adding the "x-amz-server-side-encryptionheader" to the request. Set the value of the header to the encryption algorithm AES256 that Amazon S3 supports. Amazon S3 confirms that your object is stored using server-side encryption by returning the response header "x-amz-server-side-encryption". 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; No matter which of the three options you choose, you can create and attach a S3 bucket policy, that will deny any object creation S3 API (PUT Object, PUT Object - Copy, POST Object, Initiate Multipart Upload), if the request does not include the "x-amz-server-sideencryption" header requesting server-side encryption, and if the request was not done using SSL\TLS. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; When it comes to data at rest, if kept unencrypted, there are a few threats that one can think of, especially when the data is stored in the cloud: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;the threat that attackers are able to compromise Amazon S3 and gain access to the data that is stored in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the "insider threat" where a malicious or rogue administrator steals a physical disk drive or server that contains data a customer has in the Amazon S3 buckets.&lt;/li&gt; 
  &lt;li&gt;the threat that a government uses a subpoena or warrant to get access to a customer's data in Amazon S3 without their knowledge.&lt;/li&gt; 
 &lt;/ul&gt; If data in transit is kept unencrypted: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Malicious users may intercept or monitor plaintext data transmitting across unencrypted network and gain unauthorized access to that jeopardize the confidentiality of the sensitive data.&lt;/li&gt; 
 &lt;/ul&gt; In all of these scenarios, encrypting data at rest and in transit, and properly managing the encryption keys can help mitigate the risk of unauthorized access to that data. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;br&gt; 
  &lt;/div&gt; 
  &lt;div&gt; 
   &lt;div&gt;
     Perform the following to ensure all objects placed in S3 are encrypted in transit and at rest: 
   &lt;/div&gt; 
   &lt;div&gt; 
    &lt;ul&gt; 
     &lt;li&gt;Create a new file, add the following to it, and save it as policy.json:&lt;/li&gt; 
    &lt;/ul&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       { 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Version":"2012-10-17", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Id":"PutObjPolicy", 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;"Statement":{ 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Sid":"DenyUnEncryptedObjectUploads", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Effect":"Deny", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Principal":"*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Action":"s3:PutObject", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Resource":"arn:aws:s3:::&amp;lt;s3_bucket_name&amp;gt;/*", 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;"Condition":{ 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Null":{ "s3:x-amz-server-side-encryption":"true" }, 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt; 
        &lt;div&gt;
          &amp;nbsp;"Bool": { "aws:SecureTransport": "false" } 
        &lt;/div&gt; 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt; 
       &lt;div&gt;
         &amp;nbsp;} 
       &lt;/div&gt; 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt; 
      &lt;div&gt;
        &amp;nbsp;} 
      &lt;/div&gt; 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt; 
     &lt;div&gt;
       } 
     &lt;/div&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;div&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Attach the above bucket policy to each S3 bucket:&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;div&gt; 
    &lt;div&gt;
      aws s3api put-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --policy file://policy.json 
    &lt;/div&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Get bucket policy" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/get-bucket-policy.html"/>
            <reference name="List buckets" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html"/>
            <reference name="Put bucket policy" url="https://docs.aws.amazon.com/cli/latest/reference/s3api/put-bucket-policy.html"/>
            <reference name="Using Server-side Encryption" url="https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingServerSideEncryption.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="3.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Using the Amazon unified command line interface:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;List all the S3 buckets from the AWS account:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api list-buckets --output table
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;For each S3 bucket, list the bucket policy and verify that a policy exists, the policy contains a statement to deny PutObject calls that do not require server-side encryption, and the policy denies requests that do not occur over a secure transport:&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            aws s3api get-bucket-policy --bucket &amp;lt;s3_bucket_name&amp;gt; --query 'Policy'
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            ...
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;{
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Sid": "DenyUnEncryptedObjectUploads",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Effect": "Deny",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Principal": "*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Action": "s3:PutObject",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Resource": "arn:aws:s3:::/*",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Condition": {
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Null": { "s3:x-amz-server-side-encryption": "true",
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;"Bool": { "aws:SecureTransport": "false" }
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;/blockquote&gt;
                            &lt;blockquote&gt;
                            &amp;nbsp;}
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            &lt;br&gt;
                            &lt;/div&gt;
                            &lt;/blockquote&gt;
                            &lt;div&gt;&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.114">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="restrict-s3-bucket-access" name="Restrict Amazon S3 Bucket Access" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Unless you explicitly require anyone on the Internet to be able to read or write to your S3 bucket, you shall ensure that your S3 bucket is not public. The following are some of the steps you can take: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use Amazon S3 block public access. Account administrators and bucket owners can easily set up centralized controls to limit public access to their Amazon S3 resources that are enforced regardless of how the resources are created. For more information, see Using Amazon S3 Block Public Access.&lt;/li&gt; 
  &lt;li&gt;Identify Amazon S3 bucket policies that allow a wildcard identity such as Principal "*" (which effectively means "anyone") or allows a wildcard action "*" (which effectively allows the user to perform any action in the Amazon S3 bucket).&lt;/li&gt; 
  &lt;li&gt;Similarly, note Amazon S3 bucket access control lists (ACLs) that provide read, write, or full-access to "Everyone" or "Any authenticated AWS user."&lt;/li&gt; 
  &lt;li&gt;Use the ListBuckets API to scan all of your Amazon S3 buckets. Then use GetBucketAcl, GetBucketWebsite, and GetBucketPolicy to determine whether the bucket has compliant access controls and configuration.&lt;/li&gt; 
  &lt;li&gt;Use AWS Trusted Advisor to inspect your Amazon S3 implementation.&lt;/li&gt; 
  &lt;li&gt;Consider implementing on-going detective controls using the s3-bucket-public-read-prohibited and s3-bucket-public-write-prohibited managed AWS Config Rules.&lt;br&gt;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;br&gt; 
&lt;br&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Checklist" url="https://d1.awsstatic.com/whitepapers/Security/AWS_Security_Checklist.pdf"/>
            <reference name="Amazon S3 Security Best Practices" url="https://github.com/awsdocs/amazon-s3-developer-guide/blob/master/doc_source/security-best-practices.md"/>
            <reference name="Introduction to Managing Access Permissions to Your Amazon S3 Resources" url="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-managing-access-s3-resources.html"/>
            <reference name="Setting Bucket and Object Access Permissions" url="https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-permissions.html"/>
          </references>
          <standards>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
            <standard ref="1.16" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.4.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.1.5" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="2.1.5" supportedStandardRef="CIS AWS Standard"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            Prowler is a command line tool for AWS Security Best Practices Assessment, Auditing, Hardening and Forensics Readiness Tool.
                            It follows guidelines of the CIS Amazon Web Services Foundations Benchmark (49 checks) and has 40 additional checks including related to GDPR and HIPAA.
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            If you'd like to check there are no S3 buckets open to the Everyone or Any AWS user you can run the tool with the following arguments:
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            ./prowler -c extra73
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;
                            &lt;div&gt;
                            &lt;br /&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.114">
              <output/>
            </source>
            <references>
              <reference name="Prowler: AWS CIS Benchmark Tool" url="https://github.com/toniblyx/prowler"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.3" name="Set HTTPS for sensitive information" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br&gt; 
&lt;br&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br&gt; 
&lt;br&gt;To ensure that data is only accessible via HTTPS (as opposed to both HTTP and HTTPS) it is possible to add a condition to the S3 bucket policy. It is recommended to enable this for any bucket containing sensitive data to ensure that data is encrypted in transit. 
&lt;div&gt; 
 &lt;br&gt; 
 &lt;b&gt;Remediation:&lt;br&gt;&lt;/b&gt;The following is an example of how to create an S3 bucket policy that enforces HTTPS/SSL only 
 &lt;br&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Go to the S3 Service on the AWS Console&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Select a bucket under "All buckets"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Click the properties tab&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Under the permissions select "Add a bucket policy"&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Add the following policy to ensure all objects are accessed via https only&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; {&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt; "Statement":[&lt;/i&gt; 
   &lt;i&gt;{&lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; "Action": "s3:*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Effect":"Allow",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Principal": "*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Resource":"arn:aws:s3:::bucketname/*",&lt;/i&gt; 
    &lt;/div&gt; 
    &lt;div&gt; 
     &lt;i&gt;"Condition":{&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;div&gt; 
       &lt;i&gt;"Bool":&lt;/i&gt; 
      &lt;/div&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;{&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;"aws:SecureTransport": true&amp;nbsp;&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;blockquote&gt; 
       &lt;div&gt; 
        &lt;i&gt;}&lt;/i&gt; 
       &lt;/div&gt; 
      &lt;/blockquote&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;blockquote&gt; 
     &lt;blockquote&gt; 
      &lt;i&gt;}&lt;/i&gt; 
     &lt;/blockquote&gt; 
    &lt;/blockquote&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;blockquote&gt; 
   &lt;blockquote&gt; 
    &lt;div&gt; 
     &lt;i&gt; }&lt;/i&gt; 
     &lt;i&gt;]&lt;/i&gt; 
    &lt;/div&gt; 
   &lt;/blockquote&gt; 
  &lt;/blockquote&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt; 
   &lt;i&gt;} &lt;/i&gt; 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Click ""Save"&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
  
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.2" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="4.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>The following checks that HTTPS is forced on a bucket policy:&amp;nbsp;
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Sign in to the AWS Management Console (with S3 update privileges).&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Go to the S3 Service on the AWS Console.&lt;/li&gt;
                            &lt;li&gt;Select the S3 bucket under &amp;quot;All buckets&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Click the &amp;quot;properties&amp;quot; tab.&lt;/li&gt;
                            &lt;li&gt;Click &amp;quot;edit bucket policy&amp;quot;.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the policy document check for the presence of the line &amp;quot;Condition&amp;quot;:
                            {&amp;quot;Bool&amp;quot;: {&amp;quot;aws:SecureTransport&amp;quot;: &amp;quot;true&amp;quot;}}&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;In the same statement as &amp;quot;Effect&amp;quot;:&amp;quot;Allow&amp;quot;,&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.114">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AWS-SRA-4" name="Use AWS Macie to scan for sensitive data on S3 buckets" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Macie findings flow to AWS Security Hub for review and analysis. Macie also integrates with Amazon EventBridge to facilitate automated responses to findings such as alerts, feeds to security information and event management (SIEM) systems, and automated remediation.&lt;/p&gt;&lt;p&gt;If S3 objects are encrypted with an AWS Key Management Service (AWS KMS) customer master key (CMK) that you manage, you can add the Macie service-linked role as a key user to that CMK to enable Macie to scan the data.&lt;/p&gt;&lt;p&gt;Macie is optimized for scanning objects in Amazon S3. As a result, any Macie-supported object type that can be placed in Amazon S3 (permanently or temporarily) can be scanned for sensitive data. This means that data from other sources-for example, periodic snapshot exports of Amazon Relational Database Service (Amazon RDS) or Amazon Aurora databases, exported Amazon DynamoDB tables, or extracted text files from native or third-party applications-can be moved to Amazon S3 and evaluated by Macie.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="AWS Security Reference Architecture" url="https://docs.aws.amazon.com/prescriptive-guidance/latest/security-reference-architecture/welcome.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure Macie is used to scan S3 buckets.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.113">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="aws-tier-6.3" name="Use Cloudfront CDN" issueId="" issueLink="" platform="" cost="0" risk="66" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt; Description&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront can be used to deliver either the entire website, including dynamic, 
  static, streaming, and interactive content using a global network of edge locations. 
  Requests for your content are automatically routed to the nearest edge location, so content 
  is delivered with the best possible performance. Amazon CloudFront is optimized to work 
  with other Amazon Web Services, like Amazon Simple Storage Service (Amazon S3), 
  Amazon Elastic Compute Cloud (Amazon EC2), Amazon Elastic Load Balancing, and 
  Amazon Route 53. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Amazon CloudFront gives you three options for accelerating your entire website while 
  delivering your content securely over HTTPS from all of CloudFront's edge locations. In 
  addition to delivering securely from the edge, you can also configure CloudFront to use 
  HTTPS connections for origin fetches so that your data is encrypted end-to-end from your 
  origin to your end users. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation&lt;/b&gt;: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;You can either create a Cloudfront distribution only by specifying the origin domain name (ELB, S3 bucket or web server):&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --origin-domain-name &amp;lt;your_original_domain_name&amp;gt; -- default-root-object index.html 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Or by creating locally a distribution config file distconfig.json with all the Cloudfront distribution parameters:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront create-distribution --distribution-config file://distconfig.json 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt;</desc>
          <implementations/>
          <references>
            <reference name="Create distribution" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/create-distribution.html"/>
            <reference name="List distributions" url="https://docs.aws.amazon.com/cli/latest/reference/cloudfront/list-distributions.html"/>
            <reference name="Working with distributions" url="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-working-with.html"/>
          </references>
          <standards>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark-level-2"/>
            <standard ref="6.3" supportedStandardRef="cis-amazon-web-services-three-tier-web-architecture-benchmark"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using the Amazon unified command line interface: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;List the Cloudfront distributions present in the AWS account, and check in the aliases field for the presence of the domain name used by the application:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;blockquote&gt; 
 &lt;blockquote&gt; 
  &lt;div&gt;
    aws cloudfront list-distributions --query "DistributionList.Items[*].{Id:Id, Status:Status, DomainName:DomainName, Aliases:Aliases.Items}" 
  &lt;/div&gt; 
 &lt;/blockquote&gt; 
&lt;/blockquote&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.114">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="Hydras-AWS-S3-7.2" name="Use S3 MFA to delete sensitive information" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="fscott-admin" library="Hydras-AWS-Foundation" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Amazon Simple Storage Service is storage for the Internet. It is designed to make web-scale computing easier for developers. 
&lt;br /&gt; 
&lt;br /&gt;Amazon S3 has a simple web services interface that you can use to store and retrieve any amount of data, at any time, from anywhere on the web. It gives any developer access to the same highly scalable, reliable, fast, inexpensive data storage infrastructure that Amazon uses to run its own global network of websites. 
&lt;br /&gt; 
&lt;br /&gt;To add an extra layer of security to data stored within S3 the account owner (root) can enable MFA Delete which means that buckets and the objects within them can only be deleted with the use of Multi-factor authentication device. It is recommended to enable MFA Delete on any buckets containing sensitive data to protect against accidental deletion 
&lt;br /&gt;Remediation 
&lt;br /&gt;1. aws s3api put-bucket-versioning --bucket my-bucket --versioning-configuration Status=Enabled,MFADelete=Enabled 
&lt;br /&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.1.3" supportedStandardRef="CIS-AWS-Standard-Level-2"/>
            <standard ref="2.1.3" supportedStandardRef="CIS AWS Standard"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;blockquote&gt;
                            aws s3api get-bucket-versioning --bucket my-bucket&amp;nbsp;
                            &lt;/blockquote&gt;
                            &lt;div&gt;
                            If you don't see &amp;quot;MFADelete&amp;quot;: &amp;quot;Enabled&amp;quot; then your bucket
                            has no MFA delete enabled.
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T10:54:54.113">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AMAZON-WEB-SERVICES" name="Amazon Web Services" desc="" library="Hydras-AWS-Foundation">
          <threats>
            <threat ref="ACCESS-TO-DATA-AWS" name="Sensitive data is compromised through unauthorized access to data" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Attackers can gain access to sensitive data when the data is in transit in clear text, or when the data is stored without encryption.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.3">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.4">
                  <countermeasures>
                    <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-1" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                    <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                    <countermeasure ref="identify-audit-s3" mitigation="10"/>
                    <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-1" mitigation="10"/>
                <countermeasure ref="C-AWS-SRA-4" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-EC2-6.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-IAM-2.7" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.3" mitigation="10"/>
                <countermeasure ref="Hydras-AWS-S3-7.4" mitigation="10"/>
                <countermeasure ref="aws-tier-1.16" mitigation="10"/>
                <countermeasure ref="identify-audit-s3" mitigation="10"/>
                <countermeasure ref="restrict-s3-bucket-access" mitigation="10"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AWS-CF-DOS" name="Attackers perform a denial of service" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;A Denial of Service (DoS) attack is a deliberate attempt to make your website unavailable. Attackers use a variety of techniques that consume large amount of resources.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="SYSTEM-VUL-DOS">
                  <countermeasures>
                    <countermeasure ref="aws-tier-6.3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="aws-tier-6.3" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="DATA-DELETED-EASY-AWS" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="Hydras-AWS-Foundation" editable="true">
              <desc>&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AWS-S3-7.1">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-3" mitigation="25"/>
                    <countermeasure ref="aws-tier-3.11" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AWS-S3-7.2">
                  <countermeasures>
                    <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="misconfigured-s3-access-policies">
                  <countermeasures>
                    <countermeasure ref="AWS-S3-2" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AWS-S3-2" mitigation="25"/>
                <countermeasure ref="AWS-S3-3" mitigation="25"/>
                <countermeasure ref="Hydras-AWS-S3-7.2" mitigation="25"/>
                <countermeasure ref="aws-tier-3.11" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="41f0a8ec-1522-4df6-97ef-4c0f82fdad2a" diagramComponentId="1f0aad38-28e9-4591-aed2-f23193fe4e08" ref="cd051b43-00ed-41d2-9f74-f87f38795134" name="User" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="out-of-scope">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
  </components>
</template>
