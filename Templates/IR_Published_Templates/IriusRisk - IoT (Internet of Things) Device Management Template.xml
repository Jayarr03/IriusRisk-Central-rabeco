<?xml version="1.0" encoding="UTF-8"?>
<template ref="iriusrisk-iot-internet-of-things-device-management-template" name="IriusRisk - IoT (Internet of Things) Device Management Template" tags="" modelUpdated="2024-04-17 11:01:39">
  <desc>Covers applications managing IoT devices, including firmware updates, data collection, and device monitoring.</desc>
  <diagram draft="false">
    <schema></schema>
  </diagram>
  <trustZones>
    <trustZone ref="private-secured" uuid="2ab4effa-40b7-4cd2-ba81-8247d29a6f2d" name="Private Secured" desc="A secured zone within a trusted private zone" trustRating="100"/>
    <trustZone ref="internet" uuid="f0ba7722-39b6-4c81-8290-a30a248bb8d9" name="Internet" desc="Untrusted Internet public zone" trustRating="1"/>
  </trustZones>
  <questions/>
  <assets/>
  <settings/>
  <dataflows>
    <dataflow name="Load Balancer -&gt; MQTT Broker" ref="0e05b313-7661-408a-950a-2f59eba971b9" source="10394c1e-d39f-4559-97da-7b7a9aca1176" target="56461273-b8ac-4b0c-b188-001f1c229e16">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="MQTT Client -&gt; MQTT Broker" ref="55143777-d9ff-4abb-9b35-2da0b0f04b66" source="cfae7e79-41b6-4c8f-b2f0-c1e323dcdba2" target="56461273-b8ac-4b0c-b188-001f1c229e16">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="MQTT Client -&gt; Devices" ref="5fe60a8f-5634-4c37-8e01-4d09d04518d6" source="094c5fe1-c200-4621-9634-7eda8210f921" target="7858e232-e26d-44bc-946f-1f5a6e44c811">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="MQTT Client -&gt; Device Data" ref="85a74cbf-1bb0-48e1-a21d-ef7b91746876" source="cfae7e79-41b6-4c8f-b2f0-c1e323dcdba2" target="b4107b9f-1251-4601-9875-9795060284f5">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="MQTT Client -&gt; MQTT Broker" ref="9fc61434-8591-4691-9abd-04123125c87d" source="094c5fe1-c200-4621-9634-7eda8210f921" target="56461273-b8ac-4b0c-b188-001f1c229e16">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Cellular gateway -&gt; Firewall" ref="b39e5076-ce5b-42d3-8122-094af3d83704" source="fd73fc0a-89a8-4276-b8e8-c6e8f466e904" target="62e3ddae-b8b2-45f1-9e84-3877c752dc51">
      <assets/>
      <tags>
        <tag tag="tls"/>
      </tags>
    </dataflow>
    <dataflow name="Firewall -&gt; Load Balancer" ref="c5857d08-52db-473c-9b38-d82f7854186e" source="62e3ddae-b8b2-45f1-9e84-3877c752dc51" target="10394c1e-d39f-4559-97da-7b7a9aca1176">
      <assets/>
      <tags/>
    </dataflow>
  </dataflows>
  <customFields>
    <customField ref="status" value="Design"/>
  </customFields>
  <components>
    <component uuid="8decf217-1a81-40d7-b9ce-158c47034f8f" diagramComponentId="a5d8e9fe-3c53-4e81-9d70-55523386bfa1" ref="4b477651-eb51-45fb-b0d2-b12c91e67ab1" name="Administration interface" desc="" library="IR-Functional-Components" parentComponentRef="" componentDefinitionRef="CD-ADMINISTRATION-INTERFACE">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="WEB-SRV-ADM" name="Access to management functions is not limited to web service administrators" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable
                        user identity or consumes a significant amount of resources, gives access to sensitive data or
                        sensitive business logic.
                        &lt;br /&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.666">
              <output/>
            </source>
            <references>
              <reference name="CWE-306: Missing Authentication for Critical Function" url="https://cwe.mitre.org/data/definitions/306.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CSD-ADM-OPEN" name="Access to the administration interfaces is open to untrusted parties" state="0" impact="100" issueId="" issueLink="">
          <desc>The application does not restrict access to administration interfaces to untrusted parties. 
This fact could allow an attacker to chain vulnerabilities in order to gain unauthorized access to the system. </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.665">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="WEB-SRV-ADM-AUTH" name="Restrict access to administrative functionality" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        If inadequate controls are in place, lower privileged users may be able to access higher
                        privilege or administrative functionality to subvert security within the application.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Restrict administration functions to designated administrators only through robust
                        access controls.&lt;/li&gt;
                        &lt;li&gt;Ensure this restriction is applied at the server-side; do not rely on 'secret' areas
                        of the application, menu hiding, or other client-side techniques to protect the functionality.&lt;/li&gt;
                        &lt;li&gt;Measures to prevent cross-site request forgery must be present on administrative
                        functions.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="8.32" supportedStandardRef="iso-27002-2022"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Try to access administration resources with a user who is not an administrator.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the access is forbidden.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.577">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-ADM-TRUST" name="Restrict access to administrative interfaces" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict access to administrative interfaces to trusted actors from trusted locations to reduce the application attack surface and likelihood of compromise.&lt;/p&gt; 
&lt;p&gt;Restrict administrative access to specific networks or hosts.&lt;/p&gt; 
&lt;div&gt;
  Use strong authentication for privileged access, for example a 2FA. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
          </references>
          <standards>
            <standard ref="2.4.10.13" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.13" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.8" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.8" supportedStandardRef="iotsf-class-1"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Try to access the administrative interface from an untrusted location. For example, if you are using a Wordpress &lt;span class="caps"&gt;CMS&lt;/span&gt; you should restrict access to /wp-admin which should not be available from the internet but only from trusted networks or IP addresses.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.576">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ADMINISTER SERVICE" name="Administer service" desc="" library="CS-Default">
          <threats>
            <threat ref="CSD-ADM-IFACE" name="Attackers gain access to the system through an unprotected administration interface" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>Administrative interfaces grant access to sensitive operations that can typically
                                affect key security mechanisms, like modifying credentials and adding/removing user
                                accounts.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CSD-ADM-OPEN">
                  <countermeasures>
                    <countermeasure ref="CSD-ADM-TRUST" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="WEB-SRV-ADM">
                  <countermeasures>
                    <countermeasure ref="WEB-SRV-ADM-AUTH" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSD-ADM-TRUST" mitigation="50"/>
                <countermeasure ref="WEB-SRV-ADM-AUTH" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="f474bbd3-1cfa-47a3-a08c-9c9a335080d7" diagramComponentId="4a76377a-1580-4323-ae47-4f8f7494344b" ref="fd73fc0a-89a8-4276-b8e8-c6e8f466e904" name="Cellular gateway" desc="" library="IR-Hardware-Components" parentComponentRef="13268e65-6852-477d-9334-091f3a64163d" componentDefinitionRef="CD-CELLULAR-GATEWAY">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-654" name="Reliance on a Single Factor in a Security Decision" state="0" impact="100" issueId="" issueLink="">
          <desc>A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.335">
              <output/>
            </source>
            <references>
              <reference name="CWE-654: Reliance on a Single Factor in a Security Decision" url="https://cwe.mitre.org/data/definitions/654.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-255" name="The application does not wipe used and not needed passwords or key material" state="0" impact="100" issueId="" issueLink="">
          <desc>When using password or key material within an application, these are copied in memory and can be copied back to the disk depending on several factors.

If the application handles passwords or key material, an attacker with access to the system could inspect the memory or the hard disk to retrieve back those secrets on its original form.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.333">
              <output/>
            </source>
            <references>
              <reference name="OWASP Top 10 - A5 Security Missconfiguration" url="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-FIRMWARE-NOT-UPDATED" name="The firmware of the device is outdated" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The version of the firmware installed on a hardware device is not the latest version available.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-633" name="Weaknesses that Affect Memory" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category affect memory
                        resources.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CWE-311-AT-REST" name="Encrypt data stored on the host (data at rest)" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="IR-Hardware-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        &lt;div&gt;
                        Data stored on the server or the client must be protected by encryption (data
                        &lt;i&gt;at rest&lt;/i&gt;).
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographically strong symmetric or asymmetric (public-key) encryption&amp;nbsp;should
                        be used to protect the data.&lt;/li&gt;
                        &lt;li&gt;Encryption should be performed before the data is written to disk or other persistent
                        storage.&lt;/li&gt;
                        &lt;li&gt;The key for encrypting and decrypting the data should &lt;i&gt;not&lt;/i&gt; be
                        accessible from the same host.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The encryption and decryption operation should be performed on a different host.&lt;/li&gt;
                        &lt;li&gt;A recognized, proven, and tested implementation/library should be used (in preference
                        to a bespoke implementation).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
          </references>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="5.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="6.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.24" supportedStandardRef="iso-27002-2022"/>
            <standard ref="PR.DS-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-high-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check the functions of the application which are storing sensitive data.&lt;/li&gt;&lt;li&gt;For each of the functions check they are using an external service to encrypt the data.&lt;/li&gt;&lt;li&gt;Check that neither the sensitive data nor the keys used to encrypt the data are stored on the host after the encryption process completes.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-HARDWARE-CUSTOM-CHIPSET" name="Ensure that purpose-built/custom chipsets are not used if possible" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="fscott-admin" library="IR-Hardware-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Custom chipsets continue to anchor a great deal of the hardware within corporate data centers or in high-end desktops. Because these purpose-built chips are tailored for niche purposes, manufacturer security reviews are not nearly as intense as those conducted for chips that are to be installed in much larger groups of devices. Over time, hackers find vulnerabilities in these chips, causing the manufacturer to scramble to find a patch.&lt;/p&gt;&lt;p&gt;When possible avoid using custom chipsets.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How to do a firmware update for any kind of device" url="https://www.digitalcitizen.life/how-update-firmware-any-device-6-steps/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.246">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-HARDWARE-PROTECT-LOCAL-ACCESS" name="Protect local access to the device" issueId="" issueLink="" platform="" cost="0" risk="64" state="Recommended" owner="fscott-admin" library="IR-Hardware-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In many cases IoT, IIoT and smart building hardware can be accessed locally though a managed Ethernet or serial interface. If these connections aren't locked down -- from both a configuration and physical sense -- a bad actor may be able to compromise a company's infrastructure by tampering with these devices while visiting the office, warehouse or manufacturing plant.&lt;/p&gt;&lt;p&gt;Ensure that the local connections to these devices are protected enough to avoid physical attacks.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How to do a firmware update for any kind of device" url="https://www.digitalcitizen.life/how-update-firmware-any-device-6-steps/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.247">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-255" name="Remove default credentials and role-based accounts from the application" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="IR-Hardware-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Security is often compromised through default or predictable account credentials, such as
                        'admin/admin'. Best-practice dictates that accounts are only enabled when required, do not have
                        common account names, and force users to choose unique strong passwords rather than using vendor
                        defaults.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure all default application and software accounts are disabled or removed if not
                        required&lt;/li&gt;
                        &lt;li&gt;Strong passwords should be set on accounts that are required, default credentials must
                        be changed.&lt;/li&gt;
                        &lt;li&gt;Build application accounts from a least-privilege perspective.&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Accounts should only be enabled if required.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Users should have individual accounts rather than role-based ones (e.g. dave-admin,
                        sue-admin rather than a shared 'admin' user)&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SC-12 Cryptographic Key Establishment And Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/72-08_02_SC-12"/>
          </references>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.10.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.1.1" supportedStandardRef="nist-800-63"/>
            <standard ref="5.17" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.24" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.3.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify all the authentication points for this component.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that authentication with default credentials is not possible.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-HARDWARE-UPDATE-FIRMWARE" name="Update system firmware to latest version" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="IR-Hardware-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There's a set of steps to follow in order to update the firmware of a device:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Know the model of your device and what firmware it uses&lt;/li&gt;&lt;li&gt;Check if there is a firmware update available for your device&lt;/li&gt;&lt;li&gt;Prepare your device for the firmware update&lt;ul&gt;&lt;li&gt;Read the &lt;strong&gt;Readme&lt;/strong&gt; file that is distributed with the new firmware update&lt;/li&gt;&lt;li&gt;Always use a &lt;strong&gt;reliable power supply&lt;/strong&gt; for your device during the firmware update process&lt;/li&gt;&lt;li&gt;If you use a computer to update a device's firmware, make sure that the computer has &lt;strong&gt;no third-party antivirus&lt;/strong&gt; running on it&lt;/li&gt;&lt;li&gt;If you're going to update the firmware on a device using a USB memory stick or any other kind of external memory, make sure that you use a memory stick of good quality&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Backup the current firmware from your device&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How to do a firmware update for any kind of device" url="https://www.digitalcitizen.life/how-update-firmware-any-device-6-steps/"/>
          </references>
          <standards>
            <standard ref="2.2" supportedStandardRef="swift-cscf"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-7" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify that the latest version of the firmware has been successfully installed by checking that the installed version is the same as the latest version.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.247">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Hardware-Components">
          <threats>
            <threat ref="ACCESS-TO-DATA" name="Sensitive data is compromised through unauthorized access to data storage" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Hardware-Components" editable="true">
              <desc>&lt;p&gt;A data breach is a security violation in which sensitive, protected or confidential data is copied, transmitted, viewed, stolen or used by an individual unauthorized to do so. Sensitive data could be exposed due to a bad configuration in user permissions.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-654">
                  <countermeasures>
                    <countermeasure ref="C-HARDWARE-PROTECT-LOCAL-ACCESS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-HARDWARE-PROTECT-LOCAL-ACCESS" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-100" name="Attackers gain unauthorised access to the application through buffer overflow flaws" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Hardware-Components" editable="true">
              <desc>Buffer Overflow attacks target improper or missing bounds checking on buffer
                                operations, typically triggered by input injected by an attacker. As a consequence, an
                                attacker is able to write past the boundaries of allocated buffer regions in memory,
                                causing a program crash or potentially redirection of execution as per the attackers'
                                choice.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="1" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-633">
                  <countermeasures>
                    <countermeasure ref="C-HARDWARE-CUSTOM-CHIPSET" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-HARDWARE-CUSTOM-CHIPSET" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-112" name="Attackers gain unauthorized access through Brute Force attacks" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Hardware-Components" editable="true">
              <desc>&lt;p&gt;In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since eliminating patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-255">
                  <countermeasures>
                    <countermeasure ref="CWE-255" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-255" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="T-FIRMWARE-EXPLOIT" name="Attackers can perform malicious activity due to a vulnerability in the firmware of the device" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Hardware-Components" editable="true">
              <desc>&lt;p&gt;A device has a vulnerability that is used by malicious actors to exploit the system.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="W-FIRMWARE-NOT-UPDATED">
                  <countermeasures>
                    <countermeasure ref="C-HARDWARE-UPDATE-FIRMWARE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-HARDWARE-UPDATE-FIRMWARE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="insecure-default-configuration" name="Attackers gain access to credentials via insecure default configurations" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Hardware-Components" editable="true">
              <desc>&lt;p&gt;Attackers gain access to sensitive data using known vulnerabilities in the default configuration. These configurations are not secure enough for production environments.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-311-AT-REST" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-311-AT-REST" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="f1ccee34-a2c6-44ca-a445-aa97ba0847d3" diagramComponentId="feb52dd7-336a-4b4b-a1bc-4bc2577fa2af" ref="b4107b9f-1251-4601-9875-9795060284f5" name="Device Data" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="other-database">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.421">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.697">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt; 
 &lt;li&gt;Weak encryption algorithms&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Loss of encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Compromised encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Revoked keys are still active (bad key lifecycle management)&lt;/li&gt; 
&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.698">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="RESTRICT-ACCESS-DATABASE" name="Access the data store from an account with the least privileges necessary" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Use an account with only the minimum set of permissions required to access the data store. The account should not be able to perform operations that are not explicitly required by the component that performs these operations. For example, if a web application needs to read data from certain tables and insert and update data from others, then a database account with only those specific permissions should be used by the application server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the user account used by external components to access this data store.&lt;/li&gt; 
 &lt;li&gt;Check which permissions are assigned to this user account.&lt;/li&gt; 
 &lt;li&gt;Verify that they are the minimum set of permissions necessary and no unnecessary permissions are assigned.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.347">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PATCH-SERVICE" name="Apply required security patches to the service" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Vendors and other maintainers of software release patches in response to security flaws and other bugs in their products.&amp;nbsp; The longer a system is exposed with a known security vulnerability, the easier to compromise it. &amp;nbsp;As the exploit enters the public domain, they get included in automated exploitation suites like Metasploit and a wider less skilled miscreant is able to leverage them.&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected failures or exploitation.&lt;/li&gt;&lt;li&gt;Clearly define an approach for testing and applying patches, in particular security patches, with expected timescales. &amp;nbsp;There is often a small window between the release of a patch, and potentially malicious actors reverse-engineering the patch to identify and exploit the flaw.&lt;/li&gt;&lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting services to ensure the project team is promptly aware of issues within the project or its components.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-01 Configuration Management Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/152-08_02_CM-01"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check with the software or service vendor whether security vulnerabilities and
                            their associated patches are available for the version deployed.&lt;/li&gt;
                            &lt;li&gt;Evaluate the criticality of the vulnerability and schedule a fix accordingly.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.571">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" name="Encrypt personal data" issueId="" issueLink="" platform="" cost="0" risk="27" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement encryption at rest (see guidance below) or give a risk-based explanation as to why encryption was not implemented.&lt;br /&gt;&lt;br /&gt;Use well-known encryption libraries, taking into account the data use, and do not invent your own. 
          &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;personal data must be encrypted&lt;/li&gt;
              &lt;li&gt;data that is not used by the application (e.g. passwords, ...) should be hashed so they cannot be recovered easily&lt;/li&gt;
              &lt;/ul&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:02016R0679-20160504"/>
            <reference name="OWASP Proactive controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify that users' personal data processed by the application is encrypted at rest (e.g. databases).&lt;/li&gt;
                &lt;li&gt;If encryption is not being leveraged, verify that there is documentation outlining the reasoning for that decision.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.571">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For less sensitive but still restricted data, simple verification of the location of the user may suffice (e.g. IP restrictions).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For non-sensitive but non-public data, access could be restricted by IP address, limiting access to internal networks, workstations, or gateways&lt;/li&gt;&lt;li&gt;For more sensitive data, TLS client-side certificates may be appropriate&lt;/li&gt;&lt;li&gt;Where secret or other sensitive data is handled, a full authentication process to identify and validate users with single or multi-factor authentication may be required&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:02016R0679-20160504"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                &lt;li&gt;Try to obtain access to this information without any type of authentication, for example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.570">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer to reduce exposure" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to services should be restricted to expected sources, limiting the exposure of the service and its attack surface; and the likelihood of a malicious actor gaining access to the system.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Apply network layer security controls so that only the necessary and expected IP addresses are permitted access to connect to the service.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check that the network access to the service is only allowed for the components which need it.&lt;/li&gt; 
 &lt;li&gt;There should be a firewall protecting the network segment in which the service is installed.&lt;/li&gt; 
 &lt;li&gt;Check that the firewall restricts all access and only permits the minimum connections required using the principal of least privilege.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.571">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="AUTH-DATASTORE-LEAST-PRIV" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="ACCESS SERVICE" name="Access service" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="VULN-SERVICE" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                    <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="1b1b6d11-c53b-44fc-a28b-4f94a14c17c2" diagramComponentId="8ca3f0c2-39b0-403b-9049-ec2935c11f72" ref="23662eb8-cf92-4f8e-9c0d-0dfe136c8773" name="Device Data Processor" desc="" library="microservices-library-dev" parentComponentRef="" componentDefinitionRef="microservice">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="APP-AS-1" name="Application secrets at risk of exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring that there is no sensitive data (such as credentials) in the application code or in configuration files is a challenge because the environments that containers run in have varying security controls and may provide access to unintended parties.&amp;nbsp; Developers need to consider the new threats brought about by multi-tenancy and shared platforms.&amp;nbsp; Not doing so can result in exposure of sensitive data.&amp;nbsp; 
&lt;/div&gt;Encryption methods are only useful if they are robust.&amp;nbsp; This is a particular challenge in container architectures as there are many competing interests and constraints which must be accounted for.&amp;nbsp; It is important that developers take ownership of encryption, while also working within the needs and requirements of the framework. Because of the complexity of containerized systems, and the general tendency of organizations to place security in the hands of operators, encryption of application secrets may be overlooked by developers.&amp;nbsp; This can result in exploitable vulnerabilities which administrators of the system are unaware of.&amp;nbsp;Some of the challenges of securing containerized systems include the variety of secrets which must be protected, and the fact that the available methods for protection may not be consistent between environments.&amp;nbsp; Organizations should be aware of these challenges and implement robust mechanisms which anticipate the problems inherent and provide mitigating strategies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-AA-1" name="Cloud-native environments may introduce risks to the microservice architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of cloud providers introduces many capabilities to container architectures, while also streamlining workflows and reducing the necessity of managing hardware.&amp;nbsp; However it also increases complexity, and this can make it more difficult to identify and mitigate vulnerabilities.&amp;nbsp; It can also result in a lack of ownership for security issues as developers assume that other parties are taking responsibility. Applications and containers which run or on otherwise access cloud providers must identify themselves.&amp;nbsp; Credentials and access control must be securely managed in order to prevent secret exposure and privilege escalation.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-1" name="Code promotion across environments may introduce vulnerabilities" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Code and image provenance is a developer and application owner concern; verification requires certification and key management across the code promotion path. This can be a challenge as multiple parties and certificate owners may be involved. The absence can result in application version mismatches or running tampered images. 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments. Today, developers can push code across application container environments without the need for operator interaction.&amp;nbsp; Systems should have robust policies and procedures in place to ensure that images are secured by developers at all stages of the build chain. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-1" name="Contention issues arise due to the elasticity of workload and dynamic resource requests" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   Ensuring resource availability as needed to support workloads is a challenge.&amp;nbsp; This is because of the dynamic use and availability of resources in a potentially shared environment, combined with the possibly unpredictable use of an application. The absence can result in either the CMP being unable to allocate appropriate resources for an application container, or a resource shortage within the CMP. 
 &lt;/div&gt;&lt;div&gt;
  Resources usage which is not properly managed by developers will affect the usage of others in a shared environment. The absence may result in a DOS-style scenario. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-2" name="Image contents may not be secure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Images must have no known vulnerabilities or malicious code. Developers must help to ensure images have not been tampered with as they move from development to production. Applications of this feature include scanning images for vulnerabilities and malicious code and using image signing and validation mechanisms. 
&lt;/div&gt;&lt;div&gt;
  Ensuring that only the required components are packaged inside the image can be a challenge due to the complexity of applications. If this is not carefully managed it can result in the compromise of an unnecessary component.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Ensuring third-party components are free of vulnerabilities and updated as needed can be a challenge due to differing update frequencies by third-party vendors. This can result in the compromise of third-party components.&amp;nbsp; OS package managers are a particular challenge in this regard due to the large number of updates and downloads they maintain, and the fact that they often have unrestricted access to systems.&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments.&amp;nbsp; Developers should not assume that system wide security settings will mitigate potential application vulnerabilities.&amp;nbsp; Rather, they should ensure that their images have no known vulnerabilities or malicious code, and that they have not been tampered with as they move from development to production. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.000">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-N-1" name="Insecure networking settings may be exploited to gain access to containers or hosts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Monitoring network activity and providing the infrastructure to do so can present a challenge because of the lack of network tooling and data storage. The absence can result in the exposure of sensitive information and diminished incident response and detection capabilities. 
&lt;/div&gt;&lt;div&gt;
  In container networking, communications between containers and hosts must be secured, network traffic must be monitored, and access to the network traffic, resources, and configurations must be controlled.&amp;nbsp; In terms of applications, communications between containers affect access control, limiting access to network traffic, resources, and configurations (leveraging network namespace). Other outcomes include isolating the container interfaces, monitoring network activity, and securing communications between containers via SSL/TLS or VPN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-D-1" name="Insufficient scaling of container resources may lead to inefficient resource utilization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring resource scaling requests take priority over other containers may provide a challenge.&amp;nbsp; This is due to complexity and implementation of the CMP to allow such prioritization. The absence can result in priority applications not being able to scale for user workloads. 
&lt;/div&gt;&lt;div&gt;
  It is a challenge for developers to define application performance profiles. Predictive application workload modeling is a complex task often substituted by a "common practice" or, equally precise, "by analogy".&amp;nbsp; This is largely due to lack of tooling in development environments. Both are likely to lead to inefficient resource utilization. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.250">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-1" name="Lack of continuous monitoring can result in application version mismatches and system availability issues" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  The ephemeral nature of application containers increases the necessity of reliable and centralized monitoring of platform, host, and containers.&amp;nbsp; It is essential to ensure that container runtime actions and events are monitored and logged in order to allow timely identification and mitigation of problems and threats. 
&lt;/div&gt;&lt;div&gt;
  There may be a challenge for developers to understand which container versions are running and where. This information needs to be easily and quickly digestible by appropriate parties. The absence can result in application version mismatches and system availability issues. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-G-1" name="Lifecycle events prevent secure startup and shutdown of applications" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Developing a containerized application that can be scaled up or down without notice is a challenge because of the extra effort required to design and implement the application in a manner where it can gracefully handle such scaling events while maintaining a secure state.&amp;nbsp; &amp;nbsp;It is a more robust approach to ensure that stateful containerized applications are aware of container scaling events to ensure transitions between secure states. 
&lt;/div&gt;&lt;div&gt;
  In an ideal world, either application containers are stateless, or the applications have been developed with clustering technologies to attach and release neighbors as they start and are terminated.&amp;nbsp; Some use cases, though, will have containers that have not been developed in such a manner, or which contain legacy applications that have migrated to containers. Such applications running inside a container may not be aware of pending lifecycle events issued by a CMP such as container start/stop/scale.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The containerized application should have an opportunity to be informed of the pending container's lifecycle events to manage its own lifecycle accordingly. This is essential to ensure the application's secure startup and shutdown.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.514">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-2" name="Mismanagement of container volumes can compromise underlying architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   In container volume management, it is essential to ensure the container has need-only access to data volumes and uses dedicated storage resources for runtime operations.&amp;nbsp; In the application, it is vital to ensure that access control exists for file system resources and raw storage devices, and that data is encrypted at rest in the data volumes.&amp;nbsp; Applications directly mounting a host directory should be avoided. 
 &lt;/div&gt;Building an image that minimizes using shared container volumes is imperative due to the risk of exposing sensitive data to the host or other containers, and the current reliance on sharing information with containers. This can result in exposure of sensitive data.&amp;nbsp;&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Building an image that does not share the host filesystem is equally crucial because exposing the host filesystem can result in compromising the underlying infrastructure, and other containers that share the same environment.&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-2" name="The complexity of container architectures can make logging and monitoring difficult to implement" state="0" impact="100" issueId="" issueLink="">
          <desc>Ensuring that coding policies include logging capabilities at the planning and design stages is a challenge due to the lack of presence of security concerns in the design phase and tooling.&amp;nbsp; In addition, there are many logging features which may be implemented in microservices and an absence of clear policies can result in lack of ownership from key parties, including developers.&amp;nbsp;&amp;nbsp;&lt;div&gt;
  Usually application logging is added after the fact as a response to an incident or audit.&amp;nbsp; Ensuring that application logs, starting with authentication logs, are captured for existing applications is a challenge due to lack of resources to modify the application and necessary guidance to do so.&amp;nbsp;&amp;nbsp;This will result in diminishing incident response and detection capabilities.&amp;nbsp; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.515">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CSA-SACA-3.1.5:1" name="Applications must use secure network communication protocols" issueId="" issueLink="" platform="" cost="1" risk="35" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Network traffic generated by the containers should maintain confidentiality regarding the applications and management by utilizing proper encryption protocols (i.e., SSL/TLS, IPSec). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Selecting libraries that support secure communications to provide encryption and maintain confidentiality prevents information spillage and network traffic tampering. Tampering of network traffic may result in system compromise. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.5" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify any communications in your application which will be sent as network traffic and ensure that encryption protocols have been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.197">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.2.1" name="Avoid using images with OS package managers" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&amp;nbsp;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images with OS package managers or shells could contain unknown vulnerabilities.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Package managers are normally run with unrestricted access in order to allow them to modify critical system software. The package manager's actions, therefore, affect the entire system.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you must include OS packages, remove the package manager before deploying the container.&amp;nbsp; The following steps may also help mitigate the risk: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use repositories you trust. Use only mirrors that belong to reputable organizations.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Manually update your systems (and local mirror caches).&lt;/li&gt; 
  &lt;li&gt;Use signed repository metadata.&lt;/li&gt; 
  &lt;li&gt;Use HTTPS for mirror communication.&lt;/li&gt; 
  &lt;li&gt;Use package managers that implement metadata expiration.&lt;/li&gt; 
  &lt;li&gt;Use distributions that properly make use of the package manager's security features.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="cs.arizona.edu: Attacks on Package Managers" url="https://www2.cs.arizona.edu/stork/packagemanagersecurity/attacks-on-package-managers.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Follow the steps for your particular OS to identify if package managers are installed on the container.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:03.923">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:1" name="Create and follow coding policies to include logging capabilities" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An application should provide logs regarding authentication, authorization, actions, and failures. The developer should include this capability as part of planning and design phases. For new applications, the developer should create and follow coding policies to include logging capabilities at the planning and design stages.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been planned and designed in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:2" name="Create common libraries for developers to handle sensitive data and secrets in the backend application code" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable consistent ways of addressing the handling of sensitive data and secrets within backend application code, a common set of libraries should be provided to developers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Application developers are not necessarily security developers and should devote time to developing application features, not security. Security that is required within applications should be easy to use and made clear, so that minimum effort is spent and consistency across applications is achieved. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that libraries exist for securing sensitive data and that they have been applied to your applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.9:1" name="Developers should receive sufficient training on volume management" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should receive sufficient training to ensure development of applications that minimize the need to use shared container volumes and that do not require any access to host directories. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Shared volumes can result in exposure of sensitive data. Images which share the host volumes or filesystem can result in the compromise of the underlying infrastructure and other containers sharing the same environment. Avoiding these configurations is a challenge, which is why developer training is essential. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.9" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.198">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:3" name="Encrypt the sensitive application and create a container entry point application that decrypts and executes the main application" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By encrypting the sensitive application, the risk of unintended exposure of the sensitive application can be mitigated. This allows the container image (and sensitive application) to be stored, transmitted, or shared without unauthorized exposure. Encryption and decryption of the application should be treated as any other data encryption/decryption process. For sensitive applications, developers should encrypt the sensitive application, then create a container entry point application that decrypts and executes the main application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that an appropriate level of encryption has been applied to any sensitive data in the application.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.12:1" name="Ensure sustainable system performance by balancing system resources" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Working with the operator and architect, the developer should ensure that the binaries and libraries are optimized to operate in a containerized infrastructure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Default configurations or those that are suitable for non-containerized systems may conflict with the needs of container architectures.&amp;nbsp; Developers need to be aware of the environmental impacts on their applications. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.12" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review optimization configurations to ensure they are compliant with the needs or policies of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.197">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SAC-3.1.1:1" name="Establish a root of trust" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A public key infrastructure (PKI) allows creation and management of a hierarchy of digital certificates for encryption and digital signatures. A PKI may already exist in an organization-certificates from this new or existing system can be used to sign container images and later verify their provenance and integrity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To ensure the integrity of the build chain, the developer must have the ability to digitally sign and provide a digital signature for the code and/or binary artifacts that will be promoted between environments or to the next promotion phase. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By signing a container image with a certificate that is part of a PKI, container management platform (CMP), users can easily verify the source of an image. This is important as once the source of the image is determined, users can ensure that the image has been through appropriate scrutiny before being promoted for production use. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all existing images are appropriately signed or verified, using keys provided by your organization.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:03.922">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.1" name="Harden all applications in an image" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;span style="line-height: 107%; font-size: 14.6667px;"&gt;&lt;font face="Times New Roman, serif"&gt; 
   &lt;div style=""&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Description:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Ensure that applications are secure and follow best practices. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Rationale:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      When deploying applications in a containerized system, vulnerabilities that compromise the application can in turn compromise the entire architecture.&amp;nbsp; This is a result of the way containers and pods communicate and access resources throughout the whole cluster. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Remediation:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Analyze source code regularly to ensure it is following best practices to avoid vulnerabilities.&amp;nbsp; &amp;nbsp;Continuously test your application against common attack practices, like SQL injection, DDoS attack, etc. There are various dynamic analysis tools available to assist.&amp;nbsp; 
    &lt;/div&gt; 
   &lt;/div&gt;&lt;/font&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;, serif; font-size: 11pt;"&gt;&lt;br&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="The New Stack: A Security Checklist for Cloud Native Kubernetes Environments" url="https://thenewstack.io/a-security-checklist-for-cloud-native-kubernetes-environments/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a reliable tool such as Veracode or Synopsys to analyze source code for vulnerabilities before deploying.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:03.923">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:2" name="Identify a data at rest (DAR) solution" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer should utilize a DAR solution, if at all possible, that has been FIPS 140-2 validated. The developer should also analyze the application programming interface (API) and a compatible key management system (KMS).&amp;nbsp; The developer should also utilize the latest advanced encryption standard (AES) with the highest possible key length. Developers also have to take into account if the solution has been validated by an impartial third party and if the solution is viable in the intended operational environment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  With a FIPS-validated solution and a compatible KMS, there is some third party validation that the solution is secure and thus a higher level of assurance.&amp;nbsp; Robust use of AES will ensure data confidentiality. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that encryption is included and that the level is appropriate to the application security needs and the wider system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:2" name="Implement plans to capture application logs" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An existing application should provide logs regarding authentication, authorization, actions, and failures. If any of these logging items have not been implemented, developers should provide these capabilities as part of the maintenance phase. For existing applications, the developer should implement plans to capture application logs, starting with authentication logs 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been applied in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:3" name="Include only necessary components inside the image" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should trim down images to include only necessary components. It is preferred to use a baseline image with minimal set of packages over a full OS distribution.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Removing unnecessary components from the image will reduce the number of potentially outdated or unpatched packages and therefore reduce the number of security vulnerabilities. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:03.923">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.11:1" name="Left the application in an unknown state if a containerized application is unaware of the container's transitions" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The CMP should provide the encapsulated application an opportunity to perform a graceful transition to a known secure state. The conventional solution is to allow an application to be notified of the container lifecycle events. Resources, freed after container's removal, should be released back to the pool in a well known state and containers should be allowed to log any state changing events. The container's lifecycle (start/stop/scaled) is managed by CMP. From a developer's perspective, the application could be left in an unknown state if a containerized application is unaware of the container's transitions 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is essential to inform the application of the container's lifecycle events, so that it may take appropriate action to ensure a secure startup and shutdown. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.11" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the container's stop start process and ensure that any related and relevant configurations have been applied to your applications.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.2" name="Limit credential exposure" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Harden credentials before deploying applications 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Plain text (non-encrypted) credentials (account passwords, SSH Keys, DevOps secrets, etc.) may be embedded into source code because it helps to simplify deployments at scale.&amp;nbsp; This poses formidable security risks that are routinely exploited by malware and hackers. In some cases, a threat actor may insert hardcoded credentials to create a backdoor, allowing them persistent access to a device, application, or system. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Hardcoded credentials are favored cyberattack targets for password guessing exploits, allowing hackers and malware to hijack systems, and software. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Don't define credentials in your application code. Use managed identities for cloud resources to let your pod request access to cloud provider.&amp;nbsp; Avoid the use of fixed or shared credentials. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="BeyondTrust: Hardcoded and Embedded Credentials are an IT Security Hazard" url="https://www.beyondtrust.com/blog/entry/hardcoded-and-embedded-credentials-are-an-it-security-hazard-heres-what-you-need-to-know"/>
            <reference name="Microsoft docs: Best practices for pod security in Azure Kubernetes Service" url="https://docs.microsoft.com/en-us/azure/aks/developer-best-practices-pod-security"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review application code before deployment for embedded credentials.&amp;nbsp; Carry out pen testing of applications to find overlooked credential vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.432">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:1" name="Provide training and best practices guidance to developers" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers should be informed and trained on threats arising from multi-tenancy on public clouds.&amp;nbsp; They also need to be trained and provided with templates for how to use the secret management feature within their apps so they avoid the practice of hard-coding static secrets within application code. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers are accustomed to the practice of baking sensitive information into server code from the days when server-side was considered trusted environment. Raising the awareness of the nuances and threats present in current public cloud environments helps drive in the need to avoid such practices 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.1" name="Remove components which are only required for development" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Tools that are essential during application development can create security risks in deployment 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Any unnecessary component is another potential entrance point for an attacker.&amp;nbsp; Debuggers and common tools like Curl that are useful to attackers should not be included in images in deployment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Perform an analysis of the entire container before deployment and remove any components or functions you do not need. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:03.923">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.2" name="Secure any dependencies" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that any dependencies used by applications are also secure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is hard to keep to track of all the packages an application uses and to make sure they are not vulnerable.&amp;nbsp; Even if you ensure that your own application is free of vulnerabilities, if the base packages and dependencies are not secure, the container could still be vulnerable to attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Regularly perform a full dependency analysis for code to uncover your open source and other dependencies for any vulnerabilities they contain. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a suitable vulnerability scanner to carry out a full dependency analysis for code to uncover your dependencies and any vulnerabilities they contain.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:03.923">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.2" name="Secure the container base image" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br&gt;Ensure that container images are built using secure and approved base images&lt;br&gt;&lt;br&gt;&lt;b&gt;Rationale:&lt;/b&gt;&lt;br&gt;Vulnerabilities in software packages can be exploited by hackers or malicious users to obtain unauthorized access to local or cloud resources. &lt;br&gt;&lt;br&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br&gt;Select minimal base images, add only what you require, and scan them for vulnerabilities.&amp;nbsp; &amp;nbsp;Ideally, the tool you choose for this function should be aware of your base image choice and alert you when there is an updated version of your base image, or if there are alternate base images that can reduce vulnerabilities.&lt;br&gt;&lt;br&gt;Only deploy authorized container images that you've analyzed, scanned, and signed (i.e. Software Supply Chain Security). Grafeas, TUF, and Notary can help here.&lt;br&gt;&lt;br&gt;Ensure that only images from image registries on allow lists are used to launch containers in your Kubernetes environment.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Peter Benjamin: Kubernetes Security Best-Practices" url="https://dev.to/petermbenjamin/kubernetes-security-best-practices-hlk"/>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;font face="Times New Roman, serif"&gt;Please follow your 3rd party image scanning provider's guidelines for enabling Image Scanning.&lt;/font&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:03.923">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:1" name="Sign images as part of the image build process and validate images before use" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images should be signed as part of the build process and validated before used. Signing and validation can be achieved through GNU Privacy Guard (GPG) signatures on image contents or through similar methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Digital signing of image content at build time and validation of the signed data before usage ensures that image data cannot be tampered with between build and run time. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review your applications to ensure that the appropriate signing has taken place.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:03.922">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.3:1" name="Use clear versioning schemes to identify application versions running in containers" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By defining and using an accepted versioning scheme, a development team can have version numbers automatically implemented as part of a build process. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By applying versions either to a container name, tag, or label, the developer is then able to easily identify application versions running in containers. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.3" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review container names, tags, or labels to check that they contain version numbers in line with your organizational or system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.1" name="Use IAM for access control" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Description:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Implement authentication and access control with the Identity and Access Management (IAM) service provided by the cloud provider. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Rationale:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Applications which have access to the full scope of the cloud provider may perform actions outside of their scope.&amp;nbsp; This can be exploited by attackers to gain access to large areas of the cluster. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Use IAM roles to provide fine-grained access.&amp;nbsp; Assign roles only the specific amount of resources they need, or allow them&amp;nbsp; to perform only a particular amount of activities. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="we45: Security Essentials for a Developer - Kubernetes" url="https://we45.com/blog/security-essentials-for-a-developer-kubernetes/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use the relevant tools for your cloud provider to audit the use of IAM roles in applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.432">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:1" name="Use standard, commonly available authentication systems" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When either data or applications are encrypted within a container, having a reliable method to authorize use of encryption keys is required. Alternatively, applications must be written to support multiple authentication methods, introducing unnecessary complexity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By using common authentication methods, this ensures a predictable ability to authenticate and authorize the use of encryption keys across CMPs.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
            <standard ref="K06 - Broken Authentication" supportedStandardRef="owasp-kubernetes-top-10-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that an encryption policy or standard exists for your organization, and that it has been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.433">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:2" name="Use vulnerability scanning tools as part of the development process" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should use vulnerability scanning tools as part of the development process and the CI pipeline, and integrate a vulnerability assessment into the build process. They will also want to consider failing a build if the vulnerability assessment fails. Once a vulnerability is identified, apply security patches to the vulnerable component and rebuild the image. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A vulnerability scanner will identify and alert on the use of third-party components with known security vulnerabilities. Applying vulnerability scanning as part of the development cycle improves the security quality of the images, since well-known vulnerabilities are identified and patched before software gets into runtime environment. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if a protocol exists for vulnerability scanning in your organization and, if so, that it has been utilized.&amp;nbsp; If one does not exist, use one of the recommended tools to ensure that your own applications and containers do not contain vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:03.923">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.14:1" name="Utilize resource control features to orchestrate intra-container resource utilization, prioritization and allocation thresholds" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should expect the presence of horizontal infrastructure scaling capability but should avoid the need for vertical scaling by ensuring that the application can function within the parameters established by the configuration management team. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer must obtain the resource utilization and hardening parameters and incorporate those configurations into the software development environment and testing scripts. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The application developer must accept that the application under development will not have on-hand the entirety of computing resources available in the production environment. Even in the presence of auto-scale, auto-scaling capability has limits and does not scale out infinitely.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Without testing application functions within defined production parameters, the risk of poor application performance goes up, not down. Proper configuration of resource and security functionality as appropriate to the CMP in use ensures that a resource consumption fault or runaway container processes do not affect adjacent containers.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.14" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the capabilities of the CMP in terms of the relevant thresholds and ensure your application is compliant.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.197">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="general" name="General" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="IMAGE-MODIFICATION" name="Attackers compromise images by modifying their content" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>An attacker modifies/forges a microservices image to introduce vulnerabilities in the system</desc>
              <riskRating confidentiality="100" integrity="100" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                    <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                    <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A1:2017" name="Attackers gain access to the sensitive data through injecting code in the repositories" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>Almost any source of data can be an injection vector: environment variables,
                                parameters, external and internal web services, and all types of users. Injection flaws
                                occur when an attacker can send hostile data to an interpreter.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                    <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SCALABILITY-ISSUES" name="Availability is compromised through attacks against scalability configuration" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>An attacker compromise the availability of a system by exploiting scalability configurations in order to consume resources</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CO-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-CONTAINER-VOLUMES" name="Sensitive data is compromised by unauthorized access to container volumes" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>An attacker find flaws to access container volumes without permission</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1499.003" url="https://attack.mitre.org/techniques/T1499/003"/>
              </references>
              <weaknesses>
                <weakness ref="CO-D-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNAUTHORIZED-ACCESS-NETWORK" name="Sensitive data is compromised through network access" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>Attackers gain undetected access to the network systems and changes made by the
                                attackers couldn't be audited or detected.
                            </desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-N-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="access-sensitive-data" name="Access sensitive data" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNCONFIGURED-SECURITY-DATA" name="Sensitive data is exposed through weak security configurations" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>Weak security configurations make possible for an attacker to access sensitive data like API keys, credentials, etc.</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AS-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CLOUD-VULNERABILITIES" name="Attackers use known cloud vulnerabilities to access unauthorized data" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>Known vulnerabilities in a specific cloud environment are used to exploit a system, allowing an attacker to access unauthorized data</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AA-1">
                  <countermeasures>
                    <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                    <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-LM-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="APP-LM-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="2e614e6b-bb69-4fc0-b93c-7c3705944492" diagramComponentId="10edb073-3cd8-40fa-9961-5bef2ce7437c" ref="9e0b0088-33c0-4ddc-ad66-bdff90b1f644" name="Device Manager Service" desc="" library="microservices-library-dev" parentComponentRef="" componentDefinitionRef="microservice">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="APP-AS-1" name="Application secrets at risk of exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring that there is no sensitive data (such as credentials) in the application code or in configuration files is a challenge because the environments that containers run in have varying security controls and may provide access to unintended parties.&amp;nbsp; Developers need to consider the new threats brought about by multi-tenancy and shared platforms.&amp;nbsp; Not doing so can result in exposure of sensitive data.&amp;nbsp; 
&lt;/div&gt;Encryption methods are only useful if they are robust.&amp;nbsp; This is a particular challenge in container architectures as there are many competing interests and constraints which must be accounted for.&amp;nbsp; It is important that developers take ownership of encryption, while also working within the needs and requirements of the framework. Because of the complexity of containerized systems, and the general tendency of organizations to place security in the hands of operators, encryption of application secrets may be overlooked by developers.&amp;nbsp; This can result in exploitable vulnerabilities which administrators of the system are unaware of.&amp;nbsp;Some of the challenges of securing containerized systems include the variety of secrets which must be protected, and the fact that the available methods for protection may not be consistent between environments.&amp;nbsp; Organizations should be aware of these challenges and implement robust mechanisms which anticipate the problems inherent and provide mitigating strategies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.683">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-AA-1" name="Cloud-native environments may introduce risks to the microservice architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of cloud providers introduces many capabilities to container architectures, while also streamlining workflows and reducing the necessity of managing hardware.&amp;nbsp; However it also increases complexity, and this can make it more difficult to identify and mitigate vulnerabilities.&amp;nbsp; It can also result in a lack of ownership for security issues as developers assume that other parties are taking responsibility. Applications and containers which run or on otherwise access cloud providers must identify themselves.&amp;nbsp; Credentials and access control must be securely managed in order to prevent secret exposure and privilege escalation.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.682">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-1" name="Code promotion across environments may introduce vulnerabilities" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Code and image provenance is a developer and application owner concern; verification requires certification and key management across the code promotion path. This can be a challenge as multiple parties and certificate owners may be involved. The absence can result in application version mismatches or running tampered images. 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments. Today, developers can push code across application container environments without the need for operator interaction.&amp;nbsp; Systems should have robust policies and procedures in place to ensure that images are secured by developers at all stages of the build chain. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.258">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-1" name="Contention issues arise due to the elasticity of workload and dynamic resource requests" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   Ensuring resource availability as needed to support workloads is a challenge.&amp;nbsp; This is because of the dynamic use and availability of resources in a potentially shared environment, combined with the possibly unpredictable use of an application. The absence can result in either the CMP being unable to allocate appropriate resources for an application container, or a resource shortage within the CMP. 
 &lt;/div&gt;&lt;div&gt;
  Resources usage which is not properly managed by developers will affect the usage of others in a shared environment. The absence may result in a DOS-style scenario. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.974">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-2" name="Image contents may not be secure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Images must have no known vulnerabilities or malicious code. Developers must help to ensure images have not been tampered with as they move from development to production. Applications of this feature include scanning images for vulnerabilities and malicious code and using image signing and validation mechanisms. 
&lt;/div&gt;&lt;div&gt;
  Ensuring that only the required components are packaged inside the image can be a challenge due to the complexity of applications. If this is not carefully managed it can result in the compromise of an unnecessary component.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Ensuring third-party components are free of vulnerabilities and updated as needed can be a challenge due to differing update frequencies by third-party vendors. This can result in the compromise of third-party components.&amp;nbsp; OS package managers are a particular challenge in this regard due to the large number of updates and downloads they maintain, and the fact that they often have unrestricted access to systems.&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments.&amp;nbsp; Developers should not assume that system wide security settings will mitigate potential application vulnerabilities.&amp;nbsp; Rather, they should ensure that their images have no known vulnerabilities or malicious code, and that they have not been tampered with as they move from development to production. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.259">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-N-1" name="Insecure networking settings may be exploited to gain access to containers or hosts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Monitoring network activity and providing the infrastructure to do so can present a challenge because of the lack of network tooling and data storage. The absence can result in the exposure of sensitive information and diminished incident response and detection capabilities. 
&lt;/div&gt;&lt;div&gt;
  In container networking, communications between containers and hosts must be secured, network traffic must be monitored, and access to the network traffic, resources, and configurations must be controlled.&amp;nbsp; In terms of applications, communications between containers affect access control, limiting access to network traffic, resources, and configurations (leveraging network namespace). Other outcomes include isolating the container interfaces, monitoring network activity, and securing communications between containers via SSL/TLS or VPN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-D-1" name="Insufficient scaling of container resources may lead to inefficient resource utilization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring resource scaling requests take priority over other containers may provide a challenge.&amp;nbsp; This is due to complexity and implementation of the CMP to allow such prioritization. The absence can result in priority applications not being able to scale for user workloads. 
&lt;/div&gt;&lt;div&gt;
  It is a challenge for developers to define application performance profiles. Predictive application workload modeling is a complex task often substituted by a "common practice" or, equally precise, "by analogy".&amp;nbsp; This is largely due to lack of tooling in development environments. Both are likely to lead to inefficient resource utilization. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.972">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-1" name="Lack of continuous monitoring can result in application version mismatches and system availability issues" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  The ephemeral nature of application containers increases the necessity of reliable and centralized monitoring of platform, host, and containers.&amp;nbsp; It is essential to ensure that container runtime actions and events are monitored and logged in order to allow timely identification and mitigation of problems and threats. 
&lt;/div&gt;&lt;div&gt;
  There may be a challenge for developers to understand which container versions are running and where. This information needs to be easily and quickly digestible by appropriate parties. The absence can result in application version mismatches and system availability issues. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.683">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-G-1" name="Lifecycle events prevent secure startup and shutdown of applications" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Developing a containerized application that can be scaled up or down without notice is a challenge because of the extra effort required to design and implement the application in a manner where it can gracefully handle such scaling events while maintaining a secure state.&amp;nbsp; &amp;nbsp;It is a more robust approach to ensure that stateful containerized applications are aware of container scaling events to ensure transitions between secure states. 
&lt;/div&gt;&lt;div&gt;
  In an ideal world, either application containers are stateless, or the applications have been developed with clustering technologies to attach and release neighbors as they start and are terminated.&amp;nbsp; Some use cases, though, will have containers that have not been developed in such a manner, or which contain legacy applications that have migrated to containers. Such applications running inside a container may not be aware of pending lifecycle events issued by a CMP such as container start/stop/scale.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The containerized application should have an opportunity to be informed of the pending container's lifecycle events to manage its own lifecycle accordingly. This is essential to ensure the application's secure startup and shutdown.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.683">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-2" name="Mismanagement of container volumes can compromise underlying architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   In container volume management, it is essential to ensure the container has need-only access to data volumes and uses dedicated storage resources for runtime operations.&amp;nbsp; In the application, it is vital to ensure that access control exists for file system resources and raw storage devices, and that data is encrypted at rest in the data volumes.&amp;nbsp; Applications directly mounting a host directory should be avoided. 
 &lt;/div&gt;Building an image that minimizes using shared container volumes is imperative due to the risk of exposing sensitive data to the host or other containers, and the current reliance on sharing information with containers. This can result in exposure of sensitive data.&amp;nbsp;&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Building an image that does not share the host filesystem is equally crucial because exposing the host filesystem can result in compromising the underlying infrastructure, and other containers that share the same environment.&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.974">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-2" name="The complexity of container architectures can make logging and monitoring difficult to implement" state="0" impact="100" issueId="" issueLink="">
          <desc>Ensuring that coding policies include logging capabilities at the planning and design stages is a challenge due to the lack of presence of security concerns in the design phase and tooling.&amp;nbsp; In addition, there are many logging features which may be implemented in microservices and an absence of clear policies can result in lack of ownership from key parties, including developers.&amp;nbsp;&amp;nbsp;&lt;div&gt;
  Usually application logging is added after the fact as a response to an incident or audit.&amp;nbsp; Ensuring that application logs, starting with authentication logs, are captured for existing applications is a challenge due to lack of resources to modify the application and necessary guidance to do so.&amp;nbsp;&amp;nbsp;This will result in diminishing incident response and detection capabilities.&amp;nbsp; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.683">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CSA-SACA-3.1.5:1" name="Applications must use secure network communication protocols" issueId="" issueLink="" platform="" cost="1" risk="35" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Network traffic generated by the containers should maintain confidentiality regarding the applications and management by utilizing proper encryption protocols (i.e., SSL/TLS, IPSec). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Selecting libraries that support secure communications to provide encryption and maintain confidentiality prevents information spillage and network traffic tampering. Tampering of network traffic may result in system compromise. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.5" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify any communications in your application which will be sent as network traffic and ensure that encryption protocols have been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.925">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.2.1" name="Avoid using images with OS package managers" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&amp;nbsp;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images with OS package managers or shells could contain unknown vulnerabilities.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Package managers are normally run with unrestricted access in order to allow them to modify critical system software. The package manager's actions, therefore, affect the entire system.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you must include OS packages, remove the package manager before deploying the container.&amp;nbsp; The following steps may also help mitigate the risk: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use repositories you trust. Use only mirrors that belong to reputable organizations.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Manually update your systems (and local mirror caches).&lt;/li&gt; 
  &lt;li&gt;Use signed repository metadata.&lt;/li&gt; 
  &lt;li&gt;Use HTTPS for mirror communication.&lt;/li&gt; 
  &lt;li&gt;Use package managers that implement metadata expiration.&lt;/li&gt; 
  &lt;li&gt;Use distributions that properly make use of the package manager's security features.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="cs.arizona.edu: Attacks on Package Managers" url="https://www2.cs.arizona.edu/stork/packagemanagersecurity/attacks-on-package-managers.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Follow the steps for your particular OS to identify if package managers are installed on the container.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.182">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:1" name="Create and follow coding policies to include logging capabilities" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An application should provide logs regarding authentication, authorization, actions, and failures. The developer should include this capability as part of planning and design phases. For new applications, the developer should create and follow coding policies to include logging capabilities at the planning and design stages.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been planned and designed in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:2" name="Create common libraries for developers to handle sensitive data and secrets in the backend application code" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable consistent ways of addressing the handling of sensitive data and secrets within backend application code, a common set of libraries should be provided to developers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Application developers are not necessarily security developers and should devote time to developing application features, not security. Security that is required within applications should be easy to use and made clear, so that minimum effort is spent and consistency across applications is achieved. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that libraries exist for securing sensitive data and that they have been applied to your applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.622">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.9:1" name="Developers should receive sufficient training on volume management" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should receive sufficient training to ensure development of applications that minimize the need to use shared container volumes and that do not require any access to host directories. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Shared volumes can result in exposure of sensitive data. Images which share the host volumes or filesystem can result in the compromise of the underlying infrastructure and other containers sharing the same environment. Avoiding these configurations is a challenge, which is why developer training is essential. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.9" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.925">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:3" name="Encrypt the sensitive application and create a container entry point application that decrypts and executes the main application" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By encrypting the sensitive application, the risk of unintended exposure of the sensitive application can be mitigated. This allows the container image (and sensitive application) to be stored, transmitted, or shared without unauthorized exposure. Encryption and decryption of the application should be treated as any other data encryption/decryption process. For sensitive applications, developers should encrypt the sensitive application, then create a container entry point application that decrypts and executes the main application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that an appropriate level of encryption has been applied to any sensitive data in the application.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.12:1" name="Ensure sustainable system performance by balancing system resources" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Working with the operator and architect, the developer should ensure that the binaries and libraries are optimized to operate in a containerized infrastructure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Default configurations or those that are suitable for non-containerized systems may conflict with the needs of container architectures.&amp;nbsp; Developers need to be aware of the environmental impacts on their applications. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.12" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review optimization configurations to ensure they are compliant with the needs or policies of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.922">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SAC-3.1.1:1" name="Establish a root of trust" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A public key infrastructure (PKI) allows creation and management of a hierarchy of digital certificates for encryption and digital signatures. A PKI may already exist in an organization-certificates from this new or existing system can be used to sign container images and later verify their provenance and integrity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To ensure the integrity of the build chain, the developer must have the ability to digitally sign and provide a digital signature for the code and/or binary artifacts that will be promoted between environments or to the next promotion phase. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By signing a container image with a certificate that is part of a PKI, container management platform (CMP), users can easily verify the source of an image. This is important as once the source of the image is determined, users can ensure that the image has been through appropriate scrutiny before being promoted for production use. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all existing images are appropriately signed or verified, using keys provided by your organization.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.180">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.1" name="Harden all applications in an image" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;span style="line-height: 107%; font-size: 14.6667px;"&gt;&lt;font face="Times New Roman, serif"&gt; 
   &lt;div style=""&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Description:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Ensure that applications are secure and follow best practices. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Rationale:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      When deploying applications in a containerized system, vulnerabilities that compromise the application can in turn compromise the entire architecture.&amp;nbsp; This is a result of the way containers and pods communicate and access resources throughout the whole cluster. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Remediation:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Analyze source code regularly to ensure it is following best practices to avoid vulnerabilities.&amp;nbsp; &amp;nbsp;Continuously test your application against common attack practices, like SQL injection, DDoS attack, etc. There are various dynamic analysis tools available to assist.&amp;nbsp; 
    &lt;/div&gt; 
   &lt;/div&gt;&lt;/font&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;, serif; font-size: 11pt;"&gt;&lt;br&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="The New Stack: A Security Checklist for Cloud Native Kubernetes Environments" url="https://thenewstack.io/a-security-checklist-for-cloud-native-kubernetes-environments/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a reliable tool such as Veracode or Synopsys to analyze source code for vulnerabilities before deploying.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.182">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:2" name="Identify a data at rest (DAR) solution" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer should utilize a DAR solution, if at all possible, that has been FIPS 140-2 validated. The developer should also analyze the application programming interface (API) and a compatible key management system (KMS).&amp;nbsp; The developer should also utilize the latest advanced encryption standard (AES) with the highest possible key length. Developers also have to take into account if the solution has been validated by an impartial third party and if the solution is viable in the intended operational environment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  With a FIPS-validated solution and a compatible KMS, there is some third party validation that the solution is secure and thus a higher level of assurance.&amp;nbsp; Robust use of AES will ensure data confidentiality. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that encryption is included and that the level is appropriate to the application security needs and the wider system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:2" name="Implement plans to capture application logs" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An existing application should provide logs regarding authentication, authorization, actions, and failures. If any of these logging items have not been implemented, developers should provide these capabilities as part of the maintenance phase. For existing applications, the developer should implement plans to capture application logs, starting with authentication logs 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been applied in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:3" name="Include only necessary components inside the image" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should trim down images to include only necessary components. It is preferred to use a baseline image with minimal set of packages over a full OS distribution.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Removing unnecessary components from the image will reduce the number of potentially outdated or unpatched packages and therefore reduce the number of security vulnerabilities. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.181">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.11:1" name="Left the application in an unknown state if a containerized application is unaware of the container's transitions" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The CMP should provide the encapsulated application an opportunity to perform a graceful transition to a known secure state. The conventional solution is to allow an application to be notified of the container lifecycle events. Resources, freed after container's removal, should be released back to the pool in a well known state and containers should be allowed to log any state changing events. The container's lifecycle (start/stop/scaled) is managed by CMP. From a developer's perspective, the application could be left in an unknown state if a containerized application is unaware of the container's transitions 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is essential to inform the application of the container's lifecycle events, so that it may take appropriate action to ensure a secure startup and shutdown. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.11" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the container's stop start process and ensure that any related and relevant configurations have been applied to your applications.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.622">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.2" name="Limit credential exposure" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Harden credentials before deploying applications 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Plain text (non-encrypted) credentials (account passwords, SSH Keys, DevOps secrets, etc.) may be embedded into source code because it helps to simplify deployments at scale.&amp;nbsp; This poses formidable security risks that are routinely exploited by malware and hackers. In some cases, a threat actor may insert hardcoded credentials to create a backdoor, allowing them persistent access to a device, application, or system. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Hardcoded credentials are favored cyberattack targets for password guessing exploits, allowing hackers and malware to hijack systems, and software. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Don't define credentials in your application code. Use managed identities for cloud resources to let your pod request access to cloud provider.&amp;nbsp; Avoid the use of fixed or shared credentials. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="BeyondTrust: Hardcoded and Embedded Credentials are an IT Security Hazard" url="https://www.beyondtrust.com/blog/entry/hardcoded-and-embedded-credentials-are-an-it-security-hazard-heres-what-you-need-to-know"/>
            <reference name="Microsoft docs: Best practices for pod security in Azure Kubernetes Service" url="https://docs.microsoft.com/en-us/azure/aks/developer-best-practices-pod-security"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review application code before deployment for embedded credentials.&amp;nbsp; Carry out pen testing of applications to find overlooked credential vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.622">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:1" name="Provide training and best practices guidance to developers" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers should be informed and trained on threats arising from multi-tenancy on public clouds.&amp;nbsp; They also need to be trained and provided with templates for how to use the secret management feature within their apps so they avoid the practice of hard-coding static secrets within application code. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers are accustomed to the practice of baking sensitive information into server code from the days when server-side was considered trusted environment. Raising the awareness of the nuances and threats present in current public cloud environments helps drive in the need to avoid such practices 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.622">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.1" name="Remove components which are only required for development" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Tools that are essential during application development can create security risks in deployment 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Any unnecessary component is another potential entrance point for an attacker.&amp;nbsp; Debuggers and common tools like Curl that are useful to attackers should not be included in images in deployment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Perform an analysis of the entire container before deployment and remove any components or functions you do not need. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.181">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.2" name="Secure any dependencies" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that any dependencies used by applications are also secure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is hard to keep to track of all the packages an application uses and to make sure they are not vulnerable.&amp;nbsp; Even if you ensure that your own application is free of vulnerabilities, if the base packages and dependencies are not secure, the container could still be vulnerable to attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Regularly perform a full dependency analysis for code to uncover your open source and other dependencies for any vulnerabilities they contain. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a suitable vulnerability scanner to carry out a full dependency analysis for code to uncover your dependencies and any vulnerabilities they contain.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.182">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.2" name="Secure the container base image" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br&gt;Ensure that container images are built using secure and approved base images&lt;br&gt;&lt;br&gt;&lt;b&gt;Rationale:&lt;/b&gt;&lt;br&gt;Vulnerabilities in software packages can be exploited by hackers or malicious users to obtain unauthorized access to local or cloud resources. &lt;br&gt;&lt;br&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br&gt;Select minimal base images, add only what you require, and scan them for vulnerabilities.&amp;nbsp; &amp;nbsp;Ideally, the tool you choose for this function should be aware of your base image choice and alert you when there is an updated version of your base image, or if there are alternate base images that can reduce vulnerabilities.&lt;br&gt;&lt;br&gt;Only deploy authorized container images that you've analyzed, scanned, and signed (i.e. Software Supply Chain Security). Grafeas, TUF, and Notary can help here.&lt;br&gt;&lt;br&gt;Ensure that only images from image registries on allow lists are used to launch containers in your Kubernetes environment.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Peter Benjamin: Kubernetes Security Best-Practices" url="https://dev.to/petermbenjamin/kubernetes-security-best-practices-hlk"/>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;font face="Times New Roman, serif"&gt;Please follow your 3rd party image scanning provider's guidelines for enabling Image Scanning.&lt;/font&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.181">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:1" name="Sign images as part of the image build process and validate images before use" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images should be signed as part of the build process and validated before used. Signing and validation can be achieved through GNU Privacy Guard (GPG) signatures on image contents or through similar methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Digital signing of image content at build time and validation of the signed data before usage ensures that image data cannot be tampered with between build and run time. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review your applications to ensure that the appropriate signing has taken place.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.181">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.3:1" name="Use clear versioning schemes to identify application versions running in containers" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By defining and using an accepted versioning scheme, a development team can have version numbers automatically implemented as part of a build process. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By applying versions either to a container name, tag, or label, the developer is then able to easily identify application versions running in containers. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.3" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review container names, tags, or labels to check that they contain version numbers in line with your organizational or system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.1" name="Use IAM for access control" issueId="" issueLink="" platform="" cost="1" risk="49" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Description:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Implement authentication and access control with the Identity and Access Management (IAM) service provided by the cloud provider. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Rationale:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Applications which have access to the full scope of the cloud provider may perform actions outside of their scope.&amp;nbsp; This can be exploited by attackers to gain access to large areas of the cluster. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Use IAM roles to provide fine-grained access.&amp;nbsp; Assign roles only the specific amount of resources they need, or allow them&amp;nbsp; to perform only a particular amount of activities. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="we45: Security Essentials for a Developer - Kubernetes" url="https://we45.com/blog/security-essentials-for-a-developer-kubernetes/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use the relevant tools for your cloud provider to audit the use of IAM roles in applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.621">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:1" name="Use standard, commonly available authentication systems" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When either data or applications are encrypted within a container, having a reliable method to authorize use of encryption keys is required. Alternatively, applications must be written to support multiple authentication methods, introducing unnecessary complexity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By using common authentication methods, this ensures a predictable ability to authenticate and authorize the use of encryption keys across CMPs.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
            <standard ref="K06 - Broken Authentication" supportedStandardRef="owasp-kubernetes-top-10-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that an encryption policy or standard exists for your organization, and that it has been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.622">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:2" name="Use vulnerability scanning tools as part of the development process" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should use vulnerability scanning tools as part of the development process and the CI pipeline, and integrate a vulnerability assessment into the build process. They will also want to consider failing a build if the vulnerability assessment fails. Once a vulnerability is identified, apply security patches to the vulnerable component and rebuild the image. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A vulnerability scanner will identify and alert on the use of third-party components with known security vulnerabilities. Applying vulnerability scanning as part of the development cycle improves the security quality of the images, since well-known vulnerabilities are identified and patched before software gets into runtime environment. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if a protocol exists for vulnerability scanning in your organization and, if so, that it has been utilized.&amp;nbsp; If one does not exist, use one of the recommended tools to ensure that your own applications and containers do not contain vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.181">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.14:1" name="Utilize resource control features to orchestrate intra-container resource utilization, prioritization and allocation thresholds" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should expect the presence of horizontal infrastructure scaling capability but should avoid the need for vertical scaling by ensuring that the application can function within the parameters established by the configuration management team. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer must obtain the resource utilization and hardening parameters and incorporate those configurations into the software development environment and testing scripts. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The application developer must accept that the application under development will not have on-hand the entirety of computing resources available in the production environment. Even in the presence of auto-scale, auto-scaling capability has limits and does not scale out infinitely.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Without testing application functions within defined production parameters, the risk of poor application performance goes up, not down. Proper configuration of resource and security functionality as appropriate to the CMP in use ensures that a resource consumption fault or runaway container processes do not affect adjacent containers.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.14" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the capabilities of the CMP in terms of the relevant thresholds and ensure your application is compliant.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:07.925">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="access-sensitive-data" name="Access sensitive data" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNCONFIGURED-SECURITY-DATA" name="Sensitive data is exposed through weak security configurations" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>Weak security configurations make possible for an attacker to access sensitive data like API keys, credentials, etc.</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AS-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CLOUD-VULNERABILITIES" name="Attackers use known cloud vulnerabilities to access unauthorized data" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>Known vulnerabilities in a specific cloud environment are used to exploit a system, allowing an attacker to access unauthorized data</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AA-1">
                  <countermeasures>
                    <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                    <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNAUTHORIZED-ACCESS-CONTAINER-VOLUMES" name="Sensitive data is compromised by unauthorized access to container volumes" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>An attacker find flaws to access container volumes without permission</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="IMAGE-MODIFICATION" name="Attackers compromise images by modifying their content" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>An attacker modifies/forges a microservices image to introduce vulnerabilities in the system</desc>
              <riskRating confidentiality="100" integrity="100" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                    <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                    <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A1:2017" name="Attackers gain access to the sensitive data through injecting code in the repositories" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>Almost any source of data can be an injection vector: environment variables,
                                parameters, external and internal web services, and all types of users. Injection flaws
                                occur when an attacker can send hostile data to an interpreter.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                    <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SCALABILITY-ISSUES" name="Availability is compromised through attacks against scalability configuration" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>An attacker compromise the availability of a system by exploiting scalability configurations in order to consume resources</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CO-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-LM-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="APP-LM-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1499.003" url="https://attack.mitre.org/techniques/T1499/003"/>
              </references>
              <weaknesses>
                <weakness ref="CO-D-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNAUTHORIZED-ACCESS-NETWORK" name="Sensitive data is compromised through network access" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="microservices-library-dev" editable="true">
              <desc>Attackers gain undetected access to the network systems and changes made by the
                                attackers couldn't be audited or detected.
                            </desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-N-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="4f874705-68b1-40c0-a642-09c43c9bfab9" diagramComponentId="35d4806a-3364-4fd3-a742-8187ac1e5dcc" ref="7858e232-e26d-44bc-946f-1f5a6e44c811" name="Devices" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="other-database">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.422">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.236">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.237">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt; 
 &lt;li&gt;Weak encryption algorithms&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Loss of encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Compromised encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Revoked keys are still active (bad key lifecycle management)&lt;/li&gt; 
&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.237">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="RESTRICT-ACCESS-DATABASE" name="Access the data store from an account with the least privileges necessary" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Use an account with only the minimum set of permissions required to access the data store. The account should not be able to perform operations that are not explicitly required by the component that performs these operations. For example, if a web application needs to read data from certain tables and insert and update data from others, then a database account with only those specific permissions should be used by the application server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the user account used by external components to access this data store.&lt;/li&gt; 
 &lt;li&gt;Check which permissions are assigned to this user account.&lt;/li&gt; 
 &lt;li&gt;Verify that they are the minimum set of permissions necessary and no unnecessary permissions are assigned.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.369">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PATCH-SERVICE" name="Apply required security patches to the service" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Vendors and other maintainers of software release patches in response to security flaws and other bugs in their products.&amp;nbsp; The longer a system is exposed with a known security vulnerability, the easier to compromise it. &amp;nbsp;As the exploit enters the public domain, they get included in automated exploitation suites like Metasploit and a wider less skilled miscreant is able to leverage them.&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected failures or exploitation.&lt;/li&gt;&lt;li&gt;Clearly define an approach for testing and applying patches, in particular security patches, with expected timescales. &amp;nbsp;There is often a small window between the release of a patch, and potentially malicious actors reverse-engineering the patch to identify and exploit the flaw.&lt;/li&gt;&lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting services to ensure the project team is promptly aware of issues within the project or its components.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-01 Configuration Management Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/152-08_02_CM-01"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check with the software or service vendor whether security vulnerabilities and
                            their associated patches are available for the version deployed.&lt;/li&gt;
                            &lt;li&gt;Evaluate the criticality of the vulnerability and schedule a fix accordingly.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.131">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" name="Encrypt personal data" issueId="" issueLink="" platform="" cost="0" risk="27" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement encryption at rest (see guidance below) or give a risk-based explanation as to why encryption was not implemented.&lt;br /&gt;&lt;br /&gt;Use well-known encryption libraries, taking into account the data use, and do not invent your own. 
          &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;personal data must be encrypted&lt;/li&gt;
              &lt;li&gt;data that is not used by the application (e.g. passwords, ...) should be hashed so they cannot be recovered easily&lt;/li&gt;
              &lt;/ul&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:02016R0679-20160504"/>
            <reference name="OWASP Proactive controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify that users' personal data processed by the application is encrypted at rest (e.g. databases).&lt;/li&gt;
                &lt;li&gt;If encryption is not being leveraged, verify that there is documentation outlining the reasoning for that decision.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.131">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For less sensitive but still restricted data, simple verification of the location of the user may suffice (e.g. IP restrictions).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For non-sensitive but non-public data, access could be restricted by IP address, limiting access to internal networks, workstations, or gateways&lt;/li&gt;&lt;li&gt;For more sensitive data, TLS client-side certificates may be appropriate&lt;/li&gt;&lt;li&gt;Where secret or other sensitive data is handled, a full authentication process to identify and validate users with single or multi-factor authentication may be required&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX:02016R0679-20160504"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                &lt;li&gt;Try to obtain access to this information without any type of authentication, for example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.130">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer to reduce exposure" issueId="" issueLink="" platform="" cost="1" risk="56" state="Recommended" owner="fscott-admin" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to services should be restricted to expected sources, limiting the exposure of the service and its attack surface; and the likelihood of a malicious actor gaining access to the system.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Apply network layer security controls so that only the necessary and expected IP addresses are permitted access to connect to the service.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check that the network access to the service is only allowed for the components which need it.&lt;/li&gt; 
 &lt;li&gt;There should be a firewall protecting the network segment in which the service is installed.&lt;/li&gt; 
 &lt;li&gt;Check that the firewall restricts all access and only permits the minimum connections required using the principal of least privilege.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.131">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS SERVICE" name="Access service" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="VULN-SERVICE" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                    <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="AUTH-DATASTORE-LEAST-PRIV" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="CS-Default" editable="true">
              <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="5da72bce-f3ef-4ddf-8b44-08d8e1d10b5d" diagramComponentId="90847b7b-2698-437d-9f92-308ad72e314b" ref="62e3ddae-b8b2-45f1-9e84-3877c752dc51" name="Firewall" desc="" library="IR-Network-Components" parentComponentRef="" componentDefinitionRef="CD-FIREWALL">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-16" name="Configuration" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category are typically introduced during the
                        configuration of the software.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-FIREWALL-03" name="Automate the process of firewall updating" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Network-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The firewall rules must be well-defined and optimized to provide the expected protection. Cleaning up your firewall rule base of any kind of unnecessary clutter can have a positive impact on your network security.

Your firewall rule base may have certain redundant elements, duplicates, or bloated unnecessary rules that make the guidelines complicated and less effective. It is important to get rid of such rules to have a clear set of guidelines that can be followed better.

To clean your firewall rule base, you must:

Eliminate redundant or duplicate rules that slow down the firewall performance as they require the firewall to process more rules in its sequence than necessary.
Remove the rules that are obsolete or no longer in use. These only make the firewall management more complex, and can even be a threat to network security if not updated.
Remove shadowed rules that are not essential. These may lead to more critical rules being neglected.
Conflicting rules must be eliminated.
Any errors or inaccuracies in the rules must be eliminated as these may result in malfunctions.</desc>
          <implementations/>
          <references>
            <reference name="7 Firewall Best Practices for Securing Your Network" url="https://www.real-sec.com/2020/01/7-firewall-best-practices-for-securing-your-network/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.948">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-FIREWALL-01" name="Block traffic by default and monitor user access" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Network-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>It is advisable to block all traffic to the network by default. Allow only some specific traffic to certain known services. This helps you to have control over who can access your network and prevents any security breaches from occurring.

The firewall being your first layer of protection against threats, must not allow access to anyone and everyone to alter the configuration. User permission control is necessary to ensure that only authorized administrators have access to change firewall configurations. Apart from this, every time an authorized administrator does change any configuration, it must be recorded in the log for audits and compliance. Any unwarranted configuration changes can thus be detected, and configuration restore may be implemented in such a case.

You can also create separate user profiles to provide various levels of access to the IT staff, only as much as needed for a job. Firewall logs must be monitored regularly to detect any unauthorized break-ins to the firewall, from inside or outside the network.</desc>
          <implementations/>
          <references>
            <reference name="7 Firewall Best Practices for Securing Your Network" url="https://www.real-sec.com/2020/01/7-firewall-best-practices-for-securing-your-network/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.947">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-FIREWALL-04" name="Conduct regular firewall security audits" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Network-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Security audits are necessary to ensure that the firewall rules comply with the organizational, as well as external security regulations that apply to the network. Unauthorized firewall configuration changes that are a policy violation can cause non-compliance. It is important for administrators and IT security staff to carry out regular security audits to ensure no unauthorized changes have taken place.

This will also keep you updated on the necessary changes made to the firewall and warn you against any potential risks created by these changes. Security audits are most essential when there is a new firewall installed, firewall migration activity happening, or when there are bulk configuration changes made on firewalls.</desc>
          <implementations/>
          <references>
            <reference name="7 Firewall Best Practices for Securing Your Network" url="https://www.real-sec.com/2020/01/7-firewall-best-practices-for-securing-your-network/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.948">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-FIREWALL-02" name="Optimize the firewall rules of your network" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="IR-Network-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Your network's firewall will need to be updated from time to time for various reasons. This is necessary to ensure that the firewall remains strong and capable of protecting against new threats. But it is important to have a change management plan so that the process is smooth and secure. Any unplanned configuration change leaves a loophole in your network's security.

A well-defined and robust firewall change management plan must include certain basic features:

It must define the changes that are required and their objectives.
It should also enlist the risks involved due to the policy changes, their impacts on the network, and a mitigation plan to minimize the risks.
A well-defined structure of change management workflow between various network teams.
Proper audit trails that record who made the change, why, and when.</desc>
          <implementations/>
          <references>
            <reference name="7 Firewall Best Practices for Securing Your Network" url="https://www.real-sec.com/2020/01/7-firewall-best-practices-for-securing-your-network/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.948">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Network-Components">
          <threats>
            <threat ref="T-FIREWALL-01" name="A misconfiguration on the firewall rules let attackers access unauthorized resources" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Network-Components" editable="true">
              <desc>A misconfigured firewall can give the illusion that it is protecting the system when in fact it is not.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-16">
                  <countermeasures>
                    <countermeasure ref="C-FIREWALL-01" mitigation="25"/>
                    <countermeasure ref="C-FIREWALL-02" mitigation="25"/>
                    <countermeasure ref="C-FIREWALL-03" mitigation="25"/>
                    <countermeasure ref="C-FIREWALL-04" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-FIREWALL-01" mitigation="25"/>
                <countermeasure ref="C-FIREWALL-02" mitigation="25"/>
                <countermeasure ref="C-FIREWALL-03" mitigation="25"/>
                <countermeasure ref="C-FIREWALL-04" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="741dd9a8-612d-4522-b510-63cc1c58237a" diagramComponentId="0a247cc5-3fb9-44d0-85b6-215f7c2df68a" ref="ce913220-e167-40c4-8f03-3e9f3622d240" name="Imaging device" desc="" library="IR-Hardware-Components" parentComponentRef="13268e65-6852-477d-9334-091f3a64163d" componentDefinitionRef="CD-IMAGING-DEVICE">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.974">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-654" name="Reliance on a Single Factor in a Security Decision" state="0" impact="100" issueId="" issueLink="">
          <desc>A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.974">
              <output/>
            </source>
            <references>
              <reference name="CWE-654: Reliance on a Single Factor in a Security Decision" url="https://cwe.mitre.org/data/definitions/654.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-255" name="The application does not wipe used and not needed passwords or key material" state="0" impact="100" issueId="" issueLink="">
          <desc>When using password or key material within an application, these are copied in memory and can be copied back to the disk depending on several factors.

If the application handles passwords or key material, an attacker with access to the system could inspect the memory or the hard disk to retrieve back those secrets on its original form.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.974">
              <output/>
            </source>
            <references>
              <reference name="OWASP Top 10 - A5 Security Missconfiguration" url="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-FIRMWARE-NOT-UPDATED" name="The firmware of the device is outdated" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The version of the firmware installed on a hardware device is not the latest version available.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.975">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-633" name="Weaknesses that Affect Memory" state="0" impact="100" issueId="" issueLink="">
          <desc>Weaknesses in this category affect memory
                        resources.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.974">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CWE-311-AT-REST" name="Encrypt data stored on the host (data at rest)" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="IR-Hardware-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        &lt;div&gt;
                        Data stored on the server or the client must be protected by encryption (data
                        &lt;i&gt;at rest&lt;/i&gt;).
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographically strong symmetric or asymmetric (public-key) encryption&amp;nbsp;should
                        be used to protect the data.&lt;/li&gt;
                        &lt;li&gt;Encryption should be performed before the data is written to disk or other persistent
                        storage.&lt;/li&gt;
                        &lt;li&gt;The key for encrypting and decrypting the data should &lt;i&gt;not&lt;/i&gt; be
                        accessible from the same host.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The encryption and decryption operation should be performed on a different host.&lt;/li&gt;
                        &lt;li&gt;A recognized, proven, and tested implementation/library should be used (in preference
                        to a bespoke implementation).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
          </references>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="5.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="6.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.24" supportedStandardRef="iso-27002-2022"/>
            <standard ref="PR.DS-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-high-baseline"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check the functions of the application which are storing sensitive data.&lt;/li&gt;&lt;li&gt;For each of the functions check they are using an external service to encrypt the data.&lt;/li&gt;&lt;li&gt;Check that neither the sensitive data nor the keys used to encrypt the data are stored on the host after the encryption process completes.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.851">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-HARDWARE-CUSTOM-CHIPSET" name="Ensure that purpose-built/custom chipsets are not used if possible" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="fscott-admin" library="IR-Hardware-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Custom chipsets continue to anchor a great deal of the hardware within corporate data centers or in high-end desktops. Because these purpose-built chips are tailored for niche purposes, manufacturer security reviews are not nearly as intense as those conducted for chips that are to be installed in much larger groups of devices. Over time, hackers find vulnerabilities in these chips, causing the manufacturer to scramble to find a patch.&lt;/p&gt;&lt;p&gt;When possible avoid using custom chipsets.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How to do a firmware update for any kind of device" url="https://www.digitalcitizen.life/how-update-firmware-any-device-6-steps/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.851">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-HARDWARE-PROTECT-LOCAL-ACCESS" name="Protect local access to the device" issueId="" issueLink="" platform="" cost="0" risk="64" state="Recommended" owner="fscott-admin" library="IR-Hardware-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In many cases IoT, IIoT and smart building hardware can be accessed locally though a managed Ethernet or serial interface. If these connections aren't locked down -- from both a configuration and physical sense -- a bad actor may be able to compromise a company's infrastructure by tampering with these devices while visiting the office, warehouse or manufacturing plant.&lt;/p&gt;&lt;p&gt;Ensure that the local connections to these devices are protected enough to avoid physical attacks.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How to do a firmware update for any kind of device" url="https://www.digitalcitizen.life/how-update-firmware-any-device-6-steps/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.851">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-255" name="Remove default credentials and role-based accounts from the application" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="IR-Hardware-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Security is often compromised through default or predictable account credentials, such as
                        'admin/admin'. Best-practice dictates that accounts are only enabled when required, do not have
                        common account names, and force users to choose unique strong passwords rather than using vendor
                        defaults.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Ensure all default application and software accounts are disabled or removed if not
                        required&lt;/li&gt;
                        &lt;li&gt;Strong passwords should be set on accounts that are required, default credentials must
                        be changed.&lt;/li&gt;
                        &lt;li&gt;Build application accounts from a least-privilege perspective.&amp;nbsp;&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Accounts should only be enabled if required.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Users should have individual accounts rather than role-based ones (e.g. dave-admin,
                        sue-admin rather than a shared 'admin' user)&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SC-12 Cryptographic Key Establishment And Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/72-08_02_SC-12"/>
          </references>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.10.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.1.1" supportedStandardRef="nist-800-63"/>
            <standard ref="5.17" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.24" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.3.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify all the authentication points for this component.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check that authentication with default credentials is not possible.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.851">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-HARDWARE-UPDATE-FIRMWARE" name="Update system firmware to latest version" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="IR-Hardware-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There's a set of steps to follow in order to update the firmware of a device:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Know the model of your device and what firmware it uses&lt;/li&gt;&lt;li&gt;Check if there is a firmware update available for your device&lt;/li&gt;&lt;li&gt;Prepare your device for the firmware update&lt;ul&gt;&lt;li&gt;Read the &lt;strong&gt;Readme&lt;/strong&gt; file that is distributed with the new firmware update&lt;/li&gt;&lt;li&gt;Always use a &lt;strong&gt;reliable power supply&lt;/strong&gt; for your device during the firmware update process&lt;/li&gt;&lt;li&gt;If you use a computer to update a device's firmware, make sure that the computer has &lt;strong&gt;no third-party antivirus&lt;/strong&gt; running on it&lt;/li&gt;&lt;li&gt;If you're going to update the firmware on a device using a USB memory stick or any other kind of external memory, make sure that you use a memory stick of good quality&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Backup the current firmware from your device&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How to do a firmware update for any kind of device" url="https://www.digitalcitizen.life/how-update-firmware-any-device-6-steps/"/>
          </references>
          <standards>
            <standard ref="2.2" supportedStandardRef="swift-cscf"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-7" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify that the latest version of the firmware has been successfully installed by checking that the installed version is the same as the latest version.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.851">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Hardware-Components">
          <threats>
            <threat ref="ACCESS-TO-DATA" name="Sensitive data is compromised through unauthorized access to data storage" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Hardware-Components" editable="true">
              <desc>&lt;p&gt;A data breach is a security violation in which sensitive, protected or confidential data is copied, transmitted, viewed, stolen or used by an individual unauthorized to do so. Sensitive data could be exposed due to a bad configuration in user permissions.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="25" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-654">
                  <countermeasures>
                    <countermeasure ref="C-HARDWARE-PROTECT-LOCAL-ACCESS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-HARDWARE-PROTECT-LOCAL-ACCESS" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-100" name="Attackers gain unauthorised access to the application through buffer overflow flaws" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Hardware-Components" editable="true">
              <desc>Buffer Overflow attacks target improper or missing bounds checking on buffer
                                operations, typically triggered by input injected by an attacker. As a consequence, an
                                attacker is able to write past the boundaries of allocated buffer regions in memory,
                                causing a program crash or potentially redirection of execution as per the attackers'
                                choice.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="1" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-633">
                  <countermeasures>
                    <countermeasure ref="C-HARDWARE-CUSTOM-CHIPSET" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-HARDWARE-CUSTOM-CHIPSET" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-112" name="Attackers gain unauthorized access through Brute Force attacks" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Hardware-Components" editable="true">
              <desc>&lt;p&gt;In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since eliminating patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-255">
                  <countermeasures>
                    <countermeasure ref="CWE-255" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-255" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="T-FIRMWARE-EXPLOIT" name="Attackers can perform malicious activity due to a vulnerability in the firmware of the device" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Hardware-Components" editable="true">
              <desc>&lt;p&gt;A device has a vulnerability that is used by malicious actors to exploit the system.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="W-FIRMWARE-NOT-UPDATED">
                  <countermeasures>
                    <countermeasure ref="C-HARDWARE-UPDATE-FIRMWARE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-HARDWARE-UPDATE-FIRMWARE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="insecure-default-configuration" name="Attackers gain access to credentials via insecure default configurations" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Hardware-Components" editable="true">
              <desc>&lt;p&gt;Attackers gain access to sensitive data using known vulnerabilities in the default configuration. These configurations are not secure enough for production environments.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-311-AT-REST" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-311-AT-REST" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="9c5df6ce-5337-4b68-a64c-c1671ee3377c" diagramComponentId="f3145379-4479-4f64-bfb0-66363230068e" ref="13268e65-6852-477d-9334-091f3a64163d" name="IoT Application" desc="" library="iot-security-compliance-framework" parentComponentRef="" componentDefinitionRef="iot-application">
      <tags/>
      <questions>
        <question ref="cloud-hosted-no" answer="true" manuallyModified="false"/>
        <question ref="iot-web-ui-yes" answer="true" manuallyModified="false"/>
        <question ref="mqtt-client-yes" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CSD-ADM-OPEN" name="Access to the administration interfaces is open to untrusted parties" state="0" impact="100" issueId="" issueLink="">
          <desc>The application does not restrict access to administration interfaces to untrusted parties. 
This fact could allow an attacker to chain vulnerabilities in order to gain unauthorized access to the system. </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.102">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated, in violation of the intended security policy.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.982">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-592" name="Authentication Bypass Issues" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not properly perform authentication, allowing it to be bypassed through various methods.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references>
              <reference name="CWE-592: Authentication Bypass Issues" url="https://cwe.mitre.org/data/definitions/592.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="auth-cred-client-unprotected" name="Authentication credentials unprotected on the client side" state="0" impact="100" issueId="" issueLink="">
          <desc>Client side has insufficiently protected credentials, which allows remote attackers to obtain sensitive information via unspecified vectors.&amp;nbsp;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.986">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-494" name="Download of Code Without Integrity Check" state="0" impact="100" issueId="" issueLink="">
          <desc>The product downloads source code or an executable from a remote location and executes the
                        code without sufficiently verifying the origin and integrity of the code.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.983">
              <output/>
            </source>
            <references>
              <reference name="CWE-494: Download of Code Without Integrity Check" url="https://cwe.mitre.org/data/definitions/494.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-287" name="Improper Authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>When an actor claims to have a given identity, the software does not prove or insufficiently
                        proves that the claim is correct.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references>
              <reference name="CWE-287: Improper Authentication" url="https://cwe.mitre.org/data/definitions/287.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-79" name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes user-controllable input before it
                        is placed in output that is used as a web page that is served to other users. Cross-site
                        scripting (XSS) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;There are three main kinds of XSS:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 1: Reflected XSS (or Non-Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The server reads data directly from the HTTP request and reflects it back in the HTTP response.
                        Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a
                        vulnerable web application, which is then reflected back to the victim and executed by the web
                        browser. The most common mechanism for delivering malicious content is to include it as a
                        parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed
                        in this manner constitute the core of many phishing schemes, whereby an attacker convinces a
                        victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's
                        content back to the victim, the content is executed by the victim's browser.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 2: Stored XSS (or Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The application stores dangerous data in a database, message forum, visitor log, or other
                        trusted data store. At a later time, the dangerous data is subsequently read back into the
                        application and included in dynamic content. From an attacker's perspective, the optimal place
                        to inject malicious content is in an area that is displayed to either many users or particularly
                        interesting users. Interesting users typically have elevated privileges in the application or
                        interact with sensitive data that is valuable to the attacker. If one of these users executes
                        malicious content, the attacker may be able to perform privileged operations on behalf of the
                        user or gain access to sensitive data belonging to the user. For example, the attacker might
                        inject XSS into a log message, which might not be handled properly when an administrator views
                        the logs.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 0: DOM-Based XSS&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        In DOM-based XSS, the client performs the injection of XSS into the page; in the other types,
                        the server performs the injection. DOM-based XSS generally involves server-controlled, trusted
                        script that is sent to the client, such as Javascript that performs sanity checks on a form
                        before the user submits it. If the server-supplied script processes user-supplied data and then
                        injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is
                        possible.Once the malicious script is injected, the attacker can perform a variety of malicious
                        activities. The attacker could transfer private information, such as cookies that may include
                        session information, from the victim's machine to the attacker. The attacker could send
                        malicious requests to a web site on behalf of the victim, which could be especially dangerous to
                        the site if the victim has administrator privileges to manage that site. Phishing attacks could
                        be used to emulate trusted web sites and trick the victim into entering a password, allowing the
                        attacker to compromise the victim's account on that web site. Finally, the script could exploit
                        a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes
                        referred to as &amp;quot;drive-by hacking&amp;quot;.
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;br /&gt;
                        &lt;/blockquote&gt;In many cases, the attack can be launched without the victim even being aware
                        of it. Even with careful users, attackers frequently use a variety of methods to encode the
                        malicious portion of the attack, such as URL encoding or Unicode, so the request looks less
                        suspicious.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.103">
              <output/>
            </source>
            <references>
              <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-78" name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  There are at least two subtypes of OS command injection:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(&amp;quot;nslookup [HOSTNAME]&amp;quot;) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.The application accepts an input that it uses to fully select which program to run, as well as which commands to use.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The application simply redirects this entire command to the operating system. For example, the program might use &amp;quot;exec([COMMAND])&amp;quot; to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;In the first variant, the programmer clearly intends input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.103">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-326" name="Inadequate Encryption Strength" state="0" impact="100" issueId="" issueLink="">
          <desc>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-732" name="Incorrect Permission Assignment for Critical Resource" state="0" impact="100" issueId="" issueLink="">
          <desc>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.

When a resource is given a permission setting that provides access to a wider range of actors than required, it can lead to the exposure of sensitive information or to the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references>
              <reference name="CWE-732: Incorrect Permission Assignment for Critical Resource" url="https://cwe.mitre.org/data/definitions/732.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.349">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-209" name="Information Exposure Through an Error Message" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software generates an error message that includes sensitive information about its environment, users, or associated data.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;This sensitive information may be valuable on its own (such as a password), or it may be useful for launching other deadlier attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.350">
              <output/>
            </source>
            <references>
              <reference name="CWE-209: Information Exposure Through an Error Message" url="https://cwe.mitre.org/data/definitions/209.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-215" name="Information Exposure Through Debug Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The application contains debugging code that can expose sensitive information to untrusted parties.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.501">
              <output/>
            </source>
            <references>
              <reference name="CWE-215: Information Exposure Through Debug Information" url="https://cwe.mitre.org/data/definitions/215.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-613" name="Insufficient Session Expiration" state="0" impact="100" issueId="" issueLink="">
          <desc>Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.103">
              <output/>
            </source>
            <references>
              <reference name="CWE-613: Insufficient Session Expiration" url="https://cwe.mitre.org/data/definitions/613.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="NO-PASSWORD-CHANGE" name="Lack of password change facility" state="0" impact="100" issueId="" issueLink="">
          <desc>When the application does not offer a password change facility, a compromise of the current user password will lead to an attacker having persistent access to the account.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.982">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="mqtt-client-dos" name="MQTT client does not present  protective measures against denial-of-service (DoS) attacks" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                    MQTT client does not have measures to protect from excessively high message frequency on subscribed topics. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.986">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="mqtt-client-authz" name="MQTT client don't authorize commands coming from IoT applications" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.986">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-257" name="Plaintext Storage of a Password" state="0" impact="100" issueId="" issueLink="">
          <desc>The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.982">
              <output/>
            </source>
            <references>
              <reference name="CWE-257: Storing Passwords in a Recoverable Format" url="https://cwe.mitre.org/data/definitions/257.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-521" name="Poor quality passwords in use" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not enforce a strong password policy, which makes it easier for attackers to compromise user accounts through brute force or dictionary based attacks.

An authentication mechanism is only as strong as its credentials. For this reason, it is important to require users to have strong passwords. Lack of password complexity significantly reduces the search space when trying to guess user's passwords, making brute-force attacks easier.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.982">
              <output/>
            </source>
            <references>
              <reference name="CWE-521: Weak Password Requirements" url="https://cwe.mitre.org/data/definitions/521.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="UNPATCHED-PRODUCT" name="Recommended security patches are not applied" state="0" impact="100" issueId="" issueLink="">
          <desc>When patches and updates are not applied in a timely manner then a product (e.g. Operating System, Software or Mobile App) or a system could be vulnerable to known security issues. These issues could be leveraged by an attacker to gain access to the system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.351">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-654" name="Reliance on a Single Factor in a Security Decision" state="0" impact="100" issueId="" issueLink="">
          <desc>A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.351">
              <output/>
            </source>
            <references>
              <reference name="CWE-654: Reliance on a Single Factor in a Security Decision" url="https://cwe.mitre.org/data/definitions/654.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100" issueId="" issueLink="">
          <desc>The product is exposed or reachable by an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-307" name="The application does not implement anti-automation mechanisms to prevent automated long-time sustained probes" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.

This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, to compromise program logic (such as limiting humans to a single vote), or for other purposes. For example, an authentication routine might not limit the number of times an attacker can guess a password, or a website might conduct a poll but only expect humans to vote a maximum of once a day.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-255" name="The application does not wipe used and not needed passwords or key material" state="0" impact="100" issueId="" issueLink="">
          <desc>When using password or key material within an application, these are copied in memory and can be copied back to the disk depending on several factors.

If the application handles passwords or key material, an attacker with access to the system could inspect the memory or the hard disk to retrieve back those secrets on its original form.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.981">
              <output/>
            </source>
            <references>
              <reference name="OWASP Top 10 - A5 Security Missconfiguration" url="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-254-PROD" name="The product lacks key security features" state="0" impact="100" issueId="" issueLink="">
          <desc>The product lacks key security features such as protection against tampering or unprotected storages, or it has other misconfigurations and omissions during production.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-400" name="Uncontrolled Resource Consumption ('Resource Exhaustion')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not properly restrict the size or amount of resources that are requested or
                        influenced by an actor, which can be used to consume more resources than intended.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.805">
              <output/>
            </source>
            <references>
              <reference name="CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')" url="https://cwe.mitre.org/data/definitions/400.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This is a generic weakness which includes several different situations that are all connected to unexpected environmental conditions and could be related to:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.804">
              <output/>
            </source>
            <references>
              <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="IOT2.4.13.3" name="All product related web servers have their web server HTTP trace and trace methods disabled" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  All product related web servers have their webserver HTTP trace and trace methods disabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The HTTP trace method is normally used to return the full HTTP request back to the requesting client for proxy-debugging purposes. However, servers supporting the HTTP trace method are subject to cross-site scripting (XSS) attacks when used in conjunction with various weaknesses in browsers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Disable web servers' HTTP trace and trace methods. 
&lt;/div&gt; 
&lt;div&gt;
  For example, regarding an Apache2.0 server: 
&lt;/div&gt; 
&lt;div&gt;
  Modify the security.conf file located under /etc/apache2/conf.d/security and set the Track option to Off. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.13.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2023-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>You can use curl to verify if HTTP TRACE was disabled in the server: 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp;curl -v -X TRACE http://www.yourserver.com 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.632">
              <output/>
            </source>
            <references>
              <reference name="Test HTTP Methods" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.14.1" name="All the production test and calibration software is erased, removed or secured before the product is dispatched from the factory" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All the production test and calibration software used during manufacture is erased, removed or secured before the product is dispatched from the factory.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; The product should have all of the production test and calibration software used during manufacture erased, removed or secured before the product is dispatched from the factory. This is to prevent alteration of the product post manufacture when using authorized production software, for example, hacking of the RF characteristics for greater RF &lt;span class="caps"&gt;ERP&lt;/span&gt;. Where such functionality is required in a service center, it should be erased or removed upon completion of any servicing activities.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Erase, remove or secure all the production test and calibration software used during manufacture, before the product is dispatched from the factory.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.455">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.18" name="All the related servers and network elements prevent anonymous/guest access except for read only access to public information" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  All the related servers and network elements prevent anonymous/guest access except for read only access to public information. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Read only access must be granted only for public information, so servers and network elements have to prevent all anonymous/guest access in order to prevent a potential theft or disclosure of sensitive information. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that all the related servers and network elements prevent anonymous/guest access except for read only access to public information. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="2.4.13.18" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>When you have identified an application interface, for example a Cisco router web interface or a WebLogic administrator portal, check that the known usernames and passwords for these devices do not result in successful authentication. To do this you can consult the manufacturer's documentation or, even simpler, you can find common credentials using a search engine or one of the sites or tools listed in the Reference section.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.632">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Testing for Default Credentials" url="https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.16" name="All the related servers and network elements store any passwords using a cryptographic implementation using industry standard cryptographic algorithms" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  All the related servers and network elements store any passwords using a cryptographic implementation using industry standard cryptographic algorithms. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Passwords must be securely stored using only strong and approved cryptographic algorithms. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that the product securely stores any passwords using an industry standard cryptographic algorithm. For example, see FIPS 140 or OWASP Password Storage Cheat Sheet. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP - Password Storage Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"/>
            <reference name="Security Requirements for Cryptographic Modules" url="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.140-2.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.13.16" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.16" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.632">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.17" name="All the related servers and network elements support access control measures" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  All the related servers and network elements support access control measures to restrict access to sensitive information or system processes to privileged accounts. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Sensitive information or system processes must be protected by means of access control measures implemented on servers and network elements. It is very important that users, devices, and systems be verified, authenticated and authorized before access to such critical data is granted, in order to prevent a potential theft or disclosure of sensitive information or system processes. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that all the related servers and network elements support access control measures. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="NCSC CAF guidance - B.2 Identity and access control" url="https://www.ncsc.gov.uk/collection/caf/caf-principles-and-guidance/b-2-identity-and-access-control"/>
          </references>
          <standards>
            <standard ref="2.4.13.17" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.17" supportedStandardRef="iotsf-class-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Testing for role/privilege manipulation&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In every portion of the application where a user can create information in the database (e.g., making a payment, adding a contact, or sending a message), receive information (account statement, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record this functionality. The tester should try to access such functions as a different user in order to check if it is possible to access a function that should not be permitted for the user's role/privilege (but might be permitted as another user).&amp;nbsp; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.632">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://wiki.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.2" name="Any product related web servers have their webserver identification options switched off" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Any product related web servers have their webserver identification options (e.g. Apache or Linux) switched off. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When a web server is showing the world its type and possibly its version number, it allows attackers to launch targeted attacks against this specific web server and version. In addition, if the version of the web server is known to be vulnerable to a specific exploit, an attacker would just need to use the exploit as part of their attack. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Switch off the webserver identification options.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  For example, to limit the information provided by an Apache server, modify the /etc/httpd/conf/httpd.conf file and change the following two lines: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  ServerSignature Off 
&lt;/div&gt; 
&lt;div&gt;
  ServerTokens Prod 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Save the file, exit, and restart your Apache web server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.13.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2023-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Check what information the web sever is currently revealing. 
&lt;/div&gt; 
&lt;div&gt;
  For example, for an Apache server run: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  curl --head localhost 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you receive a response with a line similar to: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Server: Apache/2.2.15 (CentOS) 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Then the web server is revealing too much information and should be reconfigured so that the output is: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Server: Apache 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.632">
              <output/>
            </source>
            <references>
              <reference name="Fingerprint Web Server" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.5" name="Any product's port(s) that are not required for normal operation should be restricted or disabled" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If the product has any virtual port(s) that are not required for normal operation, they are only allowed to communicate with authorized and authenticated entities or are securely disabled when shipped.&lt;/p&gt; 
&lt;p&gt; Where a port is used for field diagnostics, the port input commands are deactivated and the output provides no information which could compromise the device, such as credentials, memory addresses or function names. &lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; One of the most important principles in information security is to reduce the attack surface. Open ports are not always a security risk. For example, a web server has to have 80 or 443 open, or otherwise users will not be able to connect to use the web server. Thus, taking into account that every open port increases the attack surface, any product's port(s) that are not required for normal operation should be restricted or disabled.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Restrict or disable any port(s) that are not required for normal operation.&lt;/p&gt; 
&lt;p&gt; Deactivate port input for port(s) that are used for field diagnostics and ensure their output provides no information which could compromise the device.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Top 10 2014-I3 Insecure Network Services" url="https://www.owasp.org/index.php/Top_10_2014-I3_Insecure_Network_Services"/>
          </references>
          <standards>
            <standard ref="2.4.5.5" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Checking for Insecure Network Services includes:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Determining if insecure network services exist by reviewing your device for open ports using a port scanner.&lt;/li&gt; 
 &lt;li&gt;As open ports are identified, each can be tested using any number of automated tools that look for DoS vulnerabilities, vulnerabilities related to &lt;span class="caps"&gt;UDP&lt;/span&gt; services and vulnerabilities related to buffer overflow and fuzzing attacks.&lt;/li&gt; 
 &lt;li&gt;Reviewing network ports to ensure they are absolutely necessary and if there are any ports being exposed to the internet using UPnP.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.237">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-285" name="Apply authorization checks to segregate and control access to user data" issueId="" issueLink="" platform="" cost="0" risk="68" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Applications protecting sensitive or otherwise restricted resources must ensure that only appropriate and authorized users can access the application data. It is important that an application prevent unauthorized users gaining inappropriate access to each other's data. Although user A and user B may both be trusted to access data within the application, they may be only authorized to access different subsets of the protected resources.&amp;nbsp; E.g. user A should not be able to access user B's personal data by manipulating a request (typical examples are the manipulation of an ID value or other object reference sent in the URL or body of an HTTP request).&lt;/p&gt;&lt;p&gt;It is not sufficient to rely on obscurity, for example obfuscated or secret URLs or filenames. The application must validate each request for protected data against the proven identity of the user. Before providing access to restricted resources the application must:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure the user has undergone appropriate authentication (identification and verification, or ID&amp;amp;V). E.g. they must have provided their identity and confirmed this with a password, token, or other verification. Typically this is done by checking the validity of the session token issued after login.&lt;/li&gt;&lt;li&gt;Confirm the user is authorized to access the data or resource they are requesting. E.g. their confirmed identify is checked against a server-side access control matrix to determine whether they may access the requested resource.&lt;/li&gt;&lt;li&gt;Access controls should be granular and make it possible to issue to individual resources to individual users or roles.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;URL and asset based access control is provided by most web-frameworks, and it is preferable to use an established and proven framework.&lt;/p&gt;&lt;p&gt;Object-level authorization checks should be considered in every function that accesses a data source using input from the user.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Favor not using an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.&lt;/li&gt;&lt;li&gt;Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an input from the client to access a record in the database.&lt;/li&gt;&lt;li&gt;Use random and unpredictable values as GUIDs for records' IDs.&lt;/li&gt;&lt;li&gt;Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break these tests.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA CM-07 Least Functionality" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/158-08_02_CM-07"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.1" supportedStandardRef="swift-cscf"/>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="1.4" supportedStandardRef="swift-cscf"/>
            <standard ref="1.5" supportedStandardRef="swift-cscf"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="5.15" supportedStandardRef="iso-27002-2022"/>
            <standard ref="5.18" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.2" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.3" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Using two different browsers configured with an intercepting proxy:&lt;/li&gt;&lt;li&gt;Login as user A in browser A.&lt;/li&gt;&lt;li&gt;Login as user B in browser B.&lt;/li&gt;&lt;li&gt;For every operation that displays sensitive data belonging to user A:&lt;ol&gt;&lt;li&gt;Perform the operation as user A and view their sensitive data.&lt;/li&gt;&lt;li&gt;Obtain the session ID of user B.&lt;/li&gt;&lt;li&gt;Configure the proxy to intercept.&lt;/li&gt;&lt;li&gt;Perform the operation as user A again, but this time intercept all the requests and replace user A's session ID with that of user B.&lt;/li&gt;&lt;li&gt;Ensure that user A's sensitive data is &lt;strong&gt;not &lt;/strong&gt;visible.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To ensure object-level authorization checks are in place:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Map out all locations in the application in which user input is used to reference objects directly. For example, locations where user input is used to access a database row, a file, application page, etc.&lt;/li&gt;&lt;li&gt;Modify the value of the parameter used to reference objects to see if the application raises an authorization error.&lt;/li&gt;&lt;li&gt;Assess whether it is possible to retrieve objects belonging to other users or otherwise bypass authorization.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:58.250">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="enforce-app-id-validation-mqtt-client" name="Enforce Application ID validation in the MQTT client" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    Application ID validation is an extra level of security between the IoT application and the device to ensure that no fake application can send commands to the device. This mechanism can be used both as startup security and as a communication security mechanism. By using this scheme, the device stores the unique ID of the IoT application and validates it when it processes the commands that are coming from the IoT application. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    If the IoT application sends an invalid unique ID with a command, the command is ignored by the device. If the device has storage capability, the IoT application unique ID can be encrypted and stored. In that case, the unique ID request is not necessary after every restart. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Enforce Application ID validation in the MQTT client 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Securing IoT devices and gateways" url="https://developer.ibm.com/technologies/iot/articles/iot-trs-secure-iot-solutions1/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.822">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For API rate limiting there are several methods that can be applied:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Throttling: based on certain rules a request can be slowed down considerably to allow other requests to be served first&lt;/li&gt;&lt;li&gt;Request queues: limit the number of request in a given period of time (e.g. five requests per second)&lt;/li&gt;&lt;li&gt;Token bucket: commonly used in public APIs, each user has a number of tokens to call the API. After all tokens have been used the user has to wait until the number of tokens are renewed&lt;/li&gt;&lt;li&gt;Fixed window: requests that exceed a fixed limit in a period of time will be blocked temporarily&lt;/li&gt;&lt;li&gt;Leaky bucket: requests are put in a FIFO queue and will be served accordingly&lt;/li&gt;&lt;li&gt;Sliding log: a time-stamped log is used to identify user actions, so the rate limit can be applied for a specified user to avoid more than X actions in a period of time&lt;/li&gt;&lt;li&gt;Sliding window: combination of fixed window and sliding log&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;From a user perspective, implementing timeouts and calling paginated endpoints can reduce the impact of having a very large response that can freeze the system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API4:2023-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like THC-Hydra, OWASP ZAP or Burp Suite to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.714">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-session-generation-and-expiration" name="Implement a secure Session Generation and Expiration" issueId="" issueLink="" platform="" cost="0" risk="52" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID exchange mechanism based on cookies provides multiple security features in the form of Session Generation and Expiration which is tracked in a session. This session is typically stored on the server for traditional web based session management. A session identifier is then given to the user so they can identify which server-side session contains the correct user data. The client only needs to maintain this session identifier, which also keeps sensitive server-side session data off of the client.&lt;/p&gt;&lt;p&gt;Here are a few controls to consider when building or implementing session management solutions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure that the session id is long, unique and random. The session ID length must be at least 128 bits (16 bytes)&lt;/li&gt;&lt;li&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks such as when an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good PRNG (Pseudo Random Number Generator) must be used. The session ID value must provide at least 64 bits of entropy (if a good PRNG is used, this value is estimated to be half the length of the session ID).&lt;/li&gt;&lt;li&gt;The application should generate a new session or at least rotate the session id during authentication and re-authentication.&lt;/li&gt;&lt;li&gt;The application should not treat OAuth and refresh tokens as their own session identifiers. Moreover, it should allow users to terminate trust relationships with linked applications.&lt;/li&gt;&lt;li&gt;The CSPs (Credential Service Provider) should re-authenticate the subscriber if it has not been authenticated since a given inactivity period. CSPs should inform the RP (Relying Parties) the last authentication time, to know if re-authentication is needed.&lt;/li&gt;&lt;li&gt;When a user chooses to log out (or otherwise has their session terminated), the user session must be terminated on the server-side, not solely at the client-side (for example by deleting or reissuing a session ID token/cookie).&lt;ul&gt;&lt;li&gt;Revoke user sessions on the server-side.&lt;/li&gt;&lt;li&gt;Redirect users to the login page, or provide a login prompt.&lt;/li&gt;&lt;li&gt;Where possible, ensure the session is not reused by the application server.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application should implement an idle timeout after a period of inactivity and an absolute maximum lifetime for each session, after which users must re-authenticate. If the application has implemented a functionality to be always logged in, the application must force users to re-authenticate for more sensitive actions.&lt;/li&gt;&lt;li&gt;The length of the timeouts should be inversely proportional with the value of the data protected.&lt;ul&gt;&lt;li&gt;30 days&lt;/li&gt;&lt;li&gt;12 hours or 30 minutes of inactivity, 2FA optional&lt;/li&gt;&lt;li&gt;12 hours or 15 minutes of inactivity, with 2FA&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.5" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.5" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1" supportedStandardRef="nist-800-63"/>
            <standard ref="7.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7.2.1" supportedStandardRef="nist-800-63"/>
            <standard ref="AC-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check that sessions are renewed following the steps below:&lt;ul&gt;&lt;li&gt;Log in to the application.&lt;/li&gt;&lt;li&gt;Open another browser and go to the login page.&lt;/li&gt;&lt;li&gt;Log in to the application for the second time.&lt;/li&gt;&lt;li&gt;Check that the old session and session id are removed.&lt;/li&gt;&lt;li&gt;Check that a new session is created with new session id.&lt;/li&gt;&lt;li&gt;Check that the old and new session ids are different.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that sessions tokens are generated from a source with sufficient entropy and they are not predictable.&lt;/li&gt;&lt;li&gt;Check that the refresh tokens and OAuth sessions with linked applications have not been terminated by users.&lt;/li&gt;&lt;li&gt;Check the CSPs force the RP to re-authenticate after a certain period of inactivity.&lt;/li&gt;&lt;li&gt;Check that the logout and expiration invalidate the session token, following the steps below:&lt;ul&gt;&lt;li&gt;Open a browser.&lt;/li&gt;&lt;li&gt;Authenticate as a user A.&lt;/li&gt;&lt;li&gt;Get the Session ID and note it.&lt;/li&gt;&lt;li&gt;Logout of the service.&lt;/li&gt;&lt;li&gt;Set up the noted Session ID.&lt;/li&gt;&lt;li&gt;Try to access an authenticated section of the service and you should not be able to do it as user A.&lt;/li&gt;&lt;li&gt;To edit the cookies you can either use a proxy (i.e. OWASP ZAP, Burp, Fiddler, etc.) or a browser extension which allows you to tamper the cookies (i.e. Tamper Data, Cookie Manager, etc.).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check that the session expires after a certain period of inactivity following the steps below:&lt;ul&gt;&lt;li&gt;Verify the expected inactive timeout.&lt;/li&gt;&lt;li&gt;Check 'normal' use through a browser:&lt;ul&gt;&lt;li&gt;Go to the authentication feature of the component.&lt;/li&gt;&lt;li&gt;Authenticate as a user.&lt;/li&gt;&lt;li&gt;Leave the session open for a given time (check the expiration time that has been agreed to be implemented).&lt;/li&gt;&lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the session is no longer authenticated).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check the control is enforced on the server side and not using code in the browser:&lt;ul&gt;&lt;li&gt;Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and determine which cookies or other tokens are used to maintain session state. Alternatively, capture an authenticated application request for replay.&lt;/li&gt;&lt;li&gt;Store and replay the request after the timeout period to see if the application responds with authenticated data.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Review application operation and determine if any behavior artificially holds the session open, for example, heartbeat requests or calls to update data feeds sent from the client to the server are sometimes mistakenly interpreted as user activity, holding the session open.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:58.252">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="input-val-mqtt-clients" name="Implement Input Validation on MQTT clients" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    It's a good pattern to always validate inputs, no matter how trusted the environment is. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Your MQTT clients should at least validate the following: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;&lt;b&gt;MQTT topics&lt;/b&gt;: Did the client receive messages on topics the client did not subscribe to? In such a case your application should ignore the message. If you are using wildcard subscriptions, only process messages on topics you know the client can interpret.&lt;/li&gt; 
                    &lt;li&gt;&lt;b&gt;MQTT message payload&lt;/b&gt;: The payload of MQTT messages is always binary. The structure of the data in the payload is typically defined on the application level. Always make sure you can parse the actual message. So if you are expecting a JSON payload but the actual payload is in XML, your parser will probably have a hard time interpreting the messages. So always validate if your application can handle the input, otherwise malicious MQTT clients could craft MQTT packets that your subscribers can't handle.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Your MQTT Applications: Are they resilient enough?" url="https://www.hivemq.com/blog/are-your-mqtt-applications-resilient-enough/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.822">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="mqtt-client-throttling" name="Implement MQTT throttling on the client-side" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Most MQTT client applications are not designed for handling huge amounts of MQTT messages per second. It's important to know your client's load limitations and then throttle the message ingestion rate to a limit that doesn't overwhelm your client. Such an implementation typically stops to read from the socket as soon as a specific bytes per second or messages per second rate threshold is exceeded. So even if the broker tries to send lots of messages, TCP backpressure mechanisms take effect and your client won't be overwhelmed. If this is not possible with your client library, you should think about implementing load shedding, which means you throw away messages that you can't handle. This is not optimal but certainly better than constantly crashing your client. 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Throttle the message ingestion rate to a limit that doesn't overwhelm your client. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Throttling MQTT Data" url="https://mqtt.cool/throttling-mqtt-data/"/>
            <reference name="Your MQTT Applications: Are they resilient enough?" url="https://www.hivemq.com/blog/are-your-mqtt-applications-resilient-enough/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.824">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.22" name="Input data validation should be maintained in accordance with industry practiced methods" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Input data validation should be maintained in accordance with industry practiced methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The failure to properly validate inputs is one of the most common software security weaknesses, specifically for web applications. This weakness leads to almost all of the major vulnerabilities in applications, such as cross site scripting, SQL injection, interpreter injection, locale/Unicode attacks, file system attacks and buffer overflows. Input data should never be trusted, and therefore software should ensure that input data is strongly typed, has correct syntax, and that it is within length boundaries and contains only permitted characters or that numbers are correctly signed and within range boundaries. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that input data validation is maintained in accordance with industry practiced methods as per NIST Special Publication 800-53 SI-10 (please see reference URL). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST - SI-10 INFORMATION INPUT VALIDATION" url="https://nvd.nist.gov/800-53/Rev4/control/SI-10"/>
            <reference name="OWASP Proactive Controls - C5 - Validate all inputs" url="https://owasp.org/www-project-proactive-controls/v3/en/c5-validate-inputs"/>
          </references>
          <standards>
            <standard ref="2.4.13.22" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.22" supportedStandardRef="iotsf-class-2"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
 &lt;b&gt;Test&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that all areas that accept user data properly handle unexpected data such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;special characters (examples: &amp;lt; &amp;gt; $ % &amp;amp;)&lt;/li&gt; 
  &lt;li&gt;values other than the default items (e.g. letters if the URL argument is normally a number)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Testing Scope&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; Input Form Fields 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; Hidden Variables 
&lt;/div&gt; 
&lt;div&gt;
  &amp;nbsp; &amp;nbsp; URL Parameters 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Desired System Behavior&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Whenever unexpected data is received by the application, the application will gracefully handle the situation and not return a stack trace or display detailed system information to the user. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Invalid form data should result in a message shown to the user explaining how to complete the form correctly. Unexpected data in hidden fields or the URL should result in more generic messages such as: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;i&gt;&amp;nbsp;The requested operation could not be performed.&lt;/i&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.632">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Input Validation testing" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/"/>
              <reference name="WebAppSec/Secure Coding QA Checklist" url="https://wiki.mozilla.org/WebAppSec/Secure_Coding_QA_Checklist"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.33" name="Memory locations used to store sensitive material (e.g. cryptographic keys, passwords/passphrases, etc.) are sanitized as soon as possible after they are no longer needed" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Memory locations used to store sensitive material (e.g. cryptographic keys, passwords/passphrases, etc.) are sanitized as soon as possible after they are no longer needed. These can include, but are not limited to, locations on the heap, the stack, and statically-allocated storage.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="ISO/IEC TR 24772:2013" url="https://www.iso.org/standard/61457.html"/>
            <reference name="MEM03-C. Clear sensitive information stored in reusable resources" url="https://wiki.sei.cmu.edu/confluence/display/c/MEM03-C.+Clear+sensitive+information+stored+in+reusable+resources"/>
          </references>
          <standards>
            <standard ref="2.4.5.33" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.237">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.10.7" name="Pass phrase is obscured by default where entered on a web UI" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Where passwords are entered on a web user interface, the actual pass phrase is obscured by default to prevent the capture of passwords.&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Password masking is the practice of obscuring the password characters when entered on a user interface, more often behind bullets (.), asterisks (*) or similar camouflaging characters. The idea behind password masking is primarily the protection against "shoulder surfing", in other words to prevent nearby observers reading the password "over the user's shoulder" and thus stolen, which is crucial for mobile devices. A second reason is to obscure the password in cases of shared screens, projectors, etc.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
Ensure that the actual pass phrase is obscured by default where entered on a web user interface.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="The Pros and Cons of Password Masking" url="https://www.schneier.com/blog/archives/2009/07/the_pros_and_co.html"/>
          </references>
          <standards>
            <standard ref="2.4.10.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.7" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:58.252">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-79-ENCODE" name="Perform contextual HTML encoding of all user submitted data" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk. If handled properly at the point of input, this untrusted tainted data should have been sanitized and encoded safely. The context when returning the data to the user is important, however, as this will affect what metacharacters have significance, and how they will be interpreted at the client-side. &lt;/p&gt;

 For example, if data is inserted into the &lt;span class="caps"&gt;HTML&lt;/span&gt; body then &lt;span class="caps"&gt;HTML&lt;/span&gt; Entity encoding should be performed, but if the data is inserted into a JavaScript block, then JavaScript escaping should be performed. Similarly, while JavaScript code should not be executed in the browser when returned in an application/json response, it may then be rendered in an unsafe manner. 
 - Apply contextual encoding to all tainted data when returned to the users (including secondary users if the application has multiple interfaces - e.g. an internal user viewing data entered by an external customer).
 - This should be in addition to, and in conjunction with, sanitization and encoding applied at the time of data acquisition.</desc>
          <implementations>
            <implementation platform=".NET">
              <desc>ClJlc3BvbnNlLldyaXRlKEh0dHBVdGlsaXR5Lkh0bWxFbmNvZGUoUmVxdWVzdC5Gb3JtWyJuYW1lIl0pKTs=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: XSS" url="https://pwning.owasp-juice.shop/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the areas of the application in which tainted data acquired from outside the application presented back (e.g. user input, uploaded files, third party content)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Review the encoding and sanitization applied to the data before presentation.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;If possible, pass metacharacters and other unexpected content through the application to review the efficacy of the encoding.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:58.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="TLS-STRONG-PROTOCOLS" name="Require cryptographically secure protocols (e.g. TLSv1.2 and above)" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Only cryptographically strong ciphers should be used. Best-practice dictates that a subset of 'known good' ciphers and protocols must be defined and enforced on the server. &amp;nbsp;This may, however, cause compatibility issues with older browsers, requiring a balance between accessibility and security.&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Define and enforce a list of acceptable ciphers and protocols. Disable SSLv3 and earlier protocols on the service.&lt;/li&gt;
 &lt;li&gt;Ideally, only TLSv1.2 and newer versions should be supported.&lt;/li&gt;
 &lt;li&gt;If TLSv1.1 or 1.0 are required, known secure configurations and ciphers should be selected.&lt;/li&gt;
 &lt;li&gt;SSLv3.0 and earlier should not be used.&lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-01 System And Communications Protection Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/61-08_02_SC-01"/>
            <reference name="OSA SC-12 Cryptographic Key Establishment And Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/72-08_02_SC-12"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="SSL Labs - SSL/TLS Deployment Best Practices" url="https://www.ssllabs.com/projects/best-practices/"/>
            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
          </references>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.24" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Use automated tools to identify all of the SSL/TLS protocols supported by the
                            service.&lt;/li&gt;
                            &lt;li&gt;Verify that TLSv1.2 is supported.&lt;/li&gt;
                            &lt;/ol&gt;Some of the tools that can perform these tests are:
                            &lt;ul&gt;
                            &lt;li&gt;&lt;a href="https://www.continuumsecurity.net/bdd-security/"&gt;BDD-Security&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="https://www.ssllabs.com/"&gt;SSLabs&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="https://github.com/mozilla/cipherscan"&gt;cipherscan&lt;/a&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.633">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="TLS-STRONG-CIPHERS" name="Require cryptographically strong TLS cipher suites" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Only cryptographically strong ciphers should be used. Best-practice dictates that a subset of ' &lt;i&gt;known good&lt;/i&gt;' ciphers and protocols must be defined and enforced on the server. &amp;nbsp;This may, however, cause compatibility issues with older browsers, requiring a balance between accessibility and security.&amp;nbsp;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Define and enforce a list of acceptable ciphers and protocols.&lt;/li&gt;
 &lt;li&gt;Explicitly disable known-bad ciphers and protocols, such as:
  &lt;ul&gt;
   &lt;li&gt;Null and export ciphers.&lt;/li&gt;
   &lt;li&gt;DH, MD5 and other weak cryptography.&lt;/li&gt;
   &lt;li&gt;Ciphers with keys smaller than 128 bits.&lt;/li&gt;
   &lt;li&gt;CBC ciphers with TLSv1.0 or earlier.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-01 System And Communications Protection Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/61-08_02_SC-01"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
            <reference name="SSL Labs - SSL/TLS Deployment Best Practices" url="https://www.ssllabs.com/projects/best-practices/"/>
            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.14" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Use automated tools to identify all the SSL/TLS protocols supported by the
                            service.&lt;/li&gt;
                            &lt;li&gt;Verify that cryptographically weak (also known as &amp;quot;export&amp;quot;
                            class) ciphers are not supported.&lt;/li&gt;
                            &lt;ol&gt;
                            &lt;br /&gt;
                            &lt;/ol&gt;
                            &lt;/ol&gt;Some of the tools that can perform these tests are:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;ul&gt;
                            &lt;li&gt;&lt;a href="https://www.continuumsecurity.net/bdd-security/" rel="nofollow"&gt;BDD-Security&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="https://www.ssllabs.com/" rel="nofollow"&gt;SSLabs&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="https://github.com/mozilla/cipherscan" rel="nofollow"&gt;cipherscan&lt;/a&gt;&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.633">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="require-use-strong-passwords" name="Require the use of strong passwords" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords used either as a sole verification credentials, or as part of a multi-factor authentication, are a key aspect of application security, and strong password selection should be encouraged and enforced. The application should allow flexibility in user password selection, and enforce minimum criteria for password quality. This should include:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimum password length requirements, to mitigate brute-force and dictionary attacks.&lt;/li&gt; 
 &lt;li&gt;Encourage use of pass-phrases using multiple words, achieving longer passwords more resistant to attack.&lt;/li&gt; 
 &lt;li&gt;Enforce use of mixed case, numeric and/or special characters to increase complexity.&lt;/li&gt; 
 &lt;li&gt;Prevent or discourage use of dictionary words and common passwords through black-lists. For example, a set of commonly used passwords can be found on SecLists at &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&amp;nbsp;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password length:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password length considers the minimum and maximum length of characters comprising the password of your users. For ease of changing this length, its implementation can be configurable possibly using a properties file or xml configuration file.&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;b&gt;Minimum length. &lt;/b&gt;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Memory secrets shall be at least 8 characters long. &lt;/li&gt; 
  &lt;li&gt;Memory secrets generated automatically shall be at least 6 numeric characters.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Maximum length. &lt;/b&gt;People tend to forget their passwords easily. The longer the password, the more likely people are to enter them incorrectly for the system. However, long pass-phrases can be easily remembered, and should not be prevented through unnecessarily strict upper restrictions on length. &lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords with 64 characters or longer shall be permitted.&amp;nbsp;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;b&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password Complexity:&lt;/span&gt;&lt;/p&gt;&lt;/b&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Passwords with consecutive multiple spaces shall be coalesced and converter into only one space. After this modification, the password length shall be at least 12 characters long.&lt;/li&gt; 
 &lt;li&gt;Unicode characters shall be allowed in the password. A single Unicode code point is considered a character.&lt;/li&gt; 
 &lt;li&gt;Reject those passwords whose are commonly used and they have been already been leaked in a previous compromise. You may choose to block the top 1000 or 10000 most common passwords which meet the above length requirements and are found in compromised password lists. The following link contains the most commonly found passwords: &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Actual passwords must not be stored, to protect them against brute forcing if the database is compromised Screen reader support enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password Topologies:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ban commonly used password topologies.&lt;/li&gt; 
 &lt;li&gt;Force multiple users to use different password topologies.&lt;/li&gt; 
 &lt;li&gt;Require a minimum topology change between old and new passwords.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Additional Information:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure that every character the user types in is actually included in the password. We've seen systems that truncate the password at a length shorter than what the user provided (e.g., truncated at 15 characters when they entered 20).&lt;/li&gt; 
 &lt;li&gt;As application's require more complex password policies, they need to be very clear about what these policies are. The required policy needs to be explicitly stated on the password change page&lt;/li&gt; 
 &lt;li&gt;If the new password doesn't comply with the complexity policy, the error message should describe EVERY complexity rule that the new password does not comply with, not just the 1st rule it doesn't comply with.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Blacklist Top Leaked Passwords" url="https://github.com/danielmiessler/SecLists/tree/master/Passwords"/>
            <reference name="NIST 800-63-B: 5.1.2.2" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="Owasp CheatSheet: Authentication" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.10.1" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.1" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.11" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.14" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.14" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.4" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.4" supportedStandardRef="iotsf-class-1"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="A.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt; 
 &lt;li&gt;Verify the passwords comply with the company policy for strong passwords.&lt;/li&gt; 
 &lt;li&gt;If there is no policy, check the strength against industry standards as NIST or OWASP.&lt;/li&gt; 
&lt;/ol&gt;An example of strong password policy (&amp;nbsp; 
&lt;a href="https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls"&gt;from the OWASP Authentication Cheat Sheet&lt;/a&gt;) is: Password must meet at least 3 out of the following 4 complexity rules: 
&lt;ul&gt; 
 &lt;li&gt;at least 1 uppercase character (A-Z)&lt;/li&gt; 
 &lt;li&gt;at least 1 lowercase character (a-z)&lt;/li&gt; 
 &lt;li&gt;at least 1 digit (0-9)&lt;/li&gt; 
 &lt;li&gt;at least 1 special character (punctuation). Do not forget to treat space as special characters too&lt;/li&gt; 
 &lt;li&gt;at least 10 characters&lt;/li&gt; 
 &lt;li&gt;at most 128 characters&lt;/li&gt; 
&lt;/ul&gt;not more than 2 identical characters in a row (e.g., 111 not allowed).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.714">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-ADM-TRUST" name="Restrict access to administrative interfaces" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict access to administrative interfaces to trusted actors from trusted locations to reduce the application attack surface and likelihood of compromise.&lt;/p&gt; 
&lt;p&gt;Restrict administrative access to specific networks or hosts.&lt;/p&gt; 
&lt;div&gt;
  Use strong authentication for privileged access, for example a 2FA. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
          </references>
          <standards>
            <standard ref="2.4.10.13" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.13" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.8" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.8" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Try to access the administrative interface from an untrusted location. For example, if you are using a Wordpress &lt;span class="caps"&gt;CMS&lt;/span&gt; you should restrict access to /wp-admin which should not be available from the internet but only from trusted networks or IP addresses.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:58.248">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="limit-mqtt-messages-sizes" name="Set a limit for MQTT message sizes" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    MQTT defines a maximum message size of 256MB. In most MQTT deployment scenarios, messages are often smaller than a kilobyte. If you are familiar with your usage scenario and you know the maximum message size that can occur, it makes sense to decrease the maximum allowed message size to that limit. If no limit is set, it is possible for malicious MQTT clients to send large messages (which can result in excessive memory consumption and unneeded bandwidth usage). 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Limit the maximum message size on a global and per-client basis. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
                        &lt;ul&gt; 
                        &lt;li&gt;Use a client to send and receive data over MQTT.&lt;br&gt;&lt;/li&gt; 
                        &lt;li&gt;Increase the message size of the data in a development/testing environment to test the presence of maximum message size thresholds. &lt;br&gt;&lt;/li&gt; 
                        &lt;li&gt;Verify that when the MQTT broker receives a message that exceeds that threshold, it drops the packet.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.824">
              <output/>
            </source>
            <references>
              <reference name="MQTT Client and Mosquitto Broker Message Restrictions" url="https://www.ibm.com/docs/en/mapms/1_cloud?topic=messaging-restrictions-limitations"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.2" name="Software images are digitally signed by the organization's approved signing authority. (for remote software upgrade)" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where remote software upgrade can be supported by the device, the software images are digitally signed by the organization's approved signing authority.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Code signing is the process of using a certificate-based digital signature to sign executables and scripts in order to confirm the software author and ensure that the code has not been altered or corrupted since it was signed. A Certificate authority (CA) acts as a trusted third party, trusted both by the software author and by the device to verify the entity's identity.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that, for remote software upgrades, the software images are digitally signed by the organization's approved signing authority.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Protecting Software Integrity through code signing" url="https://ws680.nist.gov/publication/get_pdf.cfm?pub_id=925977"/>
          </references>
          <standards>
            <standard ref="2.4.5.2" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.5.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.5.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.235">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.4" name="Software images should be encrypted whilst being transferred to a device. (for remote software upgrade)" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If remote software upgrades are supported by a device, software images should be encrypted whilst being transferred to it.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Data transmitted over a public network can be intercepted by unauthorized parties. A secure file transfer adds security features to the transmission by encrypting the file to preserve its confidentiality and integrity. This prevents eavesdroppers on the networks between the systems from accessing the file contents and reading or modifying them, necessitating the use of encryption for software images that are used for remote software upgrades.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Utilize encrypted protocols wherever possible to protect all data in transit. Where protocol encryption is not possible, consider encrypting data before the transfer.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Security Guide for Interconnecting Information Technology Systems" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-47.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.5.4" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.237">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.21" name="Software uses certificate pinning or public/private key equivalent for TCP/IP or UDP/IP connections" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where the device software communicates with a product related webserver or application over &lt;span class="caps"&gt;TCP&lt;/span&gt;/IP or &lt;span class="caps"&gt;UDP&lt;/span&gt;/IP, the device software uses certificate pinning or public/private key equivalent, where appropriate.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Secure connections are a cornerstone for client/server communication. Users, developers, and applications expect end-to-end security for their secure channels, but some secure channels are not meeting this expectation. Specifically, channels built using well known protocols can be vulnerable to a number of attacks. For example, traditional certificate validation protects against many types of man-in-the-middle (&lt;span class="caps"&gt;MITM&lt;/span&gt;) attacks, but it doesn't prevent all of them.&lt;/p&gt; 
&lt;p&gt;Certificate pinning can still prevent the interception of a program's network traffic. Pinning is the process of associating a host with their expected X509 certificate or public key, which can be added to an application during development, or it can be added upon first encountering the certificate or public key.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that the device software uses certificate pinning or a public/private key equivalent for &lt;span class="caps"&gt;TCP&lt;/span&gt;/IP or &lt;span class="caps"&gt;UDP&lt;/span&gt;/IP connections.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Certificate and Public Key Pinning" url="https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning#What_Is_Pinning"/>
            <reference name="Pinning Cheat Sheet" url="https://www.owasp.org/index.php/Pinning_Cheat_Sheet"/>
          </references>
          <standards>
            <standard ref="2.4.5.21" supportedStandardRef="iotsf-class-2"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.236">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="store-passwords-unrecoverable-form" name="Store passwords in an unrecoverable form" issueId="" issueLink="" platform="" cost="0" risk="59" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-family: Arial; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To protect user passwords from accidental or deliberate exposure, the application should store cryptographic hashes of passwords instead of the actual passwords.&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Do not store actual passwords in the data storage for verification during login.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Instead, create a cryptographic hash of the password using a strong hash function that includes a work factor and a built in 'salt' value, like bcrypt or scrypt. This reduces the risk of brute-force attacks and rainbow tables, and allows flexibility to adapt the hashing function to balance security and performance. Establish some restrictions, depending on the used function:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The salt length must be at least 32 bits.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If bcrypt is used, the work factor must be as large as verification server performance allows, typically at least 13.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If we use the PBKDF2, the iteration count shall be as large as verification server performance allows, and it will typically allow at least 100,000 iterations.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Alternatively, use a strong hash function like SHA-384 together with a unique 'salt' value for every account.&amp;nbsp; Apply multiple iterations of the hash to create the additional computational work required to mitigate brute-force attacks. The secret 'salt' value must be stored separately from the hashed passwords.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="Owasp CheatSheetSeries: Password Storage" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Password_Storage_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.10.6" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.6" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.5" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.5" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.8" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.8" supportedStandardRef="iotsf-class-1"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.17" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.5" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.3.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Review the mechanism for matching credentials from the client-side to stored credentials for a user.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span&gt;Best practices dictate that the system should match a strong salted hash (SHA256 or greater and a unique hash for each account) to the one stored at the time the password was set.&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;For example, it is recommended to use a system salt of 32 bits or more, a keyed HMAC hash using &lt;span style="font-family: Arial; font-size: 11pt; font-weight: 700; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;SHA-2 or SHA-3,&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and the stretching algorithm PBKDF2 with at least 10,000 iterations.&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not a clear-text password&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not an encrypted password which may be recovered (decrypted) at the server- or client- side.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hashing algorithm in use is cryptographically secure (e.g. is not SHA1/MD5 or a flawed algorithm).&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hash is created from the password together with a unique salt value for the user. This prevents the use of rainbow tables, or the identification of password collisions among users.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Consider using an algorithm with a configurable work factor, set to a high value to inhibit attacks.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/span&gt; 
&lt;span&gt;&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.715">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.26" name="Support for partially downloading updates is provided" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Support for partially downloading updates is provided for devices whose network access is limited or sporadic.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Software updates perform numerous tasks and they are available for both the Operating System and individual software programs. Updates can apply a wide range of revisions to a system, adding new features, removing outdated features, updating drivers, fixing bugs, and most importantly, fixing security holes. For this reason, support for partially downloading updates may be provided for devices whose network access is limited or sporadic.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that software provides support for partially downloading updates.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="The importance of general software updates and patches" url="https://ie.norton.com/internetsecurity-how-to-the-importance-of-general-software-updates-and-patches.html"/>
            <reference name="Why Software Updates Are So Important" url="https://securingtomorrow.mcafee.com/consumer/consumer-threat-notices/software-updates-important/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.236">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.25" name="Support for partially installing updates is provided" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Support for partially installing updates is provided for devices whose on-time is insufficient for the complete installation of a whole update.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Software updates perform numerous tasks and they are available for both the Operating System and individual software programs. Updates can apply a wide range of revisions into a system, adding new features, removing outdated features, updating drivers, fixing bugs, and most importantly, fixing security holes. For this reason, support for partially installing updates may be provided for devices whose on-time is insufficient for the complete installation of a whole update.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that software provides support for partially installing updates.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="The importance of general software updates and patches" url="https://ie.norton.com/internetsecurity-how-to-the-importance-of-general-software-updates-and-patches.html"/>
            <reference name="Why Software Updates Are So Important" url="https://securingtomorrow.mcafee.com/consumer/consumer-threat-notices/software-updates-important/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.236">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.10.4" name="The initial password or factory reset password for web UIs is unique to each device in the product family" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where a web user interface password is used for login authentication, the initial password or factory reset password is unique to each device in the product family.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Where a web user interface needs a password to log in, a default password is usually provided that allows the device to be accessed during its initial setup, and then the user will be prompted to change it after he/she first logs on. An attacker with knowledge of the default password can log in, usually with root or administrative privileges and perform malicious actions. Therefore, all initial passwords and factory reset passwords issued for web user interfaces should be unique to each user.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Apply a process which ensures that the initial password or factory reset password for web user interfaces is unique to each device in the product family.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="US-CERT: Risks of Default Passwords on the Internet" url="https://www.us-cert.gov/ncas/alerts/TA13-175A"/>
          </references>
          <standards>
            <standard ref="2.4.10.4" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.4" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:58.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.15" name="The maximum permissible number of failed login attempts follows the recommendations of 3GPP TS33.117" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  The maximum permissible number of consecutive failed user account login attempts follows the recommendations of 3GPP TS33.117. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If web services allow users to enter passwords as many times as they want, an attacker may try to exploit this by using scripts that enter different combinations until the password cracks. To prevent this, the number of failed login attempts per user should be limited, for example, to 5 failed attempts, locking the user out as a result. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that the maximum permissible number of consecutive failed user account login attempts follows the recommendations of 3GPP TS33.117. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="4.2.3.4.5 - Policy regarding consecutive failed login attempts" url="https://www.etsi.org/deliver/etsi_ts/133100_133199/133117/15.00.00_60/ts_133117v150000p.pdf"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.13.15" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API4:2023-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Refer to the following test case in the 3GPP TS 33.117 document:&amp;nbsp;&amp;nbsp; 
&lt;div&gt;
  Test Name: TC_FAILED_LOGIN_ATTEMPTS&amp;nbsp; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.631">
              <output/>
            </source>
            <references>
              <reference name="4.2.3.4.5 - Policy regarding consecutive failed login attempts" url="https://www.etsi.org/deliver/etsi_ts/133100_133199/133117/15.00.00_60/ts_133117v150000p.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.8.16" name="The product allows an authorized factory reset of the device's authorization information" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The product allows an authorized factory reset of the device's authorization information.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; The devices are often authorized to an account, based on license agreements with service providers. The device should have the option to be deauthorized and reset in case the user no longer wants to use it or if the user wants to authorize the device to another account.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that the product allows an authorized factory reset of the device's authorization information.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.714">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.8.12" name="The product allows the factory issued or OEM login accounts to be disabled, erased or renamed" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The product allows the factory issued or &lt;span class="caps"&gt;OEM&lt;/span&gt; login accounts to be disabled, erased or renamed.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; The factory issued or &lt;span class="caps"&gt;OEM&lt;/span&gt; login accounts should be disabled, erased or renamed. This is to avoid the type of attacks where factory default logins and passwords are published on the web, which allows attackers to mount very simple scanning and dictionary attacks on devices.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that the product allows the factory issued or &lt;span class="caps"&gt;OEM&lt;/span&gt; login accounts to be disabled, erased or renamed when installed or commissioned.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.713">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.8" name="The product has protection against software reverting" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The product has protection against reverting the software to an earlier and potentially less secure version.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Software updates perform numerous tasks and they are available for both Operating System and individual software programs. Updates can apply a wide range of revisions into a system such as adding new features, removing outdated features, updating drivers, fixing bugs, and most importantly, fixing security holes. For this reason, the product should have protection to prevent software reverting to an earlier, out-of-date and probably insecure version.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that the product has mechanisms against software reverting.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="The importance of general software updates and patches" url="https://ie.norton.com/internetsecurity-how-to-the-importance-of-general-software-updates-and-patches.html"/>
            <reference name="Why Software Updates Are So Important" url="https://securingtomorrow.mcafee.com/consumer/consumer-threat-notices/software-updates-important/"/>
          </references>
          <standards>
            <standard ref="2.4.5.8" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.5.8" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.5.8" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.237">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.8.11" name="The product only allows controlled user account access" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The product only allows controlled user account access. Access using anonymous or guest user accounts is not supported without justification.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Product should not allow any unjustified anonymous or guest access in order to prevent potential theft or disclosure of sensitive information, therefore only controlled user account access should be permitted.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that the product only allows controlled user account access and access using anonymous or guest user accounts is not supported without justification.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Top 10 2013-A7-Missing Function Level Access Control" url="https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control"/>
          </references>
          <standards>
            <standard ref="2.4.8.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.11" supportedStandardRef="iotsf-class-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;The best way to find out if an application has failed to properly restrict function level access is to verify every application function:&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Does the UI show navigation to unauthorized functions?&lt;/li&gt; 
 &lt;li&gt;Are server side authentication or authorization checks missing?&lt;/li&gt; 
 &lt;li&gt;Are server side checks done that solely rely on information provided by the attacker?&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Using a proxy, browse your application with a privileged role. Then revisit restricted pages using a less privileged role. If the server responses are alike, you're probably vulnerable. Some testing proxies directly support this type of analysis.&lt;/p&gt; 
&lt;p&gt;You can also check the access control implementation in the code. Try following a single privileged request through the code and verifying the authorization pattern. Then search the codebase to find where that pattern is not being followed.&lt;/p&gt; 
&lt;p&gt; Automated tools are unlikely to find these problems.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.712">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.7" name="The product related web servers have repeated renegotiation of TLS connections disabled" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  The product related web servers have repeated renegotiation of TLS connections disabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Generally, a TLS renegotiation is a process that allows changing the details of a handshake after a connection is made with the server and it occurs when the session expires on either side and data continues to be sent. This means either that the session has simply expired due to timeout, or that a peer wants to change the cipher suite or wants to request a peer certificate and hasn't done so yet.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt;
  In the case of web services, the server encrypts traffic using TLS, but allows a client to renegotiate the connection after the initial handshake. If the server does not&amp;nbsp; limit the number of renegotiations for a single TLS connection, then a client may open several simultaneous connections and repeatedly renegotiate them, which may exhaust the server's resources and lead to a Denial of Service (DoS) condition. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that web servers have repeated renegotiation of TLS connections disabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Tips for Securing SSL Renegotiation" url="https://www.mcafee.com/blogs/enterprise/tips-securing-ssl-renegotiation/"/>
            <reference name="Transport Layer Security (TLS) Renegotiation Indication Extension" url="https://tools.ietf.org/html/rfc5746"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.13.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2023-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  The following example demonstrates how to check if client-initiated renegotiation is supported. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  openssl s_client -connect example.com:443 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Once the connection is established, the server will wait for us to type the next command. We can write the following two lines in order to initiate a renegotiation by specifying R in the second line, followed by enter or return. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  openssl s_client -connect host:port 
&lt;/div&gt; 
&lt;div&gt;
  HEAD / HTTP/1.0 
&lt;/div&gt; 
&lt;div&gt;
  R 
&lt;/div&gt; 
&lt;div&gt;
  &amp;lt;Enter or Return key&amp;gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A system that does not support client-initiated renegotiation will return an error and end the connection or the connection will time out. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  RENEGOTIATING 
&lt;/div&gt; 
&lt;div&gt;
  write:errno=104 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A system that supports client-initiated renegotiation will keep the connection active and respond to further commands.&amp;nbsp; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.632">
              <output/>
            </source>
            <references>
              <reference name="Manually Testing SSL/TLS Weaknesses" url="https://www.contextis.com/us/blog/manually-testing-ssl-tls-weaknesses"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="irrevocable-secure-boot" name="The product's processor system has an irrevocable Secure Boot process" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    The product's processor system has an irrevocable Secure Boot process, to provide assurance that it's running code that hasn't been compromised. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Rationale:&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Secure boot is a UEFI (Unified Extensible Firmware Interface) process where the Operating System boot images and code are authenticated against the hardware before they are allowed to be used in the boot process. This way, it ensures that the boot and Operating System software is the intended manufacturer version and hasn't been tampered by malware or other malicious third parties. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;div&gt;
                    In essence, the manufacturer stores their private key very securely and never reveals it to anyone. When a device is manufactured, the public key associated with the private key is placed in secure storage on the device. The bootloader code is developed using a secure development process and then a cryptographic hash of it is digitally signed with the manufacturer's private key. Whenever bootloader firmware is to be installed on the device, the hash signature is checked against the embedded public key on the device to confirm that it is a genuine hash value from that manufacturer. The firmware code is then hashed again and compared with the signed hash. If this matches (which indicates the firmware code hasn't been altered), only then will the new firmware get installed. 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Thereafter, whenever the device boots, the installed bootloader is again verified before being allowed to run. Cryptographic functions for these purposes and storage of keys can be provided by dedicated chips or modules such a Secure Access Modules (SAM) or Trusted Platform Modules (TPM). 
                    &lt;/div&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation:&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    The product's processor system has to be set up beforehand in such a way that it only authenticates code generated using trusted security credentials. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Device Secure Boot" url="https://www.iotsecurityfoundation.org/best-practice-guide-articles/device-secure-boot/"/>
            <reference name="Secure boot" url="https://docs.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-secure-boot"/>
            <reference name="The whys and hows of secure boot" url="https://www.embedded.com/the-whys-and-hows-of-secure-boot/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.823">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.8.6" name="The product/system enforces passwords to be compliant with 3GPP TS33.117 or similar recommendations" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Password entry follows industry standard practice such recommendations of the 3GPP TS33.117 Password policy. [ref. 1] or &lt;span class="caps"&gt;NIST&lt;/span&gt; SP800-63b [ref. 2] or &lt;span class="caps"&gt;NCSC&lt;/span&gt; [Ref 3] on password length, characters from the groupings and special characters.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; A key concern when using passwords for authentication is password strength. A "strong" password policy makes it difficult or even improbable for one to guess the password through either manual or automated means. The main characteristics that define a strong password are length, complexity and topology (the pattern that a password is written).&lt;/p&gt; 
&lt;p&gt;Passwords should not be vulnerable to dictionary attack, which is a type of brute force attack technique for defeating a cipher or authentication mechanism by trying to determine its decryption key or passphrase by trying hundreds or sometimes millions of likely possibilities, such as words in a dictionary. &lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that the product/system enforces passwords to be compliant with 3GPP TS33.117 or similar (&lt;span class="caps"&gt;NIST&lt;/span&gt; SP800-63b [ref. 2] or &lt;span class="caps"&gt;NCSC&lt;/span&gt; [Ref 3]) recommendations to include: At least eight characters in length, characters from the groupings: alpha, numeric and special characters and should not be vulnerable to dictionary attack.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Catalogue of general security assurance requirements" url="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=2928"/>
            <reference name="NIST 800-63-B: 5.1.2.2" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
            <reference name="Password strategies that can help your organisation remain secure" url="https://www.ncsc.gov.uk/guidance/password-collection"/>
          </references>
          <standards>
            <standard ref="2.4.8.6" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.6" supportedStandardRef="iotsf-class-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Please see reference [3] for &lt;span class="caps"&gt;OWASP&lt;/span&gt; testing methodology link.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.714">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.8.5" name="The product will not allow new passwords containing the user account name with which the user account is associated" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The product will not allow new passwords containing the user account name with which the user account is associated.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Weak passwords are a serious threat to computer security, and specifically the guessable ones should be forbidden through organizational policy and suitable technical measures. Using the user account name as password or part of a password is completely insecure and makes a brute-force attack against the login interface much easier.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that the product does not allow new passwords containing the user account name with which the user account is associated.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Authentication Cheat Sheet" url="https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls"/>
            <reference name="Testing for Default or Guessable User Account (OWASP-AT-003)" url="https://www.owasp.org/index.php/Testing_for_Default_or_Guessable_User_Account_(OWASP-AT-003)"/>
          </references>
          <standards>
            <standard ref="2.4.8.5" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.5" supportedStandardRef="iotsf-class-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Please see reference [2] for &lt;span class="caps"&gt;OWASP&lt;/span&gt; testing methodology link.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.714">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.8" name="The related servers have unused IP ports disabled" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  The related servers have unused IP ports disabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  One of the most important principles in information security is to reduce the attack surface. Open ports are not always a security risk. For example, a web server has to have ports 80 or 443 open, or otherwise users will not be able to connect to use the web server. However, taking into account that every open port increases the attack surface, any related servers' port(s) that are not used should be disabled. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Disable the servers' unused IP ports.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST - CM-7 LEAST FUNCTIONALITY" url="https://nvd.nist.gov/800-53/Rev4/control/CM-7"/>
          </references>
          <standards>
            <standard ref="2.4.13.8" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.8" supportedStandardRef="iotsf-class-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  For example, the following command will look up, with a TCP connect scan, all open ports on IP 192.168.1.100 and will try to determine what services are bound to them: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  nmap -PN -sT -sV -p0-65535 192.168.1.100 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.633">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Enumerate Applications on Webserver" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.24" name="The software has been designed to fail safely" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The software has been designed to meet the safety requirements identified in the risk assessment, i.e. in the case of unexpected invalid inputs, or erroneous software operations, the product does not become dangerous or compromise the security of other connected systems.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Software is expected to fail, but when it does it has to be in a safe way and security controls and settings must remain in effect. The confidentiality and integrity of a system should remain intact even if availability has been lost. Attackers must not be permitted to gain access rights to privileged objects during a failure when those objects are normally inaccessible. Upon failing, a system that reveals sensitive information about the failure to potential attackers could supply additional knowledge to launch an attack.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that software has been designed to fail safely. This typically involves several things:&lt;br /&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Secure defaults (default is to deny access).&lt;/li&gt; 
 &lt;li&gt;Upon failure, undo changes and restore a secure state.&lt;/li&gt; 
 &lt;li&gt;Always check return values for failure.&lt;/li&gt; 
 &lt;li&gt;In conditional code/filters make sure that there is a default case that does the right thing.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="US-CERT: Failing Securely" url="https://www.us-cert.gov/bsi/articles/knowledge/principles/failing-securely"/>
          </references>
          <standards>
            <standard ref="2.4.5.24" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.236">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="data-integrity-checks" name="Use data integrity checks" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    Use data integrity checks with stamps as a good addition to message encryption. Even if the attacker can decrypt the message (and encrypt it after modification), the integrity check still fails if the message was altered. Especially if you use MQTT without TLS, data integrity checks add an additional layer of security. 
                    &lt;br&gt; 
                    &lt;br&gt;MQTT PUBLISH packets can contain a digital signature/MAC/checksum that verifies the contents of the packet. This calculated stamp is typically added to the payload (for example, at the beginning of the payload). The receiver of the packet can verify the integrity of the data by recalculating/validating the stamp. This validation assures that the message was not tampered with by a malicious third party. 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use data integrity checks with stamps. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Message Data Integrity - MQTT Security Fundamentals" url="https://www.hivemq.com/blog/mqtt-security-fundamentals-mqtt-message-data-integrity/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt; 
                        &lt;li&gt;Review the project documentation and use exploratory testing looking for parts of the application/system (components i.e. For example, input fields, databases or logs) that move, store or handle data/information.&lt;/li&gt; 
                        &lt;li&gt;For each identified component determine what type of data/information is logically acceptable and what types the application/system should guard against. Also, consider who according to the business logic is allowed to insert, update and delete data/information and in each component.&lt;/li&gt; 
                        &lt;li&gt;Attempt to insert, update or edit delete the data/information values with invalid data/information into each component (i.e. input, database, or log) by users that should not be allowed per the business logic workflow.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;br&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.821">
              <output/>
            </source>
            <references>
              <reference name="Test Integrity Checks" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="iot-hardware-protect-creds" name="Use hardware security solutions to protect sensitive information on IoT devices" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>IoT devices need an efficient secure processor to store its identity and handle authentication, and to store public and private encryption keys, and to store keys and run hashing algorithms for verifying software signatures to be able to verify software signatures. 
                    &lt;div&gt; 
                    &lt;div&gt;
                    Likely candidates for hardware security solutions to protect sensitive data in IoT devices include PUF (Physically Unclonable Functions), TPM (Trusted Platform Module), HSM (Hardware Security Module) and TrustZone.&amp;nbsp; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt; PUF uses random patterns in the silicon to differentiate chips from each other and creates a unique random number. This generated random number is used to seed a strong device ID and cryptographic keys to create a hardware root of trust.&lt;/li&gt; 
                    &lt;li&gt;Security co-processors are physically separate chips offering true isolation of private keys. A TPM offers isolation and facilities for the secure generation of cryptographic keys, and limitation of their use, and true random number generation. It also includes capabilities such as remote attestation and sealed storage. However, these powerful security capabilities come at price, usually moving deployment to higher end IoT devices.&amp;nbsp;&lt;/li&gt; 
                    &lt;li&gt;A Hardware Security Module (HSM) is another physically separate chip and likely at a lower cost compared to a TPM. Like the TPM, it safeguards and manages digital keys for strong authentication and provides crypto processing. An HSM traditionally comes in the form of a large plug-in card or a separate external device attaching to the protected device, making it somewhat less suited to an IoT device. Depending upon the perceived and likely threat vectors, an HSM may provide an effective solution.&lt;/li&gt; 
                    &lt;li&gt;Trust Zone is another single chip solution segregating execution space into secure and insecure worlds. Insecure apps are not allowed to access security-critical assets. Those same security critical assets are isolated from tampering. Like a TPM, cost moves it to higher-end devices.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use&amp;nbsp;hardware security solutions (like PUF, TPM, HSM or Trust Zone) to protect sensitive data in IoT devices. 
                    &lt;/div&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Device security" url="https://cloud.google.com/iot/docs/concepts/device-security"/>
            <reference name="Protecting the IoT with Secure Hardware" url="https://www.digikey.com/en/articles/techzone/2017/mar/protecting-the-iot-with-secure-hardware"/>
            <reference name="Securing Edge Nodes" url="https://realtimelogic.com/downloads/docs/IoT-Security-Solutions.pdf"/>
            <reference name="What is an IoT Hardware Secure Element?" url="https://cerberus-laboratories.com/blog/iot_hsms/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.823">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="mqtt-payload-encryption" name="Use MQTT payload encryption" issueId="" issueLink="" platform="" cost="0" risk="0" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    TLS provides security on the network layer while MQTT payload encryption provides security on the application layer, so they can be used in conjunction without conflict. MQTT payload encryption only solves the problem of protecting application messages from eavesdroppers or untrusted MQTT clients (if no authentication mechanism is in place). An attacker can still replay the message or modify parts of the message, such as the topic, if there is no secure communication channel over TLS. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    MQTT Payload encryption is the encryption of application-specific data on the application level (typically, the MQTT PUBLISH packet payload or the CONNECT LWT payload). This approach allows end-to-end encryption of application data even on untrusted environments. While the message metadata such as the MQTT Topic stays intact, the payload of the message gets encrypted. This type of encryption is not defined in the MQTT specification and is completely application specific. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Only the payload data (private sensor information) of the message needs to be encrypted. The message fields of MQTT PUBLISH messages are not changed. The payload information is binary, so no special encoding mechanism is required while it transmits the message. Also, no specific changes are required on the broker side because the MQTT message format remains the same. Only the application that is interpreting the message payload needs to decrypt the message to understand the content. 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Advantages of Payload Encryption: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;Complete end-to-end message security.&lt;/li&gt; 
                    &lt;li&gt;Adds another layer of security for applications that are transmitting highly sensitive data.&lt;/li&gt; 
                    &lt;li&gt;Appropriate in situations where TLS cannot be used.&lt;br&gt;&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Disadvantages of Payload Encryption: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;Might not be possible to implement in devices with very low resources.&lt;/li&gt; 
                    &lt;li&gt;Messages can still be modified by attacker if a secured communication channel is not used.&lt;br&gt; &lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use payload encryption if you can't use TLS but still don't want to send your application data in plain text. Payload encryption provides an additional layer of security since all your application data is secured. 
                    &lt;br&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Securing IoT data over the network" url="https://developer.ibm.com/technologies/iot/articles/iot-trs-secure-iot-solutions2/"/>
            <reference name="Securing MQTT Systems - MQTT Security Fundamentals" url="https://www.hivemq.com/blog/mqtt-security-fundamentals-payload-encryption/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
                        &lt;ul&gt; 
                        &lt;li&gt;Use a standard packet sniffing tool such as Wireshark to inspect MQTT traffic.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;/div&gt; 
                        &lt;div&gt; 
                        &lt;ul&gt; 
                        &lt;li&gt;Check that MQTT PUBLISH messages are encrypted (not visible in clear text).&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.824">
              <output/>
            </source>
            <references>
              <reference name="Examination of vulnerabilities in Message Queuing Telemetry Transport (MQTT) in IoT Systems and implementation of countermeasures" url="https://www.researchgate.net/publication/338335323_Examination_of_vulnerabilities_in_Message_Queuing_Telemetry_Transport_MQTT_in_IoT_Systems_and_implementation_of_countermeasures"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:58.251">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.4" name="Web servers' TLS certificate(s) are signed by trusted CAs, are within their validity period and processes are in place for their renewal" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  All the product related web servers' TLS certificate(s) are signed by trusted Certificate Authorities, are within their validity period and processes are in place for their renewal. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The server validation component of TLS provides authentication between the server and the client via digital certificates. These certificates commonly include: 
&lt;/div&gt; 
&lt;div&gt;
  - Issuer: The entity that verified the information and issued the certificate (Certificate Authority). 
&lt;/div&gt; 
&lt;div&gt;
  - Valid to: The expiration date after which the certificate is no longer valid. 
&lt;/div&gt; 
&lt;div&gt;
  - Signature algorithm: The algorithm used to create the signature (keys) and prove its integrity. 
&lt;/div&gt; 
&lt;div&gt;
  As mentioned above, the Certificate Authority (CA) is an entity that issues digital certificates and acts as a trusted third party, trusted both by the client and by the server, and which verifies the server's identity. Therefore, all web server certificates must be signed by a trusted Certificate Authority. 
&lt;/div&gt; 
&lt;div&gt;
  Expired or untrusted certificates that users usually ignore are an issue, as they are taken advantage of by attackers to expose users to DNS spoofing or Man-in-the-middle attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that the web servers' TLS certificates are signed by trusted certificate authorities, their validity period has not elapsed, and that processes are in place for their renewal. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Transport Layer Protection Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="2.4.13.4" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.4" supportedStandardRef="iotsf-class-1"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Using OpenSSL, we can gather the server and intermediate certificates sent by a server using the following command: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  openssl s_client -showcerts -connect example.com:443 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.632">
              <output/>
            </source>
            <references>
              <reference name="TLS/SSL Certificate Validity – Client and Server" url="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.30" name="When a device cannot verify the authenticity of updates itself, it should be possible to revert to the last known good configuration which was stored on the device before the update was attempted" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;When a device cannot verify the authenticity of updates itself, it should be possible to revert to the last known good configuration which was stored on the device before the update was attempted.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; To implement certain control capabilities into a system, you'll want to remotely reset the device so as to achieve a known-good state and recover from errors and implement new configuration changes. You may also want to be able to reset the device to a factory default configuration, which is useful when you want to decommission a device or as a more invasive way to recover from unknown error conditions.&lt;/p&gt; 
&lt;p&gt;Lastly, issuing a command to update or reload firmware is very important in order maintain security of the remote device, implement feature enhancements, and patch bugs.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; When a device cannot verify authenticity of updates itself, it should be possible to revert to the last known good configuration which was stored on the device before the update was attempted.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Code of Practice for Consumer IoT Security" url="https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/971440/Code_of_Practice_for_Consumer_IoT_Security_October_2018_V2.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.5.30" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.5.30" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.5.30" supportedStandardRef="iotsf-class-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.236">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.5.29" name="Where a device cannot verify the authenticity of updates itself, only local updates are permitted" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where a device cannot verify the authenticity of updates itself (e.g. due to a lack of cryptographic capabilities), only local update by a physically present user is permitted.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Code signing is the process of using a certificate-based digital signature to sign executables and scripts in order to confirm the software author and ensure that the code has not been altered or corrupted since it was signed. This process is used for remote updates too, where devices can verify the signature to confirm that the package is authentic and complete. For this reason, if a device cannot verify the authenticity of updates itself, only local updates should be permitted.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; If the device cannot verify the authenticity of updates, permit local updates only.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Top 10 2014-I9 Insecure Software/Firmware" url="https://www.owasp.org/index.php/Top_10_2014-I9_Insecure_Software/Firmware"/>
          </references>
          <standards>
            <standard ref="2.4.5.29" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.5.29" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.5.29" supportedStandardRef="iotsf-class-0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.236">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.20" name="Where a Product or Service includes a critical functionality, the service's infrastructure shall incorporate protection against DDoS attacks" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Where a Product or Service includes any safety-critical or life-impacting functionality, the service's infrastructure shall incorporate protection against Distributed Denial of Service (DDoS) attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The Denial of Service (DoS) attack focuses on making a resource (site, application, server, etc.) unavailable for the purpose it was designed. There are many ways to make a service unavailable for legitimate users by manipulating network packets, programming, logical, or resources handling vulnerabilities, among others. If a service receives a very large number of requests, it may stop being available to legitimate users. In the same way, a service may stop if a programming vulnerability is exploited, or the way the service handles the resources it uses. 
&lt;/div&gt; 
&lt;div&gt;
  Distributed Denial of Service (DDoS) attacks achieve effectiveness by utilizing multiple compromised computer systems as sources of attack traffic. The exploited machines can include computers and other networked resources such as IoT devices.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that the services' infrastructure incorporates protection against Distributed Denial of Service (DDoS) attacks, such as dropping of traffic or sink-holing (please see NIST 800-53 SC-5, reference URL [1]). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST - SC-5 DENIAL OF SERVICE PROTECTION" url="https://nvd.nist.gov/800-53/Rev4/control/SC-5"/>
            <reference name="OWASP Denial Of Service Attacks" url="https://owasp.org/www-community/attacks/Denial_of_Service"/>
          </references>
          <standards>
            <standard ref="2.4.13.20" supportedStandardRef="iotsf-class-2"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.632">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Testing for Denial of Service" url="https://wiki.owasp.org/index.php/Testing_for_Denial_of_Service"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.21" name="Where a Product or Service includes critical functionality, the services' infrastructure shall incorporate redundancy to ensure service continuity and availability" issueId="" issueLink="" platform="" cost="0" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Where a Product or Service includes any safety-critical or life-impacting functionality, the services' infrastructure must incorporate redundancy to ensure service continuity and availability. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Since Web Services are susceptible to Denial of Service (DoS) attacks, it is important to replicate data and applications in a robust manner. Replication and redundancy can ensure access to critical data in the event of a failure. It will also enable the system to react in a coordinated way to deal with disruptions. Therefore, Web Services must be designed to include redundancy of critical functions, ensuring diversity among those critical functions implemented.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that, where a Product or Service includes a safety-critical or life-impacting functionality, the services' infrastructure incorporates redundancy to ensure service continuity and availability. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST - Guide to Secure Web Services" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-95.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.13.21" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.21" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.632">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.13.9" name="Where a TLS client certificate is requested, the server(s) only establishes a connection if the client certificate and its chain of trust are valid" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Where a product related to a webserver encrypts communications using TLS and requests a client certificate, the server(s) only establishes a connection if the client certificate and its chain of trust are valid. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Rationale: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  In a traditional TLS handshake, the client authenticates the server, and the server doesn't know too much about the client. TLS Client Authentication is useful in cases where a server is keeping track of its numerous clients, as in IoT with millions of installs exchanging secure information. For example, an IoT company can issue a unique client certificate per device, and then limit the connections to their IoT infrastructure to only their devices by blocking connections where the client doesn't present a certificate signed by the company's Certificate Authority (CA). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt; Remediation: &lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that, where a TLS client certificate is requested, the server(s) only establishes a connection if the client certificate and its chain of trust are valid. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Client Authentication During SSL Handshake" url="https://docs.oracle.com/cd/E19424-01/820-4811/aakhe/index.html"/>
            <reference name="OWASP - TLS Client Authentication" url="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="2.4.13.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.9" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that only users whose certificates are signed by the trusted certificate authority can successfully authenticate with the server using client certificates.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:08.633">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.8.3" name="Where a UI password is used for login authentication, the factory issued or reset password is unique to each device in the product family" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where a user interface password is used for login authentication, the factory issued or reset password is unique to each device in the product family.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Where a device needs a password to log in, a default password is usually provided that allows the device to be accessed during its initial setup, and then the user will be prompted to change it after he/she first logs on. An attacker with knowledge of the default password can log in, usually with root or administrative privileges and perform malicious actions. Therefore, all initial passwords and factory reset passwords issued should be unique to each user.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Apply a process which ensures that the initial user interface password or factory reset password is unique to each device in the product family. If a password-less authentication is used the same principles of uniqueness apply.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="US-CERT: Risks of Default Passwords on the Internet" url="https://www.us-cert.gov/ncas/alerts/TA13-175A"/>
          </references>
          <standards>
            <standard ref="2.4.8.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.3" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.714">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.8.15" name="Where passwords are entered on a UI, the actual pass phrase is obscured by default" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where passwords are entered on a user interface, the actual pass phrase is obscured by default.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Password masking is the practice of obscuring the password characters when entered on a user interface, more often behind bullets (.), asterisks (*) or similar camouflaging characters. The idea behind password masking is primarily the protection against "shoulder surfing", in other words to prevent nearby observers reading the password "over the user's shoulder" and thus stolen, which is crucial for mobile devices. A second reason is to obscure the password in cases of shared screens, projectors, etc.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that the actual pass phrase is obscured by default where entered on a user interface.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="The Pros and Cons of Password Masking" url="https://www.schneier.com/blog/archives/2009/07/the_pros_and_co.html"/>
          </references>
          <standards>
            <standard ref="2.4.8.15" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.15" supportedStandardRef="iotsf-class-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.713">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.7.13" name="Where the MQTT protocol is used, it is protected by a TLS connection with no known cipher vulnerabilities" issueId="" issueLink="" platform="" cost="1" risk="0" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where the &lt;span class="caps"&gt;MQTT&lt;/span&gt; protocol is used, it is protected by a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt; 
                    &lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br&gt;&lt;/font&gt;&lt;/b&gt; &lt;span class="caps"&gt;MQTT&lt;/span&gt; (Message Queue Telemetry Transport), is a very lightweight and widely used messaging and information exchange protocol for IoT devices throughout the world. The &lt;span class="caps"&gt;MQTT&lt;/span&gt; communication can be encrypted using &lt;span class="caps"&gt;TLS&lt;/span&gt; / &lt;span class="caps"&gt;SSL&lt;/span&gt; protocols, ensuring a secure and safe communication.&lt;/p&gt; 
                    &lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br&gt;&lt;/font&gt;&lt;/b&gt; Ensure that where the &lt;span class="caps"&gt;MQTT&lt;/span&gt; protocol is used, it is protected by a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Version 3.1.1 Plus Errata 01" url="https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html"/>
            <reference name="MQTT and CoAP, IoT Protocols" url="https://www.eclipse.org/community/eclipse_newsletter/2014/february/article2.php"/>
          </references>
          <standards>
            <standard ref="2.4.7.13" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.13" supportedStandardRef="iotsf-class-2"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-17T09:11:59.817">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.8.2" name="Where the product has a secure source of time there is a method of validating its integrity" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where the product has a secure source of time there is a method of validating its integrity.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Network Time Protocol (&lt;span class="caps"&gt;NTP&lt;/span&gt;) is a networking protocol for clock synchronization between computer systems over packet-switched, variable-latency data networks. In operation since before 1985, &lt;span class="caps"&gt;NTP&lt;/span&gt; is one of the oldest Internet protocols in current use. &lt;span class="caps"&gt;NTP&lt;/span&gt;sec is a fork implementation of &lt;span class="caps"&gt;NTP&lt;/span&gt; that has been systematically security-hardened.&lt;/p&gt; 
&lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br /&gt;&lt;/font&gt;&lt;/b&gt; Ensure that where the product has a secure source of time there is a method of validating its integrity such as &lt;span class="caps"&gt;NTP&lt;/span&gt;sec (please see reference &lt;span class="caps"&gt;URL&lt;/span&gt; [1]).&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NTPsec project - a secure, hardened, and improved implementation of Network Time Protocol derived from NTP" url="https://www.ntpsec.org/"/>
          </references>
          <standards>
            <standard ref="2.4.8.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.2" supportedStandardRef="iotsf-class-0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.714">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.8.17" name="Where the product  has the ability to remotely recover from an attack, it should rely on a known good state, to enable safe recovery and updating of the device" issueId="" issueLink="" platform="" cost="1" risk="62" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;The ability to remotely recover from these situations should rely on a known good state, such as locally storing a known good version to enable safe recovery and updating of the device. This will avoid denial of service and costly recalls or maintenance visits, whilst managing the risk of potential takeover of the device by an attacker subverting update or other network communications mechanisms.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Ensuring Software Integrity in IoT Devices" url="https://www.omicsonline.org/open-access/ensuring-software-integrity-in-iot-devices-2165-7866-1000217.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.8.17" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.17" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.17" supportedStandardRef="iotsf-class-0"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:09.714">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="OWASP A6:2017" name="Attackers attempt to exploit unpatched flaws to gain unauthorized access or knowledge of the system" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;Attackers will often attempt to exploit unpatched flaws or access default accounts, unused pages, unprotected files and directories, etc., to gain unauthorized access or knowledge of the system.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.2" mitigation="33"/>
                    <countermeasure ref="IOT2.4.13.3" mitigation="33"/>
                    <countermeasure ref="IOT2.4.13.7" mitigation="34"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.13.2" mitigation="33"/>
                <countermeasure ref="IOT2.4.13.3" mitigation="33"/>
                <countermeasure ref="IOT2.4.13.7" mitigation="34"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="IOT-INSUF-SEC" name="Attackers gain access to the system exploiting insufficient or misconfigured security features" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>The product lacks key security features such as protection against tampering or unprotected storages, or it has other misconfigurations and omissions during production.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-254-PROD">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.21" mitigation="100"/>
                    <countermeasure ref="IOT2.4.8.15" mitigation="33"/>
                    <countermeasure ref="IOT2.4.8.17" mitigation="34"/>
                    <countermeasure ref="IOT2.4.8.2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.13.21" mitigation="100"/>
                <countermeasure ref="IOT2.4.8.15" mitigation="33"/>
                <countermeasure ref="IOT2.4.8.17" mitigation="34"/>
                <countermeasure ref="IOT2.4.8.2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="IOT-WIDE-ATTACK-SURFACE" name="Attackers try to take advantage of a wide attack surface" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;Every point of network interaction or other service is a potential part of the attack surface having exploitable vulnerabilities.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-215">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.14.1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.14.1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-607" name="Attackers bring the service down by exhausting it (D)DoS" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker can bring a service down by exhausting either the network or the service itself.
    &lt;br&gt;
    &lt;br&gt;See references for more information.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-400">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.20" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.13.20" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="IOT-INSUF-SEC-SOC-ENG" name="Attackers gain access to the system using Social Engineering attacks" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>The product lacks key security features such as protection against tampering or unprotected storages, or it has other misconfigurations and omissions during production.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-254-PROD">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.10.7" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.10.7" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="CWE-256" name="Users' passwords are compromised if the storage medium is compromised" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>A compromise of the storage system medium itself (device, server or database) could
                                allow attackers full access to the data
                                stored, including authentication credentials such as passwords.
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-257">
                  <countermeasures>
                    <countermeasure ref="store-passwords-unrecoverable-form" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="store-passwords-unrecoverable-form" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-112-USERNAME" name="User accounts compromised through username guessing" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>Attackers could perform a brute force attack against the login function by choosing a
                                simple password that users are likely to use for the site, and that meets the site's
                                password policy.
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Then they could use an automated script to iterate through a list of
                                possible usernames. &amp;nbsp;These could be obtained from a dictionary, or generated
                                through pure brute force means. &amp;nbsp;
                                &lt;/div&gt;
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                This type of attack cannot be defended against using an account lockout policy because
                                each username is only attempted once.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-521">
                  <countermeasures>
                    <countermeasure ref="require-use-strong-passwords" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="require-use-strong-passwords" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1499.003" url="https://attack.mitre.org/techniques/T1499/003"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-770">
                  <countermeasures>
                    <countermeasure ref="network-rate-limit" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="network-rate-limit" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-112" name="Attackers gain unauthorized access through Brute Force attacks" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since eliminating patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-255">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.8.16" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-307">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.15" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-521">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.8.3" mitigation="20"/>
                    <countermeasure ref="IOT2.4.8.5" mitigation="20"/>
                    <countermeasure ref="IOT2.4.8.6" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="NO-PASSWORD-CHANGE">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.8.12" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.13.15" mitigation="100"/>
                <countermeasure ref="IOT2.4.8.12" mitigation="20"/>
                <countermeasure ref="IOT2.4.8.16" mitigation="20"/>
                <countermeasure ref="IOT2.4.8.3" mitigation="20"/>
                <countermeasure ref="IOT2.4.8.5" mitigation="20"/>
                <countermeasure ref="IOT2.4.8.6" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.18" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-732">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.17" mitigation="50"/>
                    <countermeasure ref="IOT2.4.8.11" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.13.17" mitigation="50"/>
                <countermeasure ref="IOT2.4.13.18" mitigation="50"/>
                <countermeasure ref="IOT2.4.8.11" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-151" name="An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an attacker may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the identity of the message, but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1036.001" url="https://attack.mitre.org/techniques/T1036/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.002" url="https://attack.mitre.org/techniques/T1036/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.003" url="https://attack.mitre.org/techniques/T1036/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.004" url="https://attack.mitre.org/techniques/T1036/004"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.005" url="https://attack.mitre.org/techniques/T1036/005"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.006" url="https://attack.mitre.org/techniques/T1036/006"/>
                <reference name="Mitre ATT&amp;CK Technique T1036.007" url="https://attack.mitre.org/techniques/T1036/007"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-592">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.9" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.13.9" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-20" name="Attackers perform an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.
&lt;br /&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-326">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.16" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.13.16" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="mqtt-client-fake-app" name="An attacker can simulate a fake application to send commands to the MQTT client" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker can simulate a fake application to send commands to the MQTT client to get sensitive data or to change their configuration.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="mqtt-client-authz">
                  <countermeasures>
                    <countermeasure ref="enforce-app-id-validation-mqtt-client" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="enforce-app-id-validation-mqtt-client" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-112-WEB-UI" name="Attackers gain unauthorized access through Brute Force attacks against the Web User Interface" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-521">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.10.4" mitigation="50"/>
                    <countermeasure ref="require-use-strong-passwords" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.10.4" mitigation="50"/>
                <countermeasure ref="require-use-strong-passwords" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-232" name="Anonymous users could gain access to sensitive data" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>Attackers could access data for which they are not authorized by connecting directly
                                to the resource, without authenticating. E.g.: GET /userdetails?ID=145 to gain direct
                                access to that user's personal information.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references>
                <reference name="OWASP Development Guide: Authorization" url="https://www.owasp.org/index.php/Guide_to_Authorization"/>
                <reference name="OWASP Top Ten" url="https://www.owasp.org/index.php/Top_10_2007-Failure_to_Restrict_URL_Access"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="CWE-285" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-285" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="cred-extract-mqtt-client" name="Attackers can extract authentication credentials from the client and use them to log in to the MQTT broker" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;div&gt;
                            An attacker who manages to extract the X.509 certificate/private key pair from a device can use the certificate/key for either eavesdropping on the communication or for exploiting an IoT solution. A unique certificate per device makes it possible to disable the exploited certificate/key by using a revocation list; however, this requires that the IoT solution can detect the exploitation in the first place. A solution that uses the same certificate/key in all devices has lost all integrity if someone manages to extract it from any single device. 
                            &lt;/div&gt; 
                            &lt;div&gt; 
                            &lt;br&gt; 
                            &lt;/div&gt; 
                            &lt;div&gt;
                            The complexity associated with extracting the certificate/key from a device greatly depends on the type of device and the components used in that device. A device based on a high-level operating system where the certificate/key is stored in a file system on an external flash memory module makes it much easier for a hacker to extract than a certificate/key for a device using internal microcontroller flash memory and where the JTAG fuse has been blown. 
                            &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="RSA Keys Found in IoT Medical Devices, Implants Prone to Attack" url="https://healthitsecurity.com/news/rsa-keys-found-in-iot-medical-devices-implants-prone-to-attack"/>
              </references>
              <weaknesses>
                <weakness ref="auth-cred-client-unprotected">
                  <countermeasures>
                    <countermeasure ref="iot-hardware-protect-creds" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="iot-hardware-protect-creds" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="IOT-WIDE-ATTACK-SURFACE-OPEN-PORTS" name="Attackers try to retrieve banner information through the open ports to discover potential vulnerabilities" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;Every point of network interaction or another service is a potential part of the attack surface having exploitable vulnerabilities.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="UNRESTRICTED-NETWORK">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.8" mitigation="100"/>
                    <countermeasure ref="IOT2.4.5.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.13.8" mitigation="100"/>
                <countermeasure ref="IOT2.4.5.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-157" name="An attacker monitors information transmitted between logical or physical nodes of a network" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.7.13" mitigation="50"/>
                    <countermeasure ref="TLS-STRONG-CIPHERS" mitigation="50"/>
                    <countermeasure ref="TLS-STRONG-PROTOCOLS" mitigation="50"/>
                    <countermeasure ref="mqtt-payload-encryption" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.7.13" mitigation="50"/>
                <countermeasure ref="TLS-STRONG-CIPHERS" mitigation="50"/>
                <countermeasure ref="TLS-STRONG-PROTOCOLS" mitigation="50"/>
                <countermeasure ref="mqtt-payload-encryption" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-94" name="Man in the Middle Attack" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>	&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-287">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.4" mitigation="100"/>
                    <countermeasure ref="IOT2.4.5.21" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.13.4" mitigation="100"/>
                <countermeasure ref="IOT2.4.5.21" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="firmware-update-mqtt" name="An attacker can change the firmware update link over MQTT in such way that the victim devices install malicious firmware" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker who has already known the data packets by sniffing the traffic can modify the data in transit. One of the interesting scenarios happens when attacker identifies someone who sends a link to download a firmware update for some devices over MQTT. The attacker can change the link in such way that the victim devices install malicious firmware that transforms them into botnets.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-494">
                  <countermeasures>
                    <countermeasure ref="irrevocable-secure-boot" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="irrevocable-secure-boot" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="mqtt-client-dos" name="An attacker can overload MQTT clients due to too high message frequency on subscribed topics" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker can send a large volume of dataset messages with the goal of overwhelming the subscriber, the middleware or dependent components such as CPU, TCP/IP stack, operating system, or the file system.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="mqtt-client-dos">
                  <countermeasures>
                    <countermeasure ref="data-integrity-checks" mitigation="25"/>
                    <countermeasure ref="input-val-mqtt-clients" mitigation="25"/>
                    <countermeasure ref="limit-mqtt-messages-sizes" mitigation="25"/>
                    <countermeasure ref="mqtt-client-throttling" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="data-integrity-checks" mitigation="25"/>
                <countermeasure ref="input-val-mqtt-clients" mitigation="25"/>
                <countermeasure ref="limit-mqtt-messages-sizes" mitigation="25"/>
                <countermeasure ref="mqtt-client-throttling" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="read-or-post-data" name="Read or Post data" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="CAPEC-137" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&amp;amp;). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value "myInput&amp;amp;new_param=myValue", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.13.22" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.13.22" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="ASVS-2014-3.3" name="Attackers could gain access to an open session, if they have access to a user's browser" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>If a user steps away from their browser for a few minutes and there is an
                                opportunity for
                                an attacker to access the browser, then they could gain access to the user's logged
                                in
                                session and perform operations on their behalf.
                            </desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="10"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-613">
                  <countermeasures>
                    <countermeasure ref="secure-session-generation-and-expiration" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="secure-session-generation-and-expiration" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-341" name="Attackers gain access to user data by manipulating server-side code" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;Server-Side Code Injection happens when an attacker is able to direct input under his control and mix it with executed code on the server-side by modifying the logic executed on it.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-79">
                  <countermeasures>
                    <countermeasure ref="CWE-79-ENCODE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-79-ENCODE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-94" name="Attackers gain access to the system through Server-Side Code Injection" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;Server-Side Code Injection happens when an attacker is able to direct input under his control and mix it with executed code on the server side by modifying the logic executed on it.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Depending on the code isolation, this event could grant the user access to system resources and data.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-78">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="device-operation" name="Device operation" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="IOT-INSUF-SEC" name="Attackers gain access to the system exploiting insufficient or misconfigured security features" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>The product lacks key security features such as protection against tampering or unprotected storages, or it has other misconfigurations and omissions during production.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.5.33" mitigation="14"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-209">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.5.24" mitigation="14"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-254-PROD">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.5.8" mitigation="13"/>
                  </countermeasures>
                </weakness>
                <weakness ref="UNPATCHED-PRODUCT">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.5.25" mitigation="14"/>
                    <countermeasure ref="IOT2.4.5.26" mitigation="15"/>
                    <countermeasure ref="IOT2.4.5.29" mitigation="15"/>
                    <countermeasure ref="IOT2.4.5.30" mitigation="15"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.5.24" mitigation="14"/>
                <countermeasure ref="IOT2.4.5.25" mitigation="14"/>
                <countermeasure ref="IOT2.4.5.26" mitigation="15"/>
                <countermeasure ref="IOT2.4.5.29" mitigation="15"/>
                <countermeasure ref="IOT2.4.5.30" mitigation="15"/>
                <countermeasure ref="IOT2.4.5.33" mitigation="14"/>
                <countermeasure ref="IOT2.4.5.8" mitigation="13"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="update-process" name="Update Process" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="CAPEC-122-UPDATE-PROCESS" name="An adversary is able to exploit the update process of the device to escalate its privileges" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.5.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-654">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.5.30" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.5.2" mitigation="50"/>
                <countermeasure ref="IOT2.4.5.30" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-157" name="An attacker monitors information transmitted between logical or physical nodes of a network" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.5.4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.5.4" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="access-control" name="Access control" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="CAPEC-37" name="An attacker examines a target system to find sensitive data that has been embedded within it" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.8.11" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.8.11" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="ADMINISTRATION SERVICE" name="Administration service" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="CSD-ADM-IFACE" name="Attackers gain access to the system through an unprotected administration interface" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>Administrative interfaces grant access to sensitive operations that can typically
                                affect key security mechanisms, like modifying credentials and adding/removing user
                                accounts.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CSD-ADM-OPEN">
                  <countermeasures>
                    <countermeasure ref="CSD-ADM-TRUST" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSD-ADM-TRUST" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="8571e80a-d294-4f8b-b762-2a90fa1c0791" diagramComponentId="644cd40a-5e03-4af2-b270-91ee966a812f" ref="10394c1e-d39f-4559-97da-7b7a9aca1176" name="Load Balancer" desc="" library="IR-Network-Components" parentComponentRef="" componentDefinitionRef="CD-LOAD-BALANCER">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.602">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.602">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-LOAD-BALANCER2" name="Enable all access logs for Load Balancers" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="IR-Network-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enable all access logs for Load Balancers&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; Logging should be configured to meet your organizational security and privacy policies. Enabling detailed logging to include information about events, event sources, timestamps, and users may assist in incident response activities.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; Enable all access logs for Load Balancers.&lt;/p&gt; 
&lt;p&gt;Please see Reference links for more information and examples.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Logging with Load Balancer" url="https://www.ibm.com/docs/en/was-zos/9.0.5?topic=SS7K4U_9.0.5/com.ibm.websphere.edge.doc/lb/tprf_log.htm"/>
            <reference name="Securing Network Infrastructure Devices" url="https://www.cisa.gov/uscert/ncas/tips/ST18-001"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Ensure that the access logs are created when a user is visiting the load balancer.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.553">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-LOAD-BALANCER1" name="Use SSL Load Balancers" issueId="" issueLink="" platform="" cost="0" risk="27" state="Recommended" owner="fscott-admin" library="IR-Network-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use SSL Load Balancers&lt;/p&gt; 
&lt;p&gt;Rationale:&lt;br&gt; An SSL load balancer is a load balancer that also performs encryption and decryption of data transported via HTTPS, which uses the Secure Sockets Layer (SSL) protocol or its successor, the Transport Layer Security (TLS) protocol, to secure HTTP data as it crosses the network. Encryption of sensitive information protects against potential attackers and man-in-the-middle attacks.&lt;/p&gt; 
&lt;p&gt;Remediation:&lt;br&gt; An SSL load balancer acts as the server-side SSL endpoint for connections with clients, meaning that it performs the decryption of requests and encryption of responses that the web or application server would otherwise have to do. The process varies somewhat depending on the security of the network between the load balancer and server:&lt;/p&gt; 
&lt;p&gt;- If the load balancer and server are on the same secured network (generally this means being behind a firewall), the SSL load balancer is usually configured to decrypt the request, extract the information needed for load balancing, and forward the request to the server in the clear (unencrypted). It encrypts the server's response before returning it to the client.&lt;br&gt; - If the network between the load balancer and server is not secure, the SSL load balancer is usually configured to decrypt the request, extract the information needed for load balancing, and re-encrypt the request before forwarding it to the server. The process is reversed for the response from server to client.&lt;/p&gt; 
&lt;p&gt;Offloading the decryption and encryption process, which is computationally intensive, frees web and application servers to perform the work they are designed for, which speeds content delivery and improves the overall user experience. If the network between load balancer and servers is secure, you only need to install and manage the SSL certificates on the load balancer instead of every web and application server. This significantly reduces administrative overhead if the group of servers is large.&lt;/p&gt; 
&lt;p&gt;Impact:&lt;br&gt; None&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="What Is an SSL Load Balancer?" url="https://www.nginx.com/resources/glossary/ssl-load-balancer/#:~:text=An%20SSL%20load%20balancer%20is,as%20it%20crosses%20the%20network."/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;Ensure that you are using an SSL load balancer.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:11.552">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="LOGGING AND MONITORING" name="Logging and Monitoring" desc="" library="IR-Network-Components">
          <threats>
            <threat ref="no-security-procedures-monitoring" name="Attackers gain access to the system and are not detected" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Network-Components" editable="true">
              <desc>&lt;p&gt;Attackers gain access to the systems and are not detected. Therefore, they can make changes to the systems and remain undetected. Data integrity is destroyed.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1562.001" url="https://attack.mitre.org/techniques/T1562/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.002" url="https://attack.mitre.org/techniques/T1562/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.003" url="https://attack.mitre.org/techniques/T1562/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.004" url="https://attack.mitre.org/techniques/T1562/004"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.006" url="https://attack.mitre.org/techniques/T1562/006"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.007" url="https://attack.mitre.org/techniques/T1562/007"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.008" url="https://attack.mitre.org/techniques/T1562/008"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.009" url="https://attack.mitre.org/techniques/T1562/009"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.010" url="https://attack.mitre.org/techniques/T1562/010"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-LOAD-BALANCER2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-LOAD-BALANCER2" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="IR-Network-Components">
          <threats>
            <threat ref="CAPEC-300" name="Attackers gain control of the connection through a Man In The Middle attack" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="IR-Network-Components" editable="true">
              <desc>&lt;div&gt;
                                This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.&amp;nbsp; &amp;nbsp;
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="C-LOAD-BALANCER1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-LOAD-BALANCER1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="c8a8dc10-e3ef-4667-bb94-a8a4bde634a9" diagramComponentId="172d4134-065b-48b4-a3e5-d4f3f77b73a8" ref="56461273-b8ac-4b0c-b188-001f1c229e16" name="MQTT Broker" desc="" library="iot-security-compliance-framework" parentComponentRef="" componentDefinitionRef="mqtt-broker">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.252">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-354" name="Improper Validation of Integrity Check Value" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not validate or incorrectly validates the integrity check values or "checksums" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.253">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="mqtt-broker-authentication" name="MQTT Broker does not require authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>MQTT broker is configured to allow anonymous access.&amp;nbsp;The MQTT protocol supports authentication, but it is not mandatory. Authentication allows you to identify the devices and applications that connect to a broker, and prevent attackers from gaining access.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="mqtt-broker-authorization-support" name="MQTT broker does not support authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>Without proper authorization in the MQTT broker, each authenticated client can publish and subscribe to all available topics.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="UNRESTRICTED-NETWORK" name="Service is exposed to a wide attack surface" state="0" impact="100" issueId="" issueLink="">
          <desc>The product is exposed or reachable by an unnecessarily large group of potential attackers. An over-exposure of a component increases the chance of an attacker gaining access to the system through a vulnerability.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.253">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="throttling-mqtt-broker" name="Throttling is not configured in the MQTT broker" state="0" impact="100" issueId="" issueLink="">
          <desc>MQTT broker can be flooded because throttling and limits are not configured.&amp;nbsp;&amp;nbsp;All the attacker needs to do is to find out which topic is most subscribed by the clients and flood the broker with messages on that topic with a higher QoS message.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="wildcard-subs-enabled-mqtt-broker" name="Wildcard subscriptions are enabled in the MQTT broker" state="0" impact="100" issueId="" issueLink="">
          <desc>MQTT broker allows subscribers to use "#" to listen for all messages.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.254">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="configure-throttling-mqtt-broker" name="Configure Throttling and Limits for the MQTT broker" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>CPU, memory and bandwidth are limited resources. It can be crucial to limit the bandwidth or the maximum TCP connections the MQTT broker can accept to save resources and avoid abuse by malicious clients. 
                    &lt;div&gt;
                      The throttling and rate limiting must apply not only to per client (using either client ID or IP/port combination) and also on a global basis. Not only does this improves the system stability, it also provides security to end point. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                     &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                     &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                      Enforce MQTT broker throttling and limit properties. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                     &lt;ul&gt; 
                      &lt;li&gt;Apply a global connection limit.&lt;/li&gt; 
                      &lt;li&gt;Set rates of allowed MQTT CONNECT packets per second.&lt;/li&gt; 
                      &lt;li&gt;Set the number of SSL handshake operations per listener that can occur concurrently.&lt;/li&gt; 
                      &lt;li&gt;Throttle the incoming network traffic for MQTT clients.&lt;/li&gt; 
                      &lt;li&gt;Set connection timeouts for clients.&lt;/li&gt; 
                      &lt;li&gt;Restrict MQTT Client ID Length.&lt;/li&gt; 
                      &lt;li&gt;Restrict Topic Length.&lt;/li&gt; 
                     &lt;/ul&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Securing your MQTT infrastructure against DDoS Attacks" url="https://medium.com/@iotify/securing-your-mqtt-infrastructure-against-ddos-attacks-1d982a376047"/>
            <reference name="Throttling and Limits" url="https://www.hivemq.com/docs/hivemq/4.6/user-guide/restrictions.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>You can use MQTT Apache JMeter Plugin, that fully implements communications over MQTT protocol to test the MQTT broker (in a non production environment) under potential denial of service conditions.&amp;nbsp; 
                        &lt;div&gt;
                          The strategy of performance testing the message broker is imitating work publishers and subscribers working under different configurations and quality of service levels. 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.151">
              <output/>
            </source>
            <references>
              <reference name="Testing the MQTT Messaging Broker for IoT - A Guide" url="https://www.blazemeter.com/blog/testing-the-mqtt-messaging-broker-for-iot-a-guide/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="mqtt-broker-dmz-deploy" name="Deploy the MQTT broker in a DMZ zone" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    A DMZ is a demilitarized zone. Internet-facing services such as an MQTT broker often reside in this zone. A DMZ is a subnetwork. All access to downstream services such as databases and internal application services are protected by an additional firewall. If an attacker gets access to one of the services in the DMZ, he does not automatically gain access to other systems behind the additional firewall. In a dual-firewall scenario, firewalls from different vendors are frequently used. If an attacker is able to exploit a security hole of the first firewall, the second firewall cannot be breached by reusing of the same compromising technique. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                     &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                     &lt;b&gt; Remediation&lt;/b&gt; 
                     &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Deploy your MQTT broker in a DMZ zone if you need to access any internal business services (for example, web services or authentication services) from the broker. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT and the NIST Cybersecurity Framework Version 1.0" url="https://docs.oasis-open.org/mqtt/mqtt-nist-cybersecurity/v1.0/mqtt-nist-cybersecurity-v1.0.html"/>
            <reference name="Securing the Home IoT Network" url="https://www.sans.org/reading-room/whitepapers/hsoffice/paper/37717"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Examine firewall and router configurations to verify that a DMZ is implemented to limit inbound traffic to only system components that provide authorized publicly accessible services, protocols, and ports. 
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.151">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="disable-wildcard-subs-mqtt-broker" name="Disable wildcard subscriptions in the MQTT broker" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    When a client subscribes to a topic, it can subscribe to the exact topic of a published message or it can use wildcards to subscribe to multiple topics simultaneously.&amp;nbsp;A wildcard can only be used to subscribe to topics, not to publish a message. There are two different kinds of wildcards: single-level and multi-level. 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    To harden an MQTT solution, wildcard subscriptions should be disabled in the broker. Make sure your MQTT broker provider supports this feature. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt;Wildcard subscriptions should be disabled in the broker.
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Security Fundamentals" url="https://www.hivemq.com/blog/mqtt-security-fundamentals-wrap-up"/>
            <reference name="MQTT Topics &amp; Best Practices - MQTT Essentials: Part 5" url="https://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                        Use an MQTT client (mosquitto_pub) to specify only the multi-level wildcard as a topic (#). If you receive all messages that are sent to the MQTT broker, authorization is not enforced on the broker. 
                        &lt;/div&gt; 
                        &lt;div&gt; 
                        &lt;br&gt; 
                        &lt;/div&gt; 
                        &lt;div&gt;
                        mosquitto_sub -t '#' -v 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.151">
              <output/>
            </source>
            <references>
              <reference name="mosquitto_sub man page" url="https://mosquitto.org/man/mosquitto_sub-1.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="client-auth-mqtt-broker" name="Enforce client authentication in the MQTT broker" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    To setup client authentication (only authorized clients can connect to the broker) you can choose between two main options: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;&lt;b&gt;Authentication by user and password&lt;/b&gt;&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    MQTT Brokers support user authentication through username and password. When user authentication is enabled, a valid user name and password is required for connection. 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    When the username and password are set on the client, the information is sent to the broker in plain text. This text is vulnerable to eavesdropping and provides an easy way for attackers to obtain the credentials. Secure transmission of usernames and passwords requires transport encryption (TLS/SSL). 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;&lt;b&gt;Authentication by using client certificates&lt;/b&gt;&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Another possible authentication method is using the X.509 client certificate. The client presents this certificate to the broker during the TLS handshake. After a successful TLS handshake, some brokers permit use of certificate information for application layer authentication. This enables the broker to read all of the information in the certificate and use it for authentication purposes as well. If you provision IoT devices, X509 client certificates can be a very good source for authenticating clients on the MQTT broker. Only valid clients are allowed to establish a (secure) connection. This can save resources on the broker side, especially if costly MQTT authentication mechanisms such as database lookups or webservice calls are used on the broker side. Since the authentication takes place with the TLS handshake, authentication is done before a connection is established. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;div&gt;
                    If a client certificate can't be trusted anymore (for example, if it was leaked), it's important to invalidate the client certificate immediately. To prevent malicious clients from using the leaked certificate, the server needs a way to identify invalid certificates and prohibit clients that attempt to connect with them. One option is to use Certificate Revocation Lists (CRLs). CRLs are simply a list of all invalid certificates. If you only have a few certificates deployed to MQTT clients, CRLs are a good solution. If you deal with thousands or even millions of certificates, CRLs can be big headache. Another way to revoke invalid certificates is the Online Certificate Status Protocol (OCSP). OCSP uses a service to ask for revocation information on specific client certificates. If you plan to use OCSP, you need an OCSP responder, which is essentially a HTTP server that responds to revocation-check requests. If you have a huge number of revoked certificates, this method has the significant advantage that you don't need to distribute the CRLs to the MQTT brokers.&amp;nbsp; 
                    &lt;/div&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use certificates to authenticate MQTT transactions. Only consider the MQTT native username/password with a transport encryption layer (TLS) if&amp;nbsp;deploying and managing X509 client certificates to the MQTT clients is not an option. It's also desirable to use a unique client identifier for every MQTT client (but not to rely only in this client identifier for authentication). 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Security Fundamentals" url="https://www.hivemq.com/blog/mqtt-security-fundamentals-wrap-up"/>
            <reference name="MQTT client authentication using TLS" url="https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.1.0/com.ibm.mq.adm.doc/q021330_.htm"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use an MQTT client (mosquitto_pub) to test if a client can connect anonymously to the broker: 
                        &lt;div&gt; 
                        &lt;div&gt;
                        mosquitto_sub -t test/topic -h &amp;lt;broker address&amp;gt; 
                        &lt;/div&gt; 
                        &lt;div&gt; 
                        &lt;br&gt; 
                        &lt;/div&gt; 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.150">
              <output/>
            </source>
            <references>
              <reference name="mosquitto_sub man page" url="https://mosquitto.org/man/mosquitto_sub-1.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="enforce-authz-mqtt-broker" name="Enforce strict authorization in the MQTT broker" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When using MQTT, it's important to select a broker that also enables you to enforce strict authorization.&amp;nbsp; 
                    &lt;div&gt;
                    When a client establishes a connection with the broker, it can perform two activities: publish and subscribe to topics. Topics are the main resource available to clients and require authorization/protection for a secure system. Otherwise, without authorization, any client would have the ability to subscribe and publish to any topic available on the broker.&amp;nbsp; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    The most common types of authorization used are Role Based Access Controls (RBAC) and Access Control List (ACL).&amp;nbsp; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;In RBAC, a role provides a level of abstraction between a client and the main resource, i.e. topics in this case. Permissions are always associated with a certain role, allowing the broker to authorize the ability for a client to publish or subscribe to a certain topic.&amp;nbsp;&lt;/li&gt; 
                    &lt;li&gt;ACL associates certain clients with a list of permissions. These permissions provide policies on what topics a client can subscribe/publish to.&amp;nbsp;&lt;/li&gt; 
                    &lt;/ul&gt;Using ACL or RBAC a broker can be configured with topic permissions. During the run-time, the broker can determine allowed topics, allowed operations, and allowed quality of service. If a client attempts to perform an unauthorized operation, the broker can perform actions such as disconnecting from a client or acknowledging the client but preventing it from the publishing data to other clients that have subscribed to the same topic. 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    It's also desirable to use a unique client identifier for every MQTT client. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;div&gt;
                    Here is a possible topic permission: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;Allowed topic (exact topic or wild card topic)&lt;/li&gt; 
                    &lt;li&gt;Allowed operation (publish, subscribe, both)&lt;/li&gt; 
                    &lt;li&gt;Allowed quality of service level (0, 1, 2, all)&lt;/li&gt; 
                    &lt;li&gt;This kind of topic permission allows the broker to specify authorization policies for clients and limit their ability to subscribe and publish messages. For example, give a client the permission to subscribe only to a single topic and use only a certain quality of service level.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Enforce strict authorization in the MQTT broker using topic permissions for each MQTT client. Whenever a client wants to publish or subscribe, the MQTT broker should check for the permissions of the client. These permissions can be cached (which means that the flow of messages is not affected). 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Security Fundamentals" url="https://www.hivemq.com/blog/mqtt-security-fundamentals-wrap-up"/>
            <reference name="Securing IoT devices and gateways" url="https://developer.ibm.com/technologies/iot/articles/iot-trs-secure-iot-solutions1/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                        To verify if authorization is enforced in the MQTT broker, we can test if an MQTT client can subscribe to the $SYS topic and see information about the broker using mosquito_sub client. 
                        &lt;/div&gt; 
                        &lt;div&gt; 
                        &lt;br&gt; 
                        &lt;/div&gt; 
                        &lt;div&gt;
                        mosquitto_sub -t "$SYS/#" -v -h &amp;lt;broker address&amp;gt; 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.151">
              <output/>
            </source>
            <references>
              <reference name="mosquitto_sub - an MQTT version 5/3.1.1/3.1 client for subscribing to topics" url="https://manpages.debian.org/testing/mosquitto-clients/mosquitto_sub.1.en.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="client-id-permission-mqtt-broker" name="Include the client ID of the publishing MQTT client in the permission" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>A common best practice is to include the client ID of the publishing client in the permission. The MQTT client is restricted to publish only to topics that are prefixed with its own client ID. For example, client123/temperature or client123/#. The same solution can be used for subscribing. This is a good pattern for topics that are only concerned with one client. Of course, this is often not the only permission needed. Frequently, a client has permissions to subscribe to more general topics. For example, clients/status or clients/command. Use of this pattern depends highly on your individual use case. 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Include the client ID of the publishing client in the permission. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="HiveMQ Extension Developer Guide - Authorization" url="https://www.hivemq.com/docs/hivemq/4.6/extensions/authorization.html"/>
            <reference name="MQTT client identity and authorization" url="https://www.ibm.com/support/knowledgecenter/SSFKSJ_8.0.0/com.ibm.mq.adm.doc/q021300_.htm"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.150">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="mqtt-broker-traffic-firewall" name="Route every connection to an MQTT broker through a firewall" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Every connection to an MQTT broker should pass at least one firewall that implements sophisticated rules for accessing downstream components. If your are able to block attackers at the firewall level, they won't be able to access other systems in your infrastructure.&amp;nbsp; 
                    &lt;div&gt; 
                    &lt;div&gt;
                    Block any traffic that you don't expect in your downstream applications. For an MQTT broker the following traffic is probably worth blocking: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;UDP: MQTT uses TCP, you can block all UDP datagram packets.&lt;/li&gt; 
                    &lt;li&gt;ICMP: While it may not be the smartest idea to block all ICMP traffic, ICMP traffic, ping and traceroute ICMP packets could be worth investigating as candidates to block.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    It's also a good idea to block traffic to any ports that are not needed for your MQTT system. Don't block the following standard MQTT ports with your firewall: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;1883: This is the default MQTT port. 1883 is defined at IANA as MQTT over TCP.&amp;nbsp;&lt;/li&gt; 
                    &lt;li&gt;8883: This is the default MQTT port for MQTT over TLS. It's registered at IANA for Secure MQTT.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    If you are in full control of your MQTT system and know the IPs of your MQTT clients, only allow traffic for the needed IP ranges. This precaution locks out any clients that are not in the defined IP ranges. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Block traffic to any ports that are not needed for your MQTT system. 
                    &lt;/div&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="FAQ - Frequently Asked Questions" url="https://mqtt.org/faq"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                        Since MQTT brokers listen on a port number, a simple port scanner can find the broker. The device search engine Shodan now includes searches for MQTT brokers, and we can use a free Shodan account to find a limited set of brokers.&amp;nbsp; An attacker would look for as many brokers as possible by using a port scanner such as nmap. The following command would be able to find many more devices than our simple setup:&amp;nbsp; 
                        &lt;/div&gt; 
                        &lt;div&gt; 
                        &lt;br&gt; 
                        &lt;/div&gt; 
                        &lt;div&gt;
                        nmap -sS -sV -v -p 1883,8883 -oA mqtt-scan IPRANGE 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.151">
              <output/>
            </source>
            <references>
              <reference name="Nmap mqtt-subscribe" url="https://nmap.org/nsedoc/scripts/mqtt-subscribe.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="limit-mqtt-messages-sizes" name="Set a limit for MQTT message sizes" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    MQTT defines a maximum message size of 256MB. In most MQTT deployment scenarios, messages are often smaller than a kilobyte. If you are familiar with your usage scenario and you know the maximum message size that can occur, it makes sense to decrease the maximum allowed message size to that limit. If no limit is set, it is possible for malicious MQTT clients to send large messages (which can result in excessive memory consumption and unneeded bandwidth usage). 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Limit the maximum message size on a global and per-client basis. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
                        &lt;ul&gt; 
                        &lt;li&gt;Use a client to send and receive data over MQTT.&lt;br&gt;&lt;/li&gt; 
                        &lt;li&gt;Increase the message size of the data in a development/testing environment to test the presence of maximum message size thresholds. &lt;br&gt;&lt;/li&gt; 
                        &lt;li&gt;Verify that when the MQTT broker receives a message that exceeds that threshold, it drops the packet.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.151">
              <output/>
            </source>
            <references>
              <reference name="MQTT Client and Mosquitto Broker Message Restrictions" url="https://www.ibm.com/docs/en/mapms/1_cloud?topic=messaging-restrictions-limitations"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="access-tokens-authz-mqtt-clients" name="Use Access Tokens to authorize MQTT clients" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Access tokens provide an additional mechanism for scoping permissions for clients. By scoping the permissions of a client, you can prevent unauthorized access to read or write data that may have adverse effects on other client devices connected to your IoT infrastructure. When publishing or subscribing, the broker needs to authorize the client. Token authorization allows for a client to claim what scope, or permissions, it has. Another way to provide authorization with a server is to provide a third-party source for the broker to look up authorizations associated with a client based on a token and unique id. In order to connect to a broker with an access token, the client must send its access token with a connect message using the password field. In this case, additional identification can be provided with the username field as well. Before requesting a connection, the client must be provided with an access token and scope. There are a variety of token services available. The most commonly used is OAuth 2.0. The client credential flow is modeled above where a client requests a token using credentials and is granted an access token. 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use Access Tokens to&amp;nbsp; prevent unauthorized access to read or write data 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Authenticating &amp; Authorizing Devices using MQTT with Auth0" url="https://auth0.com/docs/integrations/authenticating-devices-using-mqtt"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.150">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="data-integrity-checks" name="Use data integrity checks" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    Use data integrity checks with stamps as a good addition to message encryption. Even if the attacker can decrypt the message (and encrypt it after modification), the integrity check still fails if the message was altered. Especially if you use MQTT without TLS, data integrity checks add an additional layer of security. 
                    &lt;br&gt; 
                    &lt;br&gt;MQTT PUBLISH packets can contain a digital signature/MAC/checksum that verifies the contents of the packet. This calculated stamp is typically added to the payload (for example, at the beginning of the payload). The receiver of the packet can verify the integrity of the data by recalculating/validating the stamp. This validation assures that the message was not tampered with by a malicious third party. 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use data integrity checks with stamps. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Message Data Integrity - MQTT Security Fundamentals" url="https://www.hivemq.com/blog/mqtt-security-fundamentals-mqtt-message-data-integrity/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt; 
                        &lt;li&gt;Review the project documentation and use exploratory testing looking for parts of the application/system (components i.e. For example, input fields, databases or logs) that move, store or handle data/information.&lt;/li&gt; 
                        &lt;li&gt;For each identified component determine what type of data/information is logically acceptable and what types the application/system should guard against. Also, consider who according to the business logic is allowed to insert, update and delete data/information and in each component.&lt;/li&gt; 
                        &lt;li&gt;Attempt to insert, update or edit delete the data/information values with invalid data/information into each component (i.e. input, database, or log) by users that should not be allowed per the business logic workflow.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;br&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.151">
              <output/>
            </source>
            <references>
              <reference name="Test Integrity Checks" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.7.13" name="Where the MQTT protocol is used, it is protected by a TLS connection with no known cipher vulnerabilities" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where the &lt;span class="caps"&gt;MQTT&lt;/span&gt; protocol is used, it is protected by a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt; 
                    &lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br&gt;&lt;/font&gt;&lt;/b&gt; &lt;span class="caps"&gt;MQTT&lt;/span&gt; (Message Queue Telemetry Transport), is a very lightweight and widely used messaging and information exchange protocol for IoT devices throughout the world. The &lt;span class="caps"&gt;MQTT&lt;/span&gt; communication can be encrypted using &lt;span class="caps"&gt;TLS&lt;/span&gt; / &lt;span class="caps"&gt;SSL&lt;/span&gt; protocols, ensuring a secure and safe communication.&lt;/p&gt; 
                    &lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br&gt;&lt;/font&gt;&lt;/b&gt; Ensure that where the &lt;span class="caps"&gt;MQTT&lt;/span&gt; protocol is used, it is protected by a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Version 3.1.1 Plus Errata 01" url="https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html"/>
            <reference name="MQTT and CoAP, IoT Protocols" url="https://www.eclipse.org/community/eclipse_newsletter/2014/february/article2.php"/>
          </references>
          <standards>
            <standard ref="2.4.7.13" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.7.13" supportedStandardRef="iotsf-class-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:06.149">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHENTICATION AND AUTHORIZATION" name="Authentication and Authorization" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="mqtt-broker-dos" name="An attacker can publish data to the MQTT broker to publish spam data so that both broker and subscriber get flooded and may result in denial of service" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>The MQTT brokers are considered as the main component of any MQTT-based IoT application as it offers many services to the clients. One of the main risks related with the MQTT protocol is flooding the broker which leads to a DoS attack. The attacker compromises the broker and sends false control or data packets during the DoS attack. Therefore, automatic recoverability from the DoS attack, the time taken for the recoverability, and the impact of broker failure in the IoT application are the significant security concerns in MQTT protocol.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Understanding Denial-of-Service Attacks" url="https://www.us-cert.gov/ncas/tips/ST04-015"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-354">
                  <countermeasures>
                    <countermeasure ref="data-integrity-checks" mitigation="25"/>
                    <countermeasure ref="limit-mqtt-messages-sizes" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="mqtt-broker-authentication">
                  <countermeasures>
                    <countermeasure ref="client-auth-mqtt-broker" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="throttling-mqtt-broker">
                  <countermeasures>
                    <countermeasure ref="configure-throttling-mqtt-broker" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="client-auth-mqtt-broker" mitigation="25"/>
                <countermeasure ref="configure-throttling-mqtt-broker" mitigation="25"/>
                <countermeasure ref="data-integrity-checks" mitigation="25"/>
                <countermeasure ref="limit-mqtt-messages-sizes" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="subscribe-all-mqtt-topics" name="An attacker can start to subscribe to all topics on an unprotected MQTT broker to gather sensitive data" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>If the environment is insecure, and a third party gets access to it, that third party can subscribe to all MQTT messages being passed around (MQTT allows subscribers to use "#" to listen for all messages). There are usually no ACLs (Access Control Lists), which is a fine grained access control to the topics in place, so once you are connected, you can also publish to topics. In this case, you can control devices or at least poison the data being collected by publishing on behalf of the devices.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="A Comparative Analysis on Security of MQTT Brokers" url="https://www.researchgate.net/publication/336358715_A_Comparative_Analysis_on_Security_of_MQTT_Brokers"/>
                <reference name="Are smart homes vulnerable to hacking?" url="https://blog.avast.com/mqtt-vulnerabilities-hacking-smart-homes"/>
                <reference name="Attack Scenarios and Security Analysis of MQTT Communication Protocol in IoT System" url="https://beei.org/index.php/EECSI/article/viewFile/1064/627"/>
              </references>
              <weaknesses>
                <weakness ref="mqtt-broker-authentication">
                  <countermeasures>
                    <countermeasure ref="client-auth-mqtt-broker" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="mqtt-broker-authorization-support">
                  <countermeasures>
                    <countermeasure ref="access-tokens-authz-mqtt-clients" mitigation="20"/>
                    <countermeasure ref="client-id-permission-mqtt-broker" mitigation="20"/>
                    <countermeasure ref="enforce-authz-mqtt-broker" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="wildcard-subs-enabled-mqtt-broker">
                  <countermeasures>
                    <countermeasure ref="disable-wildcard-subs-mqtt-broker" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="access-tokens-authz-mqtt-clients" mitigation="20"/>
                <countermeasure ref="client-auth-mqtt-broker" mitigation="20"/>
                <countermeasure ref="client-id-permission-mqtt-broker" mitigation="20"/>
                <countermeasure ref="disable-wildcard-subs-mqtt-broker" mitigation="20"/>
                <countermeasure ref="enforce-authz-mqtt-broker" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="CAPEC-157" name="An attacker monitors information transmitted between logical or physical nodes of a network" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.7.13" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.7.13" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-CONNECTION" name="Attackers gain unauthorized connection to the resources" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;Attackers could potentially gain unauthorized connection to the resources through misconfigured ports or security network configurations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="UNRESTRICTED-NETWORK">
                  <countermeasures>
                    <countermeasure ref="mqtt-broker-dmz-deploy" mitigation="50"/>
                    <countermeasure ref="mqtt-broker-traffic-firewall" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="mqtt-broker-dmz-deploy" mitigation="50"/>
                <countermeasure ref="mqtt-broker-traffic-firewall" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="a32f7c52-91b0-4eb6-a063-5dcbbf1fc4a1" diagramComponentId="514ce7eb-b045-4899-ade0-ed107e2afa8c" ref="094c5fe1-c200-4621-9634-7eda8210f921" name="MQTT Client" desc="" library="IR-Dataflows" parentComponentRef="9e0b0088-33c0-4ddc-ad66-bdff90b1f644" componentDefinitionRef="mqtt-client">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="auth-cred-client-unprotected" name="Authentication credentials unprotected on the client side" state="0" impact="100" issueId="" issueLink="">
          <desc>Client side has insufficiently protected credentials, which allows remote attackers to obtain sensitive information via unspecified vectors.&amp;nbsp;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.902">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.901">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-494" name="Download of Code Without Integrity Check" state="0" impact="100" issueId="" issueLink="">
          <desc>The product downloads source code or an executable from a remote location and executes the
                        code without sufficiently verifying the origin and integrity of the code.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.901">
              <output/>
            </source>
            <references>
              <reference name="CWE-494: Download of Code Without Integrity Check" url="https://cwe.mitre.org/data/definitions/494.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-89" name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted and executed as SQL instead of ordinary user data. This can be leveraged to alter query logic in order to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is relatively easily detected, and often easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted automated attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.220">
              <output/>
            </source>
            <references>
              <reference name="CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" url="https://cwe.mitre.org/data/definitions/89.html"/>
              <reference name="OWASP Testing Guide" url="https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)#Standard_SQL_Injection_Testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="mqtt-client-dos" name="MQTT client does not present  protective measures against denial-of-service (DoS) attacks" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                    MQTT client does not have measures to protect from excessively high message frequency on subscribed topics. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.902">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="mqtt-client-authz" name="MQTT client don't authorize commands coming from IoT applications" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.902">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="enforce-app-id-validation-mqtt-client" name="Enforce Application ID validation in the MQTT client" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    Application ID validation is an extra level of security between the IoT application and the device to ensure that no fake application can send commands to the device. This mechanism can be used both as startup security and as a communication security mechanism. By using this scheme, the device stores the unique ID of the IoT application and validates it when it processes the commands that are coming from the IoT application. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    If the IoT application sends an invalid unique ID with a command, the command is ignored by the device. If the device has storage capability, the IoT application unique ID can be encrypted and stored. In that case, the unique ID request is not necessary after every restart. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Enforce Application ID validation in the MQTT client 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Securing IoT devices and gateways" url="https://developer.ibm.com/technologies/iot/articles/iot-trs-secure-iot-solutions1/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.806">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="input-val-mqtt-clients" name="Implement Input Validation on MQTT clients" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    It's a good pattern to always validate inputs, no matter how trusted the environment is. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Your MQTT clients should at least validate the following: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;&lt;b&gt;MQTT topics&lt;/b&gt;: Did the client receive messages on topics the client did not subscribe to? In such a case your application should ignore the message. If you are using wildcard subscriptions, only process messages on topics you know the client can interpret.&lt;/li&gt; 
                    &lt;li&gt;&lt;b&gt;MQTT message payload&lt;/b&gt;: The payload of MQTT messages is always binary. The structure of the data in the payload is typically defined on the application level. Always make sure you can parse the actual message. So if you are expecting a JSON payload but the actual payload is in XML, your parser will probably have a hard time interpreting the messages. So always validate if your application can handle the input, otherwise malicious MQTT clients could craft MQTT packets that your subscribers can't handle.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Your MQTT Applications: Are they resilient enough?" url="https://www.hivemq.com/blog/are-your-mqtt-applications-resilient-enough/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.806">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="mqtt-client-throttling" name="Implement MQTT throttling on the client-side" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Most MQTT client applications are not designed for handling huge amounts of MQTT messages per second. It's important to know your client's load limitations and then throttle the message ingestion rate to a limit that doesn't overwhelm your client. Such an implementation typically stops to read from the socket as soon as a specific bytes per second or messages per second rate threshold is exceeded. So even if the broker tries to send lots of messages, TCP backpressure mechanisms take effect and your client won't be overwhelmed. If this is not possible with your client library, you should think about implementing load shedding, which means you throw away messages that you can't handle. This is not optimal but certainly better than constantly crashing your client. 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Throttle the message ingestion rate to a limit that doesn't overwhelm your client. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Throttling MQTT Data" url="https://mqtt.cool/throttling-mqtt-data/"/>
            <reference name="Your MQTT Applications: Are they resilient enough?" url="https://www.hivemq.com/blog/are-your-mqtt-applications-resilient-enough/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.806">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="limit-mqtt-messages-sizes" name="Set a limit for MQTT message sizes" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    MQTT defines a maximum message size of 256MB. In most MQTT deployment scenarios, messages are often smaller than a kilobyte. If you are familiar with your usage scenario and you know the maximum message size that can occur, it makes sense to decrease the maximum allowed message size to that limit. If no limit is set, it is possible for malicious MQTT clients to send large messages (which can result in excessive memory consumption and unneeded bandwidth usage). 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Limit the maximum message size on a global and per-client basis. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
                        &lt;ul&gt; 
                        &lt;li&gt;Use a client to send and receive data over MQTT.&lt;br&gt;&lt;/li&gt; 
                        &lt;li&gt;Increase the message size of the data in a development/testing environment to test the presence of maximum message size thresholds. &lt;br&gt;&lt;/li&gt; 
                        &lt;li&gt;Verify that when the MQTT broker receives a message that exceeds that threshold, it drops the packet.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.806">
              <output/>
            </source>
            <references>
              <reference name="MQTT Client and Mosquitto Broker Message Restrictions" url="https://www.ibm.com/docs/en/mapms/1_cloud?topic=messaging-restrictions-limitations"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="irrevocable-secure-boot" name="The product's processor system has an irrevocable Secure Boot process" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    The product's processor system has an irrevocable Secure Boot process, to provide assurance that it's running code that hasn't been compromised. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Rationale:&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Secure boot is a UEFI (Unified Extensible Firmware Interface) process where the Operating System boot images and code are authenticated against the hardware before they are allowed to be used in the boot process. This way, it ensures that the boot and Operating System software is the intended manufacturer version and hasn't been tampered by malware or other malicious third parties. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;div&gt;
                    In essence, the manufacturer stores their private key very securely and never reveals it to anyone. When a device is manufactured, the public key associated with the private key is placed in secure storage on the device. The bootloader code is developed using a secure development process and then a cryptographic hash of it is digitally signed with the manufacturer's private key. Whenever bootloader firmware is to be installed on the device, the hash signature is checked against the embedded public key on the device to confirm that it is a genuine hash value from that manufacturer. The firmware code is then hashed again and compared with the signed hash. If this matches (which indicates the firmware code hasn't been altered), only then will the new firmware get installed. 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Thereafter, whenever the device boots, the installed bootloader is again verified before being allowed to run. Cryptographic functions for these purposes and storage of keys can be provided by dedicated chips or modules such a Secure Access Modules (SAM) or Trusted Platform Modules (TPM). 
                    &lt;/div&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation:&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    The product's processor system has to be set up beforehand in such a way that it only authenticates code generated using trusted security credentials. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Device Secure Boot" url="https://www.iotsecurityfoundation.org/best-practice-guide-articles/device-secure-boot/"/>
            <reference name="Secure boot" url="https://docs.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-secure-boot"/>
            <reference name="The whys and hows of secure boot" url="https://www.embedded.com/the-whys-and-hows-of-secure-boot/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.806">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="data-integrity-checks" name="Use data integrity checks" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    Use data integrity checks with stamps as a good addition to message encryption. Even if the attacker can decrypt the message (and encrypt it after modification), the integrity check still fails if the message was altered. Especially if you use MQTT without TLS, data integrity checks add an additional layer of security. 
                    &lt;br&gt; 
                    &lt;br&gt;MQTT PUBLISH packets can contain a digital signature/MAC/checksum that verifies the contents of the packet. This calculated stamp is typically added to the payload (for example, at the beginning of the payload). The receiver of the packet can verify the integrity of the data by recalculating/validating the stamp. This validation assures that the message was not tampered with by a malicious third party. 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use data integrity checks with stamps. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Message Data Integrity - MQTT Security Fundamentals" url="https://www.hivemq.com/blog/mqtt-security-fundamentals-mqtt-message-data-integrity/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt; 
                        &lt;li&gt;Review the project documentation and use exploratory testing looking for parts of the application/system (components i.e. For example, input fields, databases or logs) that move, store or handle data/information.&lt;/li&gt; 
                        &lt;li&gt;For each identified component determine what type of data/information is logically acceptable and what types the application/system should guard against. Also, consider who according to the business logic is allowed to insert, update and delete data/information and in each component.&lt;/li&gt; 
                        &lt;li&gt;Attempt to insert, update or edit delete the data/information values with invalid data/information into each component (i.e. input, database, or log) by users that should not be allowed per the business logic workflow.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;br&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.806">
              <output/>
            </source>
            <references>
              <reference name="Test Integrity Checks" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="iot-hardware-protect-creds" name="Use hardware security solutions to protect sensitive information on IoT devices" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>IoT devices need an efficient secure processor to store its identity and handle authentication, and to store public and private encryption keys, and to store keys and run hashing algorithms for verifying software signatures to be able to verify software signatures. 
                    &lt;div&gt; 
                    &lt;div&gt;
                    Likely candidates for hardware security solutions to protect sensitive data in IoT devices include PUF (Physically Unclonable Functions), TPM (Trusted Platform Module), HSM (Hardware Security Module) and TrustZone.&amp;nbsp; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt; PUF uses random patterns in the silicon to differentiate chips from each other and creates a unique random number. This generated random number is used to seed a strong device ID and cryptographic keys to create a hardware root of trust.&lt;/li&gt; 
                    &lt;li&gt;Security co-processors are physically separate chips offering true isolation of private keys. A TPM offers isolation and facilities for the secure generation of cryptographic keys, and limitation of their use, and true random number generation. It also includes capabilities such as remote attestation and sealed storage. However, these powerful security capabilities come at price, usually moving deployment to higher end IoT devices.&amp;nbsp;&lt;/li&gt; 
                    &lt;li&gt;A Hardware Security Module (HSM) is another physically separate chip and likely at a lower cost compared to a TPM. Like the TPM, it safeguards and manages digital keys for strong authentication and provides crypto processing. An HSM traditionally comes in the form of a large plug-in card or a separate external device attaching to the protected device, making it somewhat less suited to an IoT device. Depending upon the perceived and likely threat vectors, an HSM may provide an effective solution.&lt;/li&gt; 
                    &lt;li&gt;Trust Zone is another single chip solution segregating execution space into secure and insecure worlds. Insecure apps are not allowed to access security-critical assets. Those same security critical assets are isolated from tampering. Like a TPM, cost moves it to higher-end devices.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use&amp;nbsp;hardware security solutions (like PUF, TPM, HSM or Trust Zone) to protect sensitive data in IoT devices. 
                    &lt;/div&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Device security" url="https://cloud.google.com/iot/docs/concepts/device-security"/>
            <reference name="Protecting the IoT with Secure Hardware" url="https://www.digikey.com/en/articles/techzone/2017/mar/protecting-the-iot-with-secure-hardware"/>
            <reference name="Securing Edge Nodes" url="https://realtimelogic.com/downloads/docs/IoT-Security-Solutions.pdf"/>
            <reference name="What is an IoT Hardware Secure Element?" url="https://cerberus-laboratories.com/blog/iot_hsms/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.806">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="mqtt-payload-encryption" name="Use MQTT payload encryption" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    TLS provides security on the network layer while MQTT payload encryption provides security on the application layer, so they can be used in conjunction without conflict. MQTT payload encryption only solves the problem of protecting application messages from eavesdroppers or untrusted MQTT clients (if no authentication mechanism is in place). An attacker can still replay the message or modify parts of the message, such as the topic, if there is no secure communication channel over TLS. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    MQTT Payload encryption is the encryption of application-specific data on the application level (typically, the MQTT PUBLISH packet payload or the CONNECT LWT payload). This approach allows end-to-end encryption of application data even on untrusted environments. While the message metadata such as the MQTT Topic stays intact, the payload of the message gets encrypted. This type of encryption is not defined in the MQTT specification and is completely application specific. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Only the payload data (private sensor information) of the message needs to be encrypted. The message fields of MQTT PUBLISH messages are not changed. The payload information is binary, so no special encoding mechanism is required while it transmits the message. Also, no specific changes are required on the broker side because the MQTT message format remains the same. Only the application that is interpreting the message payload needs to decrypt the message to understand the content. 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Advantages of Payload Encryption: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;Complete end-to-end message security.&lt;/li&gt; 
                    &lt;li&gt;Adds another layer of security for applications that are transmitting highly sensitive data.&lt;/li&gt; 
                    &lt;li&gt;Appropriate in situations where TLS cannot be used.&lt;br&gt;&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Disadvantages of Payload Encryption: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;Might not be possible to implement in devices with very low resources.&lt;/li&gt; 
                    &lt;li&gt;Messages can still be modified by attacker if a secured communication channel is not used.&lt;br&gt; &lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use payload encryption if you can't use TLS but still don't want to send your application data in plain text. Payload encryption provides an additional layer of security since all your application data is secured. 
                    &lt;br&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Securing IoT data over the network" url="https://developer.ibm.com/technologies/iot/articles/iot-trs-secure-iot-solutions2/"/>
            <reference name="Securing MQTT Systems - MQTT Security Fundamentals" url="https://www.hivemq.com/blog/mqtt-security-fundamentals-payload-encryption/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
                        &lt;ul&gt; 
                        &lt;li&gt;Use a standard packet sniffing tool such as Wireshark to inspect MQTT traffic.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;/div&gt; 
                        &lt;div&gt; 
                        &lt;ul&gt; 
                        &lt;li&gt;Check that MQTT PUBLISH messages are encrypted (not visible in clear text).&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.806">
              <output/>
            </source>
            <references>
              <reference name="Examination of vulnerabilities in Message Queuing Telemetry Transport (MQTT) in IoT Systems and implementation of countermeasures" url="https://www.researchgate.net/publication/338335323_Examination_of_vulnerabilities_in_Message_Queuing_Telemetry_Transport_MQTT_in_IoT_Systems_and_implementation_of_countermeasures"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="IR-Dataflows" source="DATAFLOW_RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:05.149">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.7.13" name="Where the MQTT protocol is used, it is protected by a TLS connection with no known cipher vulnerabilities" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where the &lt;span class="caps"&gt;MQTT&lt;/span&gt; protocol is used, it is protected by a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt; 
                    &lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br&gt;&lt;/font&gt;&lt;/b&gt; &lt;span class="caps"&gt;MQTT&lt;/span&gt; (Message Queue Telemetry Transport), is a very lightweight and widely used messaging and information exchange protocol for IoT devices throughout the world. The &lt;span class="caps"&gt;MQTT&lt;/span&gt; communication can be encrypted using &lt;span class="caps"&gt;TLS&lt;/span&gt; / &lt;span class="caps"&gt;SSL&lt;/span&gt; protocols, ensuring a secure and safe communication.&lt;/p&gt; 
                    &lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br&gt;&lt;/font&gt;&lt;/b&gt; Ensure that where the &lt;span class="caps"&gt;MQTT&lt;/span&gt; protocol is used, it is protected by a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Version 3.1.1 Plus Errata 01" url="https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html"/>
            <reference name="MQTT and CoAP, IoT Protocols" url="https://www.eclipse.org/community/eclipse_newsletter/2014/february/article2.php"/>
          </references>
          <standards>
            <standard ref="2.4.7.13" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.7.13" supportedStandardRef="iotsf-class-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:04.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHENTICATION AND AUTHORIZATION" name="Authentication and Authorization" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="cred-extract-mqtt-client" name="Attackers can extract authentication credentials from the client and use them to log in to the MQTT broker" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;div&gt;
                            An attacker who manages to extract the X.509 certificate/private key pair from a device can use the certificate/key for either eavesdropping on the communication or for exploiting an IoT solution. A unique certificate per device makes it possible to disable the exploited certificate/key by using a revocation list; however, this requires that the IoT solution can detect the exploitation in the first place. A solution that uses the same certificate/key in all devices has lost all integrity if someone manages to extract it from any single device. 
                            &lt;/div&gt; 
                            &lt;div&gt; 
                            &lt;br&gt; 
                            &lt;/div&gt; 
                            &lt;div&gt;
                            The complexity associated with extracting the certificate/key from a device greatly depends on the type of device and the components used in that device. A device based on a high-level operating system where the certificate/key is stored in a file system on an external flash memory module makes it much easier for a hacker to extract than a certificate/key for a device using internal microcontroller flash memory and where the JTAG fuse has been blown. 
                            &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="RSA Keys Found in IoT Medical Devices, Implants Prone to Attack" url="https://healthitsecurity.com/news/rsa-keys-found-in-iot-medical-devices-implants-prone-to-attack"/>
              </references>
              <weaknesses>
                <weakness ref="auth-cred-client-unprotected">
                  <countermeasures>
                    <countermeasure ref="iot-hardware-protect-creds" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="iot-hardware-protect-creds" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="mqtt-client-fake-app" name="An attacker can simulate a fake application to send commands to the MQTT client" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker can simulate a fake application to send commands to the MQTT client to get sensitive data or to change their configuration.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="mqtt-client-authz">
                  <countermeasures>
                    <countermeasure ref="enforce-app-id-validation-mqtt-client" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="enforce-app-id-validation-mqtt-client" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="firmware-update-mqtt" name="An attacker can change the firmware update link over MQTT in such way that the victim devices install malicious firmware" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker who has already known the data packets by sniffing the traffic can modify the data in transit. One of the interesting scenarios happens when attacker identifies someone who sends a link to download a firmware update for some devices over MQTT. The attacker can change the link in such way that the victim devices install malicious firmware that transforms them into botnets.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-494">
                  <countermeasures>
                    <countermeasure ref="irrevocable-secure-boot" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="irrevocable-secure-boot" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="mqtt-client-dos" name="An attacker can overload MQTT clients due to too high message frequency on subscribed topics" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker can send a large volume of dataset messages with the goal of overwhelming the subscriber, the middleware or dependent components such as CPU, TCP/IP stack, operating system, or the file system.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="mqtt-client-dos">
                  <countermeasures>
                    <countermeasure ref="data-integrity-checks" mitigation="25"/>
                    <countermeasure ref="input-val-mqtt-clients" mitigation="25"/>
                    <countermeasure ref="limit-mqtt-messages-sizes" mitigation="25"/>
                    <countermeasure ref="mqtt-client-throttling" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="data-integrity-checks" mitigation="25"/>
                <countermeasure ref="input-val-mqtt-clients" mitigation="25"/>
                <countermeasure ref="limit-mqtt-messages-sizes" mitigation="25"/>
                <countermeasure ref="mqtt-client-throttling" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-157" name="An attacker monitors information transmitted between logical or physical nodes of a network" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.7.13" mitigation="50"/>
                    <countermeasure ref="mqtt-payload-encryption" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.7.13" mitigation="50"/>
                <countermeasure ref="mqtt-payload-encryption" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="IR-Dataflows">
          <threats>
            <threat ref="CAPEC-66" name="Attackers gain unauthorised access to data and/or systems through SQL Injection attacks" state="Expose" source="DATAFLOW_RULES" edited="false" owner="fscott-admin" library="IR-Dataflows" editable="true">
              <desc>&lt;p&gt;Successful SQL Injection attacks could lead to full compromise of the database or to a partial compromise of only the data visible to the application.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Typically, these types of attacks result in unauthorized disclosure of sensitive data, but can also be used to inject spurious data into the database or to drop tables and deny services to legitimate users.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-89">
                  <countermeasures>
                    <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="e8a9c516-68b1-4793-9e01-9725255aa4be" diagramComponentId="a60c5b8a-77b0-4bb0-bb1a-da42ca3d5076" ref="cfae7e79-41b6-4c8f-b2f0-c1e323dcdba2" name="MQTT Client" desc="" library="IR-Dataflows" parentComponentRef="23662eb8-cf92-4f8e-9c0d-0dfe136c8773" componentDefinitionRef="mqtt-client">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="auth-cred-client-unprotected" name="Authentication credentials unprotected on the client side" state="0" impact="100" issueId="" issueLink="">
          <desc>Client side has insufficiently protected credentials, which allows remote attackers to obtain sensitive information via unspecified vectors.&amp;nbsp;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.591">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-494" name="Download of Code Without Integrity Check" state="0" impact="100" issueId="" issueLink="">
          <desc>The product downloads source code or an executable from a remote location and executes the
                        code without sufficiently verifying the origin and integrity of the code.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.592">
              <output/>
            </source>
            <references>
              <reference name="CWE-494: Download of Code Without Integrity Check" url="https://cwe.mitre.org/data/definitions/494.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-89" name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted and executed as SQL instead of ordinary user data. This can be leveraged to alter query logic in order to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is relatively easily detected, and often easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted automated attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.937">
              <output/>
            </source>
            <references>
              <reference name="CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" url="https://cwe.mitre.org/data/definitions/89.html"/>
              <reference name="OWASP Testing Guide" url="https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)#Standard_SQL_Injection_Testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="mqtt-client-dos" name="MQTT client does not present  protective measures against denial-of-service (DoS) attacks" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
                    MQTT client does not have measures to protect from excessively high message frequency on subscribed topics. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="mqtt-client-authz" name="MQTT client don't authorize commands coming from IoT applications" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.592">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="enforce-app-id-validation-mqtt-client" name="Enforce Application ID validation in the MQTT client" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    Application ID validation is an extra level of security between the IoT application and the device to ensure that no fake application can send commands to the device. This mechanism can be used both as startup security and as a communication security mechanism. By using this scheme, the device stores the unique ID of the IoT application and validates it when it processes the commands that are coming from the IoT application. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    If the IoT application sends an invalid unique ID with a command, the command is ignored by the device. If the device has storage capability, the IoT application unique ID can be encrypted and stored. In that case, the unique ID request is not necessary after every restart. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Enforce Application ID validation in the MQTT client 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Securing IoT devices and gateways" url="https://developer.ibm.com/technologies/iot/articles/iot-trs-secure-iot-solutions1/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.462">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="input-val-mqtt-clients" name="Implement Input Validation on MQTT clients" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    It's a good pattern to always validate inputs, no matter how trusted the environment is. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Your MQTT clients should at least validate the following: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;&lt;b&gt;MQTT topics&lt;/b&gt;: Did the client receive messages on topics the client did not subscribe to? In such a case your application should ignore the message. If you are using wildcard subscriptions, only process messages on topics you know the client can interpret.&lt;/li&gt; 
                    &lt;li&gt;&lt;b&gt;MQTT message payload&lt;/b&gt;: The payload of MQTT messages is always binary. The structure of the data in the payload is typically defined on the application level. Always make sure you can parse the actual message. So if you are expecting a JSON payload but the actual payload is in XML, your parser will probably have a hard time interpreting the messages. So always validate if your application can handle the input, otherwise malicious MQTT clients could craft MQTT packets that your subscribers can't handle.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Your MQTT Applications: Are they resilient enough?" url="https://www.hivemq.com/blog/are-your-mqtt-applications-resilient-enough/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.462">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="mqtt-client-throttling" name="Implement MQTT throttling on the client-side" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Most MQTT client applications are not designed for handling huge amounts of MQTT messages per second. It's important to know your client's load limitations and then throttle the message ingestion rate to a limit that doesn't overwhelm your client. Such an implementation typically stops to read from the socket as soon as a specific bytes per second or messages per second rate threshold is exceeded. So even if the broker tries to send lots of messages, TCP backpressure mechanisms take effect and your client won't be overwhelmed. If this is not possible with your client library, you should think about implementing load shedding, which means you throw away messages that you can't handle. This is not optimal but certainly better than constantly crashing your client. 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Throttle the message ingestion rate to a limit that doesn't overwhelm your client. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Throttling MQTT Data" url="https://mqtt.cool/throttling-mqtt-data/"/>
            <reference name="Your MQTT Applications: Are they resilient enough?" url="https://www.hivemq.com/blog/are-your-mqtt-applications-resilient-enough/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.463">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="limit-mqtt-messages-sizes" name="Set a limit for MQTT message sizes" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    MQTT defines a maximum message size of 256MB. In most MQTT deployment scenarios, messages are often smaller than a kilobyte. If you are familiar with your usage scenario and you know the maximum message size that can occur, it makes sense to decrease the maximum allowed message size to that limit. If no limit is set, it is possible for malicious MQTT clients to send large messages (which can result in excessive memory consumption and unneeded bandwidth usage). 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Limit the maximum message size on a global and per-client basis. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
                        &lt;ul&gt; 
                        &lt;li&gt;Use a client to send and receive data over MQTT.&lt;br&gt;&lt;/li&gt; 
                        &lt;li&gt;Increase the message size of the data in a development/testing environment to test the presence of maximum message size thresholds. &lt;br&gt;&lt;/li&gt; 
                        &lt;li&gt;Verify that when the MQTT broker receives a message that exceeds that threshold, it drops the packet.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.462">
              <output/>
            </source>
            <references>
              <reference name="MQTT Client and Mosquitto Broker Message Restrictions" url="https://www.ibm.com/docs/en/mapms/1_cloud?topic=messaging-restrictions-limitations"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="irrevocable-secure-boot" name="The product's processor system has an irrevocable Secure Boot process" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    The product's processor system has an irrevocable Secure Boot process, to provide assurance that it's running code that hasn't been compromised. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Rationale:&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Secure boot is a UEFI (Unified Extensible Firmware Interface) process where the Operating System boot images and code are authenticated against the hardware before they are allowed to be used in the boot process. This way, it ensures that the boot and Operating System software is the intended manufacturer version and hasn't been tampered by malware or other malicious third parties. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;div&gt;
                    In essence, the manufacturer stores their private key very securely and never reveals it to anyone. When a device is manufactured, the public key associated with the private key is placed in secure storage on the device. The bootloader code is developed using a secure development process and then a cryptographic hash of it is digitally signed with the manufacturer's private key. Whenever bootloader firmware is to be installed on the device, the hash signature is checked against the embedded public key on the device to confirm that it is a genuine hash value from that manufacturer. The firmware code is then hashed again and compared with the signed hash. If this matches (which indicates the firmware code hasn't been altered), only then will the new firmware get installed. 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Thereafter, whenever the device boots, the installed bootloader is again verified before being allowed to run. Cryptographic functions for these purposes and storage of keys can be provided by dedicated chips or modules such a Secure Access Modules (SAM) or Trusted Platform Modules (TPM). 
                    &lt;/div&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation:&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    The product's processor system has to be set up beforehand in such a way that it only authenticates code generated using trusted security credentials. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Device Secure Boot" url="https://www.iotsecurityfoundation.org/best-practice-guide-articles/device-secure-boot/"/>
            <reference name="Secure boot" url="https://docs.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-secure-boot"/>
            <reference name="The whys and hows of secure boot" url="https://www.embedded.com/the-whys-and-hows-of-secure-boot/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.462">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="data-integrity-checks" name="Use data integrity checks" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    Use data integrity checks with stamps as a good addition to message encryption. Even if the attacker can decrypt the message (and encrypt it after modification), the integrity check still fails if the message was altered. Especially if you use MQTT without TLS, data integrity checks add an additional layer of security. 
                    &lt;br&gt; 
                    &lt;br&gt;MQTT PUBLISH packets can contain a digital signature/MAC/checksum that verifies the contents of the packet. This calculated stamp is typically added to the payload (for example, at the beginning of the payload). The receiver of the packet can verify the integrity of the data by recalculating/validating the stamp. This validation assures that the message was not tampered with by a malicious third party. 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use data integrity checks with stamps. 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Message Data Integrity - MQTT Security Fundamentals" url="https://www.hivemq.com/blog/mqtt-security-fundamentals-mqtt-message-data-integrity/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt; 
                        &lt;li&gt;Review the project documentation and use exploratory testing looking for parts of the application/system (components i.e. For example, input fields, databases or logs) that move, store or handle data/information.&lt;/li&gt; 
                        &lt;li&gt;For each identified component determine what type of data/information is logically acceptable and what types the application/system should guard against. Also, consider who according to the business logic is allowed to insert, update and delete data/information and in each component.&lt;/li&gt; 
                        &lt;li&gt;Attempt to insert, update or edit delete the data/information values with invalid data/information into each component (i.e. input, database, or log) by users that should not be allowed per the business logic workflow.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;br&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.462">
              <output/>
            </source>
            <references>
              <reference name="Test Integrity Checks" url="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="iot-hardware-protect-creds" name="Use hardware security solutions to protect sensitive information on IoT devices" issueId="" issueLink="" platform="" cost="0" risk="56" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>IoT devices need an efficient secure processor to store its identity and handle authentication, and to store public and private encryption keys, and to store keys and run hashing algorithms for verifying software signatures to be able to verify software signatures. 
                    &lt;div&gt; 
                    &lt;div&gt;
                    Likely candidates for hardware security solutions to protect sensitive data in IoT devices include PUF (Physically Unclonable Functions), TPM (Trusted Platform Module), HSM (Hardware Security Module) and TrustZone.&amp;nbsp; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt; PUF uses random patterns in the silicon to differentiate chips from each other and creates a unique random number. This generated random number is used to seed a strong device ID and cryptographic keys to create a hardware root of trust.&lt;/li&gt; 
                    &lt;li&gt;Security co-processors are physically separate chips offering true isolation of private keys. A TPM offers isolation and facilities for the secure generation of cryptographic keys, and limitation of their use, and true random number generation. It also includes capabilities such as remote attestation and sealed storage. However, these powerful security capabilities come at price, usually moving deployment to higher end IoT devices.&amp;nbsp;&lt;/li&gt; 
                    &lt;li&gt;A Hardware Security Module (HSM) is another physically separate chip and likely at a lower cost compared to a TPM. Like the TPM, it safeguards and manages digital keys for strong authentication and provides crypto processing. An HSM traditionally comes in the form of a large plug-in card or a separate external device attaching to the protected device, making it somewhat less suited to an IoT device. Depending upon the perceived and likely threat vectors, an HSM may provide an effective solution.&lt;/li&gt; 
                    &lt;li&gt;Trust Zone is another single chip solution segregating execution space into secure and insecure worlds. Insecure apps are not allowed to access security-critical assets. Those same security critical assets are isolated from tampering. Like a TPM, cost moves it to higher-end devices.&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use&amp;nbsp;hardware security solutions (like PUF, TPM, HSM or Trust Zone) to protect sensitive data in IoT devices. 
                    &lt;/div&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Device security" url="https://cloud.google.com/iot/docs/concepts/device-security"/>
            <reference name="Protecting the IoT with Secure Hardware" url="https://www.digikey.com/en/articles/techzone/2017/mar/protecting-the-iot-with-secure-hardware"/>
            <reference name="Securing Edge Nodes" url="https://realtimelogic.com/downloads/docs/IoT-Security-Solutions.pdf"/>
            <reference name="What is an IoT Hardware Secure Element?" url="https://cerberus-laboratories.com/blog/iot_hsms/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.462">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="mqtt-payload-encryption" name="Use MQTT payload encryption" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                    TLS provides security on the network layer while MQTT payload encryption provides security on the application layer, so they can be used in conjunction without conflict. MQTT payload encryption only solves the problem of protecting application messages from eavesdroppers or untrusted MQTT clients (if no authentication mechanism is in place). An attacker can still replay the message or modify parts of the message, such as the topic, if there is no secure communication channel over TLS. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    MQTT Payload encryption is the encryption of application-specific data on the application level (typically, the MQTT PUBLISH packet payload or the CONNECT LWT payload). This approach allows end-to-end encryption of application data even on untrusted environments. While the message metadata such as the MQTT Topic stays intact, the payload of the message gets encrypted. This type of encryption is not defined in the MQTT specification and is completely application specific. 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Only the payload data (private sensor information) of the message needs to be encrypted. The message fields of MQTT PUBLISH messages are not changed. The payload information is binary, so no special encoding mechanism is required while it transmits the message. Also, no specific changes are required on the broker side because the MQTT message format remains the same. Only the application that is interpreting the message payload needs to decrypt the message to understand the content. 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Advantages of Payload Encryption: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;Complete end-to-end message security.&lt;/li&gt; 
                    &lt;li&gt;Adds another layer of security for applications that are transmitting highly sensitive data.&lt;/li&gt; 
                    &lt;li&gt;Appropriate in situations where TLS cannot be used.&lt;br&gt;&lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Disadvantages of Payload Encryption: 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;ul&gt; 
                    &lt;li&gt;Might not be possible to implement in devices with very low resources.&lt;/li&gt; 
                    &lt;li&gt;Messages can still be modified by attacker if a secured communication channel is not used.&lt;br&gt; &lt;/li&gt; 
                    &lt;/ul&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;br&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt; 
                    &lt;b&gt;Remediation&lt;/b&gt; 
                    &lt;/div&gt; 
                    &lt;div&gt;
                    Use payload encryption if you can't use TLS but still don't want to send your application data in plain text. Payload encryption provides an additional layer of security since all your application data is secured. 
                    &lt;br&gt; 
                    &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="Securing IoT data over the network" url="https://developer.ibm.com/technologies/iot/articles/iot-trs-secure-iot-solutions2/"/>
            <reference name="Securing MQTT Systems - MQTT Security Fundamentals" url="https://www.hivemq.com/blog/mqtt-security-fundamentals-payload-encryption/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt; 
                        &lt;ul&gt; 
                        &lt;li&gt;Use a standard packet sniffing tool such as Wireshark to inspect MQTT traffic.&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;/div&gt; 
                        &lt;div&gt; 
                        &lt;ul&gt; 
                        &lt;li&gt;Check that MQTT PUBLISH messages are encrypted (not visible in clear text).&lt;/li&gt; 
                        &lt;/ul&gt; 
                        &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.463">
              <output/>
            </source>
            <references>
              <reference name="Examination of vulnerabilities in Message Queuing Telemetry Transport (MQTT) in IoT Systems and implementation of countermeasures" url="https://www.researchgate.net/publication/338335323_Examination_of_vulnerabilities_in_Message_Queuing_Telemetry_Transport_MQTT_in_IoT_Systems_and_implementation_of_countermeasures"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="28" state="Recommended" owner="fscott-admin" library="IR-Dataflows" source="DATAFLOW_RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.872">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IOT2.4.7.13" name="Where the MQTT protocol is used, it is protected by a TLS connection with no known cipher vulnerabilities" issueId="" issueLink="" platform="" cost="1" risk="28" state="Recommended" owner="fscott-admin" library="iot-security-compliance-framework" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Where the &lt;span class="caps"&gt;MQTT&lt;/span&gt; protocol is used, it is protected by a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt; 
                    &lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Rationale:&lt;br&gt;&lt;/font&gt;&lt;/b&gt; &lt;span class="caps"&gt;MQTT&lt;/span&gt; (Message Queue Telemetry Transport), is a very lightweight and widely used messaging and information exchange protocol for IoT devices throughout the world. The &lt;span class="caps"&gt;MQTT&lt;/span&gt; communication can be encrypted using &lt;span class="caps"&gt;TLS&lt;/span&gt; / &lt;span class="caps"&gt;SSL&lt;/span&gt; protocols, ensuring a secure and safe communication.&lt;/p&gt; 
                    &lt;p&gt;&lt;b&gt;&lt;font size="4"&gt;Remediation:&lt;br&gt;&lt;/font&gt;&lt;/b&gt; Ensure that where the &lt;span class="caps"&gt;MQTT&lt;/span&gt; protocol is used, it is protected by a &lt;span class="caps"&gt;TLS&lt;/span&gt; connection with no known cipher vulnerabilities.&lt;/p&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="MQTT Version 3.1.1 Plus Errata 01" url="https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html"/>
            <reference name="MQTT and CoAP, IoT Protocols" url="https://www.eclipse.org/community/eclipse_newsletter/2014/february/article2.php"/>
          </references>
          <standards>
            <standard ref="2.4.7.13" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.7.13" supportedStandardRef="iotsf-class-1"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-04-11T12:50:10.450">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="AUTHENTICATION AND AUTHORIZATION" name="Authentication and Authorization" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="cred-extract-mqtt-client" name="Attackers can extract authentication credentials from the client and use them to log in to the MQTT broker" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;div&gt;
                            An attacker who manages to extract the X.509 certificate/private key pair from a device can use the certificate/key for either eavesdropping on the communication or for exploiting an IoT solution. A unique certificate per device makes it possible to disable the exploited certificate/key by using a revocation list; however, this requires that the IoT solution can detect the exploitation in the first place. A solution that uses the same certificate/key in all devices has lost all integrity if someone manages to extract it from any single device. 
                            &lt;/div&gt; 
                            &lt;div&gt; 
                            &lt;br&gt; 
                            &lt;/div&gt; 
                            &lt;div&gt;
                            The complexity associated with extracting the certificate/key from a device greatly depends on the type of device and the components used in that device. A device based on a high-level operating system where the certificate/key is stored in a file system on an external flash memory module makes it much easier for a hacker to extract than a certificate/key for a device using internal microcontroller flash memory and where the JTAG fuse has been blown. 
                            &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="RSA Keys Found in IoT Medical Devices, Implants Prone to Attack" url="https://healthitsecurity.com/news/rsa-keys-found-in-iot-medical-devices-implants-prone-to-attack"/>
              </references>
              <weaknesses>
                <weakness ref="auth-cred-client-unprotected">
                  <countermeasures>
                    <countermeasure ref="iot-hardware-protect-creds" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="iot-hardware-protect-creds" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="mqtt-client-fake-app" name="An attacker can simulate a fake application to send commands to the MQTT client" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker can simulate a fake application to send commands to the MQTT client to get sensitive data or to change their configuration.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="mqtt-client-authz">
                  <countermeasures>
                    <countermeasure ref="enforce-app-id-validation-mqtt-client" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="enforce-app-id-validation-mqtt-client" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="NETWORKING" name="Networking" desc="" library="iot-security-compliance-framework">
          <threats>
            <threat ref="CAPEC-157" name="An attacker monitors information transmitted between logical or physical nodes of a network" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>&lt;p&gt;An attacker monitors information transmitted between logical or physical nodes of a network. The attacker need not be able to prevent reception or change content but must simply be able to observe and read the traffic. The attacker might precipitate or indirectly influence the content of the observed transaction, but the attacker is never the intended recipient of the information. Any transmission medium can theoretically be sniffed if the attacker can listen to the contents between the sender and recipient.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="IOT2.4.7.13" mitigation="50"/>
                    <countermeasure ref="mqtt-payload-encryption" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="IOT2.4.7.13" mitigation="50"/>
                <countermeasure ref="mqtt-payload-encryption" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="firmware-update-mqtt" name="An attacker can change the firmware update link over MQTT in such way that the victim devices install malicious firmware" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker who has already known the data packets by sniffing the traffic can modify the data in transit. One of the interesting scenarios happens when attacker identifies someone who sends a link to download a firmware update for some devices over MQTT. The attacker can change the link in such way that the victim devices install malicious firmware that transforms them into botnets.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-494">
                  <countermeasures>
                    <countermeasure ref="irrevocable-secure-boot" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="irrevocable-secure-boot" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="mqtt-client-dos" name="An attacker can overload MQTT clients due to too high message frequency on subscribed topics" state="Expose" source="RULES" edited="false" owner="fscott-admin" library="iot-security-compliance-framework" editable="true">
              <desc>An attacker can send a large volume of dataset messages with the goal of overwhelming the subscriber, the middleware or dependent components such as CPU, TCP/IP stack, operating system, or the file system.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="mqtt-client-dos">
                  <countermeasures>
                    <countermeasure ref="data-integrity-checks" mitigation="25"/>
                    <countermeasure ref="input-val-mqtt-clients" mitigation="25"/>
                    <countermeasure ref="limit-mqtt-messages-sizes" mitigation="25"/>
                    <countermeasure ref="mqtt-client-throttling" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="data-integrity-checks" mitigation="25"/>
                <countermeasure ref="input-val-mqtt-clients" mitigation="25"/>
                <countermeasure ref="limit-mqtt-messages-sizes" mitigation="25"/>
                <countermeasure ref="mqtt-client-throttling" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="IR-Dataflows">
          <threats>
            <threat ref="CAPEC-66" name="Attackers gain unauthorised access to data and/or systems through SQL Injection attacks" state="Expose" source="DATAFLOW_RULES" edited="false" owner="fscott-admin" library="IR-Dataflows" editable="true">
              <desc>&lt;p&gt;Successful SQL Injection attacks could lead to full compromise of the database or to a partial compromise of only the data visible to the application.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Typically, these types of attacks result in unauthorized disclosure of sensitive data, but can also be used to inject spurious data into the database or to drop tables and deny services to legitimate users.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-89">
                  <countermeasures>
                    <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>
