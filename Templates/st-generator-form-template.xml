<?xml version="1.0" encoding="UTF-8"?>
<template ref="st-generator-form-template" name="st-generator-form template" tags="Community">
  <desc/>
  <diagram draft="false">
    <schema></schema>
  </diagram>
  <trustZones>
    <trustZone ref="private-secured" uuid="2ab4effa-40b7-4cd2-ba81-8247d29a6f2d" name="Private Secured" desc="A secured zone within a trusted private zone" trustRating="40"/>
  </trustZones>
  <questions/>
  <assets/>
  <settings/>
  <dataflows>
    <dataflow name="Studio -&gt; API gateway" ref="0e3ee209-6133-41fe-ab7d-477f5ecd4274" source="1109d524-d643-4eca-92e2-38b9ccf070f7" target="c31bf547-b418-44fb-8d64-f592cbea254d">
      <assets/>
      <tags>
        <tag tag="Access Token"/>
        <tag tag="HTTP"/>
        <tag tag="JSON"/>
      </tags>
    </dataflow>
    <dataflow name="API gateway -&gt; Login" ref="128a0e8b-be64-4dc3-a9ab-248d91505aba" source="c31bf547-b418-44fb-8d64-f592cbea254d" target="d8b0b4ff-d891-43e6-8637-fa76bed6da36">
      <assets/>
      <tags>
        <tag tag="HTTP"/>
        <tag tag="JSON"/>
        <tag tag="xml"/>
      </tags>
    </dataflow>
    <dataflow name="svc-common-form-generator -&gt; Redis Server" ref="1ca703ba-81ea-4c60-a8cc-c5d5bb9e3a34" source="79ecf6b7-7801-4bf8-8946-781e16059de9" target="85a95b22-8293-49eb-be6d-aaa441e54e11">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="svc-common-form-generator -&gt; svc-biz-sed-service-invoke" ref="464b750a-2ac9-425f-b413-bb00f25ba1a6" source="79ecf6b7-7801-4bf8-8946-781e16059de9" target="0dd85c2b-afa1-409c-b6ff-39941d67abf8">
      <assets/>
      <tags>
        <tag tag="Access Token"/>
        <tag tag="JSON"/>
        <tag tag="RESTapi"/>
      </tags>
    </dataflow>
    <dataflow name="Migration microservices -&gt; PostgreSQL" ref="51514565-8117-4ea8-8dc7-70c18c418206" source="159009df-8374-4463-8b8c-8f8c38f279ae" target="df661557-3440-41ad-a563-621fc3f3e0cb">
      <assets/>
      <tags>
        <tag tag="JDBC"/>
      </tags>
    </dataflow>
    <dataflow name="OAuth2 Authorization Server -&gt; Studio" ref="52cc2d18-73be-4fd8-81ae-de34ab2e1691" source="efa06989-4844-444d-9db0-effc951e280c" target="1109d524-d643-4eca-92e2-38b9ccf070f7">
      <assets/>
      <tags>
        <tag tag="HTTP"/>
        <tag tag="JSON"/>
        <tag tag="return access_token"/>
      </tags>
    </dataflow>
    <dataflow name="Studio -&gt; svc-common-form-generator" ref="67a745eb-44af-497b-b991-9f1133e112f6" source="b0cec9ef-1745-4dcf-9c27-597a3d8c5c1a" target="1109d524-d643-4eca-92e2-38b9ccf070f7">
      <assets/>
      <tags>
        <tag tag="HTTPS"/>
        <tag tag="JSON"/>
        <tag tag="xml"/>
      </tags>
    </dataflow>
    <dataflow name="svc-biz-sed-service-invoke -&gt; PostgreSQL" ref="7456e892-b3ab-4dc1-97ad-2a7bc40741a4" source="0dd85c2b-afa1-409c-b6ff-39941d67abf8" target="df661557-3440-41ad-a563-621fc3f3e0cb">
      <assets/>
      <tags>
        <tag tag="JDBC"/>
      </tags>
    </dataflow>
    <dataflow name="svc-common-form-generator -&gt; PostgreSQL" ref="74daacaf-cf86-4afe-b614-e637ae8956cb" source="79ecf6b7-7801-4bf8-8946-781e16059de9" target="df661557-3440-41ad-a563-621fc3f3e0cb">
      <assets/>
      <tags>
        <tag tag="JDBC"/>
      </tags>
    </dataflow>
    <dataflow name="RESTful Web Service -&gt; API gateway" ref="7916d7d8-af28-432b-b4f4-440d5aa0ec5a" source="54c2adc5-954b-49bd-9f1c-295b16a74473" target="c31bf547-b418-44fb-8d64-f592cbea254d">
      <assets/>
      <tags>
        <tag tag="Access Token"/>
        <tag tag="HTTPS"/>
        <tag tag="JSON"/>
        <tag tag="RESTapi"/>
        <tag tag="xml"/>
      </tags>
    </dataflow>
    <dataflow name="Login -&gt; OAuth2 Authorization Server" ref="9819e3f7-25ce-4474-a4a2-60c023607a8c" source="d8b0b4ff-d891-43e6-8637-fa76bed6da36" target="efa06989-4844-444d-9db0-effc951e280c">
      <assets/>
      <tags>
        <tag tag="HTTP"/>
        <tag tag="JSON"/>
      </tags>
    </dataflow>
    <dataflow name="Studio -&gt; Web UI" ref="d81833f0-2caa-41f5-b48f-92b10a6a2b75" source="1109d524-d643-4eca-92e2-38b9ccf070f7" target="b0cec9ef-1745-4dcf-9c27-597a3d8c5c1a">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="Redis Server -&gt; svc-common-form-generator" ref="db931bb0-5ea1-43e5-a0bf-c9855f686631" source="85a95b22-8293-49eb-be6d-aaa441e54e11" target="79ecf6b7-7801-4bf8-8946-781e16059de9">
      <assets/>
      <tags/>
    </dataflow>
    <dataflow name="svc-common-form-generator -&gt; API gateway" ref="e206a0b9-3e6e-47ee-a1a6-d18fd9edad36" source="79ecf6b7-7801-4bf8-8946-781e16059de9" target="1109d524-d643-4eca-92e2-38b9ccf070f7">
      <assets/>
      <tags>
        <tag tag="HTTP"/>
        <tag tag="JSON"/>
        <tag tag="xml"/>
      </tags>
    </dataflow>
    <dataflow name="API gateway -&gt; svc-common-form-generator" ref="eb8df61f-d0a4-491b-a5b8-f43875ac4d46" source="c31bf547-b418-44fb-8d64-f592cbea254d" target="79ecf6b7-7801-4bf8-8946-781e16059de9">
      <assets/>
      <tags>
        <tag tag="Access Token"/>
        <tag tag="HTTP"/>
        <tag tag="JSON"/>
        <tag tag="xml"/>
      </tags>
    </dataflow>
    <dataflow name="svc-biz-sed-service-invoke -&gt; svc-common-form-generator" ref="f936b547-43b5-4d90-93f8-9eb696c5a2a1" source="0dd85c2b-afa1-409c-b6ff-39941d67abf8" target="79ecf6b7-7801-4bf8-8946-781e16059de9">
      <assets/>
      <tags>
        <tag tag="HTTP"/>
        <tag tag="JSON"/>
      </tags>
    </dataflow>
  </dataflows>
  <customFields/>
  <components>
    <component uuid="7a5e9411-bc0d-4aee-ad35-341bf4d0013c" diagramComponentId="07edaf38-85d5-4fc2-97a1-ffffc921c8c4" ref="efa06989-4844-444d-9db0-effc951e280c" name="OAuth2 Authorization Server" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="oauth2-authorization-server">
      <tags/>
      <questions>
        <question ref="oauth2.0.usage.yes" answer="true" manuallyModified="false"/>
        <question ref="oauth2.role.authorization.server" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="RFC6819-4.4.3.1" name="Accidental exposure of passwords at client site" state="0" impact="100" issueId="" issueLink="">
          <desc>If the client does not provide enough protection, an attacker or
   disgruntled employee could retrieve the passwords for a user.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.341">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated, in violation of the intended security policy.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.600">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.5" name="Authorization code phishing" state="0" impact="100" issueId="" issueLink="">
          <desc>A hostile party could impersonate the client site and get access to the authorization "code". This could be achieved using DNS or ARP spoofing. This applies to clients, which are web applications; thus, the redirect URI is not local to the host where the user's browser is running.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: This affects web applications and may lead to a disclosure of authorization "codes" and, potentially, the corresponding access and refresh tokens. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.161">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.600">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.3.3" name="Client obtains refresh token through automatic authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>All interaction with the resource owner is performed by the client. Thus it might, intentionally or unintentionally, happen that the client obtains a long-term authorization represented by a refresh token even if the resource owner did not intend so.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.160">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100" issueId="" issueLink="">
          <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.920">
              <output/>
            </source>
            <references>
              <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-502" name="Deserialization of Untrusted Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The application deserializes untrusted data without sufficiently verifying that the resulting
                        data will be valid.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.600">
              <output/>
            </source>
            <references>
              <reference name="CWE-502: Deserialization of Untrusted Data" url="https://cwe.mitre.org/data/definitions/502.html"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.12" name="DoS using manufactured authorization codes" state="0" impact="100" issueId="" issueLink="">
          <desc>An attacker who owns a botnet can locate the redirect URIs of clients that listen on HTTP, access them with random authorization "codes", and cause a large number of HTTPS connections to be concentrated onto the authorization server. This can result in a denial-of-service (DoS) attack on the authorization server. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This attack can still be effective even when CSRF defense/the "state" parameter (see 
 &lt;a href="https://tools.ietf.org/html/rfc6819#section-4.4.1.8"&gt;Section 4.4.1.8&lt;/a&gt;) is deployed on the client side. With such a defense, the attacker might need to incur an additional HTTP request to obtain a valid CSRF code/"state" parameter. This apparently cuts down the effectiveness of the attack by a factor of 2. However, if the HTTPS/HTTP cost ratio is higher than 2 (the cost factor is estimated to be around 3.5x at [ 
 &lt;a href="https://tools.ietf.org/html/rfc6819#ref-SSL-Latency" title="&amp;quot;SSL handshake latency and HTTPS optimizations&amp;quot;"&gt;SSL-Latency&lt;/a&gt;]), the attacker still achieves a magnification of resource utilization at the expense of the authorization server. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Impact: There are a few effects that the attacker can accomplish with this OAuth flow that they cannot easily achieve otherwise. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Connection laundering: With the clients as the relay between the attacker and the authorization server, the authorization server learns little or no information about the identity of the attacker. Defenses such as rate-limiting on the offending attacker machines are less effective because it is difficult to identify the attacking machines. Although an attacker could also launder its connections through an anonymizing system such as Tor, the effectiveness of that approach depends on the capacity of the anonymizing system. On the other hand, a potentially large number of OAuth clients could be utilized for this attack.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Asymmetric resource utilization: The attacker incurs the cost of an HTTP connection and causes an HTTPS connection to be made on the authorization server; the attacker can coordinate the timing of such HTTPS connections across multiple clients relatively easily. Although the attacker could achieve something similar, say, by including an iFrame pointing to the HTTPS URL of the authorization server in an HTTP web page and luring web users to visit that page, timing attacks using such a scheme may be more difficult, as it seems nontrivial to synchronize a large number of users to simultaneously visit a particular site under the attacker's control.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.160">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.1" name="Eavesdropped or leaked authorization codes" state="0" impact="100" issueId="" issueLink="">
          <desc>An attacker could try to eavesdrop transmission of the authorization "code" between the authorization server and client. Furthermore, authorization "codes" are passed via the browser, which may unintentionally leak those codes to untrusted web sites and attackers in different ways: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Referrer headers: Browsers frequently pass a "referer" header when a web page embeds content, or when a user travels from one web page to another web page. These referrer headers may be sent even when the origin site does not trust the destination site. The referrer header is commonly logged for traffic analysis purposes.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Request logs: Web server request logs commonly include query parameters on requests.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Open redirectors: Web sites sometimes need to send users to another destination via a redirector. Open redirectors pose a particular risk to web-based delegation protocols because the redirector can leak verification codes to untrusted destination sites.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Browser history: Web browsers commonly record visited URLs in the browser history. Another user of the same web browser may be able to view URLs that were visited by previous users.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.159">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.11" name="Exhausted resources by a DoS attack" state="0" impact="100" issueId="" issueLink="">
          <desc>If an authorization server includes a nontrivial amount of entropy in authorization "codes" or access tokens (limiting the number of possible codes/tokens) and automatically grants either without user intervention and has no limit on codes or access tokens per user, an attacker could exhaust the pool of authorization "codes" by repeatedly directing the user's browser to request authorization "codes" or access tokens.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.161">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-460" name="Improper Cleanup on Thrown Exception" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:40.599">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-841" name="Improper Enforcement of Behavioral Workflow" state="0" impact="100" issueId="" issueLink="">
          <desc>The software supports a session in which more than one behavior
                        must be performed by an actor, but it does not properly ensure that the actor
                        performs the behaviors in the required sequence.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.600">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-173" name="Improper Handling of Alternative Encoding" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not properly handle cases in which the input uses an alternative encoding scheme that is valid for the control sphere to which the input is being sent.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:39.920">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-235" name="Improper Handling of Extra Parameters" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:39.920">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-22" name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Many file operations are intended to take place within a restricted directory. By using special elements such as ".." and "/" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the "../" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Path traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.919">
              <output/>
            </source>
            <references>
              <reference name="CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" url="https://cwe.mitre.org/data/definitions/22.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-347" name="Improper Verification of Cryptographic Signature" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not verify, or incorrectly verifies, the cryptographic signature for data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.342">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-915" name="Improperly Controlled Modification of Dynamically-Determined Object Attributes" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability. This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, auto-binding, or object injection.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:39.920">
              <output/>
            </source>
            <references>
              <reference name="CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes" url="https://cwe.mitre.org/data/definitions/915.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100" issueId="" issueLink="">
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.598">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.921">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-548" name="Information Exposure Through Directory Listing" state="0" impact="100" issueId="" issueLink="">
          <desc>A directory listing is inappropriately exposed, yielding
                        potentially sensitive information to attackers.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.920">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.920">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Improper Input Validation" url="https://cwe.mitre.org/data/definitions/20.html"/>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.6.3" name="Insufficient Token Expiration" state="0" impact="100" issueId="" issueLink="">
          <desc>Where the token is a handle, the attacker may attempt to guess the access token values based on knowledge they have from other access tokens.
 Impact: Access to a single user's data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.342">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:38.516">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.7" name="Leaked authorization code through counterfeit client" state="0" impact="100" issueId="" issueLink="">
          <desc>The attacker leverages the authorization "code" grant type in an attempt to get another user (victim) to log in, authorize access to his/her resources, and subsequently obtain the authorization "code" and inject it into a client application using the attacker's account. The goal is to associate an access authorization for resources of the victim with the user account of the attacker on a client site. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The attacker abuses an existing client application and combines it with his own counterfeit client web site. The attacker depends on the victim expecting the client application to request access to a certain resource server. The victim, seeing only a normal request from an expected application, approves the request. The attacker then uses the victim's authorization to gain access to the information unknowingly authorized by the victim. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The attacker conducts the following flow:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;The attacker accesses the client web site (or application) and initiates data access to a particular resource server. The client web site in turn initiates an authorization request to the resource server's authorization server. Instead of proceeding with the authorization process, the attacker modifies the authorization server end-user authorization URL as constructed by the client to include a redirect URI parameter referring to a web site under his control (attacker's web site).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The attacker tricks another user (the victim) into opening that modified end-user authorization URI and authorizing access (e.g., via an email link or blog link). The way the attacker achieves this goal is out of scope.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Having clicked the link, the victim is requested to authenticate and authorize the client site to have access.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;After completion of the authorization process, the authorization server redirects the user agent to the attacker's web site instead of the original client web site.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The attacker obtains the authorization "code" from his web site by means that are out of scope of this document.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;He then constructs a redirect URI to the target web site (or application) based on the original authorization request's redirect URI and the newly obtained authorization "code", and directs his user agent to this URL. The authorization "code" is injected into the original client site (or application).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The client site uses the authorization "code" to fetch a token from the authorization server and associates this token with the attacker's user account on this site.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The attacker may now access the victim's resources using the client site.&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;Impact: The attacker gains access to the victim's resources as associated with his account on the client site. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.160">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-272" name="Least Privilege Violation" state="0" impact="100" issueId="" issueLink="">
          <desc>The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.600">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.4" name="Malicious client obtains authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>A malicious client could pretend to be a valid client and obtain an access authorization in this way. The malicious client could even utilize screen-scraping techniques in order to simulate a user's consent in the authorization flow. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Assumption: It is not the task of the authorization server to protect the end-user's device from malicious software. This is the responsibility of the platform running on the particular device, probably in cooperation with other components of the respective ecosystem (e.g., an application management infrastructure). The sole responsibility of the authorization server is to control access to the end-user's resources maintained in resource servers and to prevent unauthorized access to them via the OAuth protocol. Based on this assumption, the following countermeasures are available to cope with the threat. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.160">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.1.1" name="Obtaining client secrets" state="0" impact="100" issueId="" issueLink="">
          <desc>The attacker could try to get access to the secret of a particular client in order to:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;replay its refresh tokens and authorization "codes", or&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;obtain tokens on behalf of the attacked client with the privileges of that "client_id" acting as an instance of the client.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;The resulting impact would be the following:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Client authentication of access to the authorization server can be bypassed.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Stolen refresh tokens or authorization "codes" can be replayed.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;Depending on the client category, the following attacks could be utilized to obtain the client secret.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Attack: Obtain Secret From Source Code or Binary:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This applies for all client types. For open source projects, secrets can be extracted directly from source code in their public repositories. Secrets can be extracted from application binaries just as easily when the published source is not available to the attacker. Even if an application takes significant measures to obfuscate secrets in their application distribution, one should consider that the secret can still be reverse-engineered by anyone with access to a complete functioning application bundle or binary. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.160">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.2.1" name="Password phishing by counterfeit authorization server" state="0" impact="100" issueId="" issueLink="">
          <desc>OAuth makes no attempt to verify the authenticity of the
   authorization server.  A hostile party could take advantage of this
   by intercepting the client's requests and returning misleading or
   otherwise incorrect responses.  This could be achieved using DNS or
   Address Resolution Protocol (ARP) spoofing.  Wide deployment of OAuth
   and similar protocols may cause users to become inured to the
   practice of being redirected to web sites where they are asked to
   enter their passwords.  If users are not careful to verify the
   authenticity of these web sites before entering their credentials, it
   will be possible for attackers to exploit this practice to steal
   users' passwords.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.342">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-350" name="Reliance on Reverse DNS Resolution for a Security-Critical Action" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.654">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.6.2" name="Replay of authorized resource server requests" state="0" impact="100" issueId="" issueLink="">
          <desc>An attacker could attempt to replay valid requests in order to obtain
   or to modify/destroy user data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.160">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.4.1.10" name="Resource owner impersonation" state="0" impact="100" issueId="" issueLink="">
          <desc>When a client requests access to protected resources, the authorization flow normally involves the resource owner's explicit response to the access request, either granting or denying access to the protected resources. A malicious client can exploit knowledge of the structure of this flow in order to gain authorization without the resource owner's consent, by transmitting the necessary requests programmatically and simulating the flow against the authorization server. That way, the client may gain access to the victim's resources without her approval. An authorization server will be vulnerable to this threat if it uses non-interactive authentication mechanisms or splits the authorization flow across multiple pages.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The malicious client might embed a hidden HTML user agent, interpret the HTML forms sent by the authorization server, and automatically send the corresponding form HTTP POST requests. As a prerequisite, the attacker must be able to execute the authorization process in the context of an already-authenticated session of the resource owner with the authorization server. There are different ways to achieve this:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The malicious client could abuse an existing session in an external browser or cross-browser cookies on the particular device.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The malicious client could also request authorization for an initial scope acceptable to the user and then silently abuse the resulting session in his browser instance to "silently" request another scope.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Alternatively, the attacker might exploit an authorization server's ability to authenticate the resource owner automatically and without user interactions, e.g., based on certificates.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;In all cases, such an attack is limited to clients running on the victim's device, either within the user agent or as a native app.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Please note: Such attacks cannot be prevented using CSRF countermeasures, since the attacker just "executes" the URLs as prepared by the authorization server including any nonce, etc. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.161">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DOS-APP" name="The application exposes high resource consuming functions without any protection (Layer 7 attacks)" state="0" impact="100" issueId="" issueLink="">
          <desc>A highly resource consuming function could be exploited by an attacker to bring the service down.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.842">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-541" name="The service returns back-end source code without interpreting it" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;If an include file source is accessible, the file may contain usernames and passwords, as well as sensitive information pertaining to the application and system. The source code can also be sent back to a client because of an error condition or an improperly configured handler.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.599">
              <output/>
            </source>
            <references>
              <reference name="CWE-541: Information Exposure Through Include Source Code" url="https://cwe.mitre.org/data/definitions/541.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L3" name="There is no network protection to protect against Layer 3" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no measures in place to mitigate (D)DoS at a network level.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.843">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L4" name="There is no network protection to protect against Layer 4" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.843">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-TLS" name="There is no protection against Layer 6 attacks (SSL/TLS)" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.842">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.6.7" name="Token leakage via log files and HTTP referrers" state="0" impact="100" issueId="" issueLink="">
          <desc>If access tokens are sent via URI query parameters, such tokens may
   leak to log files and the HTTP "referer".
 
</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.161">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-650" name="Trusting HTTP Permission Methods on the Server Side" state="0" impact="100" issueId="" issueLink="">
          <desc>The server contains a protection mechanism that assumes that
                        any URI that is accessed using HTTP GET will not cause a state change to the
                        associated resource. This might allow attackers to bypass intended access
                        restrictions and conduct resource modification and deletion attacks, since some
                        applications allow GET to modify state.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.920">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-601" name="URL Redirection to Untrusted Site ('Open Redirect')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;A web application accepts a user-controlled input specifying a link to an external site, and uses this link in a Redirect. This functionality aids phishing attacks.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.920">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This is a generic weakness which includes several different situations that are all connected to unexpected environmental conditions and could be related to:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:39.920">
              <output/>
            </source>
            <references>
              <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="RFC6819-4.2.2" name="User unintentionally grants too much access scope" state="0" impact="100" issueId="" issueLink="">
          <desc>When obtaining end-user authorization, the end user may not
   understand the scope of the access being granted and to whom, or they
   may end up providing a client with access to resources that should
   not be permitted.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.160">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="deny-default-enf" name="Assure that the principle of deny by default exists for new users/roles" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Deny by default is the principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny by default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C7]: Enforce Access Controls" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"/>
          </references>
          <standards>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.334">
              <output/>
            </source>
            <references>
              <reference name="Testing for Bypassing Authorization Schema (OTG-AUTHZ-002)" url="https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)"/>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.4.1" name="Automatic processing of repeated authorizations requires client validation" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Authorization servers should NOT automatically process repeat authorizations where the client is not authenticated through a client secret or some other authentication mechanism such as a signed authentication assertion certificate ( 
&lt;a href="https://tools.ietf.org/html/rfc6819#section-5.2.3.7"&gt;Section 5.2.3.7&lt;/a&gt;) or validation of a pre-registered redirect URI ( 
&lt;a href="https://tools.ietf.org/html/rfc6819#section-5.2.3.5"&gt;Section 5.2.3.5&lt;/a&gt;).</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the client is authenticated before giving repeated authorization.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.993">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.1.1" name="Automatic revocation of derived tokens if abuse is detected" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If an authorization server observes multiple attempts to redeem an authorization grant (e.g., such as an authorization "code"), the authorization server may want to revoke all tokens granted based on the authorization grant.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that tokens are revoked after unsuccessful access attempts.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.994">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="oauth2.1-cons-3" name="Avoid passing bearer tokens in query parameters" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Considerations to migrate to OAuth2.1: 
&lt;div&gt;
  Bearer tokens in query parameters are no longer allowed in OAuth2.1 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OAuth2.0 Security Topics" url="https://tools.ietf.org/html/draft-ietf-oauth-security-topics-15"/>
            <reference name="RFC6570" url="https://tools.ietf.org/html/rfc6750"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  When sending the access token in the HTTP request URI, the client adds the access token to the request URI query component as defined by "Uniform Resource Identifier (URI): Generic Syntax" [RFC3986], using the "access_token" parameter. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example, the client makes the following HTTP request using transport-layer security: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  GET /resource?access_token=mF_9.B5f-4.1JqM HTTP/1.1 
&lt;/div&gt; 
&lt;div&gt;
  Host: server.example.com 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The HTTP request URI query can include other request-specific parameters, in which case the "access_token" parameter MUST be properly separated from the request-specific parameters using "&amp;amp;" character(s) (ASCII code 38). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Check that the access token is not passed using this way. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.994">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-639" name="Avoid using direct references to files" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method. Many flaws in applications result from unsafe handling of filenames or path data, for example directory traversal and arbitrary file disclosure. Use of filenames or other direct references to objects such as files on the server-side increases the risk of compromise of the system or unauthorized access to other files, content, or functionality.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Avoid using direct references to files or validate file name.&lt;/li&gt;&lt;li&gt;For example, instead of using:&amp;nbsp;www.example.com/open.jsp?file=details.txt&amp;nbsp;use:&amp;nbsp;www.example.com/open.jsp?file=[GUID]&amp;nbsp;and then use a lookup table on the server to associate the [GUID] value with file details.txt.&lt;/li&gt;&lt;li&gt;Files should be stored outside the web-root to prevent an attacker browsing directly to them.&lt;/li&gt;&lt;li&gt;Do not use obscurity to prevent access; for example do not rely on renaming a file to include a random string to prevent direct download or disclosure.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If direct references are used to access files from within the web-root deviating from recommended security practice, the following must be implemented:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String input validation must be applied.&amp;nbsp; Identify and filter for directory traversal meta-characters such as "../" or "..\" or "/", together with encoded variations and derivations.&lt;/li&gt;&lt;li&gt;Use of a strict white-list of files that may be downloaded.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;When a parameter that represents a file or a file path is found in the application:&lt;/li&gt;&lt;li&gt;For each of them try to change this parameter to gain access to unexpected files.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For example: www.example.com/open.jsp?file=details.txt&amp;nbsp;&lt;br&gt;Shouldn't be implemented that way and if so, it should not be possible to access locations outside of this domain (i.e. file=/etc/passwd or file= &lt;a href="http://www.google.com"&gt;http://www.google.com&lt;/a&gt;, etc.).&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.521">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-4.4.3.1-C1" name="Avoid using &quot;resource owner password credentials&quot; and &quot;implicit&quot; flows" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Considerations to migrate to OAuth2.1: Use other flows that do not rely on the client's cooperation for resource owner interaction. Moreover, in OAuth2.1 the implicit and resource owner password flows have been removed and they can't be used anymore.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>There are three different flows that can be used: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Authorization code based flow&lt;/li&gt; 
  &lt;li&gt;Device flow&lt;/li&gt; 
  &lt;li&gt;Client credentials flow&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt;
   Ensure that the system is using one of them. 
 &lt;/div&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.277">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-4.4.1.10-C1" name="Configure approval notifications to the resource owner to detect abuse" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Authorization servers should decide, based on an analysis of the risk associated with this threat, whether to detect and prevent this threat. In order to prevent such an attack, the authorization server may force a user interaction based on non-predictable input values as part of the user consent approval. The authorization server could 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;combine password authentication and user consent in a single form,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;make use of CAPTCHAs, or&lt;/li&gt; 
  &lt;li&gt;use one-time secrets sent out of band to the resource owner (e.g., via text or instant message).&lt;/li&gt; 
 &lt;/ul&gt;Alternatively, in order to allow the resource owner to detect abuse, the authorization server could notify the resource owner of any approval by appropriate means, e.g., text or instant message, or email. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that any resource owner can receive access attempts to their resources by any means (e.g., text or instant message, or email) and that the received information is complete enough to identify a threat.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.994">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-SRV-XML" name="Define and enforce secure validation through an XSD or DSD schema on XML input data" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The XML standards provides for formal validation criteria to be specified in a schema (XSD or DTD). Defining a schema with security in mind, and enforcing it on input data, will mitigate many attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define an XSD or DTD schema with secure input validation criteria.&lt;/li&gt;&lt;li&gt;Validate all XML input data against the schema before processing it.&lt;/li&gt;&lt;li&gt;The acceptance of unvalidated or non compliant data could have unexpected impact on the behavior of the application, and may facilitate attacks such as SQL injection.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For every endpoint which consumes XML data.&lt;/li&gt;
                            &lt;li&gt;Get the permitted structure of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Construct non-compliant samples and send them to the endpoints.&lt;/li&gt;
                            &lt;li&gt;Check they are not accepted.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-4.4.1.12-C2" name="Delay response after repeated unsuccessful authentication attempts" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The authorization server should send an error response to the client reporting an invalid authorization "code" and rate-limit or disallow connections from clients whose number of invalid requests exceeds a threshold.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that after repeated unsuccessful attempts the authorization server response starts to slow down until the access attempts are non-viable.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC" name="Detect and notify the usage of automated tools or unusual behavior" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Don't allow users to manipulate a system or guess its behavior based on input or output timing and detect the usage of automated tools or unusual behavior, such as actions not performed in reasonable "human time" or other abnormal time patterns.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;When the usage of automated tools is detected, the application should respond by denying access and notifying the security group.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use several automated tools to perform normal user actions.&lt;/li&gt;
                            &lt;li&gt;Check that the applications detects these actions, denies the users access and
                            notifies the security group.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.333">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="protection-against-data-mining" name="Detect and protect against data mining techniques" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data mining is an analytical process that attempts to find correlations or patterns in large data sets for the purpose of data or knowledge discovery. Data storage objects include database records and database fields. Sensitive information can be extracted from data mining operations. When information is personally identifiable information, it may lead to unanticipated revelations about individuals and give rise to privacy risks. Prior to performing data mining activities, organizations determine whether such activities are authorized. Organizations may be subject to applicable laws, executive orders, directives, regulations, or policies that address data mining requirements. Organizational personnel consult with the senior agency official for privacy and legal counsel regarding such requirements.&lt;/p&gt;&lt;p&gt;Data mining prevention and detection techniques include limiting the number and frequency of database queries to increase the work factor needed to determine the contents of databases, limiting types of responses provided to database queries, applying differential privacy techniques or homomorphic encryption, and notifying personnel when atypical database queries or accesses occur. Data mining protection focuses on protecting information from data mining while such information resides in organizational data stores. In contrast, AU-13 focuses on monitoring for organizational information that may have been mined or otherwise obtained from data stores and is available as open-source information residing on external sites, such as social networking or social media websites.&lt;/p&gt;&lt;p&gt;EO 13587 requires the establishment of an insider threat program for deterring, detecting, and mitigating insider threats, including the safeguarding of sensitive information from exploitation, compromise, or other unauthorized disclosure. Data mining protection requires organizations to identify appropriate techniques to prevent and detect unnecessary or unauthorized data mining. Data mining can be used by an insider to collect organizational information for the purpose of exfiltration.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-53" url="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf"/>
          </references>
          <standards>
            <standard ref="AC-23" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that your system supports policies that protect against data mining such as filtering, throttling and anomaly detection.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.1.5.2" name="Determine expiration time" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Tokens should generally expire after a reasonable duration. This complements and strengthens other security measures (such as signatures) and reduces the impact of all kinds of token leaks. Depending on the risk associated with token leakage, tokens may expire after a few minutes (e.g., for payment transactions) or stay valid for hours (e.g., read access to contacts).&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The expiration time is determined by several factors, including:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;risk associated with token leakage,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;duration of the underlying access grant,&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;duration until the modification of an access grant should take effect, and&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;time required for an attacker to guess or produce a valid token.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the token expiration time in the authorization server policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.278">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DIRECTORY_LISTING" name="Disable web server directory listing and ensure file metadata (e.g. .git) and backup files are not present within web roots" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Indexable directories allow an attacker to easily discover the existence of content on your web server that should remain private.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Disable directory listings in the web - or application - server configuration by default.&lt;/li&gt;&lt;li&gt;Restrict access to unnecessary directories and files.&lt;/li&gt;&lt;li&gt;Create an index (default) file for each directory.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Apache - auto index" url="https://httpd.apache.org/docs/trunk/mod/mod_autoindex.html"/>
            <reference name="Apache - directory listing" url="https://wiki.apache.org/httpd/DirectoryListings"/>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Directory_Indexing" url="https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Directory_Indexing"/>
            <reference name="OWASP Insecure Indexing" url="https://www.owasp.org/index.php/File_System#Insecure_Indexing"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that the directory listing is disabled on the web server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.522">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-11.5" name="Do not share system information in HTTP headers and responses" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should not share detailed version information of system components or other information that would assist attackers in the HTTP header or HTTP responses.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the HTTP responses and headers do not reveal sensitive data about the system.
                            Using a command line web client like telnet or netcat could help on this task.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.3.1" name="Don't issue secrets to clients with inappropiate security policy" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Authorization servers should not issue secrets to clients that cannot protect secrets ("public" clients). This reduces the probability of the server treating the client as strongly authenticated.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For example, it is of limited benefit to create a single client id and secret that are shared by all installations of a native application. Such a scenario requires that this secret must be transmitted from the developer via the respective distribution channel, e.g., an application market, to all installations of the application on end-user devices. A secret, burned into the source code of the application or an associated resource bundle, is not protected from reverse engineering. Secondly, such secrets cannot be revoked, since this would immediately put all installations out of work. Moreover, since the authorization server cannot really trust the client's identifier, it would be dangerous to indicate to end users the trustworthiness of the client.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  There are other ways to achieve a reasonable security level, as described in the following sections. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that public clients don't store client secrets.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="27" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and server, terminating within a secure environment on the server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:40.334">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;In every portion of the application where a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.335">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:40.335">
              <output/>
            </source>
            <references>
              <reference name="Deserialization Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-HTTP-METHODS" name="Ensure that the application accepts only a defined set of required HTTP request methods" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP offers a number of methods that can be used to perform actions on the web server. Many of theses methods are designed to aid developers in deploying and testing HTTP applications. These HTTP methods can be used for nefarious purposes if the web server is misconfigured. For example, Cross Site Tracing (XST), a form of cross site scripting using the server's HTTP TRACE method.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While GET and POST are by far the most common methods that are used to access information provided by a web server, the Hypertext Transfer Protocol (HTTP) allows several other (and somewhat less known) methods. RFC 2616 (which describes HTTP version 1.1 which is the standard today) defines the following eight methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HEAD&lt;/li&gt;&lt;li&gt;GET&lt;/li&gt;&lt;li&gt;POST&lt;/li&gt;&lt;li&gt;PUT&lt;/li&gt;&lt;li&gt;DELETE&lt;/li&gt;&lt;li&gt;TRACE&lt;/li&gt;&lt;li&gt;OPTIONS&lt;/li&gt;&lt;li&gt;CONNECT&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Some of these methods can potentially pose a security risk for a web application, as they allow an attacker to modify the files stored on the web server and, in some scenarios, steal the credentials of legitimate users. More specifically, the methods that should be disabled are the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;PUT: &lt;/strong&gt;This method allows a client to upload new files onto the web server. An attacker may exploit this by uploading malicious files (e.g.: an asp file that executes commands by invoking cmd.exe), or by simply using the victim's server as a file repository.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;DELETE:&lt;/strong&gt; This method allows a client to delete a file on the web server. An attacker may exploit it as a very simple and direct way to deface a web site or to mount a DoS attack.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CONNECT: &lt;/strong&gt;This method could allow a client to use the web server as a proxy.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;TRACE: &lt;/strong&gt;This method simply echoes back to the client whatever string has been sent to the server, and is used mainly for debugging purposes. This method, originally assumed harmless, can be used to mount an attack known as Cross Site Tracing, which was discovered by Jeremiah Grossman (see links at the bottom of the page).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If an application needs one or more of these methods, such as REST Web Services (which may require PUT or DELETE), it is important to check their usage is properly limited to trusted users and safe conditions.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Ensure the application accepts only the HTTP requests GET and POST. The HTTP requests TRACE, PUT and DELETE are blocked.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP test HTTP methods" url="https://github.com/ManhNho/OWASP-Testing-Guide-v5/blob/master/document/4%20Web%20Application%20Security%20Testing/4.3%20Configuration%20and%20Deployment%20Management%20Testing/4.3.6%20Test%20HTTP%20Methods%20(OTG-CONFIG-006).md"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application only accepts the request with the following HTTP
                            methods: GET and POST.&lt;/li&gt;
                            &lt;li&gt;Check that the application rejects and blocks the following requests with the HTTP
                            methods: TRACE, PUT and DELETE.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SEC-DEPLOY" name="Ensure the build pipeline contains a build step to automatically build and verify the secure deployment of the application" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts.</desc>
          <implementations/>
          <references>
            <reference name="Secure development and deployment guidance" url="https://www.ncsc.gov.uk/collection/developers-collection?curPage=/collection/developers-collection/principles/secure-the-build-and-deployment-pipeline"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>
                            Understanding the deployed configuration of the server hosting the web application is almost as important as the application security testing itself. After all, an application chain is only as strong as its weakest link. Application platforms are wide and varied, but some key platform configuration errors can compromise the application in the same way an unsecured application can compromise the server.
                            &lt;br /&gt;
                            &lt;br /&gt;In order to evaluate the readiness of the application platform, testing for configuration management includes the following sections:
                            &lt;br /&gt;
                            &lt;br /&gt;4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
                            &lt;br /&gt;4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
                            &lt;br /&gt;4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
                            &lt;br /&gt;4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004)
                            &lt;br /&gt;4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
                            &lt;br /&gt;4.3.6 Test HTTP Methods (OTG-CONFIG-006)
                            &lt;br /&gt;4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
                            &lt;br /&gt;4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
                            &lt;br /&gt;4.3.9 Test File Permission (OTG-CONFIG-009)
                            &lt;br /&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ENV-USE" name="Ensure there are no environmental security weaknesses" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Application security can be undermined by misconfiguration of the underlying server or
                        development environment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that vendor and best-practice guidelines have been applied, in particular affecting areas
                        such as:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographic strength of elements such as session tokens, GUIDs, and protection of
                        data in transit and at rest.&lt;/li&gt;
                        &lt;li&gt;Removal of debugging and compiler options and artifacts used during development.&lt;/li&gt;
                        &lt;li&gt;Configuration of error trapping and use of generic error messages and pages (e.g.
                        stack traces should not be returned to users).&lt;/li&gt;
                        &lt;li&gt;Appropriate access controls over software components, variables (e.g. EJBs and
                        methods).&lt;/li&gt;
                        &lt;li&gt;Insecure or inappropriate storage of data in configuration files or other data
                        structures (e.g. passwords in configuration files).&lt;/li&gt;
                        &lt;li&gt;Use of compilation/build features or security enhancements provided by the IDE&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Vulnerable Components" url="https://pwning.owasp-juice.shop/part2/vulnerable-components.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A06:2021-Vulnerable and Outdated Components" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A6:2017-Security Misconfiguration" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A9:2017-Using Components with Known Vulnerabilities" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;figure class="table"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;Identify the areas of the application that could potentially be affected by the following:&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Verify they are correctly implemented.&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="harden-http-headers" name="Harden HTTP Headers" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP headers are a fundamental part of website security.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The Referrer-Policy HTTP header controls how much referrer information (sent via the Referrer header) should be included with requests. This security header was designed to prevent cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;The Origin request header indicates where a fetch originates from. It doesn't include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn't disclose the whole path.&lt;/li&gt;&lt;li&gt;The Content-Disposition response header tells the browser to download a file rather than displaying it in the browser window.&lt;/li&gt;&lt;li&gt;If a response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use a suitable "Referrer-Policy" header, such as "no-referrer" or "same-origin".&lt;/li&gt;&lt;li&gt;Don't use the Origin header for authentication or access control decisions, as the Origin header can easily be changed by an attacker.&lt;/li&gt;&lt;li&gt;Use the Content-Disposition response header for file downloading in all API responses with the following directives: Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the content type).&lt;/li&gt;&lt;li&gt;Use a content-type header specifying a safe character set (e.g., UTF-8, ISO 8859-1) in every HTTP response.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTML does not specify charset" url="https://portswigger.net/kb/issues/00800200_html-does-not-specify-charset"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="Origin Header" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"/>
            <reference name="Referrer-Policy" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"/>
            <reference name="Reflected File Download" url="https://www.owasp.org/index.php/Reflected_File_Download"/>
            <reference name="Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)" url="https://tools.ietf.org/html/rfc6266"/>
          </references>
          <standards>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;An easy way to access your HTTP security headers, as part of your response headers, is to fire up Chrome DevTools. To run this click into the "Network" panel and press Ctrl + R (Cmd + R) to refresh the page. Click into your domain's request and you will see a section for response headers.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Check if "Referrer-Policy" header exists in HTTP responses and has the right directives to prevent cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;From a penetration testing perspective you should look for insecure configurations; for example, when the server returns back the Origin header in the Access-Control-Allow-Origin without any additional checks AND returns Access-Control-Allow-Credentials: true, which can lead to access of sensitive data. Note that this configuration is very insecure, and is not acceptable in general terms, except in the case of a public API that is intended to be accessible by everyone.&lt;/li&gt;&lt;li&gt;Try Reflected File Download input payloads to launch commands on the client machine. Reflected File Download is an attack combining URL path segments (now deprecated) with pages that reflect user inputs in the response. Generally web services vulnerable to JSONP Injection are leveraged to deliver malware to end users.&lt;/li&gt;&lt;li&gt;Character encoding has a popular misuse; namely, being used for encoding malicious injection strings in a way that obfuscates them. Try different character encoding schemes (like UTF-7) to bypass input validation filters, or take advantage of particular ways in which browsers render encoded text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references>
              <reference name="A new security header: Referrer Policy" url="https://scotthelme.co.uk/a-new-security-header-referrer-policy/"/>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
              <reference name="Reflected File Download - A New Web Attack Vector" url="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/reflected-file-download-a-new-web-attack-vector/"/>
              <reference name="Test Cross Origin Resource Sharing (OTG-CLIENT-007)" url="https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-dns-domains" name="Identify the DNS domains periodically to update the information about them" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should have a protection from sub-domain takeovers if the application relies upon DNS entries or DNS sub-domains, such as expired domain names, out of date DNS pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs, serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify the forward and reverse DNS lookups.&lt;/li&gt;&lt;li&gt;Verify the connection to the DNS was authenticated successfully by username/password or certificate and that they are active.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.607">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-L7" name="Identity which functions of the application are resource consuming and protect and monitor them (optionally set up a WAF)" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DoS attacks against the application layer also aim to use up the memory and process time that the application requires to function properly while minimizing the resources employed by the attacker by using vulnerabilities or flaws in the application. The main characteristics of this type of attack are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The requirement for less bandwidth compared to other methods such as SYN Flood attacks, and as such, the infrastructure necessary to launch a successful attack is usually minor.&lt;/li&gt;&lt;li&gt;Greater difficulty in distinguishing between malicious and legitimate traffic. Many of the most common protection measures or systems focus on the network or transport layer, and as such, they would not be efficient when the target of the attack is the application layer. It is even difficult for the defense systems that monitor this layer to distinguish between malicious and legitimate traffic.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As we have indicated, this type of attack is very specific, and generally require fewer resources from the attacker to achieve devastating effects in the systems attacked. However, this type of attack requires more time to analyze the targeted system in order to discover vulnerabilities or bottlenecks that can be exploited during the attack.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Analyze weaknesses or bottlenecks in the design, the implementation, or even the functioning of the application to identify "heavy" requests that are resource consuming. For example, if the web application has a search engine, an attack could be to carry out searches that require a high level of resources to generate a bottleneck and eventually disable the service.&lt;/li&gt;&lt;li&gt;Implement a challenge to the device making the network request in order to test whether or not it is a bot. This is done through a test much like the CAPTCHA test commonly found when creating an account online. By giving a requirement such as a JavaScript computational challenge, many attacks can be mitigated.&lt;/li&gt;&lt;li&gt;Use of a web application firewall, managing and filtering traffic through an IP reputation database, and through on-the-fly network analysis by engineers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Layer 7 DDoS Attacks" url="https://owasp.org/www-pdf-archive/Layer_7_DDOS.pdf"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 7 DDoS PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space. One well-known application attack is Slowloris, which targets web servers. Verify that the implemented Layer 7 protection mechanisms (Javascript challenges, CAPTCHA tests, WAF) are effective.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.773">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="implement-monitoring-unusual-activities" name="Implement and monitor Business Logic Limits for actions and transactions" issueId="" issueLink="" platform="" cost="0" risk="40" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement in the application the appropriate limits for specific business actions and transactions, to enforce the correct usage of the application for each user ensuring they cannot bypass important steps in the flow. This business logic limits provide us protection against likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/p&gt;&lt;p&gt;All business actions or transactions that exceed the established limits, should be recorded in the logs and monitored as unusual events.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Proactive controls (C9)" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A04:2021-Insecure Design" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis.&lt;/li&gt;
   &lt;li&gt;Verify the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/li&gt;
  &lt;li&gt;Verify the application monitors for unusual events or activity from a business logic perspective.&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:40.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;THC-Hydra&lt;/a&gt;, &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;OWASP ZAP&lt;/a&gt; or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite &lt;/a&gt;to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="error-handling-centralized" name="Implement centralized mechanisms to manage errors and exceptions" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create a functionality or a mechanism to manage exceptions in a centralized manner and avoid including duplicated try/catch blocks in the code.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;A well-planned error/exception handling strategy is important for three reasons:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Good error handling does not give an attacker any information which can be leveraged for attacking the application.&lt;/li&gt;&lt;li&gt;A proper centralized error strategy is easier to maintain and reduces the chances of any uncaught errors "Bubbling up" to the front-end of an application.&lt;/li&gt;&lt;li&gt;Information leakages can lead to social engineering exploits.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Building an infrastructure for consistent error reporting proves more difficult than error handling. All exceptions should be caught as events with the severity of the error. These events will be logged.&lt;/p&gt;&lt;p&gt;The centralized system should reorganize all events and throw the corresponding error or system message in a consistent manner, depending on the severity of the error.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Code Review: Error Handling" url="https://www.owasp.org/index.php/Codereview-Error-Handling"/>
            <reference name="OWASP Error Handling" url="https://www.owasp.org/index.php/Error_Handling"/>
            <reference name="OWASP Proactive Controls [C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify that a centralized system is in place to catch errors and exceptions, and these errors are shown in a correct manner.&lt;/li&gt;&lt;li&gt;Verify all errors thrown from the centralized system are displayed in a correct fashion.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:40.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.4.2" name="Informed decisions based on transparency" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The authorization server should clearly explain to the end user what happens in the authorization process and what the consequences are. For example, the user should understand what access he is about to grant to which client for what duration. It should also be obvious to the user whether the server is able to reliably certify certain client properties (web site URL, security policy).</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
            <reference name="The Authorization Interface" url="https://www.oauth.com/oauth2-servers/authorization/the-authorization-interface/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  The authorization interface is the screen users will see when they are presented with an authorization request from a third-party app. Since the user is being asked to grant some level of access to a third-party app, you need to ensure the user has all the information they need to make an informed decision about authorizing the application.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An authorization interface typically has the following components: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Website name and logo&lt;/li&gt; 
  &lt;li&gt;User identification&lt;/li&gt; 
  &lt;li&gt;Application details&lt;/li&gt; 
  &lt;li&gt;The requested scope&lt;/li&gt; 
  &lt;li&gt;The requested or effective lifetime&lt;/li&gt; 
  &lt;li&gt;Allow / Deny buttons&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-TLS" name="Inspect the TLS/SSL traffic on a capable device before sending the connection down on your infrastructure" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;TLS adds another vector for computational attacks since a client can easily (with little computational effort) force the server to expend relatively large computational work. If a web application is delivered over TLS, an attacker can also choose to attack the TLS negotiation process. TLS is computationally expensive so an attacker can reduce a server's availability by sending unintelligible data. In a variation of this attack, an attacker completes the TLS handshake but perpetually renegotiates the encryption method. Or an attacker can attempt to exhaust server resources by opening and closing many TLS sessions.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;To mitigate consider options like offloading the SSL from the origin infrastructure and inspecting the application traffic for signs of attack traffic or violations of policy at an application delivery platform (ADP).&lt;br&gt;A good ADP will also ensure that your traffic is then re-encrypted and forwarded back to the origin infrastructure with unencrypted content only ever residing in protected memory on a secure bastion host.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 6 DDoS attack PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the implemented availability protection is effective. One useful tool to execute this kind of test is &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;. It covers all the required tests for TLS &amp;amp; SSL assessments and is regularly updated.&lt;/p&gt;&lt;p&gt;There are many testing options that can be used with &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt; and the options you should use will depend greatly on your testing requirements. Below are some useful examples, for an overview of &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt; command-line options. run ./testssl.sh with no other options.&lt;/p&gt;&lt;p&gt;Test Everything on a Single Host and Output to console&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST&lt;/p&gt;&lt;p&gt;Test Everything on a Single Host and Output to HTML&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Test all hosts on a Subnet and Output to HTML&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U 192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Same as above, but only enumerate each servers supported ciphers:&lt;br&gt;./testssl.sh -E 192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.774">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.3.4" name="Issue installation-specific client secrets" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>An authorization server may issue separate client identifiers and corresponding secrets to the different installations of a particular client (i.e., software package). The effect of such an approach would be to turn otherwise "public" clients back into "confidential" clients. 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For web applications, this could mean creating one "client_id" and "client_secret" for each web site on which a software package is installed. So, the provider of that particular site could request a client id and secret from the authorization server during the setup of the web site. This would also allow the validation of some of the properties of that web site, such as redirect URI, web site URL, and whatever else proves useful. The web site provider has to ensure the security of the client secret on the site. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For native applications, things are more complicated because every copy of a particular application on any device is a different installation. Installation-specific secrets in this scenario will require obtaining a "client_id" and "client_secret" either 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;during the download process from the application market, or&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;during installation on the device.&amp;nbsp;&lt;/li&gt; 
 &lt;/ol&gt;Either approach will require an automated mechanism for issuing client ids and secrets, which is currently not defined by OAuth.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The first approach would allow the achievement of a certain level of trust in the authenticity of the application, whereas the second option only allows the authentication of the installation but not the validation of properties of the client. But this would at least help to prevent several replay attacks. Moreover, installation-specific "client_ids" and secrets allow the selective revocation of all refresh tokens of a specific installation at once. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the client is connecting the authorization server using a "client_id" previously issued by the authorization server, and that the latter has enough information to ensure that the "client_id" is not forged in any way.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.1.5.4" name="Limit number of usages or one-time usage" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The authorization server may restrict the number of requests or operations that can be performed with a certain token. This mechanism can be used to mitigate the following threats:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;replay of tokens&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;guessing&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;For example, if an authorization server observes more than one attempt to redeem an authorization "code", the authorization server may want to revoke all access tokens granted based on the authorization "code" as well as reject the current request.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  As with the authorization "code", access tokens may also have a limited number of operations. This either forces client applications to re-authenticate and use a refresh token to obtain a fresh access token, or forces the client to re-authorize the access token by involving the user. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the authorization server policies to ensure that the number of usages of a token doesn't exceed the configured threshold.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-4.4.1.11-C1" name="Limit the number of access tokens granted per user" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The authorization server should consider limiting the number of access tokens granted per user.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the authorization server policies to find how many tokens are issued for every user.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.1.5.1" name="Limit token scope" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The authorization server may decide to reduce or limit the scope associated with a token. The basis of this decision is out of scope; examples are: o a client-specific policy, e.g., issue only less powerful tokens to public clients, o a service-specific policy, e.g., it is a very sensitive service, o a resource-owner-specific setting, or o combinations of such policies and preferences. 
&lt;div&gt; 
 &lt;br&gt; The authorization server may allow different scopes dependent on the grant type. For example, end-user authorization via direct interaction with the end user (authorization "code") might be considered more reliable than direct authorization via grant type "username"/"password". This means will reduce the impact of the following threats: o token leakage o token issuance to malicious software o unintended issuance of powerful tokens with resource owner credentials flow 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that issued tokens are only valid for its purpose and cannot be used to access resources out of scope.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-541" name="Prevent unauthorised access to source code through the service" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to the source-code for the application can aid an attacker in determining bugs or vulnerabilities in the code or logic. For closed-source projects it is therefore important to control and restrict access to the source. Application services may unexpectedly expose code, for example a service providing files to a user could be manipulated to access source code if implemented insecurely.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure source code is not inadvertently disclosed through misconfiguration or vulnerabilities in the service.&lt;/li&gt;&lt;li&gt;Check configuration files are not downloadable directly from the service, and cannot be read and viewed through the service itself.&lt;/li&gt;&lt;li&gt;Ensure backups, operating systems, and version control artifacts do not expose code.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check the source code of the application is never returned in cases in which it cannot be interpreted.&lt;/li&gt;&lt;li&gt;Web Servers have a concept called handlers which manage the source code interpretation before sending it to the client. If those handlers are not properly configured, the plain source code could be sent as a default.&lt;/li&gt;&lt;li&gt;Check the handlers are correctly configured to support the types of languages your server uses.&lt;/li&gt;&lt;li&gt;Check also that the source code is not leaked in case of failure.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:40.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. A token/identifier that is not accessible to the attacker is needed to mitigate this and would not be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For maximum security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on the server-side is problematic, an alternative defense is to use the double-submit cookie technique. This technique is easy to implement and is stateless. In this technique, a random value is sent in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudo random value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudo-random value as a hidden form value (or other request parameter/header). If both of them match on the server-side, the server accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely on examining an HTTP request header value. Firstly, determining the origin the request is coming from (source origin). This can be achieved via Origin and/or referer headers. Secondly, determining the origin the request is going to (target origin). On the server-side verify if both of these match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, discard the request (meaning that the request originated from a cross-domain). Reliability of these headers comes from the fact they cannot be altered programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-30" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.- Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-4.2.1-C1" name="Provide mechanisms to confirm server authenticity" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Authorization servers should attempt to educate users about the risks posed by phishing attacks and should provide mechanisms that make it easy for users to confirm the authenticity of their sites.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that a message alerting about possible phishing attacks appears when trying to retrieve an authorization token from an authorization server.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.278">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-ICMP-Flooding" name="Rate-limit ICMP traffic and prevent the attack from impacting bandwidth and firewall performance" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Common attacks are ICMP Flooding, Ping flood and Ping of death - Layer 3 infrastructure DDoS attack methods that use ICMP messages to overload the targeted network's bandwidth. These kind of attacks can be prevented from taking place by rate-limiting ICMP traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;For example, iptables can be used on Linux systems as follows:&lt;/p&gt;&lt;p&gt;To protect against ping flood attacks the 'limit' module of iptables can be used:&lt;/p&gt;&lt;p&gt;-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A INPUT -p icmp --icmp-type echo-request -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;Note that the above lines will protect only against ping request attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;To protect against generic ICMP flood attacks we can remove the constraint '--icmp-type echo-request'. This is only good enough to protect against PC to PC attacks. If flood is done using multiple sources or using hardware then this configuration may not be enough. The configuration will also cause denial of service to other users when under attack even from single source, as we are limiting based on protocol without considering the source address of the packet.&lt;/p&gt;&lt;p&gt;Iptables can also be used to prevent abuse of network resources by rate limiting them:&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 4/second --limit-burst 12 -j ACCEPT&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 1/minute --limit-burst 1 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A OUTPUT -p tcp -m tcp --dport 80 -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;In the above example we are limiting outgoing connections to port 80. This is useful when we can't completely block outgoing connections but we do not want it to become channel from where people start browsing net or downloading. The limit module can also be used in rate limiting incoming traffic for performance reasons.&lt;/p&gt;&lt;p&gt;Disabling a ping flood is most easily accomplished by disabling the ICMP functionality of the targeted router, computer or other device. A network administrator can access the administrative interface of the device and disable its ability to send and receive any requests using the ICMP, effectively eliminating both the processing of the request and the Echo Reply. The consequence of this is that all network activities that involve ICMP are disabled, making the device unresponsive to ping requests, traceroute requests, and other network activities.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Ping (ICMP) Flood DDoS Attack" url="https://www.cloudflare.com/learning/ddos/ping-icmp-flood-ddos-attack/"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="Rate limiting using iptables" url="https://www.sbarjatiya.com/notes_wiki/index.php/Rate_limiting_using_iptables"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the implemented availability protection is effective. One useful tool to execute this kind of test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For example, you can execute a Smurf attack (denial-of-service attack that floods a target system via spoofed broadcast ping messages) using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3 -1 - flood -a VICTIM_IP BROADCAST_ADDRESS&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.774">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="oauth2.1-cons-2" name="Redirect URIs must be compared using exact string matching" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Considerations to migrate to OAuth2.1:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The complexity of implementing and managing pattern matching correctly obviously causes security issues. This document therefore advises to simplify the required logic and configuration by using exact redirect URI matching only. This means the authorization server MUST compare the two URIs using simple string comparison as defined in [RFC3986], Section 6.2.1.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Additional recommendations: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Servers on which callbacks are hosted MUST NOT expose open redirectors (see Section 4.9).&lt;/li&gt; 
  &lt;li&gt;Browsers reattach URL fragments to Location redirection URLs only if the URL in the Location header does not already contain a fragment. Therefore, servers MAY prevent browsers from reattaching fragments to redirection URLs by attaching an arbitrary fragment identifier, for example "#_", to URLs in Location headers.&lt;/li&gt; 
  &lt;li&gt;Clients SHOULD use the authorization code response type instead of response types causing access token issuance at the authorization endpoint. This offers countermeasures against reuse of leaked credentials through the exchange process with the authorization server and token replay through sender-constraining of the access tokens.&lt;/li&gt; 
 &lt;/ul&gt;If the origin and integrity of the authorization request containing the redirect URI can be verified, for example when using [ &lt;a href="https://tools.ietf.org/html/draft-ietf-oauth-jwsreq-26" title="&amp;quot;The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)&amp;quot;"&gt;I-D.ietf-oauth-jwsreq&lt;/a&gt;] or [ &lt;a href="http://www.ietf.org/internet-drafts/draft-ietf-oauth-par-02.txt" title="&amp;quot;OAuth 2.0 Pushed Authorization Requests&amp;quot;"&gt;I-D.ietf-oauth-par&lt;/a&gt;] with client authentication, the authorization server MAY trust the redirect URI without further checks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt; 
  &lt;ol&gt; 
  &lt;/ol&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OAuth 2.0 Pushed Authorization Requests" url="https://tools.ietf.org/html/draft-ietf-oauth-jwsreq-20"/>
            <reference name="OAuth2.0 Security Topics" url="https://tools.ietf.org/html/draft-ietf-oauth-security-topics-15"/>
            <reference name="RFC3986" url="https://tools.ietf.org/html/rfc3986"/>
            <reference name="The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)" url="https://tools.ietf.org/html/draft-ietf-oauth-par-01"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the authorization server compares the two URIs using simple string comparison as defined in [RFC3986], Section 6.2.1. 
&lt;div&gt; 
 &lt;ol&gt; 
  &lt;li&gt;Select an OAuth provider, Start Intercepting, Press Connect Button.&lt;/li&gt; 
  &lt;li&gt;Forward until you see a request to the IDP corresponding to Step 2. in the above diagram.&lt;/li&gt; 
  &lt;ol&gt; 
   &lt;li&gt;It's possible that you won't see a redirect_uri parameter here. If this is the case, it's likely registered to a single URI, but you can add it and try anyways.&lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;li&gt;Alter the redirect_uri URL parameter and replace it with the top level domain:&lt;/li&gt; 
  &lt;ol&gt; 
   &lt;li&gt;aws.console.amazon.com/myservice -&gt; aws.console.amazon.com&lt;/li&gt; 
  &lt;/ol&gt; 
  &lt;li&gt;Continue through the OAuth flow, authenticating and granting access.&lt;/li&gt; 
  &lt;li&gt;If after the OAuth dance, the Browser is redirected to the top level domain, then the site is vulnerable to this attack.&lt;/li&gt; 
 &lt;/ol&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references>
              <reference name="Penetration Tester's Guide to Evaluating OAuth 2.0" url="https://maxfieldchen.com/posts/2020-05-17-penetration-testers-guide-oauth-2.html"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="oauth2.1-cons-4" name="Refresh tokens must be sender-constrained" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>If refresh tokens are issued, those refresh tokens MUST be bound to the scope and resource servers as consented by the resource owner. This is to prevent privilege escalation by the legitimate client and reduce the impact of refresh token leakage. Authorization server MUST utilize one of these methods to detect refresh token replay by malicious actors for public clients:&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Sender-constrained refresh tokens: the authorization server cryptographically binds the refresh token to a certain client instance by utilizing [ &lt;a href="https://tools.ietf.org/html/draft-ietf-oauth-security-topics-14#ref-I-D.ietf-oauth-token-binding" title="&amp;quot;OAuth 2.0 Token Binding&amp;quot;"&gt;I-D.ietf-oauth-token-binding&lt;/a&gt;] or [ &lt;a href="https://tools.ietf.org/html/rfc8705" title="&amp;quot;OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens&amp;quot;"&gt;RFC8705&lt;/a&gt;].&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Refresh token rotation: the authorization server issues a new refresh token with every access token refresh response. The previous refresh token is invalidated but information about the relationship is retained by the authorization server. If a refresh token is compromised and subsequently used by both the attacker and the legitimate client, one of them will present an invalidated refresh token, which will inform the authorization server of the breach. The authorization server cannot determine which party submitted the invalid refresh token, but it will revoke the active refresh token. This stops the attack at the cost of forcing the legitimate client to obtain a fresh authorization grant.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;Implementation note: the grant to which a refresh token belongs may be encoded into the refresh token itself. This can enable an authorization server to efficiently determine the grant to which a refresh token belongs, and by extension, all refresh tokens that need to be revoked. Authorization servers MUST ensure the integrity of the refresh token value in this case, for example, using signatures. 
 &lt;ul&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OAuth2.0 Security Topics" url="https://tools.ietf.org/html/draft-ietf-oauth-security-topics-15"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check at least one of the following: 
&lt;br&gt; 
&lt;ul&gt; 
 &lt;li&gt;The authorization server cryptographically binds the refresh token to a certain client instance by utilizing [&amp;nbsp;&lt;a href="https://tools.ietf.org/html/draft-ietf-oauth-security-topics-14#ref-I-D.ietf-oauth-token-binding" title="&amp;quot;OAuth 2.0 Token Binding&amp;quot;"&gt;I-D.ietf-oauth-token-binding&lt;/a&gt;] or [&amp;nbsp;&lt;a href="https://tools.ietf.org/html/rfc8705" title="&amp;quot;OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens&amp;quot;"&gt;RFC8705&lt;/a&gt;].&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;The authorization server issues a new refresh token with every access token refresh response.&lt;/li&gt; 
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references>
              <reference name="RFC8705" url="https://tools.ietf.org/html/rfc8705"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-18.8" name="Reject requests containing unexpected or missing content type headers" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Reject requests containing unexpected or missing content type headers with HTTP response status
                        &amp;quot;406 Unacceptable&amp;quot; or &amp;quot;415 Unsupported Media Type&amp;quot;.
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Validate request content-type" url="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Validate_request_content_types"/>
            <reference name="Spring docs: CSRF" url="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html"/>
          </references>
          <standards>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that HTTP requests with non-valid Content-type are rejected.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-SESS-REAUTH" name="Require additional authentication for sensitive operations / high value transactions" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Having gained access to an account, for example through session hijacking or cross-site scripting, an attack may compromise data and functionality accessible to the victim. This may include elevating privileges or accessing sensitive data and functionality, such as changing passwords, creating accounts, or transferring funds.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;These critical functions and sensitive data should be further protected from attack using a risk-based authentication model requiring re-authentication via multi-factor authentication, or use of a token to sign transactions or operations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement re-authentication on key functions (such as requiring the old password before setting a new one).&lt;/li&gt;&lt;li&gt;Use secondary authentication such as a transaction PIN to allow financial transfers.&lt;/li&gt;&lt;li&gt;Critical administrative functionality should require multi-factor authentication (such as a hard or soft token).&lt;/li&gt;&lt;li&gt;Consider use of signing technologies or tokens that enable the server-side to verify the authenticity of a request and mitigate Man in the Middle (MiTM) or Man in the Browser (MiTB) attacks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
          </references>
          <standards>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical functionalities of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the risk appetite for those functionalities.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Validate that re-authentication is required for those functions if deemed
                            necessary.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.3.2" name="Require user consent for public clients without secret" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Authorization servers should not allow automatic authorization for public clients. The authorization server may issue an individual client id but should require that all authorizations are approved by the end user.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  For clients without secrets, this is a countermeasure against the following threat: Impersonation of public client applications. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Check that public clients cannot be authorized until the end user approves the access explicitly.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Public clients could be: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Single-page apps&lt;/li&gt; 
  &lt;li&gt;Browser-based apps&lt;/li&gt; 
  &lt;li&gt;Mobile apps&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC-006" name="Restrict actions of users that follow unusual patterns" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict actions that users can do outside of the approved/required business process flow.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This is important because without this safeguard in place attackers may be able to bypass or circumvent work-flows and checks allowing them to prematurely enter or skip required sections of the application potentially allowing actions/transactions to be completed without successfully completing the entire business process, leaving the system with incomplete back-end tracking information.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing for the circumvention of work flows" url="https://www.owasp.org/index.php/Testing_for_the_Circumvention_of_Work_Flows_(OTG-BUSLOGIC-006)"/>
          </references>
          <standards>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application only processes business logic flows in sequential step order and in realistic human time.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.334">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.2.1" name="Restrict issuance of refresh tokens" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The authorization server may decide, based on an appropriate policy, not to issue refresh tokens. Since refresh tokens are long-term credentials, they may be subject to theft. For example, if the authorization server does not trust a client to securely store such tokens, it may refuse to issue such a client a refresh token.</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the refresh policies of the authorization server to restrict the behavior.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.3.6" name="Revoke client secrets" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>An authorization server may revoke a client's secret in order to prevent abuse of a revealed secret.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Note: This measure will immediately invalidate any authorization "code" or refresh token issued to the respective client. This might unintentionally impact client identifiers and secrets used across multiple deployments of a particular native or web application.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This is a countermeasure against: Abuse of revealed client secrets for private clients 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that when a secret is abused the authorization server revokes access tokens, refresh tokens and all kinds of client secrets that can be used to continue accessing the server.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:38.482">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="oauth2.1-cons-1" name="Send PKCE challenge with the authorization request" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Considerations to migrate to OAuth2.1:&lt;/p&gt; 
&lt;p&gt;PKCE requires an additional one-time code to be sent to the OAuth server. This is used to validate the request has not been intercepted or modified.&lt;/p&gt; 
&lt;p&gt;The OAuth 2.1 draft specification requires that the PKCE challenge must be used with every Authorization Code grant, protecting against the authorization code being hijacked by an attacker.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OAuth2.0 Security Topics" url="https://tools.ietf.org/html/draft-ietf-oauth-security-topics-15"/>
            <reference name="Proof Key for Code Exchange by OAuth Public Clients" url="https://tools.ietf.org/html/rfc7636"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that PKCE is being used as indicated in RFC7636.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.995">
              <output/>
            </source>
            <references>
              <reference name="Proof Key for Code Exchange by OAuth Public Clients" url="https://tools.ietf.org/html/rfc7636"/>
              <reference name="RFC7636" url="https://tools.ietf.org/html/rfc7636"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.4.3" name="Sign requests to resource server" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>A resource server may decide to accept signed requests only, either to replace transport-level security measures or to complement such measures. Every signed request should be uniquely identifiable and should not be processed twice by the resource server.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  This countermeasure helps to mitigate:&amp;nbsp; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;modifications of the message and&lt;/li&gt; 
   &lt;li&gt;replay attempts&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all requests sent from the authorization server to the resource servers are signed.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.996">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.1.5.9" name="Sign self-contained tokens" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Self-contained tokens should be signed in order to detect any attempt to modify or produce faked tokens (e.g., Hash-based Message Authentication Code or digital signatures).</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the signature of the self-contained token with a tool that can verify a hash.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.278">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.2.4.4" name="Token binding" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>An authorization server may bind a token to a certain client identifier. This identifier should be validated for every request with that token. This technique can be used to 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;detect token leakage and&lt;/li&gt; 
  &lt;li&gt;prevent token abuse.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;div&gt;
   Note: Validating the client identifier may require the target server to authenticate the client's identifier. This authentication can be based on secrets managed independently of the token (e.g., pre-registered client id/secret on authorization server) or sent with the token itself (e.g., as part of the encrypted token content).&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt;The authorization server should match every refresh token to the identifier of the client to whom it was issued. The authorization server should check that the same "client_id" is present for every request to refresh the access token. If possible (e.g., confidential clients), the authorization server should authenticate the respective client. This is a countermeasure against refresh token theft or leakage.&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Note: This binding should be protected from unauthorized modifications&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt;The authorization server may require the binding of authentication credentials to a device identifier. The International Mobile Station Equipment Identity [ 
  &lt;a href="https://tools.ietf.org/html/rfc6819#ref-IMEI" title="&amp;quot;International Mobile station Equipment Identities (IMEI)&amp;quot;"&gt;IMEI&lt;/a&gt;] is one example of such an identifier; there are also operating system-specific identifiers. The authorization server could include such an identifier when authenticating user credentials in order to detect token theft from a particular device. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Note: Any implementation should consider potential privacy implications of using device identifiers.&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   The authorization server should bind every authorization "code" to the id of the respective client that initiated the end-user authorization process. This measure is a countermeasure against: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Replay of authorization "codes" with different client credentials, since an attacker cannot use another "client_id" to exchange an authorization "code" into a token&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Online guessing of authorization "codes"&amp;nbsp;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Note: This binding should be protected from unauthorized modifications (e.g., using protected memory and/or a secure database).&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt;
   &amp;nbsp; 
  &lt;br&gt;The authorization server should be able to bind every authorization "code" to the actual redirect URI used as the redirect target of the client in the end-user authorization process. This binding should be validated when the client attempts to exchange the respective authorization "code" for an access token. This measure is a countermeasure against authorization "code" leakage through counterfeit web sites, since an attacker cannot use another redirect URI to exchange an authorization "code" into a token. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the following bindings are set: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Binding of authorization "code" to "client_id"&lt;/li&gt; 
  &lt;li&gt;Binding of authorization "code" to "redirect_uri"&lt;/li&gt; 
  &lt;li&gt;Binding of refresh token to "client_id"&lt;/li&gt; 
  &lt;li&gt;Bind tokens to a particular resource server (Audience)&lt;/li&gt; 
  &lt;li&gt;Issue a "client_id" only in combination with "redirect_uri"&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.996">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" issueId="" issueLink="" platform="" cost="2" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>
                        &lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or auto-binding when accepting values from an untrusted source and mapping them to trusted server side values increases the risk of tainted data being used unsafely.&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                         &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt;
                         &lt;li&gt;Use available features of the language or framework that allow specification of white lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt;
                         &lt;ul&gt;
                          &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible (white list) or attr_protected (black list) macros in each class that may be used in mass assignment.&lt;/li&gt;
                         &lt;/ul&gt;
                        &lt;/ul&gt;
                    </desc>
          <implementations>
            <implementation platform="Spring.java">
              <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="OWASP Juice Shop: XSS" url="https://pwning.owasp-juice.shop/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the framework the component is using.&lt;/li&gt;&lt;li&gt;Check if this particular framework provides automatic binding of variables.&lt;/li&gt;&lt;li&gt;Verify if it is disabled or restricted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-BH" name="Use blackholing to mitigate L4 DDoS attacks" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DDoS attack blocking, commonly referred to as blackholing, is a method typically used by ISPs to stop a DDoS attack on one of its customers. This approach to block DDoS attacks makes the site in question completely inaccessible to all traffic, both malicious attack traffic and legitimate user traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Blackholing is typically deployed by the ISP to protect other customers on its network from the adverse effects of DDoS attacks such as slow network performance and disrupted service. Common attacks are SYN flood and Smurf attack. For Smurf attack a simple solution is to disable IP broadcasting addresses at each network router and firewall.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Older routers are likely to enable broadcasting by default, while newer routers will likely already have it disabled.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;Disable broadcasting by default on old routers.&lt;/p&gt;&lt;p&gt;To implement RTBH (Remote Triggered Black Hole) Network Operator sets up a null route for the 192.0.2.1 address on all the backbone routers which participate in BGP:&lt;/p&gt;&lt;p&gt;ip route 192.0.2.1 255.255.255.255 null 0 254&lt;/p&gt;&lt;p&gt;192.0.2.1 is part of 192.0.2.0/24, the TEST-NET, one of the reserved IPv4 address blocks.&lt;/p&gt;&lt;p&gt;Create a route-map to catch routes which need to be blackholed&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static routes can be tagged in Cisco IOS - we will tag routes to be blackholed with the value of 66&lt;/li&gt;&lt;li&gt;Set origin to be iBGP&lt;/li&gt;&lt;li&gt;Set local-preference to be 150&lt;ul&gt;&lt;li&gt;higher than any other local-preference set in the backbone&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set community to be no-export and internal marker community (ASN:666)&amp;nbsp;&lt;ul&gt;&lt;li&gt;Don't want prefix to leak outside the AS&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set next-hop to 192.0.2.1 (IPv4) or 100::1 (IPv6)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Then introduce the route-map into the BGP configuration.&lt;/p&gt;&lt;p&gt;To implement the trigger, simply null route whatever address or address block needs to be blackholed:&lt;/p&gt;&lt;p&gt;ip route 50.62.124.1 255.255.255.255 null0 tag 66&amp;nbsp;&lt;/p&gt;&lt;p&gt;And this ensures that (for example) 50.62.124.1/32 is announced to the entire backbone with next-hop 192.0.2.1 set.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="RFC 4987 - TCP SYN Flooding Attacks and Common Mitigations" url="https://tools.ietf.org/html/rfc4987"/>
            <reference name="RFC 5635 - Remote Triggered Black Hole Filtering               with Unicast Reverse Path Forwarding (uRPF)" url="https://tools.ietf.org/html/rfc5635"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the implemented availability protection is effective. One useful tool to execute this kind of test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For example, you can simulate a TCP SYN DDoS Attack using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3 VICTIM_IP -flood -rand-source -destport 80 -syn -d 120 -w 64&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.774">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="27" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), should be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
&lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity that issues security tokens or electronic credentials to subscribers. A CSP forms part of an authentication system, most typically identified as a separate entity in a Federated authentication system. A CSP may be an independent third party, or may issue credentials for its own use. Credential Service Provider is typically also the Identity Provider (IDP). An example of a CSP would be an online site whose primary purpose may be, for example, internet banking - but whose users may be subsequently authenticated to other sites, applications or services without further action on their part.&lt;/p&gt;
&lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
&lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying the claimant's possession and control of one or two authenticators, using an authentication protocol.&lt;/p&gt;
&lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically to process a transaction or grant access to information or a system.&lt;/p&gt;
&lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and identity proofing.&lt;/p&gt;
&lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more authentication protocols.&lt;/p&gt;
&lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:40.335">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.1.5.3" name="Use short expiration time" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>A short expiration time for tokens is a means of protection against
   the following threats:&amp;nbsp;  
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;replay&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;token leak (a short expiration time will reduce impact)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;online guessing (a short expiration time will reduce the
      likelihood of success)&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;
Note: Short token duration requires more precise clock synchronization between the authorization server and resource server. Furthermore, shorter duration may require more token refreshes (access token) or repeated end-user authorization processes (authorization "code" and refresh token).</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the token expiration time in the authorization server policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:38.278">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-147" name="Validate input parameters to prevent HTTP Parameter Pollution" issueId="" issueLink="" platform="" cost="0" risk="40" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>All data received from external sources should be considered tainted and a potential risk, regardless of the source or transport method. HTTP Parameter Pollution attacks result when parameters are added or inserted into requests, and are inappropriately or unsafely handled by the server. For example, injection of parameters into strings or cookies sent to the application can result in the variables being interpreted out of sequence, exploiting flaws in the business logic and flow.
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;p&gt;For example, there was a bug in the Blogger platform which illustrates this vulnerability. The bug allowed malicious users to take ownership of the victim's blog by using the following HTTP request:&lt;/p&gt;
  &lt;blockquote&gt;
   &lt;p&gt;&lt;code&gt;POST /add-authors.do HTTP/1.1&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;blockquote&gt;
   &lt;p&gt;&lt;code&gt;security_token=attackertoken&amp;amp;&lt;b&gt;blogID=attackerblogidvalue&lt;/b&gt;&amp;amp;&lt;b&gt;blogID=victimblogidvalue&lt;/b&gt;&amp;amp;authorsList=goldshlager19test%40gmail.com(attacker email)&amp;amp;ok=Invite&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;p&gt;The flaw resided in the authentication mechanism used by the web application, as the security check was performed on the first&amp;nbsp;&lt;code&gt;blogID&lt;/code&gt;&amp;nbsp;parameter, whereas the actual operation used the second occurrence.&lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify parameters within the application used for authentication decisions, or critical business logic.&lt;/li&gt;&lt;li&gt;Send specially forged requests to the application in which those parameters are duplicated, or passed through other methods (e.g. POST parameters in the URL as GET fields, cookies as form fields etc.)&lt;ul&gt;&lt;li&gt;Review the application logic to ensure:&lt;/li&gt;&lt;li&gt;The same parameter is for all the decisions.&lt;/li&gt;&lt;li&gt;Parameters received over unexpected or non compliant methods result in a security exception.&lt;/li&gt;&lt;li&gt;Duplicate parameters are identified and result in a security exception.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application should fail-safe; i.e. unexpected or suspicious behavior should result in termination of the user's session and a security event being logged.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A number of tools can be used to aid in testing:&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly inside your browser with the Developer Tools&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data)&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.)&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Testing for HTTP Parameter Pollution" url="https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OTG-INPVAL-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-601" name="Whitelist which URLs the application may redirect to" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should maintain a list of URLs to which it may redirect users. This whitelisting can also be achieved by applying regular expressions. The application should only allow redirects to trusted URLS.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-04 Information Flow Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/26-08_02_AC-04"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the points of the application in which a redirection takes place. Redirections are usually indicated by the use of the "Location" HTTP header along with the "3xx" code.&lt;/li&gt;&lt;li&gt;Verify if the value inside the Location header is coming from user input (URL string, Cookies, HTTP headers, forms, etc.).&lt;/li&gt;&lt;li&gt;Modify the input value which will be part of the Location header to redirect to domains which should not be permitted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:48:39.523">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="availability" name="Availability" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-607" name="Attackers bring the service down by exhausting it (D)DoS" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker can bring a service down by exhausting either the network or the service itself.
    &lt;br&gt;
    &lt;br&gt;See references for more information.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="US Cert DDOS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
              </references>
              <weaknesses>
                <weakness ref="AV-DOS-APP">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L3">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L4">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-TLS">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="CS-Default">
          <threats>
            <threat ref="7k-CWE-Environment" name="Attackers gain unauthorised access to the application through an environment flaw" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This section includes everything that is outside of the source code but is still critical to the security of the product that is being created. Because the issues covered by this section are not directly related to source code, we separated it from the rest of the realms.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="ENV-USE" mitigation="50"/>
                    <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ENV-USE" mitigation="50"/>
                <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web-apps. In cases in which the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker could potentially access resources that should only be available to users of a higher privilege level, or access management sections of the application, or can run queries for data that he is otherwise not supposed to.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-276">
                  <countermeasures>
                    <countermeasure ref="deny-default-enf" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="deny-default-enf" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-214" name="An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information.
&lt;br /&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-460">
                  <countermeasures>
                    <countermeasure ref="error-handling-centralized" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="error-handling-centralized" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="token-counterfeiting" name="Attacker generates an ID token or modifies an existing one to obtain unauthorized access" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>To gain unauthorized access to a resource an adversary could create a fake token or modify the scope of an existing one</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-347">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.1.5.9" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-5.1.5.9" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="authz-bypass" name="Attackers attempt to bypass authorization flow" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An adversary exploits a weakness to bypass authorization system</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="RFC6819-4.2.1">
                  <countermeasures>
                    <countermeasure ref="RFC6819-4.2.1-C1" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.2.2">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.2.4.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.1.1">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.2.1.1" mitigation="12"/>
                    <countermeasure ref="oauth2.1-cons-3" mitigation="12"/>
                    <countermeasure ref="oauth2.1-cons-4" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.1.10">
                  <countermeasures>
                    <countermeasure ref="RFC6819-4.4.1.10-C1" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.1.4">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.2.4.1" mitigation="12"/>
                    <countermeasure ref="oauth2.1-cons-1" mitigation="12"/>
                    <countermeasure ref="oauth2.1-cons-2" mitigation="12"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.3.1">
                  <countermeasures>
                    <countermeasure ref="RFC6819-4.4.3.1-C1" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-4.2.1-C1" mitigation="50"/>
                <countermeasure ref="RFC6819-4.4.1.10-C1" mitigation="12"/>
                <countermeasure ref="RFC6819-4.4.3.1-C1" mitigation="50"/>
                <countermeasure ref="RFC6819-5.2.1.1" mitigation="12"/>
                <countermeasure ref="RFC6819-5.2.4.1" mitigation="12"/>
                <countermeasure ref="RFC6819-5.2.4.2" mitigation="16"/>
                <countermeasure ref="oauth2.1-cons-1" mitigation="12"/>
                <countermeasure ref="oauth2.1-cons-2" mitigation="12"/>
                <countermeasure ref="oauth2.1-cons-3" mitigation="12"/>
                <countermeasure ref="oauth2.1-cons-4" mitigation="12"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="impersonation-attempts" name="Attackers attempt to impersonate a privileged user to access to the resources" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An adversary attempts to impersonate a privileged user to access to the resources</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="RFC6819-4.4.1.5">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.2.4.4" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.1.7">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.2.3.4" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.3.3">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.2.2.1" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.6.2">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.4.3" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.6.7">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.1.5.4" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-5.1.5.4" mitigation="20"/>
                <countermeasure ref="RFC6819-5.2.2.1" mitigation="20"/>
                <countermeasure ref="RFC6819-5.2.3.4" mitigation="20"/>
                <countermeasure ref="RFC6819-5.2.4.4" mitigation="20"/>
                <countermeasure ref="RFC6819-5.4.3" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="token-guessing" name="Attackers attempt to retrieve token by guessing" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An adversary attempts to retrieve tokens by guessing</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="RFC6819-4.6.3">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.1.5.2" mitigation="50"/>
                    <countermeasure ref="RFC6819-5.1.5.3" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-5.1.5.2" mitigation="50"/>
                <countermeasure ref="RFC6819-5.1.5.3" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="hostile-subdomain-takeover" name="Attackers claim subdomains with the help of external services" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  This attack vector utilizes DNS entries pointing to Service Providers where the pointed sub-domain is currently not in use. Depending on the DNS-entry configuration and which Service Provider it points to, some of these services will allow unverified users to claim these sub-domains as their own.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  In the not so rare case, the attacker can also "inherit" the Domain Owner's Wildcard SSL used inside the Service Provider.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Attack Scenario&lt;/b&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ol&gt;
   &lt;li&gt;Your company starts using a new service, eg an external Support Ticketing-service.&lt;/li&gt;
   &lt;li&gt;Your company points a sub-domain to the Support Ticketing-service, eg support.your-domain.com&lt;/li&gt;
   &lt;li&gt;Your company stops using this service but does not remove the sub-domain redirection pointing to the ticketing system.&lt;/li&gt;
   &lt;li&gt;Attacker signs up for the Service and claims the domain as theirs. No verification is done by the Service Provider, and the DNS-setup is already correctly setup.&lt;/li&gt;
   &lt;li&gt;Attacker can now build a complete clone of the real site, add a login form, redirect the user, steal credentials (e.g. admin accounts), cookies and/or completely destroy business credibility for your company.&lt;/li&gt;
  &lt;/ol&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Hostile Subdomain Takeover using Heroku/Github/Desk + more" url="https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-350">
                  <countermeasures>
                    <countermeasure ref="identify-dns-domains" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="identify-dns-domains" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="common-vuln-exploitation" name="Attackers gain access by stealing user information through common vulnerabilities" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An adversary exploits common weaknesses like phishing, spoofing, etc. to escalate privileges</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="RFC6819-4.1.1">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.2.3.1" mitigation="25"/>
                    <countermeasure ref="RFC6819-5.2.3.2" mitigation="25"/>
                    <countermeasure ref="RFC6819-5.2.3.6" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.1.1">
                  <countermeasures>
                    <countermeasure ref="RFC6819-5.1.5.1" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-5.1.5.1" mitigation="25"/>
                <countermeasure ref="RFC6819-5.2.3.1" mitigation="25"/>
                <countermeasure ref="RFC6819-5.2.3.2" mitigation="25"/>
                <countermeasure ref="RFC6819-5.2.3.6" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SOURCE-LEAK" name="Attackers gain control of the system through a source code leakage" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Attackers gain unauthorized access to a service by reading raw source code returned by the service, and this code contains confidential information such as authentication credentials or other secrets that can be used to access the service.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Configuration files that can be downloaded from the service could also be leveraged to gain access to sensitive information.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-541">
                  <countermeasures>
                    <countermeasure ref="CWE-541" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-541" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-172" name="Attackers subvert the intended workflow of the application in order to perform unauthorised operations" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>	&lt;p&gt;If an application enforces an order in workflows, then attackers could attempt to bypass this order so that they can perform operations for which they are not authorized. The technique can also be used to gain access to unauthorized data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-841">
                  <countermeasures>
                    <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                    <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-770">
                  <countermeasures>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                    <countermeasure ref="network-rate-limit" mitigation="34"/>
                    <countermeasure ref="protection-against-data-mining" mitigation="33"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.1.11">
                  <countermeasures>
                    <countermeasure ref="RFC6819-4.4.1.11-C1" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="RFC6819-4.4.1.12">
                  <countermeasures>
                    <countermeasure ref="RFC6819-4.4.1.12-C2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RFC6819-4.4.1.11-C1" mitigation="50"/>
                <countermeasure ref="RFC6819-4.4.1.12-C2" mitigation="50"/>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="protection-against-data-mining" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-272">
                  <countermeasures>
                    <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-586-SER" name="An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-502">
                  <countermeasures>
                    <countermeasure ref="SER-UNTRUST" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="SER-UNTRUST" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-62" name="An attacker crafts malicious web links and distributes them hoping to induce users to click on the link and execute a malicious action" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level.
&lt;br&gt;This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply "riding" the existing session cookie.
&lt;br&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="ASVS-18.8" mitigation="34"/>
                    <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                    <countermeasure ref="cwe-352-csrf" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-18.8" mitigation="34"/>
                <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                <countermeasure ref="cwe-352-csrf" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="open-redirect-threat" name="An attacker leverages the redirection functionality in the application to conduct more convincing phishing attacks" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An http parameter may contain a URL value for redirecting the request to another specified URL. By modifying this URL value to point towards a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy and convincing appearance.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-601">
                  <countermeasures>
                    <countermeasure ref="CWE-601" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-601" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-117" name="An attacker monitors HTTP headers from a target in order to gather information" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker monitors data streams to or from a target in order to gather information.
                                This attack may be undertaken in order to gather information to support a later attack,
                                or the data collected may be the end goal of the attack. This attack usually involves
                                sniffing network traffic, but may include observing other types of data streams, such as
                                radio. In most varieties of this attack, the attacker is passive and simply observes
                                regular communication, however in some variants the attacker may attempt to initiate the
                                establishment of a data stream or influence the nature of the data transmitted. However,
                                in all variants of this attack, and distinguishing this attack from other data
                                collection methods, the attacker is not the intended recipient of the data stream.
                                Unlike some other data leakage attacks, the attacker is observing explicit data channels
                                (e.g. network traffic) and reading the content. This differs from attacks that collect
                                more qualitative information, such as communication volume, or other information not
                                explicitly communicated via a data stream.
                            </desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="ASVS-11.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-11.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-267" name="Attackers encode potentially harmful input and submit it to bypass input filtering protections" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack leverages the possibility of encoding potentially harmful input and submitting it to applications not expecting or effective at validating this encoding, thus, thwarting the validation.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-173">
                  <countermeasures>
                    <countermeasure ref="harden-http-headers" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-235">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="50"/>
                <countermeasure ref="harden-http-headers" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-300" name="Attackers gain control of the connection through a Man In The Middle attack" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.&amp;nbsp; &amp;nbsp;
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-MASS" name="Functionality could be subverted through mass assignment" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>If the application binds parameters to back-end objects, then attackers could potentially set fields on those objects that were not designed to be modified by the user.</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-915">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                    <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-101" name="Unauthorised data could be accessed by manipulating parameters sent to the application" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>The application could be tricked into exposing data to unauthorized users by
                                manipulating the parameters it accepts. All data received from the client side could be
                                subject to manipulation, including fields like cookies and HTTP headers, if these are
                                used as inputs to the application.
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-22">
                  <countermeasures>
                    <countermeasure ref="CWE-639" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-548">
                  <countermeasures>
                    <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-650">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="25"/>
                <countermeasure ref="CWE-639" mitigation="25"/>
                <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="769af225-d13b-4813-96ef-d48038e1a699" diagramComponentId="1617c6c4-010c-45c8-9085-1837a1d600c3" ref="d8b0b4ff-d891-43e6-8637-fa76bed6da36" name="Login" desc="" library="IR-Functional-Components" parentComponentRef="1109d524-d643-4eca-92e2-38b9ccf070f7" componentDefinitionRef="CD-LOGIN">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="C-SET-TIMESTAMP-ON-REQUEST" name="Attach timestamps or sequence numbers to each sent message" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To avoid replay attacks, a type of man in the middle attack, it is recommended to add a timestamp or sequence numbers in the exchanged messages, this will allow the receiver to discard messages with a duplicated sequence number or timestamp.&lt;/p&gt;&lt;p&gt;An example of sequence number in its messages is the TCP protocol with its ACK.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Transaction Authorization Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Transaction_Authorization_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Review code application.&lt;/li&gt;&lt;li&gt;Check the exchanged messages and verifies if there is a timestamp or sequence number and that no duplicates are allowed.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-654" name="Authenticate users (multi - or two-factor - authentication [2FA])" issueId="" issueLink="" platform="" cost="1" risk="0" state="Recommended" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For more sensitive applications hosting data or functionality requiring greater assurance over the identification of users, a multi - or two-factor - authentication process is recommended. Together with asserting their identity and a password/phrase/PIN (something you know), such systems require additional factors, such as biometric validation (something you are), user-initiated action such as a button press on a FIDO hardware key or a token (something you have).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement multi-factor authentication for applications providing access to sensitive data or functionality, and for highly privileged user access (e.g. administrators).&lt;/li&gt;&lt;li&gt;This should leverage something such as a soft or hard-token verification in addition to the secret password/pass-phrase for example.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
          </references>
          <standards>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.8" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.8" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5.2.3" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.5" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.9" supportedStandardRef="nist-800-63"/>
            <standard ref="6.1.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check for authentication functions of the component.&lt;/li&gt;&lt;li&gt;Verify at least a combination of the following factors is used within the authentication process.&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;Something that you are: mainly biometric characteristics of yourself such as fingerprint, facial recognition, iris recognition, etc.)&lt;/li&gt;&lt;li&gt;Something that you know: a PIN, password, pass phrase, etc.&lt;/li&gt;&lt;li&gt;Something that you have: a hardware token, a card, a dongle, a mobile phone, etc.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AUTHZ-AFTER-AUTHN" name="Authorize after you authenticate" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Authorization should be conducted as an explicit check, and as necessary even after an initial authentication has been completed. Authorization depends not only on the privileges associated with an authenticated user, but also on the context of the request. The time of the request and the location of the requesting user may both need to be taken into account.&lt;/p&gt;&lt;p&gt;Sometimes a user's authorization for a system or service needs to be revoked, for example, when an employee leaves a company. If the authorization mechanism fails to allow for such revocation, the system is vulnerable to abuse by authenticated users exercising out-of-date authorizations.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Authorize After You Authenticate" url="https://cybersecurity.ieee.org/blog/2015/11/13/authorize-after-you-authenticate/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Validate that no authorization process is conducted before an authentication process has previously finished.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.362">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SAML-VERIFY-IDP-X509" name="Check if the X509Certificate entity is really the correct certificate for your Identity Provider" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;It is necessary to ensure the identity of the supplier by verifying the certificate of the messages, to ensure that it is the correct one.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="SAML Raider - SAML2 Burp Extension" url="https://github.com/portswigger/saml-raider"/>
            <reference name="SAML Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check if it is possible to remove the signature&lt;/li&gt;&lt;li&gt;Sign the SAML Response with own certificate&lt;/li&gt;&lt;li&gt;Check the signature algorithm in use&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-524" name="Clear caches of sensitive data" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Applications storing or caching data locally are at risk of attack and compromise of that data. Local temporary storage, thumbnail images, and configuration files often contain excerpts of sensitive information that may be left on the device during or after the application is used.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure all temporary files, caches, and storage are purged after use and when the application is closed.&lt;/li&gt;&lt;li&gt;Do not allow the application to cache sensitive information outside of the OS provided secure stores.&lt;/li&gt;&lt;li&gt;Use OS controls to restrict thumbnails of the application in cases where sensitive information is displayed.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP MASVS - Android - Testing Whether the Keyboard Cache Is Disabled for Text Input Fields" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05d-testing-data-storage#determining-whether-the-keyboard-cache-is-disabled-for-text-input-fields-mstg-storage-5"/>
            <reference name="OWASP MASVS - iOS - Testing for Sensitive Data in the Clipboard" url="https://mobile-security.gitbook.io/mobile-security-testing-guide/ios-testing-guide/0x06d-testing-data-storage#finding-sensitive-data-in-the-keyboard-cache-mstg-storage-5"/>
          </references>
          <standards>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="2.4" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check the application for the use of caching.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify they are periodically emptied.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.858">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-IMPLEMENT-SSO" name="Consider using Single Sign-on (SSO)" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Single Sign-on (SSO) occurs when a user logs in to one application and is then signed in to other applications automatically, regardless of the platform, technology, or domain the user is using. The user signs in only one time, hence the name of the feature (Single Sign-on).&lt;/p&gt;&lt;p&gt;SSO provides a seamless experience for users when using your applications and services. Instead of having to remember separate sets of credentials for each application or service, users can simply log in once and access your full suite of applications.&lt;/p&gt;&lt;p&gt;Whenever users go to a domain that requires authentication, they are redirected to the authentication domain where they may be asked to log in. If the user is already logged in at the authentication domain, they can be immediately redirected to the original domain without signing in again.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Single Sign-On" url="https://auth0.com/docs/authenticate/single-sign-on"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if there is any chance to connect to a SSO from your application&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.362">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-603" name="Enforce authentication on the server-side" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data on the client-side must be considered tainted. &amp;nbsp;As such, decisions on authentication (or Identification and Verification - ID&amp;amp;V) must be made or validated on the server-side to prevent their subversion.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure credentials are passed securely from client-to server.&lt;/li&gt;&lt;li&gt;The server should compare the credentials with those stored on the server-side (e.g. the hashed password compared against those stored for the claimed identity).&lt;/li&gt;&lt;li&gt;Implement controls to mitigate brute-force attacks; for example through rate-limiting, account lockouts, or escalating timeouts.&lt;/li&gt;&lt;li&gt;Once authenticated, a non-predictable and cryptographically secure token should be passed securely to the client-side to validate further interaction with the server.&lt;/li&gt;&lt;li&gt;Messages returned to the user during authentication, in particular when the process fails, should not reveal to the user whether the username was valid. &amp;nbsp;Returning generic errors prevents an attacker enumerating valid account IDs for subsequent attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(d)" supportedStandardRef="hipaa-required"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.7.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.7.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.3.2" supportedStandardRef="nist-800-63"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify which functions the service provides which are authenticated or performing a privileged action.&lt;/li&gt;&lt;li&gt;Try to access them without providing any type of authentication.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A clear example of what you should look for would be an API endpoint which allows a client to update a resource, you should ensure this call checks the authentication on the server side (by checking the session having validated the authentication credentials previously).&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;In every portion of the application where a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-598" name="Ensure no sensitive data is sent in the URL" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed in the URL (address bar) between client and server is likely to be exposed in logs on the server, or intermediate devices (such as proxies or other network devices), or in local browser logs/history. A common mistake is, for example, to pass a SessionID value as a parameter in the URL of a get request between hosts. To mitigate the risk of exposure of sensitive data, this sensitive data should only be sent in the body of an HTTP message (for example a POST request), or in the HTTP headers (i.e. standard headers such as the Cookie values, or a custom X- header).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure sensitive, private, or otherwise restricted data is not sent in a URL value.&lt;/li&gt;&lt;li&gt;Pass sensitive data only in appropriately protected fields in the body or headers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Sensitive Data Exposure" url="https://pwning.owasp-juice.shop/part2/sensitive-data-exposure.html"/>
          </references>
          <standards>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A02:2021-Cryptographic Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A3:2017-Sensitive Data Exposure" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy.&lt;/li&gt;
                            &lt;li&gt;Programmatically or manually visit all authenticated content and functionality
                            within the application.&lt;/li&gt;
                            &lt;li&gt;Review logs to determine if sensitive data is sent in the URL at any point. If
                            should only be sent in HTTP headers (i.e. a cookie) or as part of the body (e.g. in a POST
                            or PUT request).&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                            &lt;ol&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:54.213">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.1" name="Ensure sensitive data is not revealed through error output messages" issueId="" issueLink="" platform="" cost="0" risk="37" state="Implemented" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure the application does not output error messages or stack traces containing sensitive
                        data that could assist an attacker, including the session id, software/framework versions and
                        personal information.</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
          </references>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application does not output error massages or stack traces containing sensitive data.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:54.361">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" name="Ensure that access control mechanisms are centralized" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access control, authentication and authorization procedures should be centralized, and all roles, permissions, groups and users shall be controlled - or gain access - through this mechanism.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To ensure roles, groups and permissions are assigned properly to users, we need to have centralized access control, to grant or deny access easily and securely.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that access control mechanisms are centralized.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.360">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.038">
              <output/>
            </source>
            <references>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from un-trusted data" issueId="" issueLink="" platform="" cost="0" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.037">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-FORCE-LOGOUT" name="Force logout if account permissions have been revoked" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Active sessions could be used by a malicious actor even after the account has been removed or blocked from the system. This could open the door to MitM attacks and session hijacking attacks while the application connects to the IdP to confirm that the session has no more rights to operate.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Man-in-the-middle Attack" url="https://owasp.org/www-community/attacks/Manipulator-in-the-middle_attack"/>
            <reference name="Session Hijacking Attack" url="https://owasp.org/www-community/attacks/Session_hijacking_attack"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check periodically the session status with the SSO/IdP and force the log off process in case the active account was blocked/deleted.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:54.362">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;THC-Hydra&lt;/a&gt;, &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;OWASP ZAP&lt;/a&gt; or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite &lt;/a&gt;to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-session-generation-and-expiration" name="Implement a secure Session Generation and Expiration" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID exchange mechanism based on cookies provides multiple security features in the form of Session Generation and Expiration which is tracked in a session. This session is typically stored on the server for traditional web based session management. A session identifier is then given to the user so they can identify which server-side session contains the correct user data. The client only needs to maintain this session identifier, which also keeps sensitive server-side session data off of the client.&lt;/p&gt;&lt;p&gt;Here are a few controls to consider when building or implementing session management solutions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure that the session id is long, unique and random. The session ID length must be at least 128 bits (16 bytes)&lt;/li&gt;&lt;li&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks such as when an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good PRNG (Pseudo Random Number Generator) must be used. The session ID value must provide at least 64 bits of entropy (if a good PRNG is used, this value is estimated to be half the length of the session ID).&lt;/li&gt;&lt;li&gt;The application should generate a new session or at least rotate the session id during authentication and re-authentication.&lt;/li&gt;&lt;li&gt;The application should not treat OAuth and refresh tokens as their own session identifiers. Moreover, it should allow users to terminate trust relationships with linked applications.&lt;/li&gt;&lt;li&gt;The CSPs (Credential Service Provider) should re-authenticate the subscriber if it has not been authenticated since a given inactivity period. CSPs should inform the RP (Relying Parties) the last authentication time, to know if re-authentication is needed.&lt;/li&gt;&lt;li&gt;When a user chooses to log out (or otherwise has their session terminated), the user session must be terminated on the server-side, not solely at the client-side (for example by deleting or reissuing a session ID token/cookie).&lt;ul&gt;&lt;li&gt;Revoke user sessions on the server-side.&lt;/li&gt;&lt;li&gt;Redirect users to the login page, or provide a login prompt.&lt;/li&gt;&lt;li&gt;Where possible, ensure the session is not reused by the application server.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application should implement an idle timeout after a period of inactivity and an absolute maximum lifetime for each session, after which users must re-authenticate. If the application has implemented a functionality to be always logged in, the application must force users to re-authenticate for more sensitive actions.&lt;/li&gt;&lt;li&gt;The length of the timeouts should be inversely proportional with the value of the data protected.&lt;ul&gt;&lt;li&gt;30 days&lt;/li&gt;&lt;li&gt;12 hours or 30 minutes of inactivity, 2FA optional&lt;/li&gt;&lt;li&gt;12 hours or 15 minutes of inactivity, with 2FA&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.14" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.5" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.5" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1" supportedStandardRef="nist-800-63"/>
            <standard ref="7.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7.2.1" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Check that sessions are renewed following the steps below:&lt;ul&gt;&lt;li&gt;Log in to the application.&lt;/li&gt;&lt;li&gt;Open another browser and go to the login page.&lt;/li&gt;&lt;li&gt;Log in to the application for the second time.&lt;/li&gt;&lt;li&gt;Check that the old session and session id are removed.&lt;/li&gt;&lt;li&gt;Check that a new session is created with new session id.&lt;/li&gt;&lt;li&gt;Check that the old and new session ids are different.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that sessions tokens are generated from a source with sufficient entropy and they are not predictable.&lt;/li&gt;&lt;li&gt;Check that the refresh tokens and OAuth sessions with linked applications have not been terminated by users.&lt;/li&gt;&lt;li&gt;Check the CSPs force the RP to re-authenticate after a certain period of inactivity.&lt;/li&gt;&lt;li&gt;Check that the logout and expiration invalidate the session token, following the steps below:&lt;ul&gt;&lt;li&gt;Open a browser.&lt;/li&gt;&lt;li&gt;Authenticate as a user A.&lt;/li&gt;&lt;li&gt;Get the Session ID and note it.&lt;/li&gt;&lt;li&gt;Logout of the service.&lt;/li&gt;&lt;li&gt;Set up the noted Session ID.&lt;/li&gt;&lt;li&gt;Try to access an authenticated section of the service and you should not be able to do it as user A.&lt;/li&gt;&lt;li&gt;To edit the cookies you can either use a proxy (i.e. OWASP ZAP, Burp, Fiddler, etc.) or a browser extension which allows you to tamper the cookies (i.e. Tamper Data, Cookie Manager, etc.).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check that the session expires after a certain period of inactivity following the steps below:&lt;ul&gt;&lt;li&gt;Verify the expected inactive timeout.&lt;/li&gt;&lt;li&gt;Check 'normal' use through a browser:&lt;ul&gt;&lt;li&gt;Go to the authentication feature of the component.&lt;/li&gt;&lt;li&gt;Authenticate as a user.&lt;/li&gt;&lt;li&gt;Leave the session open for a given time (check the expiration time that has been agreed to be implemented).&lt;/li&gt;&lt;li&gt;Revisit an authenticated page and determine if the session has expired (e.g. the session is no longer authenticated).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check the control is enforced on the server side and not using code in the browser:&lt;ul&gt;&lt;li&gt;Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and determine which cookies or other tokens are used to maintain session state. Alternatively, capture an authenticated application request for replay.&lt;/li&gt;&lt;li&gt;Store and replay the request after the timeout period to see if the application responds with authenticated data.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Review application operation and determine if any behavior artificially holds the session open, for example, heartbeat requests or calls to update data feeds sent from the client to the server are sometimes mistakenly interpreted as user activity, holding the session open.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.364">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="37" state="Implemented" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:54.364">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-THREAD-CONCURRENCY" name="Implement threading, concurrency and asynchronicity" issueId="" issueLink="" platform="" cost="0" risk="37" state="Recommended" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to make your application more responsive to a user and maximize the performance of your user's computer, we have different coding techniques. Not so long ago, apps got faster simply by buying a newer PC or server and then that trend has reversed. Users still want responsive UI and business owners want servers that scale with their business. The transition to mobile and cloud and an internet-connected population of &amp;gt;3B users has resulted in a new set of software patterns.&lt;/p&gt;&lt;p&gt;Using multiple threads of execution is one of the most powerful ways to keep your application responsive to the user and at the same time make use of the processor in between or even during user events.&lt;/p&gt;&lt;p&gt;We use concurrency to take advantage of the hardware, so you can parallelize your code to distribute work across multiple processors.&lt;/p&gt;&lt;p&gt;Async programming is a key technique that makes it straightforward to handle blocking I/O and concurrent operations on multiple cores.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Parallel Processing, Concurrency, and Async Programming in .NET" url="https://docs.microsoft.com/en-us/dotnet/standard/parallel-processing-and-concurrency"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Look for bottlenecks in the workflow of the application that may cause a denial of service attack if exploited such as a misconfigured file reader that blocks the main thread if more than one file is uploaded to the application.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-ACCOUNT-LOCKDOWN" name="Instead of completely locking out an account, place it in a lockdown mode with limited capabilities" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Depending on how critical the application is, accounts can be entirely locked out or just flagged to have most of their permissions removed. This is useful to ensure that the user experience remains good while at the same time protect the system of potential attacks due to an account misuse.&lt;/p&gt;&lt;p&gt;Developers should check that this lockdown mode doesn't reveal any potential information that could be relevant to an attacker as well as the actions that the user can do. Developers must provide a process to recover the account to its normal behavior.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Attempt to login several times with a wrong password&lt;/li&gt;&lt;li&gt;Login with the right password and check if the behavior is the same with and without having failed the login attempts.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.362">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-TOKEN-TIMEOUT" name="Invalidate a session after a predefined idle time has passed" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to keep the authenticated state and track the users progress, applications provide users with a session identifier or token which binds the user authentication credentials to the user HTTP traffic and the appropriate access controls enforced by the web application.&lt;/p&gt;&lt;p&gt;It is mandatory to set expiration timeouts for every session, establishing the amount of time a session will remain active. Insufficient session expiration by the web application increases the exposure of other session-based attacks, as for the attacker to be able to reuse a valid session ID and hijack the associated session.&lt;/p&gt;&lt;p&gt;The session expiration timeout values must be set accordingly with the purpose and nature of the web application, and balance security and usability. There are two automatic session expiration, iddle timeout and absolute timeout. Both values are highly dependent on how critical the web application and its data are. Common idle timeouts ranges are 2-5 minutes for high-value applications and 15-30 minutes for low risk applications. Absolute timeouts depend on how long a user usually uses the application. If the application is intended to be used by an office worker for a full day, an appropriate absolute timeout range could be between 4 and 8 hours.&lt;/p&gt;&lt;p&gt;When a session expires, the web application must take active actions to invalidate the session on both sides, client and server. The latter is the most relevant and mandatory from a security perspective.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Set session timeout to the minimal value possible depending on the context of the application.&lt;/li&gt;&lt;li&gt;Avoid "infinite" session timeout.&lt;/li&gt;&lt;li&gt;Prefer declarative definition of the session timeout in order to apply a global timeout for all application sessions.&lt;/li&gt;&lt;li&gt;Trace session creation/destruction in order to analyse the creation trend and try to detect a normal number of session creations (application profiling phase in a attack).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-OTP-BRUTE-FORCE" name="Prevent brute force attacks" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement appropriate protection to prevent users from brute-forcing token generation and token checking with mechanisms such as rate limiting or CAPTCHA. And remember that OTP length must be at least 6 characters long and a combination of different characters (not only numbers, not only letters, ...).&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Protect Against Automated Attacks" url="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html#protect-against-automated-attacks"/>
          </references>
          <standards>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if there is any captcha enabled and investigate if making continuous requests with an automated tool like Burp it is still accepting the request and generating or checking OTPs.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:53.905">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-OTP-INVALID" name="Prevent old or used OTPs from being reused by invalidating them" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;One-time passwords (OTP) are secrets used during operations that need added security or as part of user enrollment processes. Despite their short lifespan, only one OTP should be valid at any given time, and therefore, all previous OTPs should be invalidated whenever a new one is generated or after the OTP has expired.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Forgot Password Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"/>
            <reference name="Invalidate Previous OTPs" url="https://docs.fluidattacks.com/criteria/requirements/347"/>
          </references>
          <standards>
            <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.8.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Request an OTP and try to use it a couple of times. Verify that the OTP cannot be used twice or more.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:53.906">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-PREVENT-SIMULTANEOUS-LOGIN" name="Prevent Simultaneous Logins" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;It's possible that the application needs or wants to have simultaneous session, in this case, please control the number of the total active session and limit it.&lt;/p&gt;&lt;p&gt;If the application does not want to allow simultaneous session logons, it must take effective actions after each new authentication event, implicitly terminating the previously available session, or asking the user (through the old, new or both sessions) about the session that must remain active.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Open different browsers, or a "normal" tab and an "anonymous" tab, and check the following points:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Have you received some notification in some tab?&lt;/li&gt;&lt;li&gt;Was it possible to log in on the new login attempt? if the answer is yes, then has the previously open session been closed?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If the first session has been closed, it is recommended to check that it has been carried out correctly. To do this, use a proxy in the process, and forward requests prior to logout and check the response.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.362">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SESSION-ID-ON-PARAMETER" name="Prevent the attacker from making the user use his session by accepting session IDs only from cookies, not from GET or POST parameters" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The preferred session ID exchange mechanism should allow defining advanced token properties, such as the token expiration date and time, or granular usage constraints. This is one of the reasons why cookies (RFCs 2109 &amp;amp; 2965 &amp;amp; 6265) are one of the most extensively used session ID exchange mechanisms, offering advanced capabilities not available in other methods.&lt;/p&gt;&lt;p&gt;The usage of specific session ID exchange mechanisms, such as those where the ID is included in the URL, might disclose the session ID (in web links and logs, web browser history and bookmarks, the Referer header or search engines), as well as facilitate other attacks, such as the manipulation of the ID or session fixation attacks.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Review the code and check where the session ID is set.&lt;/li&gt;&lt;li&gt;Functional test, review the traffic (requests and responses), and verify thtat the session ID only appears in the cookie.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="require-use-strong-passwords" name="Require the use of strong passwords" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords used either as a sole verification credentials, or as part of a multi-factor authentication, are a key aspect of application security, and strong password selection should be encouraged and enforced. The application should allow flexibility in user password selection, and enforce minimum criteria for password quality. This should include:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Minimum password length requirements, to mitigate brute-force and dictionary attacks.&lt;/li&gt; 
 &lt;li&gt;Encourage use of pass-phrases using multiple words, achieving longer passwords more resistant to attack.&lt;/li&gt; 
 &lt;li&gt;Enforce use of mixed case, numeric and/or special characters to increase complexity.&lt;/li&gt; 
 &lt;li&gt;Prevent or discourage use of dictionary words and common passwords through black-lists. For example, a set of commonly used passwords can be found on SecLists at &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&amp;nbsp;&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password length:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password length considers the minimum and maximum length of characters comprising the password of your users. For ease of changing this length, its implementation can be configurable possibly using a properties file or xml configuration file.&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;b&gt;Minimum length. &lt;/b&gt;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Memory secrets shall be at least 8 characters long. &lt;/li&gt; 
  &lt;li&gt;Memory secrets generated automatically shall be at least 6 numeric characters.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Maximum length. &lt;/b&gt;People tend to forget their passwords easily. The longer the password, the more likely people are to enter them incorrectly for the system. However, long pass-phrases can be easily remembered, and should not be prevented through unnecessarily strict upper restrictions on length. &lt;/span&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Passwords with 64 characters or longer shall be permitted.&amp;nbsp;&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;b&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt;&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;Password Complexity:&lt;/span&gt;&lt;/p&gt;&lt;/b&gt; 
&lt;ul&gt; 
 &lt;ul&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Passwords with consecutive multiple spaces shall be coalesced and converter into only one space. After this modification, the password length shall be at least 12 characters long.&lt;/li&gt; 
 &lt;li&gt;Unicode characters shall be allowed in the password. A single Unicode code point is considered a character.&lt;/li&gt; 
 &lt;li&gt;Reject those passwords whose are commonly used and they have been already been leaked in a previous compromise. You may choose to block the top 1000 or 10000 most common passwords which meet the above length requirements and are found in compromised password lists. The following link contains the most commonly found passwords: &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords"&gt;https://github.com/danielmiessler/SecLists/tree/master/Passwords&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Actual passwords must not be stored, to protect them against brute forcing if the database is compromised Screen reader support enabled.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Password Topologies:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ban commonly used password topologies.&lt;/li&gt; 
 &lt;li&gt;Force multiple users to use different password topologies.&lt;/li&gt; 
 &lt;li&gt;Require a minimum topology change between old and new passwords.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style="font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;b&gt;Additional Information:&lt;/b&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Make sure that every character the user types in is actually included in the password. We've seen systems that truncate the password at a length shorter than what the user provided (e.g., truncated at 15 characters when they entered 20).&lt;/li&gt; 
 &lt;li&gt;As application's require more complex password policies, they need to be very clear about what these policies are. The required policy needs to be explicitly stated on the password change page&lt;/li&gt; 
 &lt;li&gt;If the new password doesn't comply with the complexity policy, the error message should describe EVERY complexity rule that the new password does not comply with, not just the 1st rule it doesn't comply with.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ul&gt; 
&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Blacklist Top Leaked Passwords" url="https://github.com/danielmiessler/SecLists/tree/master/Passwords"/>
            <reference name="NIST 800-63-B: 5.1.2.2" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="Owasp CheatSheet: Authentication" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.1.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.10.1" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.1" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.11" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.13.14" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.13.14" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.8.4" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.4" supportedStandardRef="iotsf-class-2"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="A.3" supportedStandardRef="nist-800-63"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt; 
 &lt;li&gt;Verify the passwords comply with the company policy for strong passwords.&lt;/li&gt; 
 &lt;li&gt;If there is no policy, check the strength against industry standards as NIST or OWASP.&lt;/li&gt; 
&lt;/ol&gt;An example of strong password policy (&amp;nbsp; 
&lt;a href="https://www.owasp.org/index.php/Authentication_Cheat_Sheet#Implement_Proper_Password_Strength_Controls"&gt;from the OWASP Authentication Cheat Sheet&lt;/a&gt;) is: Password must meet at least 3 out of the following 4 complexity rules: 
&lt;ul&gt; 
 &lt;li&gt;at least 1 uppercase character (A-Z)&lt;/li&gt; 
 &lt;li&gt;at least 1 lowercase character (a-z)&lt;/li&gt; 
 &lt;li&gt;at least 1 digit (0-9)&lt;/li&gt; 
 &lt;li&gt;at least 1 special character (punctuation). Do not forget to treat space as special characters too&lt;/li&gt; 
 &lt;li&gt;at least 10 characters&lt;/li&gt; 
 &lt;li&gt;at most 128 characters&lt;/li&gt; 
&lt;/ul&gt;not more than 2 identical characters in a row (e.g., 111 not allowed).</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-NEW-LOCATION-LOGIN-ALERT" name="Send a message to the user each time the system detects that the user is logging in from a new device or IP" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Aside from the IP address, there are a number of different factors that can be used to attempt to fingerprint a device. Some of these can be obtained passively by the server from the HTTP headers (particularly the "User-Agent" header), including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Operating system&lt;/li&gt;&lt;li&gt;Browser&lt;/li&gt;&lt;li&gt;Language&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using JavaScript it is possible to access far more information, such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Screen resolution&lt;/li&gt;&lt;li&gt;Installed fonts&lt;/li&gt;&lt;li&gt;Installed browser plugins&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Using these various attributes, it is possible to create a fingerprint of the device. This fingerprint can then be matched against any browser attempting to login to the account, and if it doesn't match then the user can be prompted for additional authentication. Many users will have multiple devices or browsers that they use, so it is not practical to block attempts that do not match the existing fingerprints.&lt;/p&gt;&lt;p&gt;To take in mind: data submitted from client can be spoofed by an attacker.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Credential Stuffing Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use the application and try to log in from different devices. Note the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Does the notification arrive?&lt;/li&gt;&lt;li&gt;Are the user's trusted devices saved in server (DB)?&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.362">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-525-CACHING" name="Set Cache-Control headers on sensitive and authenticated content" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Browsers, servers, and upstream/intermediate devices may cache (temporarily store) data sent in
                        HTTP sessions for performance reasons. The protocol allows for a number of HTTP headers and
                        directives to control what data may be cached, where, and for how long. It is important to specify
                        cache-controls to prevent the exposure of sensitive data through the inappropriate caching
                        of authenticated and otherwise restricted access data, either in the users' browser or other
                        devices.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Configure the server or application to set cache-control headers on sensitive content.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;The following headers are recommended:&lt;/li&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Expires: Tue, 03 Jul 2001 06:00:00 GMT 9.4&lt;/li&gt;
                        &lt;li&gt;Last-Modified: {now} GMT&lt;/li&gt;
                        &lt;li&gt;Cache-Control: no-store, no-cache, must-revalidate, max-age=0&lt;/li&gt;
                        &lt;li&gt;Cache-Control: post-check=0, pre-check=0&lt;/li&gt;
                        &lt;li&gt;Pragma: no-cache&amp;nbsp;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
          </references>
          <standards>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to ensure appropriate cache directives are returned for all sensitive and authenticated content.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component end-points.&lt;/li&gt;&lt;li&gt;Verify the cache controls returned as part of these responses.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite):&lt;ul&gt;&lt;li&gt;Browse the site through the proxy.&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze cache headers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The following is an example of what should be set to prevent a disclosure of sensitive data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Expires: Tue, 03 Jul 2001 06:00:00 GMT 9.4&lt;/li&gt;&lt;li&gt;Last-Modified: {now} GMT&lt;/li&gt;&lt;li&gt;Cache-Control: no-store, no-cache, must-revalidate, max-age=0&lt;/li&gt;&lt;li&gt;Cache-Control: post-check=0, pre-check=0&lt;/li&gt;&lt;li&gt;Pragma: no-cache&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.859">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="store-passwords-unrecoverable-form" name="Store passwords in an unrecoverable form" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;span&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-family: Arial; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;To protect user passwords from accidental or deliberate exposure, the application should store cryptographic hashes of passwords instead of the actual passwords.&lt;/span&gt;&lt;/p&gt; 
 &lt;ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Do not store actual passwords in the data storage for verification during login.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Instead, create a cryptographic hash of the password using a strong hash function that includes a work factor and a built in 'salt' value, like bcrypt or scrypt. This reduces the risk of brute-force attacks and rainbow tables, and allows flexibility to adapt the hashing function to balance security and performance. Establish some restrictions, depending on the used function:&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;The salt length must be at least 32 bits.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If bcrypt is used, the work factor must be as large as verification server performance allows, typically at least 13.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
   &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;If we use the PBKDF2, the iteration count shall be as large as verification server performance allows, and it will typically allow at least 100,000 iterations.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
  &lt;li&gt;&lt;p&gt;&lt;span style="font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;Alternatively, use a strong hash function like SHA-384 together with a unique 'salt' value for every account.&amp;nbsp; Apply multiple iterations of the hash to create the additional computational work required to mitigate brute-force attacks. The secret 'salt' value must be stored separately from the hashed passwords.&lt;/span&gt;&lt;/p&gt;&lt;/li&gt; 
 &lt;/ul&gt;&lt;/span&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="Owasp CheatSheetSeries: Password Storage" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Password_Storage_Cheat_Sheet.md"/>
          </references>
          <standards>
            <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.10.6" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.6" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.5" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.5" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.8" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.8" supportedStandardRef="iotsf-class-2"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="9.3.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;span&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Review the mechanism for matching credentials from the client-side to stored credentials for a user.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt; 
 &lt;ul&gt; 
  &lt;ul&gt; 
   &lt;li&gt;&lt;span&gt;Best practices dictate that the system should match a strong salted hash (SHA256 or greater and a unique hash for each account) to the one stored at the time the password was set.&lt;/span&gt;&lt;/li&gt; 
   &lt;li&gt;For example, it is recommended to use a system salt of 32 bits or more, a keyed HMAC hash using &lt;span style="font-family: Arial; font-size: 11pt; font-weight: 700; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt;SHA-2 or SHA-3,&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11pt; font-variant-numeric: normal; font-variant-east-asian: normal; vertical-align: baseline; white-space: pre-wrap;"&gt; and the stretching algorithm PBKDF2 with at least 10,000 iterations.&lt;/span&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/ul&gt; 
 &lt;ol&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not a clear-text password&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm the stored credential is not an encrypted password which may be recovered (decrypted) at the server- or client- side.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hashing algorithm in use is cryptographically secure (e.g. is not SHA1/MD5 or a flawed algorithm).&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Confirm that the hash is created from the password together with a unique salt value for the user. This prevents the use of rainbow tables, or the identification of password collisions among users.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
  &lt;li&gt;&lt;span&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap; font-family: Arial;"&gt;Consider using an algorithm with a configurable work factor, set to a high value to inhibit attacks.&lt;/span&gt;&lt;/span&gt;&lt;/li&gt; 
 &lt;/ol&gt;&lt;/span&gt; 
&lt;span&gt;&lt;/span&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:55.110">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-IMPLEMENT-LOGOUT" name="The logout function should be prominently visible to the user" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Developers must create a logout functionality that is clearly visible for the user when navigating the application.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if the logout functionality is accessible and how hard it is to disconnect from the application.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:54.362">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SIGN-REQUESTS" name="Use of digital signatures to make it easier for the receiver to authenticate if the sender is really the person they think they are" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Making use of digital signatures on exchanged messages will make it more difficult for man-in-the-middle attacks to occur, so add a digital signature to your important messages if you want to verify the sender identity.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Top Ten Proactive Controls 2018 - C6: Implement Digital Identity" url="https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity"/>
            <reference name="RFC7515" url="https://tools.ietf.org/html/rfc7515"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Review code application and configuration&lt;/li&gt;&lt;li&gt;Check the exchanged messages and verify if signature is being used.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-ONE-TIME-PASSWORD" name="Use one-time passwords" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use One Time Password (TOTP) codes. This can be achieved with:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Hardware&lt;/li&gt;&lt;li&gt;Software (cheaper option).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Software option would typically involve the user installing a TOTP application on their mobile phone, and then scanning a QR code provided by the web application which provides the initial seed. The authenticator app then generates a six digit number every 30 or 60 seconds.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Multi-Factor Authentication Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Try logging into the application several times:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Do you use the same password all the time?&lt;/li&gt;&lt;li&gt;Or do you use a different password each time?&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.362">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="50" state="Implemented" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should used be in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:54.038">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-RANDOM-SESSION-KEYS" name="Use random-session session keys, which are time-specific and will change with time making it difficult for an attacker to fool the receiver with an old message" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID must be unpredictable (random enough) to prevent guessing attacks, where an attacker is able to guess or predict the ID of a valid session through statistical analysis techniques. For this purpose, a good Cryptographically Secure Pseudorandom Number Generator must be used.&lt;/p&gt;&lt;p&gt;Additionally, a random session ID is not enough; it must also be unique to avoid duplicated IDs. A random session ID must not already exist in the current session ID space.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Session Management Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Log in and log out, while saving the session IDs and check:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The session id is different in every log in to the application?&lt;/li&gt;&lt;li&gt;Is it predictable? For example, one session ID is 123ABC&lt;strong&gt;D&lt;/strong&gt; and the next 123ABC&lt;strong&gt;E&lt;/strong&gt; (the example contains a short key to understanding).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To perform these checks it is possible to use DevTools from the browser or an easier way using a proxy to logall requests.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.362">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RFC6819-5.1.5.3" name="Use short expiration time" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>A short expiration time for tokens is a means of protection against
   the following threats:&amp;nbsp;  
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;replay&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;token leak (a short expiration time will reduce impact)&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;online guessing (a short expiration time will reduce the
      likelihood of success)&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;
Note: Short token duration requires more precise clock synchronization between the authorization server and resource server. Furthermore, shorter duration may require more token refreshes (access token) or repeated end-user authorization processes (authorization "code" and refresh token).</desc>
          <implementations/>
          <references>
            <reference name="RFC6819" url="https://tools.ietf.org/html/rfc6819"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the token expiration time in the authorization server policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="50" state="Implemented" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Serialized Java objects&lt;/li&gt; 
 &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt; 
 &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt;To test data validation:&amp;nbsp; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp, Fiddler, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:54.038">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="FILE-DATA-CHECK" name="Validate the file format before processing" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or otherwise manipulating benign files with malicious content. As with client-side data, the application should screen uploaded content before processing it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;File contents and file-system path data must be checked for safety.&lt;/li&gt;&lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when validating filenames.&lt;/li&gt;&lt;li&gt;Verify the MIME type is correct and appropriate, and matches content.&lt;/li&gt;&lt;li&gt;Files with an structured format should be checked against the expected format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: XXE" url="https://pwning.owasp-juice.shop/part2/xxe.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A4:2017-XML External Entities (XXE)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify structured data being processed by your component which is coming from untrusted sources.&lt;/li&gt;&lt;li&gt;Check there is a validation method for the format and the structure.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Examples of this is to check JSON against a JSON schema, XML against an XSD or a DTD, or checking that a received file which is purported to be an image is actually an image.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.038">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SAML-2.0-SC-C-6.4.3" name="Verify SAML assertion signatures and authenticate the issuer" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  The browser/POST profile requires the SAML response carrying SAML assertions to be signed, thus providing both message integrity and authentication. The Service Provider site MUST verify the signature and authenticate the issuer. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   The following recommendations were proposed in response: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Always perform schema validation on the XML document prior to using it for any security--related purposes:&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Always use local, trusted copies of schemas for validation.&lt;/li&gt; 
    &lt;li&gt;Never allow automatic download of schemas from third party locations.&lt;/li&gt; 
    &lt;li&gt;If possible, inspect schemas and perform schema hardening, to disable possible wildcard -type or relaxed processing statements.&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;li&gt;Securely validate the digital signature:&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;If you expect only one signing key, use StaticKeySelector. Obtain the key directly from the identity provider, store it in local file and ignore any KeyInfo elements in the document.&lt;/li&gt; 
    &lt;li&gt;If you expect more than one signing key, use X509KeySelector (the JKS variant). Obtain these keys directly form the identity providers, store them in local JKS and ignore any KeyInfo elements in the document.&lt;/li&gt; 
    &lt;li&gt;If you expect a heterogeneous signed documents (many certificates from many identity providers, multi-level validation paths), implement full trust establishment model based on PKIX and trusted root certificates.&lt;/li&gt; 
   &lt;/ul&gt; 
   &lt;li&gt;Avoid signature-wrapping attacks.&lt;/li&gt; 
   &lt;ul&gt; 
    &lt;li&gt;Never use getElementsByTagName to select security related elements in an XML document without prior validation.&lt;/li&gt; 
    &lt;li&gt;Always use absolute XPath expressions to select elements, unless a hardened schema is used for validation.&lt;/li&gt; 
   &lt;/ul&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Assertions and Protocols for SAML 2.0" url="https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf"/>
            <reference name="OWASP SAML Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/SAML_Security_Cheat_Sheet.md"/>
            <reference name="Profiles for SAML 2.0" url="https://docs.oasis-open.org/security/saml/v2.0/saml-profiles-2.0-os.pdf"/>
            <reference name="Security and Privacy Considerations for SAML 2.0" url="https://docs.oasis-open.org/security/saml/v2.0/saml-sec-consider-2.0-os.pdf"/>
          </references>
          <standards>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:54.363">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-37-CRACK-PASSWORD-HASH" name="A malicious user has access to the users' password hashes and tries to crack the passwords" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Although it is not possible to "decrypt" password hashes to obtain the original passwords, it is possible to "crack" the hashes in some circumstances.&lt;/p&gt;&lt;p&gt;The basic steps are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Select a password you think the victim has chosen (e.g.password1!).&lt;/li&gt;&lt;li&gt;Calculate the hash.&lt;/li&gt;&lt;li&gt;Compare the hash you calculated with the hash of the victim. If they match, you have correctly "cracked" the hash and now know the plaintext value of their password.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This process is repeated for a large number of potential passwords. Different methods can be used to select candidate passwords, including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Lists of passwords obtained from other compromised sites.&lt;/li&gt;&lt;li&gt;Brute force (trying every possible candidate).&lt;/li&gt;&lt;li&gt;Dictionaries or wordlists of common passwords&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="store-passwords-unrecoverable-form" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-600-SESSION-REUSE" name="An attacker can reuse old session credentials or session IDs for authorization" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;At his town's public library, John logs onto his bank's Web site to transfer money from his checking account to his savings account. Once John completes his transaction he gets distracted, forgets to sign off from his bank's Web site, and walks away from the computer.&amp;nbsp;&lt;/p&gt;&lt;p&gt;A second user, Malcolm, now uses the same computer as John. Instead of using the browser to navigate to a new site, Malcolm simply explores the browser history to return to the previous URL where John's account information was displayed.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Because John's session is still active Malcolm can now transfer money, open new accounts, order additional credit cards, or perform any other actions available to John via the bank's Web site.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-IMPLEMENT-LOGOUT" mitigation="50"/>
                <countermeasure ref="C-TOKEN-TIMEOUT" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-112-OTP-GENERATION-ABUSE" name="An attacker can send a lot of OTP requests to increase the likelihood of matching one of the generated codes in a later brute force attack" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;For example, in a password reset functionality based on the delivery of a code by email or SMS to the user, an attacker can send a lot of requests to it, generating a lot of valid codes with the goal of increasing the chances of matching the code in a brute force attack. The attack takes place in the following steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Automation of requests to the password reset functionality (new codes don't invalidate older ones).&lt;/li&gt;&lt;li&gt;Creation of a custom dictionary to try to match valid codes (e.g.: if a code has only 5 numbers, the dictionary is as follows: [00000, 00001,..., 99999]).&lt;/li&gt;&lt;li&gt;Brute force attack on the functionality to check the OTP and find a match.&lt;/li&gt;&lt;li&gt;Once the attacker knows a valid code he/she can proceed with the password change.&lt;/li&gt;&lt;/ol&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-OTP-BRUTE-FORCE" mitigation="50"/>
                <countermeasure ref="C-OTP-INVALID" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-593-SSO-SYNC" name="Attackers are able to keep their application session active after the SSO/IdP blocks/deletes their account" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If a user successfully logs in via SSO and falls prey to a phishing attack, the attacker gets access to all the endpoints of the external applications within the cloud that the user is provisioned for.&lt;/p&gt;&lt;p&gt;If the attack is detected, the user account can be disabled. However, the user may still remain logged in. This could allow the attacker to stay logged on with access to the linked application.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-FORCE-LOGOUT" mitigation="50"/>
                <countermeasure ref="security-logging" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-49-BRUTE-FORCE-AUTH" name="Attackers can brute force the authentication system to find valid credentials" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Hackers launch brute-force attacks using widely available tools that utilize wordlists and smart rulesets to intelligently and automatically guess user passwords. Although such attacks are easy to detect, they are not so easy to prevent.&lt;/p&gt;&lt;p&gt;For example, many HTTP brute-force tools can relay requests through a list of open proxy servers. Since each request appears to come from a different IP address, you cannot block these attacks simply by blocking the IP address. To further complicate things, some tools try a different username and password on each attempt, so you cannot lock out a single account for failed password attempts.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="16"/>
                <countermeasure ref="C-ACCOUNT-LOCKDOWN" mitigation="16"/>
                <countermeasure ref="CWE-654" mitigation="16"/>
                <countermeasure ref="network-rate-limit" mitigation="20"/>
                <countermeasure ref="require-use-strong-passwords" mitigation="16"/>
                <countermeasure ref="security-logging" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115-LOGIN-BYPASS" name="Attackers can bypass the login system using a less hardened alternative for accessing the system" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;The basic way to take advantage of the application's access control flaws is called "forced browsing".&lt;/p&gt;&lt;p&gt;Let's say that the website http://mysite.com It is a website that supports the authenticity of the user and the administrator will be taken to the appropriate webpage after validation. But if an attacker knows the URL, he or she can enter it in their browser, for example&lt;/p&gt;&lt;p&gt;http://mysite.com/admin_page or http://mysite.com/user_page&lt;/p&gt;&lt;p&gt;If it is a secure website, it will be redirected to the login page. But if those pages are allowed to be accessed, it will be incomplete access control and will cause damage.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" mitigation="20"/>
                <countermeasure ref="C-AUTHZ-AFTER-AUTHN" mitigation="20"/>
                <countermeasure ref="CWE-603" mitigation="20"/>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="20"/>
                <countermeasure ref="security-logging" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-575-ENUM-USERS" name="Attackers can enumerate the existence of valid accounts in the system using error/informational messages" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;If your login page has different error messages for unrecognized usernames and incorrect passwords, an attacker can write a script to submit lengthy lists of common usernames and test the response. With those results, the attacker can then infer which usernames are valid.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="security-logging" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130-DOS-AUTH" name="Attackers can execute Denial of Service attacks to prevent valid users from accessing the system" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An attacker leverages the security functionality of the system aimed at thwarting potential attacks (like automatic block of accounts after a number of failed login attempts) to launch a denial of service attack against a legitimate system user.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.1" mitigation="25"/>
                <countermeasure ref="C-THREAD-CONCURRENCY" mitigation="25"/>
                <countermeasure ref="network-rate-limit" mitigation="25"/>
                <countermeasure ref="security-logging" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-180-SAML-SPOOFING" name="Attackers can modify the SAML response from the Identify Provider and change assertions' values to impersonate valid users in the Service Provider" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Sometimes not only does the Service Provider fail to check the validity of the signature in the SAML response, but it doesn't even verify its mere presence. The equivalent of a Service Provider accepting unsigned SAML assertions is accepting a username without checking the password.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-SAML-VERIFY-IDP-X509" mitigation="50"/>
                <countermeasure ref="SAML-2.0-SC-C-6.4.3" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-INJECTION" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="CWE-89-PREPARED" mitigation="20"/>
                <countermeasure ref="DATA-VAL" mitigation="20"/>
                <countermeasure ref="FILE-DATA-CHECK" mitigation="20"/>
                <countermeasure ref="SER-UNTRUST" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-600-CRED-STUFFING" name="Attackers take control of another user's account without being detected if they get to know the password for that account" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Credential stuffing is the automated injection of stolen username and password pairs ("credentials") in to website login forms, in order to fraudulently gain access to user accounts.&lt;/p&gt;&lt;p&gt;Since many users will re-use the same password and username/email, when those credentials are exposed (by a database breach or phishing attack, for example) submitting those sets of stolen credentials into dozens or hundreds of other sites can allow an attacker to compromise those accounts too.&lt;/p&gt;&lt;p&gt;Credential Stuffing is a subset of the brute force attack category. Brute forcing will attempt to try multiple passwords against one or multiple accounts; guessing a password, in other words. Credential Stuffing typically refers to specifically using known (breached) username / password pairs against other websites.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-IMPLEMENT-SSO" mitigation="20"/>
                <countermeasure ref="C-NEW-LOCATION-LOGIN-ALERT" mitigation="20"/>
                <countermeasure ref="C-PREVENT-SIMULTANEOUS-LOGIN" mitigation="20"/>
                <countermeasure ref="CWE-654" mitigation="20"/>
                <countermeasure ref="security-logging" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-60-MALICIOUS-REPLY" name="Attackers use replay attacks to execute malicious actions" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;A replay attack is a kind of man-in-the-middle attack in which an attacker sniffs messages being sent on a channel to intercept them and resend them under the cloak of authentic messages. What makes the replay attack particularly harmful is that the attacker does not even need to decrypt the message they resend but can still fool the receiver into thinking that the received message is legitimate.&lt;/p&gt;&lt;p&gt;One example of replay attack is called pass the hash. This is referring to the hash value that is associated with a password that is sent across the network during the authentication process. If the attacker can gain access to the hash, they may be able to replay that hash back to the server and pretend that they are the original workstation.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-ONE-TIME-PASSWORD" mitigation="20"/>
                <countermeasure ref="C-RANDOM-SESSION-KEYS" mitigation="20"/>
                <countermeasure ref="C-SET-TIMESTAMP-ON-REQUEST" mitigation="20"/>
                <countermeasure ref="C-SIGN-REQUESTS" mitigation="20"/>
                <countermeasure ref="RFC6819-5.1.5.3" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-37-CACHED-DATA" name="Sensitive data is compromised by inspecting cached data in the client side" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An attacker can also use a decompiler to decompile a downloaded Java applet in order to look for information such as hardcoded IP addresses, file paths, passwords or other such contents.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="CWE-524" mitigation="50"/>
                <countermeasure ref="CWE-525-CACHING" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-37-SENSITIVE-DATA-URL" name="Sensitive data is compromised through query parameters in the URL" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Regardless of using encryption, the following URL will expose information in the locations detailed below:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;https://vulnerablehost.com/authuser?user=bob&amp;amp;authz_token=1234&amp;amp;expire=1500000000&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;The parameter values for user, authz_token, and expire will be exposed in the following locations when using HTTP or HTTPS:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Referer Header&lt;/li&gt;&lt;li&gt;Web Logs&lt;/li&gt;&lt;li&gt;Shared Systems&lt;/li&gt;&lt;li&gt;Browser History&lt;/li&gt;&lt;li&gt;Browser Cache&lt;/li&gt;&lt;li&gt;Shoulder Surfing&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="CWE-598" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-61-SESSION-FIXATION" name="The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;The attack consists of obtaining a valid session ID (e.g. by connecting to the application), inducing a user to authenticate himself with that session ID, and then hijacking the user-validated session by the knowledge of the used session ID. The attacker has to provide a legitimate Web application session ID and try to make the victim's browser use it. There are several techniques to execute the attack; it depends on how the Web application deals with session tokens. Below are some of the most common techniques:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Session token in the URL argument.&lt;/li&gt;&lt;li&gt;Session token in a hidden form field.&lt;/li&gt;&lt;li&gt;Session ID in a cookie.&lt;/li&gt;&lt;li&gt;Client-side script.&lt;/li&gt;&lt;/ul&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-SESSION-ID-ON-PARAMETER" mitigation="50"/>
                <countermeasure ref="secure-session-generation-and-expiration" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="fc222786-f608-4e45-a224-5b3906f57c3c" diagramComponentId="69a11068-97c5-443a-9f2f-3d27bf8ddac9" ref="c31bf547-b418-44fb-8d64-f592cbea254d" name="API gateway" desc="" library="microservices-library-dev" parentComponentRef="" componentDefinitionRef="api-gateway-microservice">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="AG-LM-1" name="Framework complexities may make logging and monitoring difficult to use" state="0" impact="100" issueId="" issueLink="">
          <desc>There are many objects in a microservice which generate logs, and the capabilities of each may be very different.&amp;nbsp; This can result in a large body of disparate information, which makes it difficult to track and use effectively. In addition to routine logging features, to detect attacks and identify factors for degradation of services which may impact availability&amp;nbsp;it is necessary to monitor network traffic into and out of microservices.&amp;nbsp; The monitoring service should include analytics capabilities.&amp;nbsp;&amp;nbsp;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:13:09.778">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AG-AA-1" name="Misconfiguration with enterprise-wide authentication and authorization frameworks" state="0" impact="100" issueId="" issueLink="">
          <desc>Microservices generally communicate with each other using Application Programming Interfaces (APIs), which requires several core features to support complex interactions between a substantial number of components.&amp;nbsp; Authentication and access policy may vary depending on the type of APIs exposed by microservices-some may be public APIs; some may be private APIs; and some may be partner APIs, which are available only for business partners.&amp;nbsp; This creates a security challenge as it can be difficult ensure that all entry points are configured to the same robust settings despite their differing capabilities for doing so.&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To address the challenges of authorizing of such a complex array of interfaces and services, API gateways offer a single entry point to a system.&amp;nbsp; However, while this simplifies things from the standpoint of external user access, the API Gateway will still need to effectively authenticate itself with the internal objects of the cluster.&amp;nbsp; There are a number of areas of potential weakness which must be supported to maintain the overall security of the cluster. 
&lt;/div&gt;Access tokens are a significant security measure in all systems and the internal objects of microservices should be created to use them where possible.&amp;nbsp; Integrating these successfully with API gateways can be a challenge. Distributed gateway deployments add yet more complexity as they provide an even wider variety of services and objects which must be integrated.&amp;nbsp; If authorization cannot be resolved consistently across distributed gateways, this will open up vulnerabilities which may be exploited by adversaries. Identity management is a strongly suggested strategy for configuring authentication and authorization.&amp;nbsp; It allows fine grained control of systems by allowing administrators to control which activities are authorized based on user identity and role.&amp;nbsp; API gateways must integrate with internal IAM policies as settings mismatches can result in users acting beyond their scope.&amp;nbsp; &amp;nbsp;&amp;nbsp;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:13:09.777">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="NIST-SMAS-MS-SS-12(2)" name="Connectors should be provided for integrating with identity providers (IdPs)" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>When invoking IAM through an API gateway, it is essential to integrate with the identity providers in question.&amp;nbsp; This ensures that policies are robust and effective, and that changes are applied consistently from the IAM service to the gateway.&amp;nbsp; This is essential for maintaining security.&amp;nbsp; There are a number of tools available depending on the specific tools and requirements of the system.&amp;nbsp;&amp;nbsp;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="MS-SS-12" supportedStandardRef="NIST-Secure-Microservice-Strategies"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Implementation will depend on the individual API gateway in use.&amp;nbsp; Please follow the instructions in the documentation and apply according to the needs of your architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:13:09.534">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="NIST-SMAS-MS-SS-12(5)" name="Distributed gateway deployments should have a token translation (exchange) service between gateways" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>The token presented to the initial gateway should have permissions with a broad scope whereas the token presented to inside gateways (or microgateways) should be more narrowly scoped with specific permissions or an entirely different token type that is appropriate for the target microservice platform. This helps to implement the least privilege paradigm. This can also work for a combination of initial gateway (that intercepts all client accesses) and microgateways (closer to microservices).</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="MS-SS-12" supportedStandardRef="NIST-Secure-Microservice-Strategies"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Implementation will depend on the individual API gateway in use.&amp;nbsp; Please follow the instructions in the documentation and apply according to the needs of your architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:13:09.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="NIST-SMAS-MS-SS-12(1)" name="Integrate the API gateway with an identity management application to provision credentials before activating the API" issueId="" issueLink="" platform="" cost="1" risk="45" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Identity management is such a key security component that it should be integrated at the earliest stages of implementation.&amp;nbsp; API gateways which are activated without IAM capabilities immediately leave the connected services vulnerable to exploitation.&amp;nbsp; Certain services may not work at all if IAM credentials are not provided.&amp;nbsp; The complexity of microservice architectures also makes it more difficult to add these capabilities after the fact.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="MS-SS-12" supportedStandardRef="NIST-Secure-Microservice-Strategies"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Implementation will depend on the individual API gateway in use.&amp;nbsp; Please follow the instructions in the documentation and apply according to the needs of your architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:13:09.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="NIST-SMAS-MS-SS-12(4)" name="Securely channel all traffic information to a monitoring and/or analytics application" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>This is essential both for detecting attacks (e.g., denial of service, malicious actions) and unearthing explanations for degrading performance.&amp;nbsp; Implementation will depend on the individual API gateway in use.&amp;nbsp;&amp;nbsp;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="MS-SS-12" supportedStandardRef="NIST-Secure-Microservice-Strategies"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Implementation will depend on the individual API gateway in use.&amp;nbsp; Please follow the instructions in the documentation and apply according to the needs of your architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:13:09.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="NIST-SMAS-MS-SS-12(3)" name="The API gateway should have a connector to an artifact that can generate an access token for the client request" issueId="" issueLink="" platform="" cost="1" risk="45" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Access token are, and should be, used widely in microservices.&amp;nbsp; They provide credentials for authorization and can be used to specify the scope that was granted during authorization.&amp;nbsp; If the API gateway cannot also access these tokens then they cannot be used to authorize any users who enter through the gateway.&amp;nbsp; An artifact should exist which provides the gateway with tokens which will be accepted by internal system objects, and which provide the same level of access control (e.g., OAuth 2.0 Authorization Server).</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="MS-SS-12" supportedStandardRef="NIST-Secure-Microservice-Strategies"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Implementation will depend on the individual API gateway in use.&amp;nbsp; Please follow the instructions in the documentation and apply according to the needs of your architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:13:09.537">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AG-AA-1">
                  <countermeasures>
                    <countermeasure ref="NIST-SMAS-MS-SS-12(1)" mitigation="25"/>
                    <countermeasure ref="NIST-SMAS-MS-SS-12(2)" mitigation="25"/>
                    <countermeasure ref="NIST-SMAS-MS-SS-12(3)" mitigation="25"/>
                    <countermeasure ref="NIST-SMAS-MS-SS-12(5)" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="NIST-SMAS-MS-SS-12(1)" mitigation="25"/>
                <countermeasure ref="NIST-SMAS-MS-SS-12(2)" mitigation="25"/>
                <countermeasure ref="NIST-SMAS-MS-SS-12(3)" mitigation="25"/>
                <countermeasure ref="NIST-SMAS-MS-SS-12(5)" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="AG-LM-1">
                  <countermeasures>
                    <countermeasure ref="NIST-SMAS-MS-SS-12(4)" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="NIST-SMAS-MS-SS-12(4)" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="f45db819-cb21-44a4-b104-ce48b698c7eb" diagramComponentId="f698373b-fff9-4b4d-b2bc-73057c7ba804" ref="0dd85c2b-afa1-409c-b6ff-39941d67abf8" name="svc-biz-sed-service-invoke" desc="" library="microservices-library-dev" parentComponentRef="" componentDefinitionRef="microservice">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="APP-AS-1" name="Application secrets at risk of exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring that there is no sensitive data (such as credentials) in the application code or in configuration files is a challenge because the environments that containers run in have varying security controls and may provide access to unintended parties.&amp;nbsp; Developers need to consider the new threats brought about by multi-tenancy and shared platforms.&amp;nbsp; Not doing so can result in exposure of sensitive data.&amp;nbsp; 
&lt;/div&gt;Encryption methods are only useful if they are robust.&amp;nbsp; This is a particular challenge in container architectures as there are many competing interests and constraints which must be accounted for.&amp;nbsp; It is important that developers take ownership of encryption, while also working within the needs and requirements of the framework. Because of the complexity of containerized systems, and the general tendency of organizations to place security in the hands of operators, encryption of application secrets may be overlooked by developers.&amp;nbsp; This can result in exploitable vulnerabilities which administrators of the system are unaware of.&amp;nbsp;Some of the challenges of securing containerized systems include the variety of secrets which must be protected, and the fact that the available methods for protection may not be consistent between environments.&amp;nbsp; Organizations should be aware of these challenges and implement robust mechanisms which anticipate the problems inherent and provide mitigating strategies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.171">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-AA-1" name="Cloud-native environments may introduce risks to the microservice architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of cloud providers introduces many capabilities to container architectures, while also streamlining workflows and reducing the necessity of managing hardware.&amp;nbsp; However it also increases complexity, and this can make it more difficult to identify and mitigate vulnerabilities.&amp;nbsp; It can also result in a lack of ownership for security issues as developers assume that other parties are taking responsibility. Applications and containers which run or on otherwise access cloud providers must identify themselves.&amp;nbsp; Credentials and access control must be securely managed in order to prevent secret exposure and privilege escalation.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.171">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-1" name="Code promotion across environments may introduce vulnerabilities" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Code and image provenance is a developer and application owner concern; verification requires certification and key management across the code promotion path. This can be a challenge as multiple parties and certificate owners may be involved. The absence can result in application version mismatches or running tampered images. 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments. Today, developers can push code across application container environments without the need for operator interaction.&amp;nbsp; Systems should have robust policies and procedures in place to ensure that images are secured by developers at all stages of the build chain. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:43.844">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-1" name="Contention issues arise due to the elasticity of workload and dynamic resource requests" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   Ensuring resource availability as needed to support workloads is a challenge.&amp;nbsp; This is because of the dynamic use and availability of resources in a potentially shared environment, combined with the possibly unpredictable use of an application. The absence can result in either the CMP being unable to allocate appropriate resources for an application container, or a resource shortage within the CMP. 
 &lt;/div&gt;&lt;div&gt;
  Resources usage which is not properly managed by developers will affect the usage of others in a shared environment. The absence may result in a DOS-style scenario. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.439">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-2" name="Image contents may not be secure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Images must have no known vulnerabilities or malicious code. Developers must help to ensure images have not been tampered with as they move from development to production. Applications of this feature include scanning images for vulnerabilities and malicious code and using image signing and validation mechanisms. 
&lt;/div&gt;&lt;div&gt;
  Ensuring that only the required components are packaged inside the image can be a challenge due to the complexity of applications. If this is not carefully managed it can result in the compromise of an unnecessary component.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Ensuring third-party components are free of vulnerabilities and updated as needed can be a challenge due to differing update frequencies by third-party vendors. This can result in the compromise of third-party components.&amp;nbsp; OS package managers are a particular challenge in this regard due to the large number of updates and downloads they maintain, and the fact that they often have unrestricted access to systems.&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments.&amp;nbsp; Developers should not assume that system wide security settings will mitigate potential application vulnerabilities.&amp;nbsp; Rather, they should ensure that their images have no known vulnerabilities or malicious code, and that they have not been tampered with as they move from development to production. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:43.843">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-N-1" name="Insecure networking settings may be exploited to gain access to containers or hosts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Monitoring network activity and providing the infrastructure to do so can present a challenge because of the lack of network tooling and data storage. The absence can result in the exposure of sensitive information and diminished incident response and detection capabilities. 
&lt;/div&gt;&lt;div&gt;
  In container networking, communications between containers and hosts must be secured, network traffic must be monitored, and access to the network traffic, resources, and configurations must be controlled.&amp;nbsp; In terms of applications, communications between containers affect access control, limiting access to network traffic, resources, and configurations (leveraging network namespace). Other outcomes include isolating the container interfaces, monitoring network activity, and securing communications between containers via SSL/TLS or VPN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.440">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-D-1" name="Insufficient scaling of container resources may lead to inefficient resource utilization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring resource scaling requests take priority over other containers may provide a challenge.&amp;nbsp; This is due to complexity and implementation of the CMP to allow such prioritization. The absence can result in priority applications not being able to scale for user workloads. 
&lt;/div&gt;&lt;div&gt;
  It is a challenge for developers to define application performance profiles. Predictive application workload modeling is a complex task often substituted by a "common practice" or, equally precise, "by analogy".&amp;nbsp; This is largely due to lack of tooling in development environments. Both are likely to lead to inefficient resource utilization. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.439">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-1" name="Lack of continuous monitoring can result in application version mismatches and system availability issues" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  The ephemeral nature of application containers increases the necessity of reliable and centralized monitoring of platform, host, and containers.&amp;nbsp; It is essential to ensure that container runtime actions and events are monitored and logged in order to allow timely identification and mitigation of problems and threats. 
&lt;/div&gt;&lt;div&gt;
  There may be a challenge for developers to understand which container versions are running and where. This information needs to be easily and quickly digestible by appropriate parties. The absence can result in application version mismatches and system availability issues. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.171">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-G-1" name="Lifecycle events prevent secure startup and shutdown of applications" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Developing a containerized application that can be scaled up or down without notice is a challenge because of the extra effort required to design and implement the application in a manner where it can gracefully handle such scaling events while maintaining a secure state.&amp;nbsp; &amp;nbsp;It is a more robust approach to ensure that stateful containerized applications are aware of container scaling events to ensure transitions between secure states. 
&lt;/div&gt;&lt;div&gt;
  In an ideal world, either application containers are stateless, or the applications have been developed with clustering technologies to attach and release neighbors as they start and are terminated.&amp;nbsp; Some use cases, though, will have containers that have not been developed in such a manner, or which contain legacy applications that have migrated to containers. Such applications running inside a container may not be aware of pending lifecycle events issued by a CMP such as container start/stop/scale.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The containerized application should have an opportunity to be informed of the pending container's lifecycle events to manage its own lifecycle accordingly. This is essential to ensure the application's secure startup and shutdown.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.171">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-2" name="Mismanagement of container volumes can compromise underlying architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   In container volume management, it is essential to ensure the container has need-only access to data volumes and uses dedicated storage resources for runtime operations.&amp;nbsp; In the application, it is vital to ensure that access control exists for file system resources and raw storage devices, and that data is encrypted at rest in the data volumes.&amp;nbsp; Applications directly mounting a host directory should be avoided. 
 &lt;/div&gt;Building an image that minimizes using shared container volumes is imperative due to the risk of exposing sensitive data to the host or other containers, and the current reliance on sharing information with containers. This can result in exposure of sensitive data.&amp;nbsp;&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Building an image that does not share the host filesystem is equally crucial because exposing the host filesystem can result in compromising the underlying infrastructure, and other containers that share the same environment.&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.440">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-2" name="The complexity of container architectures can make logging and monitoring difficult to implement" state="0" impact="100" issueId="" issueLink="">
          <desc>Ensuring that coding policies include logging capabilities at the planning and design stages is a challenge due to the lack of presence of security concerns in the design phase and tooling.&amp;nbsp; In addition, there are many logging features which may be implemented in microservices and an absence of clear policies can result in lack of ownership from key parties, including developers.&amp;nbsp;&amp;nbsp;&lt;div&gt;
  Usually application logging is added after the fact as a response to an incident or audit.&amp;nbsp; Ensuring that application logs, starting with authentication logs, are captured for existing applications is a challenge due to lack of resources to modify the application and necessary guidance to do so.&amp;nbsp;&amp;nbsp;This will result in diminishing incident response and detection capabilities.&amp;nbsp; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.170">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CSA-SACA-3.1.5:1" name="Applications must use secure network communication protocols" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Network traffic generated by the containers should maintain confidentiality regarding the applications and management by utilizing proper encryption protocols (i.e., SSL/TLS, IPSec). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Selecting libraries that support secure communications to provide encryption and maintain confidentiality prevents information spillage and network traffic tampering. Tampering of network traffic may result in system compromise. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.5" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify any communications in your application which will be sent as network traffic and ensure that encryption protocols have been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.382">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.2.1" name="Avoid using images with OS package managers" issueId="" issueLink="" platform="" cost="1" risk="39" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&amp;nbsp;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images with OS package managers or shells could contain unknown vulnerabilities.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Package managers are normally run with unrestricted access in order to allow them to modify critical system software. The package manager's actions, therefore, affect the entire system.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you must include OS packages, remove the package manager before deploying the container.&amp;nbsp; The following steps may also help mitigate the risk: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use repositories you trust. Use only mirrors that belong to reputable organizations.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Manually update your systems (and local mirror caches).&lt;/li&gt; 
  &lt;li&gt;Use signed repository metadata.&lt;/li&gt; 
  &lt;li&gt;Use HTTPS for mirror communication.&lt;/li&gt; 
  &lt;li&gt;Use package managers that implement metadata expiration.&lt;/li&gt; 
  &lt;li&gt;Use distributions that properly make use of the package manager's security features.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="cs.arizona.edu: Attacks on Package Managers" url="https://www2.cs.arizona.edu/stork/packagemanagersecurity/attacks-on-package-managers.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Follow the steps for your particular OS to identify if package managers are installed on the container.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:43.726">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:1" name="Create and follow coding policies to include logging capabilities" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An application should provide logs regarding authentication, authorization, actions, and failures. The developer should include this capability as part of planning and design phases. For new applications, the developer should create and follow coding policies to include logging capabilities at the planning and design stages.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been planned and designed in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.086">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:2" name="Create common libraries for developers to handle sensitive data and secrets in the backend application code" issueId="" issueLink="" platform="" cost="1" risk="50" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable consistent ways of addressing the handling of sensitive data and secrets within backend application code, a common set of libraries should be provided to developers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Application developers are not necessarily security developers and should devote time to developing application features, not security. Security that is required within applications should be easy to use and made clear, so that minimum effort is spent and consistency across applications is achieved. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that libraries exist for securing sensitive data and that they have been applied to your applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.9:1" name="Developers should receive sufficient training on volume management" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should receive sufficient training to ensure development of applications that minimize the need to use shared container volumes and that do not require any access to host directories. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Shared volumes can result in exposure of sensitive data. Images which share the host volumes or filesystem can result in the compromise of the underlying infrastructure and other containers sharing the same environment. Avoiding these configurations is a challenge, which is why developer training is essential. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.9" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.383">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:3" name="Encrypt the sensitive application and create a container entry point application that decrypts and executes the main application" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By encrypting the sensitive application, the risk of unintended exposure of the sensitive application can be mitigated. This allows the container image (and sensitive application) to be stored, transmitted, or shared without unauthorized exposure. Encryption and decryption of the application should be treated as any other data encryption/decryption process. For sensitive applications, developers should encrypt the sensitive application, then create a container entry point application that decrypts and executes the main application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that an appropriate level of encryption has been applied to any sensitive data in the application.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.12:1" name="Ensure sustainable system performance by balancing system resources" issueId="" issueLink="" platform="" cost="1" risk="77" state="Required" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Working with the operator and architect, the developer should ensure that the binaries and libraries are optimized to operate in a containerized infrastructure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Default configurations or those that are suitable for non-containerized systems may conflict with the needs of container architectures.&amp;nbsp; Developers need to be aware of the environmental impacts on their applications. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.12" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review optimization configurations to ensure they are compliant with the needs or policies of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.383">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SAC-3.1.1:1" name="Establish a root of trust" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A public key infrastructure (PKI) allows creation and management of a hierarchy of digital certificates for encryption and digital signatures. A PKI may already exist in an organization-certificates from this new or existing system can be used to sign container images and later verify their provenance and integrity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To ensure the integrity of the build chain, the developer must have the ability to digitally sign and provide a digital signature for the code and/or binary artifacts that will be promoted between environments or to the next promotion phase. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By signing a container image with a certificate that is part of a PKI, container management platform (CMP), users can easily verify the source of an image. This is important as once the source of the image is determined, users can ensure that the image has been through appropriate scrutiny before being promoted for production use. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all existing images are appropriately signed or verified, using keys provided by your organization.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:43.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.1" name="Harden all applications in an image" issueId="" issueLink="" platform="" cost="1" risk="39" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;span style="line-height: 107%; font-size: 14.6667px;"&gt;&lt;font face="Times New Roman, serif"&gt; 
   &lt;div style=""&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Description:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Ensure that applications are secure and follow best practices. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Rationale:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      When deploying applications in a containerized system, vulnerabilities that compromise the application can in turn compromise the entire architecture.&amp;nbsp; This is a result of the way containers and pods communicate and access resources throughout the whole cluster. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Remediation:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Analyze source code regularly to ensure it is following best practices to avoid vulnerabilities.&amp;nbsp; &amp;nbsp;Continuously test your application against common attack practices, like SQL injection, DDoS attack, etc. There are various dynamic analysis tools available to assist.&amp;nbsp; 
    &lt;/div&gt; 
   &lt;/div&gt;&lt;/font&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;, serif; font-size: 11pt;"&gt;&lt;br&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="The New Stack: A Security Checklist for Cloud Native Kubernetes Environments" url="https://thenewstack.io/a-security-checklist-for-cloud-native-kubernetes-environments/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a reliable tool such as Veracode or Synopsys to analyze source code for vulnerabilities before deploying.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:43.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:2" name="Identify a data at rest (DAR) solution" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer should utilize a DAR solution, if at all possible, that has been FIPS 140-2 validated. The developer should also analyze the application programming interface (API) and a compatible key management system (KMS).&amp;nbsp; The developer should also utilize the latest advanced encryption standard (AES) with the highest possible key length. Developers also have to take into account if the solution has been validated by an impartial third party and if the solution is viable in the intended operational environment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  With a FIPS-validated solution and a compatible KMS, there is some third party validation that the solution is secure and thus a higher level of assurance.&amp;nbsp; Robust use of AES will ensure data confidentiality. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that encryption is included and that the level is appropriate to the application security needs and the wider system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:2" name="Implement plans to capture application logs" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An existing application should provide logs regarding authentication, authorization, actions, and failures. If any of these logging items have not been implemented, developers should provide these capabilities as part of the maintenance phase. For existing applications, the developer should implement plans to capture application logs, starting with authentication logs 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been applied in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:3" name="Include only necessary components inside the image" issueId="" issueLink="" platform="" cost="1" risk="39" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should trim down images to include only necessary components. It is preferred to use a baseline image with minimal set of packages over a full OS distribution.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Removing unnecessary components from the image will reduce the number of potentially outdated or unpatched packages and therefore reduce the number of security vulnerabilities. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:43.727">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.11:1" name="Left the application in an unknown state if a containerized application is unaware of the container's transitions" issueId="" issueLink="" platform="" cost="1" risk="77" state="Required" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The CMP should provide the encapsulated application an opportunity to perform a graceful transition to a known secure state. The conventional solution is to allow an application to be notified of the container lifecycle events. Resources, freed after container's removal, should be released back to the pool in a well known state and containers should be allowed to log any state changing events. The container's lifecycle (start/stop/scaled) is managed by CMP. From a developer's perspective, the application could be left in an unknown state if a containerized application is unaware of the container's transitions 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is essential to inform the application of the container's lifecycle events, so that it may take appropriate action to ensure a secure startup and shutdown. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.11" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the container's stop start process and ensure that any related and relevant configurations have been applied to your applications.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.2" name="Limit credential exposure" issueId="" issueLink="" platform="" cost="1" risk="38" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Harden credentials before deploying applications 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Plain text (non-encrypted) credentials (account passwords, SSH Keys, DevOps secrets, etc.) may be embedded into source code because it helps to simplify deployments at scale.&amp;nbsp; This poses formidable security risks that are routinely exploited by malware and hackers. In some cases, a threat actor may insert hardcoded credentials to create a backdoor, allowing them persistent access to a device, application, or system. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Hardcoded credentials are favored cyberattack targets for password guessing exploits, allowing hackers and malware to hijack systems, and software. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Don't define credentials in your application code. Use managed identities for cloud resources to let your pod request access to cloud provider.&amp;nbsp; Avoid the use of fixed or shared credentials. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="BeyondTrust: Hardcoded and Embedded Credentials are an IT Security Hazard" url="https://www.beyondtrust.com/blog/entry/hardcoded-and-embedded-credentials-are-an-it-security-hazard-heres-what-you-need-to-know"/>
            <reference name="Microsoft docs: Best practices for pod security in Azure Kubernetes Service" url="https://docs.microsoft.com/en-us/azure/aks/developer-best-practices-pod-security"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review application code before deployment for embedded credentials.&amp;nbsp; Carry out pen testing of applications to find overlooked credential vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:1" name="Provide training and best practices guidance to developers" issueId="" issueLink="" platform="" cost="1" risk="50" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers should be informed and trained on threats arising from multi-tenancy on public clouds.&amp;nbsp; They also need to be trained and provided with templates for how to use the secret management feature within their apps so they avoid the practice of hard-coding static secrets within application code. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers are accustomed to the practice of baking sensitive information into server code from the days when server-side was considered trusted environment. Raising the awareness of the nuances and threats present in current public cloud environments helps drive in the need to avoid such practices 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.1" name="Remove components which are only required for development" issueId="" issueLink="" platform="" cost="1" risk="39" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Tools that are essential during application development can create security risks in deployment 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Any unnecessary component is another potential entrance point for an attacker.&amp;nbsp; Debuggers and common tools like Curl that are useful to attackers should not be included in images in deployment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Perform an analysis of the entire container before deployment and remove any components or functions you do not need. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:43.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.2" name="Secure any dependencies" issueId="" issueLink="" platform="" cost="1" risk="39" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that any dependencies used by applications are also secure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is hard to keep to track of all the packages an application uses and to make sure they are not vulnerable.&amp;nbsp; Even if you ensure that your own application is free of vulnerabilities, if the base packages and dependencies are not secure, the container could still be vulnerable to attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Regularly perform a full dependency analysis for code to uncover your open source and other dependencies for any vulnerabilities they contain. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a suitable vulnerability scanner to carry out a full dependency analysis for code to uncover your dependencies and any vulnerabilities they contain.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:43.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.2" name="Secure the container base image" issueId="" issueLink="" platform="" cost="1" risk="39" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br&gt;Ensure that container images are built using secure and approved base images&lt;br&gt;&lt;br&gt;&lt;b&gt;Rationale:&lt;/b&gt;&lt;br&gt;Vulnerabilities in software packages can be exploited by hackers or malicious users to obtain unauthorized access to local or cloud resources. &lt;br&gt;&lt;br&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br&gt;Select minimal base images, add only what you require, and scan them for vulnerabilities.&amp;nbsp; &amp;nbsp;Ideally, the tool you choose for this function should be aware of your base image choice and alert you when there is an updated version of your base image, or if there are alternate base images that can reduce vulnerabilities.&lt;br&gt;&lt;br&gt;Only deploy authorized container images that you've analyzed, scanned, and signed (i.e. Software Supply Chain Security). Grafeas, TUF, and Notary can help here.&lt;br&gt;&lt;br&gt;Ensure that only images from image registries on allow lists are used to launch containers in your Kubernetes environment.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Peter Benjamin: Kubernetes Security Best-Practices" url="https://dev.to/petermbenjamin/kubernetes-security-best-practices-hlk"/>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;font face="Times New Roman, serif"&gt;Please follow your 3rd party image scanning provider's guidelines for enabling Image Scanning.&lt;/font&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:43.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:1" name="Sign images as part of the image build process and validate images before use" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images should be signed as part of the build process and validated before used. Signing and validation can be achieved through GNU Privacy Guard (GPG) signatures on image contents or through similar methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Digital signing of image content at build time and validation of the signed data before usage ensures that image data cannot be tampered with between build and run time. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review your applications to ensure that the appropriate signing has taken place.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:43.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.3:1" name="Use clear versioning schemes to identify application versions running in containers" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By defining and using an accepted versioning scheme, a development team can have version numbers automatically implemented as part of a build process. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By applying versions either to a container name, tag, or label, the developer is then able to easily identify application versions running in containers. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.3" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review container names, tags, or labels to check that they contain version numbers in line with your organizational or system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.1" name="Use IAM for access control" issueId="" issueLink="" platform="" cost="1" risk="38" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Description:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Implement authentication and access control with the Identity and Access Management (IAM) service provided by the cloud provider. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Rationale:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Applications which have access to the full scope of the cloud provider may perform actions outside of their scope.&amp;nbsp; This can be exploited by attackers to gain access to large areas of the cluster. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Use IAM roles to provide fine-grained access.&amp;nbsp; Assign roles only the specific amount of resources they need, or allow them&amp;nbsp; to perform only a particular amount of activities. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: A journey to Kubernetes security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="we45: Security Essentials for a Developer - Kubernetes" url="https://we45.com/blog/security-essentials-for-a-developer-kubernetes/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use the relevant tools for your cloud provider to audit the use of IAM roles in applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:1" name="Use standard, commonly available authentication systems" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When either data or applications are encrypted within a container, having a reliable method to authorize use of encryption keys is required. Alternatively, applications must be written to support multiple authentication methods, introducing unnecessary complexity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By using common authentication methods, this ensures a predictable ability to authenticate and authorize the use of encryption keys across CMPs.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
            <standard ref="K06 - Broken Authentication" supportedStandardRef="owasp-kubernetes-top-10-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that an encryption policy or standard exists for your organization, and that it has been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:44.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:2" name="Use vulnerability scanning tools as part of the development process" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should use vulnerability scanning tools as part of the development process and the CI pipeline, and integrate a vulnerability assessment into the build process. They will also want to consider failing a build if the vulnerability assessment fails. Once a vulnerability is identified, apply security patches to the vulnerable component and rebuild the image. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A vulnerability scanner will identify and alert on the use of third-party components with known security vulnerabilities. Applying vulnerability scanning as part of the development cycle improves the security quality of the images, since well-known vulnerabilities are identified and patched before software gets into runtime environment. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if a protocol exists for vulnerability scanning in your organization and, if so, that it has been utilized.&amp;nbsp; If one does not exist, use one of the recommended tools to ensure that your own applications and containers do not contain vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:43.728">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.14:1" name="Utilize resource control features to orchestrate intra-container resource utilization, prioritization and allocation thresholds" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should expect the presence of horizontal infrastructure scaling capability but should avoid the need for vertical scaling by ensuring that the application can function within the parameters established by the configuration management team. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer must obtain the resource utilization and hardening parameters and incorporate those configurations into the software development environment and testing scripts. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The application developer must accept that the application under development will not have on-hand the entirety of computing resources available in the production environment. Even in the presence of auto-scale, auto-scaling capability has limits and does not scale out infinitely.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Without testing application functions within defined production parameters, the risk of poor application performance goes up, not down. Proper configuration of resource and security functionality as appropriate to the CMP in use ensures that a resource consumption fault or runaway container processes do not affect adjacent containers.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.14" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the capabilities of the CMP in terms of the relevant thresholds and ensure your application is compliant.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:44.383">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="access-sensitive-data" name="Access sensitive data" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNCONFIGURED-SECURITY-DATA" name="Sensitive data is exposed through weak security configurations" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Weak security configurations make possible for an attacker to access sensitive data like API keys, credentials, etc.</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AS-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CLOUD-VULNERABILITIES" name="Attackers use known cloud vulnerabilities to access unauthorized data" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Known vulnerabilities in a specific cloud environment are used to exploit a system, allowing an attacker to access unauthorized data</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AA-1">
                  <countermeasures>
                    <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                    <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-D-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="IMAGE-MODIFICATION" name="Attackers compromise images by modifying their content" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker modifies/forges a microservices image to introduce vulnerabilities in the system</desc>
              <riskRating confidentiality="100" integrity="100" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                    <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                    <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A1:2017" name="Attackers gain access to the sensitive data through injecting code in the repositories" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Almost any source of data can be an injection vector: environment variables,
                                parameters, external and internal web services, and all types of users. Injection flaws
                                occur when an attacker can send hostile data to an interpreter.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                    <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SCALABILITY-ISSUES" name="Availability is compromised through attacks against scalability configuration" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker compromise the availability of a system by exploiting scalability configurations in order to consume resources</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CO-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-CONTAINER-VOLUMES" name="Sensitive data is compromised by unauthorized access to container volumes" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker find flaws to access container volumes without permission</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-LM-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="APP-LM-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNAUTHORIZED-ACCESS-NETWORK" name="Sensitive data is compromised through network access" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Attackers gain undetected access to the network systems and changes made by the
                                attackers couldn't be audited or detected.
                            </desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-N-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="1c358fa5-3231-4311-bba9-f096b40a6fd5" diagramComponentId="c5e47650-fb9e-49cb-b085-390017bf57c1" ref="54c2adc5-954b-49bd-9f1c-295b16a74473" name="RESTful Web Service" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="rest-full-web-service">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="api-broken-object-level-authorization" name="API Broken Object Level Authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This has been the most common and devastating attack on APIs to date. Authorization and access control mechanisms in modern applications are complex and wide-spread. Even if the application implements a proper infrastructure for authorization checks, developers might forget to use these checks before accessing a sensitive object. Access control detection is not typically amenable to automated static or dynamic testing.&lt;/p&gt;&lt;p&gt;Unauthorized access can result in data disclosure to unauthorized parties, data loss, or data manipulation. Unauthorized access to objects can also lead to full account takeover.&lt;/p&gt;&lt;p&gt;Object level authorization is an access control mechanism that is usually implemented at the code level to validate that one user can only access objects that they should have access to.&lt;/p&gt;&lt;p&gt;Every API endpoint that receives an ID of an object, and performs any type of action on the object, should implement object-level authorization checks. These checks should validate that the logged-in user does have access to perform the requested action on the requested object.&lt;/p&gt;&lt;p&gt;Failures in this mechanism typically leads to unauthorized information disclosure, modification, or destruction of data.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.665">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="api-broken-authentication" name="API broken authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Authentication endpoints and flows are assets that need to be protected.&amp;nbsp;&lt;/p&gt;&lt;p&gt;An API is vulnerable if it:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Permits "credential stuffing" whereby the attacker has a list of valid usernames and passwords.&lt;/li&gt;&lt;li&gt;Allows attackers to perform brute force attacks, without presenting captcha / account lockout mechanisms.&lt;/li&gt;&lt;li&gt;Permits weak passwords.&lt;/li&gt;&lt;li&gt;Sends sensitive authentication details, such as authorization tokens and passwords in the URL.&lt;/li&gt;&lt;li&gt;Doesn't validate the authenticity of tokens.&lt;/li&gt;&lt;li&gt;Accepts unsigned / weakly signed JWT tokens ("alg":"none") / doesn't validate their expiration date.&lt;/li&gt;&lt;li&gt;Uses plain text, encrypted, or weakly hashed passwords.&lt;/li&gt;&lt;li&gt;Uses weak encryption keys / API keys.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.663">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="api-vulnerable-injection" name="API is vulnerable to injection flaws" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  The API is vulnerable to injection flaws if:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Client-supplied data is not validated, filtered, or sanitized by the API.&lt;/li&gt;
  &lt;li&gt;Client-supplied data is directly used or concatenated to SQL/NoSQL/LDAP queries, OS commands, XML parsers, and Object Relational Mapping (ORM)/Object Document Mapper (ODM).&lt;/li&gt;
  &lt;li&gt;Data coming from external systems (e.g., integrated systems) is not validated, filtered, or sanitized by the API.&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.665">
              <output/>
            </source>
            <references>
              <reference name="Command Injection" url="https://www.owasp.org/index.php/Command_Injection"/>
              <reference name="NoSQL Injection Fun with Objects and Arrays" url="https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf"/>
              <reference name="OWASP Injection Flaws" url="https://www.owasp.org/index.php/Injection_Flaws"/>
              <reference name="SQL Injection" url="https://www.owasp.org/index.php/SQL_Injection"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-770" name="Allocation of Resources Without Limits or Throttling" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated, in violation of the intended security policy.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.687">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.687">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100" issueId="" issueLink="">
          <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.526">
              <output/>
            </source>
            <references>
              <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-502" name="Deserialization of Untrusted Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The application deserializes untrusted data without sufficiently verifying that the resulting
                        data will be valid.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.687">
              <output/>
            </source>
            <references>
              <reference name="CWE-502: Deserialization of Untrusted Data" url="https://cwe.mitre.org/data/definitions/502.html"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-15" name="External Control of System or Configuration Setting" state="0" impact="100" issueId="" issueLink="">
          <desc>One or more system settings or configuration elements can be externally controlled by a user.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:29.172">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:28.582">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-285" name="Improper Authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not perform - or incorrectly - performs an authorization check when an actor attempts to access a resource or perform an action.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.666">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-460" name="Improper Cleanup on Thrown Exception" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:26.686">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-116" name="Improper Encoding or Escaping of Output" state="0" impact="100" issueId="" issueLink="">
          <desc>The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.173">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-841" name="Improper Enforcement of Behavioral Workflow" state="0" impact="100" issueId="" issueLink="">
          <desc>The software supports a session in which more than one behavior
                        must be performed by an actor, but it does not properly ensure that the actor
                        performs the behaviors in the required sequence.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.688">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-173" name="Improper Handling of Alternative Encoding" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not properly handle cases in which the input uses an alternative encoding scheme that is valid for the control sphere to which the input is being sent.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.525">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-235" name="Improper Handling of Extra Parameters" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.525">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-22" name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Many file operations are intended to take place within a restricted directory. By using special elements such as ".." and "/" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the "../" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Path traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.523">
              <output/>
            </source>
            <references>
              <reference name="CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" url="https://cwe.mitre.org/data/definitions/22.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-95" name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. "eval").</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.174">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-78" name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  There are at least two subtypes of OS command injection:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(&amp;quot;nslookup [HOSTNAME]&amp;quot;) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.The application accepts an input that it uses to fully select which program to run, as well as which commands to use.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The application simply redirects this entire command to the operating system. For example, the program might use &amp;quot;exec([COMMAND])&amp;quot; to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;In the first variant, the programmer clearly intends input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:29.174">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-117" name="Improper Output Neutralization for Logs" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes
                        output that is written to logs.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:28.588">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-915" name="Improperly Controlled Modification of Dynamically-Determined Object Attributes" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability. This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, auto-binding, or object injection.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:27.525">
              <output/>
            </source>
            <references>
              <reference name="CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes" url="https://cwe.mitre.org/data/definitions/915.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-276" name="Incorrect Default Permissions" state="0" impact="100" issueId="" issueLink="">
          <desc>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.685">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.527">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-548" name="Information Exposure Through Directory Listing" state="0" impact="100" issueId="" issueLink="">
          <desc>A directory listing is inappropriately exposed, yielding
                        potentially sensitive information to attackers.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.527">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-532" name="Information Exposure Through Log Files" state="0" impact="100" issueId="" issueLink="">
          <desc>Information written to log files can be of a sensitive nature
                        and give valuable guidance to an attacker or expose sensitive user
                        information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:28.584">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.526">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Improper Input Validation" url="https://cwe.mitre.org/data/definitions/20.html"/>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:28.583">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-436" name="Interpretation Conflict" state="0" impact="100" issueId="" issueLink="">
          <desc>Product A handles inputs or steps differently than Product B,
          which causes A to perform incorrect actions based on its perception of B's
          state.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.666">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-assets-inventory" name="Lack of assets inventory and retirement strategies" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Lack of asset inventory and retirement strategies may lead to running unpatched systems, resulting in leakage of sensitive data. It is common to find unnecessarily exposed API hosts because of modern concepts like microservices, which make applications easy to deploy and independent (e.g., cloud computing, k8s).&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:29.666">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:25.519">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-272" name="Least Privilege Violation" state="0" impact="100" issueId="" issueLink="">
          <desc>The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.687">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-779" name="Logging of Excessive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software logs too much information, making log files hard
                        to process and possibly hindering recovery efforts or forensic analysis after an
                        attack.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:28.583">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-350" name="Reliance on Reverse DNS Resolution for a Security-Critical Action" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:25.313">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-918" name="Server-Side Request Forgery (SSRF)" state="0" impact="100" issueId="" issueLink="">
          <desc>The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.174">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DOS-APP" name="The application exposes high resource consuming functions without any protection (Layer 7 attacks)" state="0" impact="100" issueId="" issueLink="">
          <desc>A highly resource consuming function could be exploited by an attacker to bring the service down.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:25.801">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-203" name="The product exposes security-relevant information about the state of the product" state="0" impact="100" issueId="" issueLink="">
          <desc>The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:30.093">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-541" name="The service returns back-end source code without interpreting it" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;If an include file source is accessible, the file may contain usernames and passwords, as well as sensitive information pertaining to the application and system. The source code can also be sent back to a client because of an error condition or an improperly configured handler.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:26.686">
              <output/>
            </source>
            <references>
              <reference name="CWE-541: Information Exposure Through Include Source Code" url="https://cwe.mitre.org/data/definitions/541.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L3" name="There is no network protection to protect against Layer 3" state="0" impact="100" issueId="" issueLink="">
          <desc>There are no measures in place to mitigate (D)DoS at a network level.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:25.802">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-L4" name="There is no network protection to protect against Layer 4" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:25.802">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="AV-DoS-TLS" name="There is no protection against Layer 6 attacks (SSL/TLS)" state="0" impact="100" issueId="" issueLink="">
          <desc/>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:25.802">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-650" name="Trusting HTTP Permission Methods on the Server Side" state="0" impact="100" issueId="" issueLink="">
          <desc>The server contains a protection mechanism that assumes that
                        any URI that is accessed using HTTP GET will not cause a state change to the
                        associated resource. This might allow attackers to bypass intended access
                        restrictions and conduct resource modification and deletion attacks, since some
                        applications allow GET to modify state.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.526">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-601" name="URL Redirection to Untrusted Site ('Open Redirect')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;A web application accepts a user-controlled input specifying a link to an external site, and uses this link in a Redirect. This functionality aids phishing attacks.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.526">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This is a generic weakness which includes several different situations that are all connected to unexpected environmental conditions and could be related to:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.525">
              <output/>
            </source>
            <references>
              <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="dyn-exec" name="Assure that the application avoids the use of eval() or other dynamic code execution features" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Assure that the application avoids the use of eval() or other dynamic code execution features. Where there is no alternative, any user input being included must be sanitized or sandboxed before being executed.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Look for scripts that do not properly validate user inputs in the page parameter. A remote user can supply a specially crafted URL to pass arbitrary code to an eval() statement, which results in code execution.&lt;/p&gt;&lt;p&gt;Note 1: This attack will execute the code with the same permissions, potentially including operation system commands.&lt;/p&gt;&lt;p&gt;Note 2: Eval injection is prevalent in handler/dispatch procedures that want to invoke a large number of functions, or set a large number of variables.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:28.920">
              <output/>
            </source>
            <references>
              <reference name="Direct Dynamic Code Evaluation (Eval Injection)" url="https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection"/>
              <reference name="[SCRIPT_ENGINE_INJECTION] Potential code injection when using Script Engine" url="https://find-sec-bugs.github.io/bugs.htm"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="deny-default-enf" name="Assure that the principle of deny by default exists for new users/roles" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Deny by default is the principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny by default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C7]: Enforce Access Controls" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"/>
          </references>
          <standards>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.090">
              <output/>
            </source>
            <references>
              <reference name="Testing for Bypassing Authorization Schema (OTG-AUTHZ-002)" url="https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)"/>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-639" name="Avoid using direct references to files" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method. Many flaws in applications result from unsafe handling of filenames or path data, for example directory traversal and arbitrary file disclosure. Use of filenames or other direct references to objects such as files on the server-side increases the risk of compromise of the system or unauthorized access to other files, content, or functionality.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Avoid using direct references to files or validate file name.&lt;/li&gt;&lt;li&gt;For example, instead of using:&amp;nbsp;www.example.com/open.jsp?file=details.txt&amp;nbsp;use:&amp;nbsp;www.example.com/open.jsp?file=[GUID]&amp;nbsp;and then use a lookup table on the server to associate the [GUID] value with file details.txt.&lt;/li&gt;&lt;li&gt;Files should be stored outside the web-root to prevent an attacker browsing directly to them.&lt;/li&gt;&lt;li&gt;Do not use obscurity to prevent access; for example do not rely on renaming a file to include a random string to prevent direct download or disclosure.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If direct references are used to access files from within the web-root deviating from recommended security practice, the following must be implemented:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String input validation must be applied.&amp;nbsp; Identify and filter for directory traversal meta-characters such as "../" or "..\" or "/", together with encoded variations and derivations.&lt;/li&gt;&lt;li&gt;Use of a strict white-list of files that may be downloaded.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;When a parameter that represents a file or a file path is found in the application:&lt;/li&gt;&lt;li&gt;For each of them try to change this parameter to gain access to unexpected files.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For example: www.example.com/open.jsp?file=details.txt&amp;nbsp;&lt;br&gt;Shouldn't be implemented that way and if so, it should not be possible to access locations outside of this domain (i.e. file=/etc/passwd or file= &lt;a href="http://www.google.com"&gt;http://www.google.com&lt;/a&gt;, etc.).&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.104">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="post-spectre-web-dev-c2" name="Choose the correct set of headers according to resource type" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The post-spectre-web-dev-c1 countermeasure establishes a default set of headers but depending on the resource type the headers may vary. Identify the type of resource the web service is serving and apply the following recommendations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static subresources: contain the same data no matter who requests them&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Origin: *&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: cross-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Timing-Allow-Origin: *&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers from post-spectre-web-dev-c1 ("Vary" can be omitted)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Dynamic subresources: contain data personalized to a given user&lt;ul&gt;&lt;li&gt;Application-internal resources: private API endpoints, avatar images, uploaded data, etc.&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers from post-spectre-web-dev-c1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Personalized resources intended for cross-origin use: public API endpoints, etc&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Credentials: true&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Origin: &lt;/strong&gt;&lt;a href="https://trusted.example/"&gt;&lt;strong&gt;https://trusted.example&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Methods: POST&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Headers: ...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Access-Control-Allow-...: ...&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers from post-spectre-web-dev-c1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Personalized resources that are intended for cross-origin no-cors embedding, but which don't intend to be directly legible in that context: avatar images, authenticated media, etc&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: cross-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Headers from post-spectre-web-dev-c1&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents&lt;ul&gt;&lt;li&gt;Fully-isolated documents: documents that require users to be signed-in&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Cross-Origin-Opener-Policy: same-origin&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options: SAMEORIGIN&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents Expecting to Open Cross-Origin Windows:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Opener-Policy: same-origin-allow-popups&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options: SAMEORIGIN&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents Expecting Cross-Origin Openers: e.g. federated sign-in forms and payment providers&lt;ul&gt;&lt;li&gt;Documents that only wish to be opened in cross-origin popups:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Opener-Policy: unsafe-none&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options: SAMEORIGIN&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents that only wish to be framed in cross-origin contexts&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Cross-Origin-Opener-Policy: same-origin&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options: ALLOWALL&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Documents that support both popup and framing scenarios:&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Resource-Policy: same-origin&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Cross-Origin-Opener-Policy: unsafe-none&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Vary: Sec-Fetch-Dest, Sec-Fetch-Mode, Sec-Fetch-Site&lt;/li&gt;&lt;li&gt;X-Content-Type-Options: nosniff&lt;/li&gt;&lt;li&gt;&lt;strong&gt;X-Frame-Options: ALLOWALL&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Meltdown and Spectre attacks" url="https://meltdownattack.com/"/>
            <reference name="Post-Spectre Web Development" url="https://www.w3.org/TR/post-spectre-webdev/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Make requests to the updated web server and ensure that the headers are set properly.&amp;nbsp;&lt;/p&gt;&lt;p&gt;The Post-Spectre Web Development guide specifies some external endpoints that implement these headers that can be used as examples:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static subresources&lt;ul&gt;&lt;li&gt;&lt;a href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"&gt;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"&gt;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"&gt;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://ssl.google-analytics.com/ga.js"&gt;https://ssl.google-analytics.com/ga.js&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Dynamic subresources&lt;ul&gt;&lt;li&gt;&lt;a href="https://api.twitter.com/1.1/jot/client_event.json"&gt;https://api.twitter.com/1.1/jot/client_event.json&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://play.google.com/log?format=json&amp;amp;hasfast=true"&gt;https://play.google.com/log?format=json&amp;amp;hasfast=true&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://securepubads.g.doubleclick.net/pcs/view"&gt;https://securepubads.g.doubleclick.net/pcs/view&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://c.amazon-adsystem.com/e/dtb/bid"&gt;https://c.amazon-adsystem.com/e/dtb/bid&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Just open the browser's developer tools to check the responses to see the headers.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.995">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-SRV-XML" name="Define and enforce secure validation through an XSD or DSD schema on XML input data" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The XML standards provides for formal validation criteria to be specified in a schema (XSD or DTD). Defining a schema with security in mind, and enforcing it on input data, will mitigate many attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define an XSD or DTD schema with secure input validation criteria.&lt;/li&gt;&lt;li&gt;Validate all XML input data against the schema before processing it.&lt;/li&gt;&lt;li&gt;The acceptance of unvalidated or non compliant data could have unexpected impact on the behavior of the application, and may facilitate attacks such as SQL injection.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For every endpoint which consumes XML data.&lt;/li&gt;
                            &lt;li&gt;Get the permitted structure of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Construct non-compliant samples and send them to the endpoints.&lt;/li&gt;
                            &lt;li&gt;Check they are not accepted.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:27.107">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC" name="Detect and notify the usage of automated tools or unusual behavior" issueId="" issueLink="" platform="" cost="0" risk="19" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Don't allow users to manipulate a system or guess its behavior based on input or output timing and detect the usage of automated tools or unusual behavior, such as actions not performed in reasonable "human time" or other abnormal time patterns.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;When the usage of automated tools is detected, the application should respond by denying access and notifying the security group.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Use several automated tools to perform normal user actions.&lt;/li&gt;
                            &lt;li&gt;Check that the applications detects these actions, denies the users access and
                            notifies the security group.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.088">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="protection-against-data-mining" name="Detect and protect against data mining techniques" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data mining is an analytical process that attempts to find correlations or patterns in large data sets for the purpose of data or knowledge discovery. Data storage objects include database records and database fields. Sensitive information can be extracted from data mining operations. When information is personally identifiable information, it may lead to unanticipated revelations about individuals and give rise to privacy risks. Prior to performing data mining activities, organizations determine whether such activities are authorized. Organizations may be subject to applicable laws, executive orders, directives, regulations, or policies that address data mining requirements. Organizational personnel consult with the senior agency official for privacy and legal counsel regarding such requirements.&lt;/p&gt;&lt;p&gt;Data mining prevention and detection techniques include limiting the number and frequency of database queries to increase the work factor needed to determine the contents of databases, limiting types of responses provided to database queries, applying differential privacy techniques or homomorphic encryption, and notifying personnel when atypical database queries or accesses occur. Data mining protection focuses on protecting information from data mining while such information resides in organizational data stores. In contrast, AU-13 focuses on monitoring for organizational information that may have been mined or otherwise obtained from data stores and is available as open-source information residing on external sites, such as social networking or social media websites.&lt;/p&gt;&lt;p&gt;EO 13587 requires the establishment of an insider threat program for deterring, detecting, and mitigating insider threats, including the safeguarding of sensitive information from exploitation, compromise, or other unauthorized disclosure. Data mining protection requires organizations to identify appropriate techniques to prevent and detect unnecessary or unauthorized data mining. Data mining can be used by an insider to collect organizational information for the purpose of exfiltration.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-53" url="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r5.pdf"/>
          </references>
          <standards>
            <standard ref="AC-23" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Ensure that your system supports policies that protect against data mining such as filtering, throttling and anomaly detection.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.093">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOG-RETENTION" name="Develop a log retention policy" issueId="" issueLink="" platform="" cost="0" risk="16" state="Required" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Develop a log retention policy to identify storage requirements for device logs and implement
                        procedures to ensure that the audit logs are available for a security response in the case of
                        incident or investigation.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        The audit logs from the last 30 days must be collected in easily accessible storage media. Older
                        logs should be archived in a protected storage and should be accessible in the future as
                        required for incidents or investigations.
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
          </references>
          <standards>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application contains logs from the last 30 days.&lt;/li&gt;
                            &lt;li&gt;Check that logs older than 30 days are in an external storage.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.965">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DIRECTORY_LISTING" name="Disable web server directory listing and ensure file metadata (e.g. .git) and backup files are not present within web roots" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Indexable directories allow an attacker to easily discover the existence of content on your web server that should remain private.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Disable directory listings in the web - or application - server configuration by default.&lt;/li&gt;&lt;li&gt;Restrict access to unnecessary directories and files.&lt;/li&gt;&lt;li&gt;Create an index (default) file for each directory.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Apache - auto index" url="https://httpd.apache.org/docs/trunk/mod/mod_autoindex.html"/>
            <reference name="Apache - directory listing" url="https://wiki.apache.org/httpd/DirectoryListings"/>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Directory_Indexing" url="https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Directory_Indexing"/>
            <reference name="OWASP Insecure Indexing" url="https://www.owasp.org/index.php/File_System#Insecure_Indexing"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that the directory listing is disabled on the web server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-11.5" name="Do not share system information in HTTP headers and responses" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should not share detailed version information of system components or other information that would assist attackers in the HTTP header or HTTP responses.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the HTTP responses and headers do not reveal sensitive data about the system.
                            Using a command line web client like telnet or netcat could help on this task.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-FILE-DATA" name="Do not use untrusted client-side data in server-side file operations" issueId="" issueLink="" platform="" cost="0" risk="34" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application may be required to perform server-side file operations based on client-side actions. This can expose the application to attack through remote or local file-inclusion, or remote code execution attacks if unsafe data is used in file inclusion, class loader, or reflection capabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Tainted, untrusted, client-side data must not be used directly in server-side file load operations.&lt;/li&gt;&lt;li&gt;Where server-side operations are dependent on client-side input, this should be mapped to pre-defined operations on the server-side rather than using tainted client-side input directly.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify sources of data entering the application.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Classify them into trusted and untrusted.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;if they are untrusted, make sure there is a validation and sanitization mechanism before sending this data into another system (Database, Command, etc.).&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:28.921">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-532" name="Do not write secrets to the log files" issueId="" issueLink="" platform="" cost="0" risk="16" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        The logs may be accessed by attackers and in order to protect sensitive data, no such sensitive
                        data should be included in the logs
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Proactive Controls [C9, C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Review the logs.&lt;/li&gt;
                            &lt;li&gt;Check that no sensitive data is included in the logs.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:27.967">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="27" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and server, terminating within a secure environment on the server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:26.089">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;In every portion of the application where a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.090">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:26.091">
              <output/>
            </source>
            <references>
              <reference name="Deserialization Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="review-api-responses" name="Ensure that the API responses contain only legitimate needed data" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;APIs rely on clients to perform the data filtering. Since APIs are used as data sources, sometimes developers try to implement them in a generic way without thinking about the sensitivity of the exposed data.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Never rely on the client-side to perform sensitive data filtering.&lt;/li&gt;&lt;li&gt;Ensure that the API responses contain only legitimate needed data.&lt;/li&gt;&lt;li&gt;Explicitly define and enforce data returned by all API methods, including errors. Whenever possible: use schema's for responses, patterns for all strings and clear field names.&lt;/li&gt;&lt;li&gt;Define all sensitive and personally identifiable information (PII) that your application stores and processes and review all API calls returning such information, to see if these responses could be a security issue.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP REST Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
            <reference name="REST Security CheatSheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API3:2019-Excessive Data Exposure" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Exploitation of excessive data exposure is simple, and is usually performed by sniffing (covertly observing) the traffic to analyze API responses, looking for any sensitive data that should not be returned to the user.&lt;/p&gt;&lt;p&gt;Automatic tools usually can't detect this type of vulnerability because it's hard to differentiate between legitimate data returned from the API, and sensitive data that should not be returned without a deep understanding of the application. However, you can use a "man-in-the-middle proxy" like OWASP Zap to manually explore your application to find sensitive data in API responses.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To Manually Explore your application:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Start ZAP and click the Quick Start tab of the Workspace Window.&lt;/li&gt;&lt;li&gt;Click the large Manual Explore button.&lt;/li&gt;&lt;li&gt;In the URL to explore text box, enter the full URL of the web application you want to inspect.&lt;/li&gt;&lt;li&gt;Select the browser you would like to use.&lt;/li&gt;&lt;li&gt;Click Launch Browser.&lt;/li&gt;&lt;li&gt;Explore your application.&lt;/li&gt;&lt;li&gt;To examine a tree view of the explored pages, click the Sites tab in the Tree Window. You can expand the nodes to see the individual URLs accessed.&lt;/li&gt;&lt;li&gt;To view the request / response information, select a request from the left side panel and get the information via the right-side "Request" and "Response" tabs.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.482">
              <output/>
            </source>
            <references>
              <reference name="OWASP ZAP Getting Started Guide" url="https://www.zaproxy.org/getting-started/"/>
              <reference name="Testing for Exposed Session Variables (OTG-SESS-004)" url="https://www.owasp.org/index.php/Testing_for_Exposed_Session_Variables_(OTG-SESS-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-HTTP-METHODS" name="Ensure that the application accepts only a defined set of required HTTP request methods" issueId="" issueLink="" platform="" cost="0" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP offers a number of methods that can be used to perform actions on the web server. Many of theses methods are designed to aid developers in deploying and testing HTTP applications. These HTTP methods can be used for nefarious purposes if the web server is misconfigured. For example, Cross Site Tracing (XST), a form of cross site scripting using the server's HTTP TRACE method.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While GET and POST are by far the most common methods that are used to access information provided by a web server, the Hypertext Transfer Protocol (HTTP) allows several other (and somewhat less known) methods. RFC 2616 (which describes HTTP version 1.1 which is the standard today) defines the following eight methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HEAD&lt;/li&gt;&lt;li&gt;GET&lt;/li&gt;&lt;li&gt;POST&lt;/li&gt;&lt;li&gt;PUT&lt;/li&gt;&lt;li&gt;DELETE&lt;/li&gt;&lt;li&gt;TRACE&lt;/li&gt;&lt;li&gt;OPTIONS&lt;/li&gt;&lt;li&gt;CONNECT&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Some of these methods can potentially pose a security risk for a web application, as they allow an attacker to modify the files stored on the web server and, in some scenarios, steal the credentials of legitimate users. More specifically, the methods that should be disabled are the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;PUT: &lt;/strong&gt;This method allows a client to upload new files onto the web server. An attacker may exploit this by uploading malicious files (e.g.: an asp file that executes commands by invoking cmd.exe), or by simply using the victim's server as a file repository.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;DELETE:&lt;/strong&gt; This method allows a client to delete a file on the web server. An attacker may exploit it as a very simple and direct way to deface a web site or to mount a DoS attack.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CONNECT: &lt;/strong&gt;This method could allow a client to use the web server as a proxy.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;TRACE: &lt;/strong&gt;This method simply echoes back to the client whatever string has been sent to the server, and is used mainly for debugging purposes. This method, originally assumed harmless, can be used to mount an attack known as Cross Site Tracing, which was discovered by Jeremiah Grossman (see links at the bottom of the page).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If an application needs one or more of these methods, such as REST Web Services (which may require PUT or DELETE), it is important to check their usage is properly limited to trusted users and safe conditions.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Ensure the application accepts only the HTTP requests GET and POST. The HTTP requests TRACE, PUT and DELETE are blocked.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP test HTTP methods" url="https://github.com/ManhNho/OWASP-Testing-Guide-v5/blob/master/document/4%20Web%20Application%20Security%20Testing/4.3%20Configuration%20and%20Deployment%20Management%20Testing/4.3.6%20Test%20HTTP%20Methods%20(OTG-CONFIG-006).md"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application only accepts the request with the following HTTP
                            methods: GET and POST.&lt;/li&gt;
                            &lt;li&gt;Check that the application rejects and blocks the following requests with the HTTP
                            methods: TRACE, PUT and DELETE.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SAME-ENCODING-STYLE" name="Ensure that the client-side and the server-side are using the same encoding style" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the client-side and the server-side are using the same encoding style.</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the server-side and the client-side are using the same encoding style.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:28.916">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SEC-DEPLOY" name="Ensure the build pipeline contains a build step to automatically build and verify the secure deployment of the application" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts.</desc>
          <implementations/>
          <references>
            <reference name="Secure development and deployment guidance" url="https://www.ncsc.gov.uk/collection/developers-collection?curPage=/collection/developers-collection/principles/secure-the-build-and-deployment-pipeline"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>
                            Understanding the deployed configuration of the server hosting the web application is almost as important as the application security testing itself. After all, an application chain is only as strong as its weakest link. Application platforms are wide and varied, but some key platform configuration errors can compromise the application in the same way an unsecured application can compromise the server.
                            &lt;br /&gt;
                            &lt;br /&gt;In order to evaluate the readiness of the application platform, testing for configuration management includes the following sections:
                            &lt;br /&gt;
                            &lt;br /&gt;4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
                            &lt;br /&gt;4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
                            &lt;br /&gt;4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
                            &lt;br /&gt;4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004)
                            &lt;br /&gt;4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
                            &lt;br /&gt;4.3.6 Test HTTP Methods (OTG-CONFIG-006)
                            &lt;br /&gt;4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
                            &lt;br /&gt;4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
                            &lt;br /&gt;4.3.9 Test File Permission (OTG-CONFIG-009)
                            &lt;br /&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.107">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="configuration-integrity" name="Ensure the integrity of all security-relevant configurations to detect tampering" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Web server and application server configurations play a key role in the security of a web application. These servers are responsible for serving content and invoking applications that generate content. In addition, many application servers provide a number of services that web applications can use, including data storage, directory services, mail, messaging, and more. Failure to manage the proper configuration of your servers can lead to a wide variety of security problems.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation:&lt;/b&gt;
&lt;/div&gt;
&lt;div&gt;
  Authorized administrators need to ensure the integrity of all security-relevant configurations to detect tampering.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="14.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Understanding the deployed configuration of the server hosting the web application is almost as important as the application security testing itself. After all, an application chain is only as strong as its weakest link. Application platforms are wide and varied, but some key platform configuration errors can compromise the application in the same way an unsecured application can compromise the server.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  In order to evaluate the readiness of the application platform, testing for configuration management includes the following sections:
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
&lt;/div&gt;
&lt;div&gt;
  4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
&lt;/div&gt;
&lt;div&gt;
  4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
&lt;/div&gt;
&lt;div&gt;
  4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004)
&lt;/div&gt;
&lt;div&gt;
  4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
&lt;/div&gt;
&lt;div&gt;
  4.3.6 Test HTTP Methods (OTG-CONFIG-006)
&lt;/div&gt;
&lt;div&gt;
  4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
&lt;/div&gt;
&lt;div&gt;
  4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
&lt;/div&gt;
&lt;div&gt;
  4.3.9 Test File Permission (OTG-CONFIG-009)&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:28.921">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOGS-INTEGRITY" name="Ensure the integrity of the logging system" issueId="" issueLink="" platform="" cost="0" risk="48" state="Required" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure Log integrity for the application generated logs, such as storing logs on write-once
                        media, forwarding a copy of the logs to a centralized SIEM or generating message digests for
                        each log file.
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-04 Audit Storage Capacity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/173-08_02_AU-04"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(c)(1)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SA-18" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-28" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-28" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check the logs integrity is controlled by making daily backups or leveraging external
                            tools for log monitoring.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.967">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ENV-USE" name="Ensure there are no environmental security weaknesses" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Application security can be undermined by misconfiguration of the underlying server or
                        development environment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that vendor and best-practice guidelines have been applied, in particular affecting areas
                        such as:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographic strength of elements such as session tokens, GUIDs, and protection of
                        data in transit and at rest.&lt;/li&gt;
                        &lt;li&gt;Removal of debugging and compiler options and artifacts used during development.&lt;/li&gt;
                        &lt;li&gt;Configuration of error trapping and use of generic error messages and pages (e.g.
                        stack traces should not be returned to users).&lt;/li&gt;
                        &lt;li&gt;Appropriate access controls over software components, variables (e.g. EJBs and
                        methods).&lt;/li&gt;
                        &lt;li&gt;Insecure or inappropriate storage of data in configuration files or other data
                        structures (e.g. passwords in configuration files).&lt;/li&gt;
                        &lt;li&gt;Use of compilation/build features or security enhancements provided by the IDE&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Vulnerable Components" url="https://pwning.owasp-juice.shop/part2/vulnerable-components.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A06:2021-Vulnerable and Outdated Components" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A6:2017-Security Misconfiguration" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A9:2017-Using Components with Known Vulnerabilities" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;figure class="table"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;Identify the areas of the application that could potentially be affected by the following:&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Verify they are correctly implemented.&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.107">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from un-trusted data" issueId="" issueLink="" platform="" cost="0" risk="48" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:27.968">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="rest-content-type-val" name="Explicitly check the incoming Content-Type for REST services" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A REST request or response body should match the intended content type in the header. Otherwise this could cause misinterpretation on the consumer/producer side and lead to code injection/execution vulnerabilities.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Explicitly check incoming Content-Type for REST services are the expected ones, such as application/xml or application/JSON.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP REST Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="13.2.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Modify the content-type server header and test if the request is accepted by the server or not. For example: modify "content application/JSON" to "application/XML" and insert an XML entity payload to determine the XML entity injection point.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:29.484">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="harden-http-headers" name="Harden HTTP Headers" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP headers are a fundamental part of website security.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The Referrer-Policy HTTP header controls how much referrer information (sent via the Referrer header) should be included with requests. This security header was designed to prevent cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;The Origin request header indicates where a fetch originates from. It doesn't include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn't disclose the whole path.&lt;/li&gt;&lt;li&gt;The Content-Disposition response header tells the browser to download a file rather than displaying it in the browser window.&lt;/li&gt;&lt;li&gt;If a response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use a suitable "Referrer-Policy" header, such as "no-referrer" or "same-origin".&lt;/li&gt;&lt;li&gt;Don't use the Origin header for authentication or access control decisions, as the Origin header can easily be changed by an attacker.&lt;/li&gt;&lt;li&gt;Use the Content-Disposition response header for file downloading in all API responses with the following directives: Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the content type).&lt;/li&gt;&lt;li&gt;Use a content-type header specifying a safe character set (e.g., UTF-8, ISO 8859-1) in every HTTP response.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTML does not specify charset" url="https://portswigger.net/kb/issues/00800200_html-does-not-specify-charset"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="Origin Header" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"/>
            <reference name="Referrer-Policy" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"/>
            <reference name="Reflected File Download" url="https://www.owasp.org/index.php/Reflected_File_Download"/>
            <reference name="Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)" url="https://tools.ietf.org/html/rfc6266"/>
          </references>
          <standards>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;An easy way to access your HTTP security headers, as part of your response headers, is to fire up Chrome DevTools. To run this click into the "Network" panel and press Ctrl + R (Cmd + R) to refresh the page. Click into your domain's request and you will see a section for response headers.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Check if "Referrer-Policy" header exists in HTTP responses and has the right directives to prevent cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;From a penetration testing perspective you should look for insecure configurations; for example, when the server returns back the Origin header in the Access-Control-Allow-Origin without any additional checks AND returns Access-Control-Allow-Credentials: true, which can lead to access of sensitive data. Note that this configuration is very insecure, and is not acceptable in general terms, except in the case of a public API that is intended to be accessible by everyone.&lt;/li&gt;&lt;li&gt;Try Reflected File Download input payloads to launch commands on the client machine. Reflected File Download is an attack combining URL path segments (now deprecated) with pages that reflect user inputs in the response. Generally web services vulnerable to JSONP Injection are leveraged to deliver malware to end users.&lt;/li&gt;&lt;li&gt;Character encoding has a popular misuse; namely, being used for encoding malicious injection strings in a way that obfuscates them. Try different character encoding schemes (like UTF-7) to bypass input validation filters, or take advantage of particular ways in which browsers render encoded text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:27.108">
              <output/>
            </source>
            <references>
              <reference name="A new security header: Referrer Policy" url="https://scotthelme.co.uk/a-new-security-header-referrer-policy/"/>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
              <reference name="Reflected File Download - A New Web Attack Vector" url="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/reflected-file-download-a-new-web-attack-vector/"/>
              <reference name="Test Cross Origin Resource Sharing (OTG-CLIENT-007)" url="https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="identify-dns-domains" name="Identify the DNS domains periodically to update the information about them" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should have a protection from sub-domain takeovers if the application relies upon DNS entries or DNS sub-domains, such as expired domain names, out of date DNS pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs, serverless functions, or storage buckets (autogen-bucket-id.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify the forward and reverse DNS lookups.&lt;/li&gt;&lt;li&gt;Verify the connection to the DNS was authenticated successfully by username/password or certificate and that they are active.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:25.215">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-L7" name="Identity which functions of the application are resource consuming and protect and monitor them (optionally set up a WAF)" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DoS attacks against the application layer also aim to use up the memory and process time that the application requires to function properly while minimizing the resources employed by the attacker by using vulnerabilities or flaws in the application. The main characteristics of this type of attack are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The requirement for less bandwidth compared to other methods such as SYN Flood attacks, and as such, the infrastructure necessary to launch a successful attack is usually minor.&lt;/li&gt;&lt;li&gt;Greater difficulty in distinguishing between malicious and legitimate traffic. Many of the most common protection measures or systems focus on the network or transport layer, and as such, they would not be efficient when the target of the attack is the application layer. It is even difficult for the defense systems that monitor this layer to distinguish between malicious and legitimate traffic.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;As we have indicated, this type of attack is very specific, and generally require fewer resources from the attacker to achieve devastating effects in the systems attacked. However, this type of attack requires more time to analyze the targeted system in order to discover vulnerabilities or bottlenecks that can be exploited during the attack.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Analyze weaknesses or bottlenecks in the design, the implementation, or even the functioning of the application to identify "heavy" requests that are resource consuming. For example, if the web application has a search engine, an attack could be to carry out searches that require a high level of resources to generate a bottleneck and eventually disable the service.&lt;/li&gt;&lt;li&gt;Implement a challenge to the device making the network request in order to test whether or not it is a bot. This is done through a test much like the CAPTCHA test commonly found when creating an account online. By giving a requirement such as a JavaScript computational challenge, many attacks can be mitigated.&lt;/li&gt;&lt;li&gt;Use of a web application firewall, managing and filtering traffic through an IP reputation database, and through on-the-fly network analysis by engineers.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Layer 7 DDoS Attacks" url="https://owasp.org/www-pdf-archive/Layer_7_DDOS.pdf"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 7 DDoS PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space. One well-known application attack is Slowloris, which targets web servers. Verify that the implemented Layer 7 protection mechanisms (Javascript challenges, CAPTCHA tests, WAF) are effective.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:25.672">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="centralized-authz-module" name="Implement a centralized authorization module that is invoked from all your business functions" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Authorization checks for a function or resource are usually managed via configuration, and sometimes at the code level. Implementing proper checks can be a confusing task, since modern applications can contain many types of roles or groups and complex user hierarchy (e.g., sub-users, users with more than one role).&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Your application should have a consistent and easy to analyze authorization module that is invoked from all your business functions. Frequently, such protection is provided by one or more components external to the application code.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The enforcement mechanism(s) should deny all access by default, requiring explicit grants to specific roles for access to every function.&lt;/li&gt;&lt;li&gt;Review your API endpoints against function-level authorization flaws, while keeping in mind the business logic of the application and groups hierarchy.&lt;/li&gt;&lt;li&gt;Ensure that all of your administrative controllers inherit from an administrative abstract controller that implements authorization checks based on the user's group/role.&lt;/li&gt;&lt;li&gt;Ensure that administrative functions inside a regular controller implements authorization checks based on the user's group and role.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Forced browsing" url="https://www.owasp.org/index.php/Forced_browsing"/>
            <reference name="OWASP Development Guide: Chapter on Authorization" url="https://www.owasp.org/index.php/Category:Access_Control"/>
            <reference name="Top 10 2013-A7-Missing Function Level Access Control" url="https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API5:2019-Broken Function Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Exploitation requires the attacker to send legitimate API calls to the API endpoint that they should not have access to. These endpoints might be exposed to anonymous users or regular, non-privileged users. It's easier to discover these flaws in APIs since APIs are more structured, and the way to access certain functions is more predictable (e.g., replacing the HTTP method from GET to PUT, or changing the "users" string in the URL to "admins", or changing the value of a parameter like "is_admin" from "false" to "true").&lt;/p&gt;&lt;p&gt;Don't assume that an API endpoint is regular or administrative only based on the URL path. While developers might choose to expose most of the administrative endpoints under a specific relative path, like api/admins, it's very common to find these administrative endpoints under other relative paths together with regular endpoints, like api/users&lt;/p&gt;&lt;p&gt;The best way to find broken function-level authorization issues is to perform deep analysis of the authorization mechanism, while keeping in mind the user hierarchy, different roles or groups in the application, and:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Verify if a regular user can access administrative endpoints.&lt;/li&gt;&lt;li&gt;Verify if a user can perform sensitive actions (e.g., creation, modification, or erasure) that they should not have access to by simply changing the HTTP method (e.g., from GET to DELETE).&lt;/li&gt;&lt;li&gt;Verify if a user from group X can access a function that should be exposed only to users from group Y, by simply guessing the endpoint URL and parameters (e.g., /api/v1/users/export_all).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.484">
              <output/>
            </source>
            <references>
              <reference name="OWASP Cheatsheet Testing Automation" url="https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation.html"/>
              <reference name="Testing for Authorization" url="https://www.owasp.org/index.php/Testing_for_Authorization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="implement-monitoring-unusual-activities" name="Implement and monitor Business Logic Limits for actions and transactions" issueId="" issueLink="" platform="" cost="0" risk="40" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement in the application the appropriate limits for specific business actions and transactions, to enforce the correct usage of the application for each user ensuring they cannot bypass important steps in the flow. This business logic limits provide us protection against likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/p&gt;&lt;p&gt;All business actions or transactions that exceed the established limits, should be recorded in the logs and monitored as unusual events.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Proactive controls (C9)" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A04:2021-Insecure Design" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis.&lt;/li&gt;
   &lt;li&gt;Verify the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modeling or similar methodologies.&lt;/li&gt;
  &lt;li&gt;Verify the application monitors for unusual events or activity from a business logic perspective.&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:26.091">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="network-rate-limit" name="Implement application and network rate limiting" issueId="" issueLink="" platform="" cost="1" risk="40" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of attacks rely on brute-force techniques to send large volumes of requests to enumerate or attempt to exploit flaws in an application, for example, sending common passwords to multiple target accounts within an application. By profiling normal traffic volumes, and applying rate limiting, the application can be built to actively mitigate such attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Connection rate-limiting based on the source IP address can be used to restrict attacks against the authentication or registration systems. Multiple failures (or attempts) from a single IP should result in temporarily blocking or dropping traffic from the source. Note however that some corporate and ISP environments may place multiple valid and discrete clients behind the same IP address, resulting in false-positives.&lt;/li&gt;&lt;li&gt;Attackers may use botnets and other IP masking techniques to deliver attacks to avoid IP based rate-limiting. To mitigate this class of attack, Indicators of Compromise should be monitored (for example a higher rate of login failures than usual), and appropriate actions taken. For example, when the application detects active brute-force attacks, a Web Application Firewall (WAF) or other intermediate devices could be used to block attacks sharing a signature from pattern matching or deep packet inspection (e.g. HTTP headers or common passwords across multiple accounts). Similarly, the application could respond by requiring a CAPTCHA, cookie, or Javascript challenge when an attack is detected.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Implement the mechanisms to lockout accounts:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;When the application detects a set number of failure login attempts, the account shall be locked for a certain time period. This period shall be increased as per each new failed attempt up to an hour as maximum.&lt;/li&gt;&lt;li&gt;When the application detects an account is locked more times than usual, this account should be disabled (no more than 100 failure attempts). A disabled account should only be restored by an administrator.&lt;/li&gt;&lt;li&gt;When the application detects active brute-force attacks, the application shall require a CAPTCHA, cookie, or JavaScript challenge before attempting authentication.&lt;/li&gt;&lt;li&gt;Only accept those authentication requests that come from a white list of IP addresses from which the user has been successfully authenticated before.&lt;/li&gt;&lt;li&gt;If the user successfully authenticates, the previous failed attempts shall be reset for that user from the same IP address.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-02 Account Management" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/24-08_02_AC-02"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OWASP Blocking Brute Force Attacks" url="https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.5" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.4.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.1.5.2" supportedStandardRef="nist-800-63"/>
            <standard ref="5.2.2" supportedStandardRef="nist-800-63"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API4:2019-Lack of Resources and Rate Limiting" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Use tools like &lt;a href="https://www.thc.org/thc-hydra/"&gt;THC-Hydra&lt;/a&gt;, &lt;a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project"&gt;OWASP ZAP&lt;/a&gt; or &lt;a href="https://portswigger.net/burp/"&gt;Burp Suite &lt;/a&gt;to simulate brute force attacks against the login function.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Perform a simulation of the attack against the login function.&lt;/li&gt;&lt;li&gt;Verify the function is blocked for your source after n attempts.&lt;/li&gt;&lt;li&gt;Verify there is a log alerting function for an unusual amount of failed login attempts, even if they originated from different sources.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.091">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="best-practices-api-auth" name="Implement best practices for API authentication" issueId="" issueLink="" platform="" cost="0" risk="8" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;One of the challenges to building any RESTful API is having a well thought out authentication strategy. An API built without protection from malicious threats through authentication represents an API design failure that can threaten an organization's data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Know all the possible flows to authenticate to the API (mobile / web / deep links that implement one-click authentication / etc).&lt;/li&gt;&lt;li&gt;Check these flows with the API engineers.&lt;/li&gt;&lt;li&gt;Understand deeply the authentication mechanisms and how they are be used. OAuth is not authentication, and neither are API keys.&lt;/li&gt;&lt;li&gt;Don't reinvent the wheel in authentication, token generation, password storage. Use the standard frameworks.&lt;/li&gt;&lt;li&gt;Credential recovery / forget password endpoints should be treated as login endpoints in terms of brute force, rate limiting and lockout protections.&lt;/li&gt;&lt;li&gt;Use the OWASP Authentication Cheatsheet.&lt;/li&gt;&lt;li&gt;Where possible, implement multi-factor authentication.&lt;/li&gt;&lt;li&gt;Implement anti-brute-force mechanisms to mitigate credential stuffing, dictionary attack and brute force attacks on your authentication endpoints. This mechanism should be stricter than the regular rate limiting mechanism on your API.&lt;/li&gt;&lt;li&gt;Implement account lockout / captcha mechanisms to prevent brute force attacks. Implement weak-password checks.&lt;/li&gt;&lt;li&gt;API keys should not be used for authentication, but for client app / project authentication.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How to Secure APIs" url="https://dzone.com/articles/how-to-secure-apis"/>
            <reference name="OWASP REST Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
            <reference name="REST Security CheatSheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="23" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="26" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API2:2019-Broken Authentication" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Testing the authentication schema means deeply understanding how the authentication process works and using that information to circumvent the authentication mechanism.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Verify that the user's authentication data are transferred via an encrypted channel (&lt;a href="https://www.owasp.org/index.php/Testing_for_Credentials_Transported_over_an_Encrypted_Channel_(OTG-AUTHN-001)"&gt;OTG-AUTHN-001&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Test for default credentials of common applications (&lt;a href="https://www.owasp.org/index.php/Testing_for_default_credentials_(OTG-AUTHN-002)"&gt;OTG-AUTHN-002&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Attempt an invalid login by using incorrect passwords a number of times to test the account lockout mechanism's ability to mitigate brute force password guessing (&lt;a href="https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)"&gt;OTG-AUTHN-003&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Modify user input parameters to gain access to protected areas without providing valid credentials (&lt;a href="https://www.owasp.org/index.php/Testing_for_Bypassing_Authentication_Schema_(OTG-AUTHN-004)"&gt;OTG-AUTHN-004&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Verify that the credentials are only sent during the login phase, and not sent together with every request to the application (&lt;a href="https://www.owasp.org/index.php/Testing_for_Vulnerable_Remember_Password_(OTG-AUTHN-005)"&gt;OTG-AUTHN-005&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Check that the application does not leak any sensitive data into the browser cache. In order to do that, use a proxy (such as WebScarab) and search through the server responses that belong to the session, checking that for every page which contains sensitive information, the server instructed the browser not to cache any data (&lt;a href="https://www.owasp.org/index.php/Testing_for_Browser_cache_weakness_(OTG-AUTHN-006)"&gt;OTG-AUTHN-006&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Determine the resistance of the application against brute force password guessing using available password dictionaries by evaluating the length, complexity, reuse and aging requirements of passwords (&lt;a href="https://www.owasp.org/index.php/Testing_for_Weak_password_policy_(OTG-AUTHN-007)"&gt;OTG-AUTHN-007&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Try to create security questions by creating a new account or by configuring your existing account's password recovery properties, to find weak self-generated questions (&lt;a href="https://www.owasp.org/index.php/Testing_for_Weak_security_question/answer_(OTG-AUTHN-008)"&gt;OTG-AUTHN-008&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Determine the resistance of the passwords reset functionality against guessing or bypassing (&lt;a href="https://www.owasp.org/index.php/Testing_for_weak_password_change_or_reset_functionalities_(OTG-AUTHN-009)"&gt;OTG-AUTHN-009&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Fully test the website's primary authentication functions. This should identify how accounts are issued, created or changed and how passwords are recovered, reset, or changed. Additionally knowledge of any elevated privilege authentication and authentication protection measures should be known (&lt;a href="https://www.owasp.org/index.php/Testing_for_Weaker_authentication_in_alternative_channel_(OTG-AUTHN-010)"&gt;OTG-AUTHN-010&lt;/a&gt;).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.484">
              <output/>
            </source>
            <references>
              <reference name="OWASP Testing Guide v4. Testing for authentication" url="https://www.owasp.org/index.php/Testing_for_authentication"/>
              <reference name="OWASP Testing for authentication" url="https://www.owasp.org/index.php/Testing_for_authentication"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="error-handling-centralized" name="Implement centralized mechanisms to manage errors and exceptions" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Create a functionality or a mechanism to manage exceptions in a centralized manner and avoid including duplicated try/catch blocks in the code.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;A well-planned error/exception handling strategy is important for three reasons:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Good error handling does not give an attacker any information which can be leveraged for attacking the application.&lt;/li&gt;&lt;li&gt;A proper centralized error strategy is easier to maintain and reduces the chances of any uncaught errors "Bubbling up" to the front-end of an application.&lt;/li&gt;&lt;li&gt;Information leakages can lead to social engineering exploits.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Building an infrastructure for consistent error reporting proves more difficult than error handling. All exceptions should be caught as events with the severity of the error. These events will be logged.&lt;/p&gt;&lt;p&gt;The centralized system should reorganize all events and throw the corresponding error or system message in a consistent manner, depending on the severity of the error.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Code Review: Error Handling" url="https://www.owasp.org/index.php/Codereview-Error-Handling"/>
            <reference name="OWASP Error Handling" url="https://www.owasp.org/index.php/Error_Handling"/>
            <reference name="OWASP Proactive Controls [C10]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify that a centralized system is in place to catch errors and exceptions, and these errors are shown in a correct manner.&lt;/li&gt;&lt;li&gt;Verify all errors thrown from the centralized system are displayed in a correct fashion.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:26.091">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="object-level-authorization" name="Implement object-level authorization checks in every function that accesses a data source using input from the user" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement a proper authorization mechanism that relies on the user policies and hierarchy. Object-level authorization checks should be considered in every function that accesses a data source using input from the user.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Favor not using an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.&lt;/li&gt;&lt;li&gt;Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an input from the client to access a record in the database.&lt;/li&gt;&lt;li&gt;Use random and unpredictable values as GUIDs for records' IDs.&lt;/li&gt;&lt;li&gt;Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break these tests.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Top 10 2007-Insecure Direct Object Reference" url="https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Map out all locations in the application in which user input is used to reference objects directly. For example, locations where user input is used to access a database row, a file, application page, etc.&lt;/li&gt;&lt;li&gt;Modify the value of the parameter used to reference objects to see if the application raises an authorization error.&lt;/li&gt;&lt;li&gt;Assess whether it is possible to retrieve objects belonging to other users or otherwise bypass authorization.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:29.484">
              <output/>
            </source>
            <references>
              <reference name="Testing for Insecure Direct Object References (OTG-AUTHZ-004)" url="https://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)"/>
              <reference name="Top 10 2007-Insecure Direct Object Reference" url="https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
            <reference name="OWASP Top Ten Proactive Controls 2018 (C9): Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.970">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-TLS" name="Inspect the TLS/SSL traffic on a capable device before sending the connection down on your infrastructure" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;TLS adds another vector for computational attacks since a client can easily (with little computational effort) force the server to expend relatively large computational work. If a web application is delivered over TLS, an attacker can also choose to attack the TLS negotiation process. TLS is computationally expensive so an attacker can reduce a server's availability by sending unintelligible data. In a variation of this attack, an attacker completes the TLS handshake but perpetually renegotiates the encryption method. Or an attacker can attempt to exhaust server resources by opening and closing many TLS sessions.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;To mitigate consider options like offloading the SSL from the origin infrastructure and inspecting the application traffic for signs of attack traffic or violations of policy at an application delivery platform (ADP).&lt;br&gt;A good ADP will also ensure that your traffic is then re-encrypted and forwarded back to the origin infrastructure with unencrypted content only ever residing in protected memory on a secure bastion host.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 6 DDoS attack PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the implemented availability protection is effective. One useful tool to execute this kind of test is &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt;. It covers all the required tests for TLS &amp;amp; SSL assessments and is regularly updated.&lt;/p&gt;&lt;p&gt;There are many testing options that can be used with &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt; and the options you should use will depend greatly on your testing requirements. Below are some useful examples, for an overview of &lt;a href="http://testssl.sh/"&gt;testssl.sh&lt;/a&gt; command-line options. run ./testssl.sh with no other options.&lt;/p&gt;&lt;p&gt;Test Everything on a Single Host and Output to console&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST&lt;/p&gt;&lt;p&gt;Test Everything on a Single Host and Output to HTML&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U TARGET-HOST | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Test all hosts on a Subnet and Output to HTML&lt;br&gt;./testssl.sh -e -E -f -p -y -Y -S -P -c -H -U 192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;&lt;p&gt;Same as above, but only enumerate each servers supported ciphers:&lt;br&gt;./testssl.sh -E 192.168.1.0/24 | aha &amp;gt; OUTPUT-FILE.html&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:25.674">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="inventory-api" name="Inventory all API hosts and document important aspects of each one of them" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Asset management is a systematic process of developing, operating, maintaining, upgrading, and disposing of assets in the most cost-effective manner (including all costs, risks and performance attributes). The asset inventory makes up the first part of a chain in many risk management frameworks.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Inventory all API hosts and document important aspects of each one of them, focusing on the API environment (e.g., production, staging, test, development), who should have network access to the host (e.g., public, internal, partners) and the API version.&lt;/li&gt;&lt;li&gt;Inventory integrated services and document important aspects such as their role in the system, what data is exchanged (data flow), and its sensitivity.&lt;/li&gt;&lt;li&gt;Document all aspects of your API such as authentication, errors, redirects, rate limiting, cross-origin resource sharing (CORS) policy and endpoints, including their parameters, requests, and responses.&lt;/li&gt;&lt;li&gt;Generate documentation automatically by adopting open standards. Include the documentation build in your CI/CD pipeline.&lt;/li&gt;&lt;li&gt;Make API documentation available to those authorized to use the API.&lt;/li&gt;&lt;li&gt;Use external protection measures such as API security firewalls for all exposed versions of your APIs, not just for the current production version.&lt;/li&gt;&lt;li&gt;Avoid using production data with non-production API deployments. If this is unavoidable, these endpoints should get the same security treatment as the production ones.&lt;/li&gt;&lt;li&gt;When newer versions of APIs include security improvements, perform risk analysis to make the decision of the mitigation actions required for the older versions: for example, whether it is possible to backport the improvements without breaking API compatibility, or simply take the older versions out swiftly and force all clients to move to the latest versions.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Best Practices in API Documentation" url="https://swagger.io/blog/api-documentation/best-practices-in-api-documentation"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="20" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="21" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="27" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API9:2019-Improper Assets Management" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Make sure the API host inventory and API documentation are updated and available to stakeholders. To check the validity of this documentation you can use an active/passive discovery tool to identify undocumented API hosts or endpoints.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:29.485">
              <output/>
            </source>
            <references>
              <reference name="Inventory and Control of Software Assets" url="https://www.cisecurity.org/controls/inventory-and-control-of-software-assets/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" name="Limit the number of accounts with privileges allowing modification and/or deletion of audit logs files" issueId="" issueLink="" platform="" cost="0" risk="48" state="Required" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Limit the number of accounts with privileges to modify and/or delete audit logs files.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the number of accounts with privileges to modify the logs is limited and
                            controlled.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.968">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-VAL-LOG" name="Log and reject all data validation failures" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Data validation failures, together with access control violations, are symptomatic of malicious activity where an attacker is attempting to subvert the protections in place. It is therefore likely that unexpected input detected by the application relates to an attack. Rejecting and logging such activity, and ideally terminating the session, increases the likelihood of detecting and inhibiting structured attacks against the application.
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Log all validation failures when rejecting requests.&lt;/li&gt;
  &lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;
  &lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;
  &lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.5.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.968">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CDS-USER-TRACK" name="Log details of user actions within the system" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To maintain proper accountability, logs should be maintained with sufficient
                        information to track user actions within the system. These logs should be forensically sound,
                        non-repudiable, and contain comprehensive details about activity. While the exact data for an
                        event may vary, the following should be captured at a minimum:&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Timestamps against a proven external source (e.g. an NTP server).&lt;/li&gt;
                        &lt;li&gt;Origin (with this field we mark if the logs are provided by a trusted or untrusted
                        source).&lt;/li&gt;
                        &lt;li&gt;Event, status, and/or&amp;nbsp;error codes (with sensitive data masked as appropriate
                        or not introduced in logs).&lt;/li&gt;
                        &lt;li&gt;Service, command, application or function name and details.&lt;/li&gt;
                        &lt;li&gt;User or system account associated with an event.&lt;/li&gt;
                        &lt;li&gt;Devices used (e.g. source and destination IPs, terminal session ID, web browser, etc.).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        Source:&amp;nbsp;&amp;nbsp;
                        &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley audit logging" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA AU-10 Non-Repudiation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/179-08_02_AU-10"/>
            <reference name="OSA CA-07 Continuous Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/166-08_02_CA-07"/>
            <reference name="OSA IR-05 Incident Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/139-08_02_IR-05"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C7, C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(a)(1)(A)" supportedStandardRef="hipaa-required"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="4.10" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-7" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-2" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="IR-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-4" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-5" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-5" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Perform several different actions on the service.&lt;/li&gt;&lt;li&gt;Inspect the log files to see if the format and content complies with the company policy.&lt;/li&gt;&lt;li&gt;If there is no company policy, check that at least the following data is included: timestamp event, status, error codes, service/command/application username or system account associated with an eventDevice used (e.g. source and destination IPs, terminal session ID, web browser, etc).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Source:&amp;nbsp;&lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt; https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.969">
              <output/>
            </source>
            <references>
              <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
              <reference name="Security Audit Logging Guideline" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-LOGGING" name="Logging the data access and the modification of personal data" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Make sure that every access and modification of personal data is logged (The log should be precise enough to know who changed what and when). This includes data access from the application as well as data access from privileged accounts, such as database admins. In practice, this means logging both on application, middleware and operating system (OS) level.
          </desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="Art.5" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Test accessing and modifying user personal data as legitimate users, employees, administrators and malicious actors.&lt;/li&gt;
                &lt;li&gt;Verify appropriate logging of all the above activities are successful and sufficiently detailed.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.970">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LOG-TLS-FAILURES" name="Log the backend TLS connection failures" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement functionality to record backend TLS connection failures and include these in the
                        logs.
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that backend TLS connection failures are recorded in the logs.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.969">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-541" name="Prevent unauthorised access to source code through the service" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to the source-code for the application can aid an attacker in determining bugs or vulnerabilities in the code or logic. For closed-source projects it is therefore important to control and restrict access to the source. Application services may unexpectedly expose code, for example a service providing files to a user could be manipulated to access source code if implemented insecurely.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure source code is not inadvertently disclosed through misconfiguration or vulnerabilities in the service.&lt;/li&gt;&lt;li&gt;Check configuration files are not downloadable directly from the service, and cannot be read and viewed through the service itself.&lt;/li&gt;&lt;li&gt;Ensure backups, operating systems, and version control artifacts do not expose code.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check the source code of the application is never returned in cases in which it cannot be interpreted.&lt;/li&gt;&lt;li&gt;Web Servers have a concept called handlers which manage the source code interpretation before sending it to the client. If those handlers are not properly configured, the plain source code could be sent as a default.&lt;/li&gt;&lt;li&gt;Check the handlers are correctly configured to support the types of languages your server uses.&lt;/li&gt;&lt;li&gt;Check also that the source code is not leaked in case of failure.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:26.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="8" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. A token/identifier that is not accessible to the attacker is needed to mitigate this and would not be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For maximum security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on the server-side is problematic, an alternative defense is to use the double-submit cookie technique. This technique is easy to implement and is stateless. In this technique, a random value is sent in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudo random value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudo-random value as a hidden form value (or other request parameter/header). If both of them match on the server-side, the server accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely on examining an HTTP request header value. Firstly, determining the origin the request is coming from (source origin). This can be achieved via Origin and/or referer headers. Secondly, determining the origin the request is going to (target origin). On the server-side verify if both of these match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, discard the request (meaning that the request originated from a cross-domain). Reliability of these headers comes from the fact they cannot be altered programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-30" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.- Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.107">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-ICMP-Flooding" name="Rate-limit ICMP traffic and prevent the attack from impacting bandwidth and firewall performance" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Common attacks are ICMP Flooding, Ping flood and Ping of death - Layer 3 infrastructure DDoS attack methods that use ICMP messages to overload the targeted network's bandwidth. These kind of attacks can be prevented from taking place by rate-limiting ICMP traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;For example, iptables can be used on Linux systems as follows:&lt;/p&gt;&lt;p&gt;To protect against ping flood attacks the 'limit' module of iptables can be used:&lt;/p&gt;&lt;p&gt;-A INPUT -p icmp --icmp-type echo-request -m limit --limit 60/minute --limit-burst 120 -j ACCEPT -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/minute --limit-burst 2 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A INPUT -p icmp --icmp-type echo-request -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;Note that the above lines will protect only against ping request attacks.&amp;nbsp;&lt;/p&gt;&lt;p&gt;To protect against generic ICMP flood attacks we can remove the constraint '--icmp-type echo-request'. This is only good enough to protect against PC to PC attacks. If flood is done using multiple sources or using hardware then this configuration may not be enough. The configuration will also cause denial of service to other users when under attack even from single source, as we are limiting based on protocol without considering the source address of the packet.&lt;/p&gt;&lt;p&gt;Iptables can also be used to prevent abuse of network resources by rate limiting them:&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 4/second --limit-burst 12 -j ACCEPT&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A OUTPUT -p tcp -m tcp --dport 80 -m limit --limit 1/minute --limit-burst 1 -j LOG&amp;nbsp;&lt;/p&gt;&lt;p&gt;-A OUTPUT -p tcp -m tcp --dport 80 -j DROP&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;In the above example we are limiting outgoing connections to port 80. This is useful when we can't completely block outgoing connections but we do not want it to become channel from where people start browsing net or downloading. The limit module can also be used in rate limiting incoming traffic for performance reasons.&lt;/p&gt;&lt;p&gt;Disabling a ping flood is most easily accomplished by disabling the ICMP functionality of the targeted router, computer or other device. A network administrator can access the administrative interface of the device and disable its ability to send and receive any requests using the ICMP, effectively eliminating both the processing of the request and the Echo Reply. The consequence of this is that all network activities that involve ICMP are disabled, making the device unresponsive to ping requests, traceroute requests, and other network activities.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="Ping (ICMP) Flood DDoS Attack" url="https://www.cloudflare.com/learning/ddos/ping-icmp-flood-ddos-attack/"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="Rate limiting using iptables" url="https://www.sbarjatiya.com/notes_wiki/index.php/Rate_limiting_using_iptables"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the implemented availability protection is effective. One useful tool to execute this kind of test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For example, you can execute a Smurf attack (denial-of-service attack that floods a target system via spoofed broadcast ping messages) using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3 -1 - flood -a VICTIM_IP BROADCAST_ADDRESS&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:25.674">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-18.8" name="Reject requests containing unexpected or missing content type headers" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Reject requests containing unexpected or missing content type headers with HTTP response status
                        &amp;quot;406 Unacceptable&amp;quot; or &amp;quot;415 Unsupported Media Type&amp;quot;.
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Validate request content-type" url="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Validate_request_content_types"/>
            <reference name="Spring docs: CSRF" url="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html"/>
          </references>
          <standards>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that HTTP requests with non-valid Content-type are rejected.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.107">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-SESS-REAUTH" name="Require additional authentication for sensitive operations / high value transactions" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Having gained access to an account, for example through session hijacking or cross-site scripting, an attack may compromise data and functionality accessible to the victim. This may include elevating privileges or accessing sensitive data and functionality, such as changing passwords, creating accounts, or transferring funds.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;These critical functions and sensitive data should be further protected from attack using a risk-based authentication model requiring re-authentication via multi-factor authentication, or use of a token to sign transactions or operations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement re-authentication on key functions (such as requiring the old password before setting a new one).&lt;/li&gt;&lt;li&gt;Use secondary authentication such as a transaction PIN to allow financial transfers.&lt;/li&gt;&lt;li&gt;Critical administrative functionality should require multi-factor authentication (such as a hard or soft token).&lt;/li&gt;&lt;li&gt;Consider use of signing technologies or tokens that enable the server-side to verify the authenticity of a request and mitigate Man in the Middle (MiTM) or Man in the Browser (MiTB) attacks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
          </references>
          <standards>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical functionalities of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the risk appetite for those functionalities.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Validate that re-authentication is required for those functions if deemed
                            necessary.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.108">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="OTG-BUSLOGIC-006" name="Restrict actions of users that follow unusual patterns" issueId="" issueLink="" platform="" cost="0" risk="19" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Restrict actions that users can do outside of the approved/required business process flow.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;This is important because without this safeguard in place attackers may be able to bypass or circumvent work-flows and checks allowing them to prematurely enter or skip required sections of the application potentially allowing actions/transactions to be completed without successfully completing the entire business process, leaving the system with incomplete back-end tracking information.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-06 Security Functionality Verification" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/44-08_02_SI-06"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Testing for business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing business logic" url="https://www.owasp.org/index.php/Testing_for_business_logic"/>
            <reference name="OWASP testing for the circumvention of work flows" url="https://www.owasp.org/index.php/Testing_for_the_Circumvention_of_Work_Flows_(OTG-BUSLOGIC-006)"/>
          </references>
          <standards>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-17" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-6" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the application only processes business logic flows in sequential step order and in realistic human time.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:26.090">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:25.453">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="post-spectre-web-dev-c1" name="Set security headers with default values explicitly" issueId="" issueLink="" platform="" cost="0" risk="42" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Spectre breaks the isolation between different applications. It allows an attacker to trick error-free programs, which follow best practices, into leaking their secrets. In fact, the safety checks of said best practices actually increase the attack surface and may make applications more susceptible to Spectre.&lt;/p&gt;&lt;p&gt;Mitigations can be applied to reduce potential risk on web services:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Decide when not to respond to requests&lt;/strong&gt; by examining incoming headers, paying special attention to the Origin header on the one hand, and various Sec-Fetch- prefixed headers on the other.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Restrict attackers' ability to load your data as a subresource&lt;/strong&gt; by setting a cross-origin resource policy (CORP) of same-origin (opening up to same-site or cross-origin only when necessary).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Restrict attackers' ability to frame your data as a document&lt;/strong&gt; by opt-ing into framing protections via X-Frame-Options: SAMEORIGIN or CSP's more granular frame-ancestors directive (frame-ancestors 'self' https://trusted.embedder, for example).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Restrict attackers' ability to obtain a handle to your window&lt;/strong&gt; by setting a cross-origin opener policy (COOP). In the best case, you can default to a restrictive same-origin value, opening up to same-origin-allow-popups or unsafe-none only if necessary.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Prevent MIME-type confusion attacks&lt;/strong&gt; and increase the robustness of passive defenses like cross-origin read blocking (CORB) / opaque response blocking (ORB) by setting correct Content-Type headers, and globally asserting X-Content-Type-Options: nosniff.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Meltdown and Spectre attacks" url="https://meltdownattack.com/"/>
            <reference name="Post-Spectre Web Development" url="https://www.w3.org/TR/post-spectre-webdev/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Make requests to the updated web server and ensure that the headers are set properly.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:29.998">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-662" name="Use a synchronised time source" issueId="" issueLink="" platform="" cost="0" risk="35" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to correlate logs and data from different internal and external systems, and to preserve forensic quality of the logs, it is important a unified and trusted synchronized time source is used throughout the environment.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Servers should synchronize to an internal or external NTP server&lt;/li&gt;&lt;li&gt;The centralized source should in turn use (or be) a trusted central time source.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This control is critical in identifying application events (including attacks) through logging, and in conducting post-event analysis, and in particular to track the entire user (or attacker) journey through the system should it be compromised.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;It is good practice to use the concept of Indicators of Compromise (IoC) which should be leveraged to detect possible situations in which the system has been compromised and give an appropriate response.&amp;nbsp; IoCs are often tracked through logs, and accurate time is essential.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AU-08 Time Stamps" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/177-08_02_AU-08"/>
            <reference name="OSA AU-09 Protection Of Audit Information" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/178-08_02_AU-09"/>
            <reference name="OSA AU-11 Audit Record Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/180-08_02_AU-11"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Proactive Controls [C9]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.4.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API10:2019-Insufficient Logging &amp; Monitoring" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-11" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-9" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-9" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Check that mechanisms are installed to keep the host's clock synchronized (i.e.
                            ntpd in Linux based systems).&lt;/li&gt;
                            &lt;li&gt;Inspect the logs created by the app and check they have the correct timestamp.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.969">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" issueId="" issueLink="" platform="" cost="2" risk="34" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>
                        &lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or auto-binding when accepting values from an untrusted source and mapping them to trusted server side values increases the risk of tainted data being used unsafely.&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                         &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt;
                         &lt;li&gt;Use available features of the language or framework that allow specification of white lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt;
                         &lt;ul&gt;
                          &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible (white list) or attr_protected (black list) macros in each class that may be used in mass assignment.&lt;/li&gt;
                         &lt;/ul&gt;
                        &lt;/ul&gt;
                    </desc>
          <implementations>
            <implementation platform="Spring.java">
              <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="OWASP Juice Shop: XSS" url="https://pwning.owasp-juice.shop/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the framework the component is using.&lt;/li&gt;&lt;li&gt;Check if this particular framework provides automatic binding of variables.&lt;/li&gt;&lt;li&gt;Verify if it is disabled or restricted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:27.106">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="AV-DoS-BH" name="Use blackholing to mitigate L4 DDoS attacks" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;DDoS attack blocking, commonly referred to as blackholing, is a method typically used by ISPs to stop a DDoS attack on one of its customers. This approach to block DDoS attacks makes the site in question completely inaccessible to all traffic, both malicious attack traffic and legitimate user traffic.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Blackholing is typically deployed by the ISP to protect other customers on its network from the adverse effects of DDoS attacks such as slow network performance and disrupted service. Common attacks are SYN flood and Smurf attack. For Smurf attack a simple solution is to disable IP broadcasting addresses at each network router and firewall.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Older routers are likely to enable broadcasting by default, while newer routers will likely already have it disabled.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;:&lt;/p&gt;&lt;p&gt;Disable broadcasting by default on old routers.&lt;/p&gt;&lt;p&gt;To implement RTBH (Remote Triggered Black Hole) Network Operator sets up a null route for the 192.0.2.1 address on all the backbone routers which participate in BGP:&lt;/p&gt;&lt;p&gt;ip route 192.0.2.1 255.255.255.255 null 0 254&lt;/p&gt;&lt;p&gt;192.0.2.1 is part of 192.0.2.0/24, the TEST-NET, one of the reserved IPv4 address blocks.&lt;/p&gt;&lt;p&gt;Create a route-map to catch routes which need to be blackholed&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Static routes can be tagged in Cisco IOS - we will tag routes to be blackholed with the value of 66&lt;/li&gt;&lt;li&gt;Set origin to be iBGP&lt;/li&gt;&lt;li&gt;Set local-preference to be 150&lt;ul&gt;&lt;li&gt;higher than any other local-preference set in the backbone&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set community to be no-export and internal marker community (ASN:666)&amp;nbsp;&lt;ul&gt;&lt;li&gt;Don't want prefix to leak outside the AS&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set next-hop to 192.0.2.1 (IPv4) or 100::1 (IPv6)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Then introduce the route-map into the BGP configuration.&lt;/p&gt;&lt;p&gt;To implement the trigger, simply null route whatever address or address block needs to be blackholed:&lt;/p&gt;&lt;p&gt;ip route 50.62.124.1 255.255.255.255 null0 tag 66&amp;nbsp;&lt;/p&gt;&lt;p&gt;And this ensures that (for example) 50.62.124.1/32 is announced to the entire backbone with next-hop 192.0.2.1 set.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="DDoS Attacks and Countermeasures in Cyberspace" url="https://www.researchgate.net/publication/279176025_DDoS_Attacks_and_Countermeasures_in_Cyberspace"/>
            <reference name="DDoS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
            <reference name="ENISA - Threat Landscape and Good Practice Guide for Internet Infrastructure" url="https://www.enisa.europa.eu/publications/iitl/at_download/fullReport"/>
            <reference name="RFC 4732 - Internet Denial-of-Service Considerations" url="https://tools.ietf.org/html/rfc4732"/>
            <reference name="RFC 4987 - TCP SYN Flooding Attacks and Common Mitigations" url="https://tools.ietf.org/html/rfc4987"/>
            <reference name="RFC 5635 - Remote Triggered Black Hole Filtering               with Unicast Reverse Path Forwarding (uRPF)" url="https://tools.ietf.org/html/rfc5635"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Perform Layer 3 DDoS attack PoC attacks in a security-laboratory environment and monitor the performance degradation in terms of CPU/Memory/Disk Space to verify if the implemented availability protection is effective. One useful tool to execute this kind of test is hping. Hping is a command-line oriented TCP/IP packet assembler/analyzer. The interface is inspired to the ping(8) unix command, but hping isn't only able to send ICMP echo requests. It supports TCP, UDP, ICMP and RAW-IP protocols, has a traceroute mode, the ability to send files between a covered channel, and many other features.&lt;/p&gt;&lt;p&gt;For example, you can simulate a TCP SYN DDoS Attack using the following hping3 command:&lt;/p&gt;&lt;p&gt;hping3 VICTIM_IP -flood -rand-source -destport 80 -syn -d 120 -w 64&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:25.674">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="27" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), should be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
&lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity that issues security tokens or electronic credentials to subscribers. A CSP forms part of an authentication system, most typically identified as a separate entity in a Federated authentication system. A CSP may be an independent third party, or may issue credentials for its own use. Credential Service Provider is typically also the Identity Provider (IDP). An example of a CSP would be an online site whose primary purpose may be, for example, internet banking - but whose users may be subsequently authenticated to other sites, applications or services without further action on their part.&lt;/p&gt;
&lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
&lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying the claimant's possession and control of one or two authenticators, using an authentication protocol.&lt;/p&gt;
&lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically to process a transaction or grant access to information or a system.&lt;/p&gt;
&lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and identity proofing.&lt;/p&gt;
&lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more authentication protocols.&lt;/p&gt;
&lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:26.091">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="same-encoding-parsers" name="Use the same encodings and parsers in all application components" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Errors may occur when converting between differently coded character data.&amp;nbsp; There are two general types of encoding errors. If the byte sequence is not valid for the specified charset then the input is considered malformed. If the byte sequence cannot be mapped to an equivalent character sequence then an unmappable character has been encountered.
&lt;/div&gt;
&lt;div&gt;
  Special care should be taken when decoding untrusted byte data to ensure that malformed input or unmappable character errors do not result in defects and vulnerabilities.&amp;nbsp; Encoding errors can also occur, for example, encoding a cryptographic key containing malformed input for transmission will result in an error. Encoding and decoding errors typically result in data corruption.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;b&gt;Remediation&lt;/b&gt;
&lt;/div&gt;Use the same encodings and parsers in all application components to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks.</desc>
          <implementations/>
          <references>
            <reference name="STR51-J. Use the charset encoder and decoder classes when more control over the encoding process is required" url="https://wiki.sei.cmu.edu/confluence/display/java/STR51-J.+Use+the+charset+encoder+and+decoder+classes+when+more+control+over+the+encoding+process+is+required"/>
          </references>
          <standards>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all application components are using the same encoding style.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:28.921">
              <output/>
            </source>
            <references>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="34" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Serialized Java objects&lt;/li&gt; 
 &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt; 
 &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt;To test data validation:&amp;nbsp; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp, Fiddler, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:28.918">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-147" name="Validate input parameters to prevent HTTP Parameter Pollution" issueId="" issueLink="" platform="" cost="0" risk="40" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>All data received from external sources should be considered tainted and a potential risk, regardless of the source or transport method. HTTP Parameter Pollution attacks result when parameters are added or inserted into requests, and are inappropriately or unsafely handled by the server. For example, injection of parameters into strings or cookies sent to the application can result in the variables being interpreted out of sequence, exploiting flaws in the business logic and flow.
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;p&gt;For example, there was a bug in the Blogger platform which illustrates this vulnerability. The bug allowed malicious users to take ownership of the victim's blog by using the following HTTP request:&lt;/p&gt;
  &lt;blockquote&gt;
   &lt;p&gt;&lt;code&gt;POST /add-authors.do HTTP/1.1&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;blockquote&gt;
   &lt;p&gt;&lt;code&gt;security_token=attackertoken&amp;amp;&lt;b&gt;blogID=attackerblogidvalue&lt;/b&gt;&amp;amp;&lt;b&gt;blogID=victimblogidvalue&lt;/b&gt;&amp;amp;authorsList=goldshlager19test%40gmail.com(attacker email)&amp;amp;ok=Invite&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;p&gt;The flaw resided in the authentication mechanism used by the web application, as the security check was performed on the first&amp;nbsp;&lt;code&gt;blogID&lt;/code&gt;&amp;nbsp;parameter, whereas the actual operation used the second occurrence.&lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify parameters within the application used for authentication decisions, or critical business logic.&lt;/li&gt;&lt;li&gt;Send specially forged requests to the application in which those parameters are duplicated, or passed through other methods (e.g. POST parameters in the URL as GET fields, cookies as form fields etc.)&lt;ul&gt;&lt;li&gt;Review the application logic to ensure:&lt;/li&gt;&lt;li&gt;The same parameter is for all the decisions.&lt;/li&gt;&lt;li&gt;Parameters received over unexpected or non compliant methods result in a security exception.&lt;/li&gt;&lt;li&gt;Duplicate parameters are identified and result in a security exception.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application should fail-safe; i.e. unexpected or suspicious behavior should result in termination of the user's session and a security event being logged.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A number of tools can be used to aid in testing:&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly inside your browser with the Developer Tools&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data)&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.)&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:27.106">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Testing for HTTP Parameter Pollution" url="https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OTG-INPVAL-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-601" name="Whitelist which URLs the application may redirect to" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should maintain a list of URLs to which it may redirect users. This whitelisting can also be achieved by applying regular expressions. The application should only allow redirects to trusted URLS.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-04 Information Flow Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/26-08_02_AC-04"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the points of the application in which a redirection takes place. Redirections are usually indicated by the use of the "Location" HTTP header along with the "3xx" code.&lt;/li&gt;&lt;li&gt;Verify if the value inside the Location header is coming from user input (URL string, Cookies, HTTP headers, forms, etc.).&lt;/li&gt;&lt;li&gt;Modify the input value which will be part of the Location header to redirect to domains which should not be permitted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:27.107">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS-CONTROL" name="Access Control" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-189" name="An attacker discovers the structure, function, and composition of a type of computer software through black box analysis techniques" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs.</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-203">
                  <countermeasures>
                    <countermeasure ref="post-spectre-web-dev-c1" mitigation="50"/>
                    <countermeasure ref="post-spectre-web-dev-c2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="post-spectre-web-dev-c1" mitigation="50"/>
                <countermeasure ref="post-spectre-web-dev-c2" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="ACCESS SENSITIVE DATA" name="Access sensitive data" desc="" library="CS-Default">
          <threats>
            <threat ref="sniff-api-responses" name="Attackers analyze API responses looking for sensitive data" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Exploitation of excessive data exposure can be a simple process, and is usually performed by sniffing (covertly observing) the traffic to analyze API responses, looking for sensitive data that should not be returned to the user.&lt;/p&gt;&lt;p&gt;The API may return sensitive data to the client by design. This data is usually filtered on the client side before being presented to the user. An attacker could potentially sniff this traffic and see the sensitive data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="review-api-responses" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="review-api-responses" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="abusing-API-authentication" name="Attackers gain control of users' accounts in the system by abusing poorly implemented API authentication" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;API authentication can be complex and at times confusing. Software and security engineers might have misconceptions about the boundaries of authentication and how to implement it correctly. In addition, the authentication mechanism is a prime target for attackers, since it's exposed to everyone. These two points make the authentication component potentially valuable to miscreants.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-114: Authentication Abuse" url="https://capec.mitre.org/data/definitions/114.html"/>
                <reference name="CAPEC-57: Utilizing REST's Trust in the System Resource to Obtain Sensitive Data" url="https://capec.mitre.org/data/definitions/57.html"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="cwe-352-csrf" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="api-broken-authentication">
                  <countermeasures>
                    <countermeasure ref="best-practices-api-auth" mitigation="90"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="best-practices-api-auth" mitigation="90"/>
                <countermeasure ref="cwe-352-csrf" mitigation="10"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authorization" name="Authorization" desc="" library="CS-Default">
          <threats>
            <threat ref="broken-authorization-api" name="Attackers can exploit API endpoints that are vulnerable to broken authorization to access forbidden functionality" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Attackers could exploit API endpoints that are vulnerable to broken object-level authorization by manipulating the ID of an object that is sent within the request. This may lead to unauthorized access to sensitive data. This issue is extremely common in API-based applications because the server component usually does not fully track the client's state, and instead, relies more on parameters like object IDs, that are sent from the client to decide which objects to access.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-1: Accessing Functionality Not Properly Constrained by ACLs" url="http://capec.mitre.org/data/definitions/1.html"/>
                <reference name="CAPEC-87: Forceful Browsing" url="http://capec.mitre.org/data/definitions/87.html"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-285">
                  <countermeasures>
                    <countermeasure ref="centralized-authz-module" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="api-broken-object-level-authorization">
                  <countermeasures>
                    <countermeasure ref="object-level-authorization" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="centralized-authz-module" mitigation="50"/>
                <countermeasure ref="object-level-authorization" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="availability" name="Availability" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-607" name="Attackers bring the service down by exhausting it (D)DoS" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker can bring a service down by exhausting either the network or the service itself.
    &lt;br&gt;
    &lt;br&gt;See references for more information.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="US Cert DDOS Quick Guide" url="https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf"/>
              </references>
              <weaknesses>
                <weakness ref="AV-DOS-APP">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L3">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-L4">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="AV-DoS-TLS">
                  <countermeasures>
                    <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="AV-DoS-BH" mitigation="25"/>
                <countermeasure ref="AV-DoS-ICMP-Flooding" mitigation="25"/>
                <countermeasure ref="AV-DoS-L7" mitigation="25"/>
                <countermeasure ref="AV-DoS-TLS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="CS-Default">
          <threats>
            <threat ref="7k-CWE-Environment" name="Attackers gain unauthorised access to the application through an environment flaw" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This section includes everything that is outside of the source code but is still critical to the security of the product that is being created. Because the issues covered by this section are not directly related to source code, we separated it from the rest of the realms.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="ENV-USE" mitigation="50"/>
                    <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ENV-USE" mitigation="50"/>
                <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-1" name="Accessing Functionality Not Properly Constrained by ACLs" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In applications, particularly web applications, access to functionality is mitigated by the authorization framework, whose job it is to map ACLs to elements of the application's functionality; particularly URL's for web-apps. In cases in which the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker could potentially access resources that should only be available to users of a higher privilege level, or access management sections of the application, or can run queries for data that he is otherwise not supposed to.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-276">
                  <countermeasures>
                    <countermeasure ref="deny-default-enf" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="deny-default-enf" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-214" name="An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information.
&lt;br /&gt;</desc>
              <riskRating confidentiality="25" integrity="25" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-460">
                  <countermeasures>
                    <countermeasure ref="error-handling-centralized" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="error-handling-centralized" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="hostile-subdomain-takeover" name="Attackers claim subdomains with the help of external services" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  This attack vector utilizes DNS entries pointing to Service Providers where the pointed sub-domain is currently not in use. Depending on the DNS-entry configuration and which Service Provider it points to, some of these services will allow unverified users to claim these sub-domains as their own.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  In the not so rare case, the attacker can also "inherit" the Domain Owner's Wildcard SSL used inside the Service Provider.
&lt;/div&gt;
&lt;div&gt;
 &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;div&gt;
  &lt;b&gt;Attack Scenario&lt;/b&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;ol&gt;
   &lt;li&gt;Your company starts using a new service, eg an external Support Ticketing-service.&lt;/li&gt;
   &lt;li&gt;Your company points a sub-domain to the Support Ticketing-service, eg support.your-domain.com&lt;/li&gt;
   &lt;li&gt;Your company stops using this service but does not remove the sub-domain redirection pointing to the ticketing system.&lt;/li&gt;
   &lt;li&gt;Attacker signs up for the Service and claims the domain as theirs. No verification is done by the Service Provider, and the DNS-setup is already correctly setup.&lt;/li&gt;
   &lt;li&gt;Attacker can now build a complete clone of the real site, add a login form, redirect the user, steal credentials (e.g. admin accounts), cookies and/or completely destroy business credibility for your company.&lt;/li&gt;
  &lt;/ol&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Hostile Subdomain Takeover using Heroku/Github/Desk + more" url="https://labs.detectify.com/2014/10/21/hostile-subdomain-takeover-using-herokugithubdesk-more/"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-350">
                  <countermeasures>
                    <countermeasure ref="identify-dns-domains" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="identify-dns-domains" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SOURCE-LEAK" name="Attackers gain control of the system through a source code leakage" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Attackers gain unauthorized access to a service by reading raw source code returned by the service, and this code contains confidential information such as authentication credentials or other secrets that can be used to access the service.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Configuration files that can be downloaded from the service could also be leveraged to gain access to sensitive information.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-541">
                  <countermeasures>
                    <countermeasure ref="CWE-541" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-541" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-172" name="Attackers subvert the intended workflow of the application in order to perform unauthorised operations" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>	&lt;p&gt;If an application enforces an order in workflows, then attackers could attempt to bypass this order so that they can perform operations for which they are not authorized. The technique can also be used to gain access to unauthorized data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-841">
                  <countermeasures>
                    <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                    <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="OTG-BUSLOGIC" mitigation="34"/>
                <countermeasure ref="OTG-BUSLOGIC-006" mitigation="33"/>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-770">
                  <countermeasures>
                    <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                    <countermeasure ref="network-rate-limit" mitigation="34"/>
                    <countermeasure ref="protection-against-data-mining" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="implement-monitoring-unusual-activities" mitigation="33"/>
                <countermeasure ref="network-rate-limit" mitigation="34"/>
                <countermeasure ref="protection-against-data-mining" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-272">
                  <countermeasures>
                    <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="LOG-MANAGEMENT" name="Log Management" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-93" name="An attacker injects, manipulates or forges malicious log entries in the log file, allowing her to mislead a log audit, cover traces of attack, or perform other malicious actions" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>	&lt;p&gt;This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing him to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-117">
                  <countermeasures>
                    <countermeasure ref="ASVS-8.8" mitigation="20"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="LOGS-INTEGRITY" mitigation="40"/>
                    <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="LOGS-INTEGRITY" mitigation="40"/>
                <countermeasure ref="RESTRICT-NUMBER-ACCOUNT-TO-LOGS" mitigation="40"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-778-AUTH" name="Attacks against the authentication system may go undetected" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Automated attacks against many user accounts, or successful attacks against an account
                                require a response. &amp;nbsp;If audit logs are not kept of both successful and
                                unsuccessful authentication operations, then post attack forensics will be hampered.&amp;nbsp;&amp;nbsp;
                                &lt;div&gt;
                                &amp;nbsp;
                                &lt;br /&gt;Without a dynamic response to mass automated attacks against the
                                authentication system, attackers stand a greater chance of success.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="CDS-USER-TRACK" mitigation="16"/>
                    <countermeasure ref="CSD-VAL-LOG" mitigation="14"/>
                    <countermeasure ref="CWE-662" mitigation="14"/>
                    <countermeasure ref="EU-GDPR-LOGGING" mitigation="14"/>
                    <countermeasure ref="LOG-TLS-FAILURES" mitigation="14"/>
                    <countermeasure ref="LOGS-INTEGRITY" mitigation="14"/>
                    <countermeasure ref="security-logging" mitigation="14"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CDS-USER-TRACK" mitigation="16"/>
                <countermeasure ref="CSD-VAL-LOG" mitigation="14"/>
                <countermeasure ref="CWE-662" mitigation="14"/>
                <countermeasure ref="EU-GDPR-LOGGING" mitigation="14"/>
                <countermeasure ref="LOG-TLS-FAILURES" mitigation="14"/>
                <countermeasure ref="LOGS-INTEGRITY" mitigation="14"/>
                <countermeasure ref="security-logging" mitigation="14"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-532">
                  <countermeasures>
                    <countermeasure ref="CWE-532" mitigation="70"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-779">
                  <countermeasures>
                    <countermeasure ref="LOG-RETENTION" mitigation="30"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-532" mitigation="70"/>
                <countermeasure ref="LOG-RETENTION" mitigation="30"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="post-data" name="Post data" desc="Data is received (posted) here" library="CS-Default">
          <threats>
            <threat ref="ssrf-threat" name="Attackers can abuse functionality on the server to read or update internal resources" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;The attacker can abuse functionality on the server to read or update internal resources. The attacker can supply - or modify - a URL which the code running on the server will read or submit data to, and by carefully selecting the URLs, the attacker may be able to read server configuration details such as AWS metadata, connect to internal services like http enabled databases, or perform post requests towards internal services which are not intended to be exposed.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-918">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="25"/>
                    <countermeasure ref="CWE-601" mitigation="25"/>
                    <countermeasure ref="DATA-VAL" mitigation="25"/>
                    <countermeasure ref="WEB-FILE-DATA" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="25"/>
                <countermeasure ref="CWE-601" mitigation="25"/>
                <countermeasure ref="DATA-VAL" mitigation="25"/>
                <countermeasure ref="WEB-FILE-DATA" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-35" name="Attackers can leverage Executable Code in Non-Executable Files" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attack of this type exploits a system's trust in configuration and resource files, when the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.
&lt;br /&gt;The attack can be directed at a client system, such as causing buffer overrun through loading seemingly benign image files, as in Microsoft Security Bulletin MS04-028 where specially crafted JPEG files could cause a buffer overrun once loaded into the browser. Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/)
&lt;br /&gt;http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here
&lt;br /&gt;The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.
&lt;br /&gt;The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name &amp;quot;public&amp;quot; grants all users with the public role the ability to use the administration functionality.
&lt;br /&gt;The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-95">
                  <countermeasures>
                    <countermeasure ref="dyn-exec" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="dyn-exec" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-176" name="Attackers can manipulate Configuration/Environment" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.
&lt;br /&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-15">
                  <countermeasures>
                    <countermeasure ref="configuration-integrity" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="configuration-integrity" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-94" name="Attackers gain access to the system through Server-Side Code Injection" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Server-Side Code Injection happens when an attacker is able to direct input under his control and mix it with executed code on the server side by modifying the logic executed on it.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Depending on the code isolation, this event could grant the user access to system resources and data.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-78">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="80"/>
                    <countermeasure ref="SAME-ENCODING-STYLE" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="80"/>
                <countermeasure ref="SAME-ENCODING-STYLE" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-73" name="Attackers upload code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attack of this type involves an attacker inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to exploit these vulnerabilities.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-116">
                  <countermeasures>
                    <countermeasure ref="same-encoding-parsers" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="same-encoding-parsers" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-586-SER" name="An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-502">
                  <countermeasures>
                    <countermeasure ref="SER-UNTRUST" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="SER-UNTRUST" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-62" name="An attacker crafts malicious web links and distributes them hoping to induce users to click on the link and execute a malicious action" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level.
&lt;br&gt;This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply "riding" the existing session cookie.
&lt;br&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="ASVS-18.8" mitigation="34"/>
                    <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                    <countermeasure ref="cwe-352-csrf" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-18.8" mitigation="34"/>
                <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                <countermeasure ref="cwe-352-csrf" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="open-redirect-threat" name="An attacker leverages the redirection functionality in the application to conduct more convincing phishing attacks" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An http parameter may contain a URL value for redirecting the request to another specified URL. By modifying this URL value to point towards a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy and convincing appearance.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-601">
                  <countermeasures>
                    <countermeasure ref="CWE-601" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-601" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-117" name="An attacker monitors HTTP headers from a target in order to gather information" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker monitors data streams to or from a target in order to gather information.
                                This attack may be undertaken in order to gather information to support a later attack,
                                or the data collected may be the end goal of the attack. This attack usually involves
                                sniffing network traffic, but may include observing other types of data streams, such as
                                radio. In most varieties of this attack, the attacker is passive and simply observes
                                regular communication, however in some variants the attacker may attempt to initiate the
                                establishment of a data stream or influence the nature of the data transmitted. However,
                                in all variants of this attack, and distinguishing this attack from other data
                                collection methods, the attacker is not the intended recipient of the data stream.
                                Unlike some other data leakage attacks, the attacker is observing explicit data channels
                                (e.g. network traffic) and reading the content. This differs from attacks that collect
                                more qualitative information, such as communication volume, or other information not
                                explicitly communicated via a data stream.
                            </desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="ASVS-11.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-11.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-267" name="Attackers encode potentially harmful input and submit it to bypass input filtering protections" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack leverages the possibility of encoding potentially harmful input and submitting it to applications not expecting or effective at validating this encoding, thus, thwarting the validation.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-173">
                  <countermeasures>
                    <countermeasure ref="harden-http-headers" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-235">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="50"/>
                <countermeasure ref="harden-http-headers" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="api-injection" name="Attackers feed the API with malicious data through injection vectors (e.g., direct input, parameters, integrated services, etc.), hoping for it to be sent to an interpreter" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Injection flaws are very common and are often found in SQL, LDAP, or NoSQL queries, OS commands, XML parsers, and ORM. These flaws are relatively easy to discover when reviewing the source code. Attackers can use scanners and fuzzers.&lt;/p&gt;&lt;p&gt;Injection exploits can lead to information disclosure and data loss. It could also lead to DoS, or complete host takeover in the worst scenarios.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-248: Command Injection" url="https://capec.mitre.org/data/definitions/248.html"/>
                <reference name="CAPEC-66: SQL Injection" url="https://capec.mitre.org/data/definitions/66.html"/>
              </references>
              <weaknesses>
                <weakness ref="api-vulnerable-injection">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-300" name="Attackers gain control of the connection through a Man In The Middle attack" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
                                This type of attack targets the communication between two components (typically client
                                and server). The attacker places himself in the communication channel between the two
                                components. Whenever one component attempts to communicate with the other (data flow,
                                authentication challenges, etc.), the data first goes to the attacker, who has the
                                opportunity to observe or alter it, and it is then passed on to the other component as
                                if it was never intercepted. This interposition is transparent leaving the two
                                compromised components unaware of the potential corruption or leakage of their
                                communications. The potential for Man-in-the-Middle attacks yields an implicit lack of
                                trust in communication or identify between two components.&amp;nbsp; &amp;nbsp;
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="50"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-273" name="Attackers inject content into a server response that is interpreted differently by intermediaries than it is by the target browser" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To achieve this takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, using different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, defacement, cache poisoning, or similar actions.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-436">
                  <countermeasures>
                    <countermeasure ref="rest-content-type-val" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="rest-content-type-val" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="unpatched-api" name="Attackers may gain access to sensitive data, or even take over the server through old, unpatched, API versions connected to the same database" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  Old API versions are usually unpatched and are an easy way to compromise systems without having to fight state-of-the-art security mechanisms, which might be in place to protect the most recent API versions.
&lt;/div&gt;
&lt;div&gt;
  Outdated documentation makes it more difficult to find and/or fix vulnerabilities.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-310: Scanning for Vulnerable Software" url="https://capec.mitre.org/data/definitions/310.html"/>
              </references>
              <weaknesses>
                <weakness ref="lack-assets-inventory">
                  <countermeasures>
                    <countermeasure ref="inventory-api" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="inventory-api" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-MASS" name="Functionality could be subverted through mass assignment" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>If the application binds parameters to back-end objects, then attackers could potentially set fields on those objects that were not designed to be modified by the user.</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-915">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                    <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-101" name="Unauthorised data could be accessed by manipulating parameters sent to the application" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>The application could be tricked into exposing data to unauthorized users by
                                manipulating the parameters it accepts. All data received from the client side could be
                                subject to manipulation, including fields like cookies and HTTP headers, if these are
                                used as inputs to the application.
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-22">
                  <countermeasures>
                    <countermeasure ref="CWE-639" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-548">
                  <countermeasures>
                    <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-650">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="25"/>
                <countermeasure ref="CWE-639" mitigation="25"/>
                <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ea7d658f-8db8-4ec8-bf98-03cbb31acfc2" diagramComponentId="3eb87443-3b2b-4ec5-9706-2fb4239ab091" ref="295a899b-e1f6-4ff3-8227-1dd1855f2ab6" name="Browser" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="CD-BROWSER">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-798, CWE-603" name="Client side code stores secret keys, sensitive business logic or other proprietary information" state="0" impact="100" issueId="" issueLink="">
          <desc>When client side code is fully controlled by the user, a malicious user may be able to read the code or reverse engineer it if it is compiled in any form. If the client side code includes secret keys, sensitive business logic (like client authentication) or proprietary information, all of this is directly exposed to the user, allowing them to get the sensitive information or study the business logic with the aim of bypassing it.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Some examples of this vulnerability are:&amp;nbsp; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Performing an authentication on the client side without server side validation.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Making privileged calls from the client based solely on client side conditions (i.e. a cash check on the client side to place an order on an e-commerce platform).&lt;/li&gt; 
   &lt;li&gt;&amp;nbsp;Hard-coding keys and secrets on the client side to make client-to-client calls without a proxy.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:50.251">
              <output/>
            </source>
            <references>
              <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="https://cwe.mitre.org/data/definitions/602.html"/>
              <reference name="CWE-603: Use of client-side Authentication" url="https://cwe.mitre.org/data/definitions/603.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.695">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-79" name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes user-controllable input before it
                        is placed in output that is used as a web page that is served to other users. Cross-site
                        scripting (XSS) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;There are three main kinds of XSS:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 1: Reflected XSS (or Non-Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The server reads data directly from the HTTP request and reflects it back in the HTTP response.
                        Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a
                        vulnerable web application, which is then reflected back to the victim and executed by the web
                        browser. The most common mechanism for delivering malicious content is to include it as a
                        parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed
                        in this manner constitute the core of many phishing schemes, whereby an attacker convinces a
                        victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's
                        content back to the victim, the content is executed by the victim's browser.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 2: Stored XSS (or Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The application stores dangerous data in a database, message forum, visitor log, or other
                        trusted data store. At a later time, the dangerous data is subsequently read back into the
                        application and included in dynamic content. From an attacker's perspective, the optimal place
                        to inject malicious content is in an area that is displayed to either many users or particularly
                        interesting users. Interesting users typically have elevated privileges in the application or
                        interact with sensitive data that is valuable to the attacker. If one of these users executes
                        malicious content, the attacker may be able to perform privileged operations on behalf of the
                        user or gain access to sensitive data belonging to the user. For example, the attacker might
                        inject XSS into a log message, which might not be handled properly when an administrator views
                        the logs.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 0: DOM-Based XSS&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        In DOM-based XSS, the client performs the injection of XSS into the page; in the other types,
                        the server performs the injection. DOM-based XSS generally involves server-controlled, trusted
                        script that is sent to the client, such as Javascript that performs sanity checks on a form
                        before the user submits it. If the server-supplied script processes user-supplied data and then
                        injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is
                        possible.Once the malicious script is injected, the attacker can perform a variety of malicious
                        activities. The attacker could transfer private information, such as cookies that may include
                        session information, from the victim's machine to the attacker. The attacker could send
                        malicious requests to a web site on behalf of the victim, which could be especially dangerous to
                        the site if the victim has administrator privileges to manage that site. Phishing attacks could
                        be used to emulate trusted web sites and trick the victim into entering a password, allowing the
                        attacker to compromise the victim's account on that web site. Finally, the script could exploit
                        a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes
                        referred to as &amp;quot;drive-by hacking&amp;quot;.
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;br /&gt;
                        &lt;/blockquote&gt;In many cases, the attack can be launched without the victim even being aware
                        of it. Even with careful users, attackers frequently use a variety of methods to encode the
                        malicious portion of the attack, such as URL encoding or Unicode, so the request looks less
                        suspicious.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.695">
              <output/>
            </source>
            <references>
              <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.505">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693-NOSNIFF" name="Internet Explorer could allow Cross Site Scripting attacks through content sniffing" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The product does not use - or incorrectly uses - a protection mechanism providing defense against attacks on the product. This weakness covers three distinct situations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A "missing" protection mechanism occurs when the application does not define any mechanism against a certain class of attack.&lt;/li&gt;&lt;li&gt;An "insufficient" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended.&lt;/li&gt;&lt;li&gt;An "ignored" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.694">
              <output/>
            </source>
            <references>
              <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-84-HTTP-ONLY" name="Lack of 'HttpOnly' flag on session cookie" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The web application improperly neutralizes user-controlled input for executable scripts disguised with URI encodings.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.694">
              <output/>
            </source>
            <references>
              <reference name="CWE-84: Improper Neutralization of Encoded URI Schemes in a Web Page" url="https://cwe.mitre.org/data/definitions/84.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="WEB-CSP" name="Lack of Content Security Policy version 2 (CSPv2)" state="0" impact="100" issueId="" issueLink="">
          <desc>Content Security Policy (CSP) is a computer security standard introduced to prevent cross-site
                        scripting (XSS), click jacking and other code injection attacks resulting from execution of
                        malicious content in the trusted web page context.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.695">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.380">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.252">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:50.252">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693-CLICKJACK" name="The page can be included in an iframe" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection mechanism that provides sufficient
                        defense against directed attacks against the product. This weakness covers three distinct
                        situations:
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;A &amp;quot;missing&amp;quot; protection mechanism occurs when the application does
                        not define any mechanism against a certain class of attack.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;An &amp;quot;insufficient&amp;quot; protection mechanism might provide some defenses -
                        for example, against the most common attacks - but it does not protect against everything that
                        is intended.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Finally, an &amp;quot;ignored&amp;quot; mechanism occurs when a mechanism is available
                        and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.695">
              <output/>
            </source>
            <references>
              <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-477" name="Use of Obsolete Function" state="0" impact="75" issueId="" issueLink="">
          <desc>The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.
&lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:50.252">
              <output/>
            </source>
            <references>
              <reference name="CWE-477: Use of Obsolete Function" url="https://cwe.mitre.org/data/definitions/477.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.252">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="WEB-CSP" name="Define a restrictive 'least privilege' Content Security Policy" issueId="" issueLink="" platform="" cost="1" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Content-Security-Policy instructs compliant browsers on how they may interact with external sites while in the current context. This enables the server to control interactive code and content from third parties, mitigating some client-side code injection attacks. The policy allows the server to specify what connections are permitted for each type of resource.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example, the following policy tells the browser to allow connections (including websockets) to the same domain to which the page was served: *.iriusrisk.com.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src 'self' wss://*.iriusrisk.com; img-src 'self' data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define and set a Content-Security-Policy with least-privileges to allow only those interactions which are explicitly required.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to determine if a&amp;nbsp;&lt;i&gt;Content-Security-Policy&amp;nbsp;&lt;/i&gt;header is returned, and if so, that it follows the security practice of least-privilege.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component end-points.&lt;/li&gt;&lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite):&lt;ul&gt;&lt;li&gt;Browse the site through the proxy.&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For more information on &lt;i&gt;Content-Security-Policy&lt;/i&gt; policy setup, see:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.594">
              <output/>
            </source>
            <references>
              <reference name="Mozilla Developer Documentation - CSP" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and server, terminating within a secure environment on the server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.835">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="INS-CLIENT" name="Ensure the application does not use unsupported, insecure, or deprecated client-side technologies" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure the application does not use unsupported, insecure, or deprecated client-side technologies such as: NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
 &lt;li&gt;Test the presence of any client side applet such as Flash, ActiveX and Silverlight.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:47.837">
              <output/>
            </source>
            <references>
              <reference name="Testing Information Gathering" url="https://www.owasp.org/index.php/Testing_Information_Gathering"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CS-CLIENT-SECRET" name="Implement sensitive logic and data validation on the server-side" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data and functionalities on the client-side must be considered tainted and subject to manipulation by a malicious actor, regardless of the controls in place (e.g. encryption or obfuscation of client-side code or content). &lt;/p&gt; This includes application logic decisions, such as access controls, and data considered sensitive or secret, such as encryption keys. While controls may be duplicated on the client-side to improve the user experience, it is important to have these enforced on the server-side.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Business logic, in particular access controls, must be implemented on the server-side.&lt;/li&gt; 
  &lt;li&gt;Secret data should be stored on the server-side, and only what is explicitly required should be duplicated on the client-side.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;All data provided from the client-side (even from binary clients) should be considered tainted, and security decisions should not be made solely on this data. For example, an insecure implementation could include a compiled application (e.g. Flash!) performing authentication on the client-side against a stored password. The decompilation of the binary (in this case flv file) or the interception and modification of controls between the client and server could expose the password or allow unauthorized access to the authenticated application content. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify where critical decisions are made on the application. Key areas include:&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;authentication&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;input validation&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;access to resources&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;state bypasses&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Ensure those decisions are made or validated on the server side, particularly where client-side controls are implemented.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that sensitive data passed to the client side is appropriate, and ensure no inappropriate data is stored or hard-coded into client-side components, for example&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Personally Identifiable Information.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Financial data, in particular cardholder data (as defined by the &lt;span class="caps"&gt;PCI&lt;/span&gt; Council).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Application secrets - such as symmetric encryption keys or passwords.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:47.836">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-79-ENCODE" name="Perform contextual HTML encoding of all user submitted data" issueId="" issueLink="" platform="" cost="1" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk. If handled properly at the point of input, this untrusted tainted data should have been sanitized and encoded safely. The context when returning the data to the user is important, however, as this will affect what metacharacters have significance, and how they will be interpreted at the client-side. &lt;/p&gt;

 For example, if data is inserted into the &lt;span class="caps"&gt;HTML&lt;/span&gt; body then &lt;span class="caps"&gt;HTML&lt;/span&gt; Entity encoding should be performed, but if the data is inserted into a JavaScript block, then JavaScript escaping should be performed. Similarly, while JavaScript code should not be executed in the browser when returned in an application/json response, it may then be rendered in an unsafe manner. 
 - Apply contextual encoding to all tainted data when returned to the users (including secondary users if the application has multiple interfaces - e.g. an internal user viewing data entered by an external customer).
 - This should be in addition to, and in conjunction with, sanitization and encoding applied at the time of data acquisition.</desc>
          <implementations>
            <implementation platform=".NET">
              <desc>ClJlc3BvbnNlLldyaXRlKEh0dHBVdGlsaXR5Lkh0bWxFbmNvZGUoUmVxdWVzdC5Gb3JtWyJuYW1lIl0pKTs=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: XSS" url="https://pwning.owasp-juice.shop/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the areas of the application in which tainted data acquired from outside the application presented back (e.g. user input, uploaded files, third party content)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Review the encoding and sanitization applied to the data before presentation.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;If possible, pass metacharacters and other unexpected content through the application to review the efficacy of the encoding.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.594">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="excessive-permissions" name="Request only the minimum required permissions" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Security best practices dictate that the practice of least-privilege be followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
  Request only the minimum required permissions. For example, if there is no requirement to use the camera then the application should not request this permission.
&lt;/div&gt;
&lt;div&gt;
  Review features and functionalities present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them along with associated OS permissions.
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that the application only requests the necessary permissions to work correctly.
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.595">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-CLIENT-SECRET" name="Review code, configuration, and online repositories for secrets and sensitive information systemically" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secret or sensitive information should not be exposed in source-code or client-side software.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Code and online repositories must not contain secrets or sensitive information.&lt;/li&gt;&lt;li&gt;Configuration files on the client- and server-side must not contain hard-coded credentials or other sensitive data.&lt;/li&gt;&lt;li&gt;Online repositories, services, and other associated restricted content must have appropriate access controls in place.&lt;/li&gt;&lt;li&gt;Where sensitive information must be stored on the server side, it should be in memory for transient data, or encrypted if persistent. &amp;nbsp;Depending on the use case, this encryption may be asymmetric or public key, or symmetric using a shared secret. Note however that reversible encryption on the client-side and in-memory storage are still susceptible to client-side attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Use automated tools to regularly search for keywords or regular expression patterns within the code, configuration and other files exposed on the client and server-side, and any remote repositories.&lt;/li&gt;&lt;li&gt;The scanning process must be triggered before the code is published (in particular for public/open source code) as once published it is likely to be archived (and any disclosed secrets would be exposed and/or have to be changed)&lt;/li&gt;&lt;li&gt;Review criteria and requirements for any temporary or persistent storage of sensitive or secret data on the client-side, and the protections in place.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:47.836">
              <output/>
            </source>
            <references>
              <reference name="Amazon git-secrets" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Microsoft Exchange 2016 Sensitive Information Patterns" url="https://technet.microsoft.com/en-us/library/jj150541(v=exchg.160).aspx"/>
              <reference name="Prevents you from committing secrets and credentials into git repositories" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Seekret" url="https://github.com/apuigsech/seekret"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.352">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-attributes-of-cookies" name="Secure Cookies with their attributes" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID exchange mechanism based on cookies provides multiple security features in the form of cookie attributes that can be used to protect the exchange of the session ID:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Secure and HttpOnly Attribute:&lt;/strong&gt;&amp;nbsp;a secure cookie is only sent to the server with an encrypted request over the HTTPS protocol. Even with Secure, sensitive information should never be stored in cookies, as they are inherently insecure and this flag doesn't offer robust protection. Starting with Chrome 52 and Firefox 52, insecure sites (http:) can't set cookies with the Secure directive.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To mitigate cross-site scripting (XSS) attacks, HttpOnly cookies are inaccessible to JavaScript's Document.cookie API; they are only sent to the server. For example, cookies that persist server-side sessions don't need to be available to JavaScript, and so the HttpOnlyflag should be set.&lt;/p&gt;&lt;p&gt;Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SameSite Attribute: &amp;nbsp;&lt;/strong&gt;The SameSite attribute should be configured to limit exposure against cross-site request forgery attacks. There are two possibilities:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Strict:&lt;/strong&gt; the browser will only send cookies if the request originated from the website that set the cookie. If the request originated from a different URL than the URL of the current location, none of the cookies tagged with the Strict attribute will be included.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Lax:&lt;/strong&gt; if the attribute is set to Lax, same-site cookies are withheld on cross-site subrequests, such as calls to load images or frames, but will be sent when a user navigates to the URL from an external site, for example, by following a link.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;By default SameSite is not configured, we need to configure it with one of the above types, as shown below:&lt;/p&gt;&lt;p&gt;Set-Cookie: key=value; SameSite=Strict&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Domain and Path Attributes:&lt;/strong&gt; The session token value issued after users have successfully identified and authenticated themselves is of equivalent value to the secrets the user presents to login, and must be protected accordingly.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the cookie domain attribute is too liberal, the cookie may be accessible to other hosts within the parent domain. This is a particular issue in multi-tenanted hosting, or where applications are delivered as subdomains of a third party parent domain.&lt;/li&gt;&lt;li&gt;If the cookie path attribute is not appropriately restricted, the session token may be accessible from other applications or content on the server.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The domain and the path attributes for the session cookie should be restricted to the fully qualified hostname on which the application is running.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example:&lt;/p&gt;&lt;p&gt;Set-Cookie: session=token; Path=/theapp/; Domain=myapp.example.com; secure; HTTPOnly&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;__Host- prefix:&lt;/strong&gt; ensure that all Cookies with a name starting with __Host- are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;set with the secure flag,&lt;/li&gt;&lt;li&gt;from a secure page (HTTPS),&lt;/li&gt;&lt;li&gt;does not have a domain specified (and therefore aren't sent to subdomains)&lt;/li&gt;&lt;li&gt;and the path must be "/".&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="HttpOnly" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"/>
            <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"/>
            <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="__Host-Prefix" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"/>
          </references>
          <standards>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1" supportedStandardRef="nist-800-63"/>
            <standard ref="7.1.1" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Using a browser, open the Web Developer tools.&lt;/li&gt;&lt;li&gt;Load the Network inspection tab.&lt;/li&gt;&lt;li&gt;Load the endpoints of the application which set cookies (send the Set-Cookie HTTP header).&lt;/li&gt;&lt;li&gt;Check that within the HTTP response, the Set-Cookie has:&lt;ul&gt;&lt;li&gt;the path and domain attributes set to the most restrictive path and domain respectively.&lt;/li&gt;&lt;li&gt;'HttpOnly' and 'secure' flag set and configured&lt;/li&gt;&lt;li&gt;'SameSite' attribute configured.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check that all Cookies with a name starting with __Host- are:&lt;ul&gt;&lt;li&gt;set with the secure flag,&lt;/li&gt;&lt;li&gt;from a secure page (HTTPS),&lt;/li&gt;&lt;li&gt;does not have a domain specified (and therefore aren't sent to subdomains)&lt;/li&gt;&lt;li&gt;and the path is"/".&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.595">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-693-NOSNIFF" name="Set the HTTP security header 'X-Content-Type-Options' from the server" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of browser-based attacks rely on incorrectly stating MIME types on content in an attempt to bypass server and browser controls to render malicious content to the user.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set the &lt;i&gt;X-Content-Type-Options: nosniff&lt;/i&gt;&amp;nbsp;header on any page that displays previously uploaded content to prevent some XSS and related attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the HTTP Server responses to ensure the&amp;nbsp;&lt;i&gt;&lt;i&gt;X-Content-Type-Options:
                            nosniff&lt;/i&gt;&amp;nbsp;&lt;/i&gt;header is returned.&lt;/li&gt;
                            &lt;li&gt;Using a browser:&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the Web Developer Console.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Make requests to the different component's endpoints.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy&lt;/li&gt;
                            &lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.594">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="@cwe-693-clickjack" name="Set the HTTP security header 'X-Frame-Options header' from the server" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Prevent the page from being framed by setting the X-Frame-Options header&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Set the X-Frame-Options header to the value: SAMEORIGIN or DENY. &amp;nbsp;This header is honored by the following browser versions:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Chrome 4.1.249.1042&lt;/li&gt;&lt;li&gt;Firefox (Gecko) 3.6.9&lt;/li&gt;&lt;li&gt;Internet Explorer 8.0 9.0&lt;/li&gt;&lt;li&gt;Opera 10.50Safari 4.0&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Newer versions may also support the additional value: ALLOW-FROM which allows specifying URLs that are permitted to frame the page.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to ensure the&lt;i&gt;&amp;nbsp;X-Frame-Options: DENY &lt;/i&gt;header is returned.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the component's endpoints.&lt;/li&gt;&lt;li&gt;Verify the following header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;ul&gt;&lt;li&gt;Browse the site through the proxy&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.595">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), should be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
&lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity that issues security tokens or electronic credentials to subscribers. A CSP forms part of an authentication system, most typically identified as a separate entity in a Federated authentication system. A CSP may be an independent third party, or may issue credentials for its own use. Credential Service Provider is typically also the Identity Provider (IDP). An example of a CSP would be an online site whose primary purpose may be, for example, internet banking - but whose users may be subsequently authenticated to other sites, applications or services without further action on their part.&lt;/p&gt;
&lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
&lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying the claimant's possession and control of one or two authenticators, using an authentication protocol.&lt;/p&gt;
&lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically to process a transaction or grant access to information or a system.&lt;/p&gt;
&lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and identity proofing.&lt;/p&gt;
&lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more authentication protocols.&lt;/p&gt;
&lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.837">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Serialized Java objects&lt;/li&gt; 
 &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt; 
 &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt;To test data validation:&amp;nbsp; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp, Fiddler, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.448">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-295-CLIENT" name="Validate the certificate presented by the server" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Certificates presented by the server must be valid, provable, and cryptographically secure in order to derive the benefits of TLS encrypted communications.&amp;nbsp; Invalid certificates expose the application and its users to spoofing attacks such as Man In The Middle (MITM) where data may be intercepted or redirected to a malicious site, and undermine confidence in the site.&lt;/p&gt;&lt;p&gt;Validate the certificate presented by the server is signed by a trusted Certificate Authority.&lt;/p&gt;&lt;p&gt;Ensure the certificate chain of trust is legitimate and secure.&lt;/p&gt;&lt;p&gt;Verify cryptographically secure ciphers are in use throughout the chain, in particular strong hashing algorithms for certificate signatures.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-11 Trusted Path" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/71-08_02_SC-11"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
          </references>
          <standards>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify the client is conducting appropriate checks and receives a positive response regarding the validity and quality of the site certificate.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the server certificate, and those in the trust chain.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.836">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-327" name="Validate the TLS implementation in use" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There are a number of established open- and closed- source TLS implementations in use, which have undergone extensive review and testing by the developers, as well as third-parties in the development, security, and cryptography space. Typically, these widely used implementations have a lower risk of exploitation compared with privately developed - or less known - implementations (although vulnerabilities such as Heartbleed highlight this is not universally true) due to this additional scrutiny scrutiny.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify the TLS and other cryptographic libraries, implementations, and technologies in use.&lt;/li&gt;&lt;li&gt;Verify the veracity of the implementations, and review third party validations together with security advisories or best-practices relating to them.&lt;/li&gt;&lt;li&gt;Some well-known TLS libraries are NSS from Mozilla, and OpenSSL.&lt;/li&gt;&lt;li&gt;Where an unknown or unproven implementation is in use, consider use of an established option.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Compatibility" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm the TLS layer in use is a secure, stable, release of a publicly published implementation that has been subject to expert analysis and review.&lt;ul&gt;&lt;li&gt;If not, assurance of the security of the implementation should be sought, or the risk quantified.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that a client connecting to the server will only be able to negotiate cryptographically strong, secure ciphers.&lt;/li&gt;&lt;li&gt;Confirm that a client can not downgrade to a weaker cipher after initial negotiation.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the TLS/SSL ciphers, protocols, and security mechanisms.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:47.837">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-63" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CSD-CLIENT-SECRET" name="Attackers gain unauthorised access to data or services by accessing a client side secret" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Secrets stored in any client side components, such as a mobile application, thick
                                client application or in JavaScript used by a browser, can be accessed by
                                users/attackers who have access to this client.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Attackers could then gain access to the data or services that are protected by this
                                secret, if no other credentials are required.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-798, CWE-603">
                  <countermeasures>
                    <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="DEP-CLIENT-TECH" name="Attackers gain unauthorised access to the application by the use of deprecated client-side technologies" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  As programming languages evolve, functions occasionally become obsolete due to:
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;Advances in the language.&lt;/li&gt;
 &lt;li&gt;Improved understanding of how operations should be performed effectively and securely.&lt;/li&gt;
 &lt;li&gt;Changes in the conventions that govern certain operations. &lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-477">
                  <countermeasures>
                    <countermeasure ref="INS-CLIENT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="INS-CLIENT" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-63" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693-NOSNIFF">
                  <countermeasures>
                    <countermeasure ref="CWE-693-NOSNIFF" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-79">
                  <countermeasures>
                    <countermeasure ref="CWE-79-ENCODE" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-84-HTTP-ONLY">
                  <countermeasures>
                    <countermeasure ref="secure-attributes-of-cookies" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="WEB-CSP">
                  <countermeasures>
                    <countermeasure ref="WEB-CSP" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-693-NOSNIFF" mitigation="25"/>
                <countermeasure ref="CWE-79-ENCODE" mitigation="25"/>
                <countermeasure ref="WEB-CSP" mitigation="25"/>
                <countermeasure ref="secure-attributes-of-cookies" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed to the other component as if it were never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="CWE-327" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                <countermeasure ref="CWE-327" mitigation="25"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="excessive-permissions" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="excessive-permissions" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="TRANSACTION AUTHENTICATION" name="Transaction Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-103" name="Attackers cause users to peform arbitrary clicks on the site through ClickJacking attacks" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from a seemingly different system.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers actions in the transparent overlaying layer.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Depending on what that action is, the attacker may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;The basic problem here is that there is a dichotomy between what the victim thinks he's clicking versus what he or she is actually clicking on.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693-CLICKJACK">
                  <countermeasures>
                    <countermeasure ref="@cwe-693-clickjack" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="@cwe-693-clickjack" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="3cd34698-e9ff-4860-a4d6-307c2636830e" diagramComponentId="13dff8b9-78b2-49e7-93eb-0af434983b41" ref="79ecf6b7-7801-4bf8-8946-781e16059de9" name="svc-common-form-generator" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="microservice">
      <tags/>
      <questions>
        <question ref="microservices.comm.sync.http.rest" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="api-broken-object-level-authorization" name="API Broken Object Level Authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This has been the most common and devastating attack on APIs to date. Authorization and access control mechanisms in modern applications are complex and wide-spread. Even if the application implements a proper infrastructure for authorization checks, developers might forget to use these checks before accessing a sensitive object. Access control detection is not typically amenable to automated static or dynamic testing.&lt;/p&gt;&lt;p&gt;Unauthorized access can result in data disclosure to unauthorized parties, data loss, or data manipulation. Unauthorized access to objects can also lead to full account takeover.&lt;/p&gt;&lt;p&gt;Object level authorization is an access control mechanism that is usually implemented at the code level to validate that one user can only access objects that they should have access to.&lt;/p&gt;&lt;p&gt;Every API endpoint that receives an ID of an object, and performs any type of action on the object, should implement object-level authorization checks. These checks should validate that the logged-in user does have access to perform the requested action on the requested object.&lt;/p&gt;&lt;p&gt;Failures in this mechanism typically leads to unauthorized information disclosure, modification, or destruction of data.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:22.618">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="api-broken-authentication" name="API broken authentication" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Authentication endpoints and flows are assets that need to be protected.&amp;nbsp;&lt;/p&gt;&lt;p&gt;An API is vulnerable if it:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Permits "credential stuffing" whereby the attacker has a list of valid usernames and passwords.&lt;/li&gt;&lt;li&gt;Allows attackers to perform brute force attacks, without presenting captcha / account lockout mechanisms.&lt;/li&gt;&lt;li&gt;Permits weak passwords.&lt;/li&gt;&lt;li&gt;Sends sensitive authentication details, such as authorization tokens and passwords in the URL.&lt;/li&gt;&lt;li&gt;Doesn't validate the authenticity of tokens.&lt;/li&gt;&lt;li&gt;Accepts unsigned / weakly signed JWT tokens ("alg":"none") / doesn't validate their expiration date.&lt;/li&gt;&lt;li&gt;Uses plain text, encrypted, or weakly hashed passwords.&lt;/li&gt;&lt;li&gt;Uses weak encryption keys / API keys.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:22.613">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="api-vulnerable-injection" name="API is vulnerable to injection flaws" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  The API is vulnerable to injection flaws if:
&lt;/div&gt;
&lt;div&gt;
 &lt;ul&gt;
  &lt;li&gt;Client-supplied data is not validated, filtered, or sanitized by the API.&lt;/li&gt;
  &lt;li&gt;Client-supplied data is directly used or concatenated to SQL/NoSQL/LDAP queries, OS commands, XML parsers, and Object Relational Mapping (ORM)/Object Document Mapper (ODM).&lt;/li&gt;
  &lt;li&gt;Data coming from external systems (e.g., integrated systems) is not validated, filtered, or sanitized by the API.&lt;/li&gt;
 &lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:22.617">
              <output/>
            </source>
            <references>
              <reference name="Command Injection" url="https://www.owasp.org/index.php/Command_Injection"/>
              <reference name="NoSQL Injection Fun with Objects and Arrays" url="https://www.owasp.org/images/e/ed/GOD16-NOSQL.pdf"/>
              <reference name="OWASP Injection Flaws" url="https://www.owasp.org/index.php/Injection_Flaws"/>
              <reference name="SQL Injection" url="https://www.owasp.org/index.php/SQL_Injection"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-AS-1" name="Application secrets at risk of exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring that there is no sensitive data (such as credentials) in the application code or in configuration files is a challenge because the environments that containers run in have varying security controls and may provide access to unintended parties.&amp;nbsp; Developers need to consider the new threats brought about by multi-tenancy and shared platforms.&amp;nbsp; Not doing so can result in exposure of sensitive data.&amp;nbsp; 
&lt;/div&gt;Encryption methods are only useful if they are robust.&amp;nbsp; This is a particular challenge in container architectures as there are many competing interests and constraints which must be accounted for.&amp;nbsp; It is important that developers take ownership of encryption, while also working within the needs and requirements of the framework. Because of the complexity of containerized systems, and the general tendency of organizations to place security in the hands of operators, encryption of application secrets may be overlooked by developers.&amp;nbsp; This can result in exploitable vulnerabilities which administrators of the system are unaware of.&amp;nbsp;Some of the challenges of securing containerized systems include the variety of secrets which must be protected, and the fact that the available methods for protection may not be consistent between environments.&amp;nbsp; Organizations should be aware of these challenges and implement robust mechanisms which anticipate the problems inherent and provide mitigating strategies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.624">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-AA-1" name="Cloud-native environments may introduce risks to the microservice architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of cloud providers introduces many capabilities to container architectures, while also streamlining workflows and reducing the necessity of managing hardware.&amp;nbsp; However it also increases complexity, and this can make it more difficult to identify and mitigate vulnerabilities.&amp;nbsp; It can also result in a lack of ownership for security issues as developers assume that other parties are taking responsibility. Applications and containers which run or on otherwise access cloud providers must identify themselves.&amp;nbsp; Credentials and access control must be securely managed in order to prevent secret exposure and privilege escalation.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.624">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-1" name="Code promotion across environments may introduce vulnerabilities" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Code and image provenance is a developer and application owner concern; verification requires certification and key management across the code promotion path. This can be a challenge as multiple parties and certificate owners may be involved. The absence can result in application version mismatches or running tampered images. 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments. Today, developers can push code across application container environments without the need for operator interaction.&amp;nbsp; Systems should have robust policies and procedures in place to ensure that images are secured by developers at all stages of the build chain. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.374">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-1" name="Contention issues arise due to the elasticity of workload and dynamic resource requests" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   Ensuring resource availability as needed to support workloads is a challenge.&amp;nbsp; This is because of the dynamic use and availability of resources in a potentially shared environment, combined with the possibly unpredictable use of an application. The absence can result in either the CMP being unable to allocate appropriate resources for an application container, or a resource shortage within the CMP. 
 &lt;/div&gt;&lt;div&gt;
  Resources usage which is not properly managed by developers will affect the usage of others in a shared environment. The absence may result in a DOS-style scenario. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.907">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-352" name="Cross Site Request Forgery" state="0" impact="100" issueId="" issueLink="">
          <desc>The web application does not, or can not, sufficiently verify whether a well-formed, valid,
                        consistent request was intentionally provided by the user who submitted the request.&amp;nbsp;
                        &lt;div&gt;
                        &amp;nbsp;
                        &lt;br /&gt;When a web server is designed to receive a request from a client without any
                        mechanism for verifying that it was intentionally sent, then it might be possible for an
                        attacker to trick a client into making an unintentional request to the web server which will be
                        treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc.
                        and can result in exposure of data or unintended code execution.
                        &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:22.625">
              <output/>
            </source>
            <references>
              <reference name="CWE-352: Cross-Site Request Forgery (CSRF)" url="https://cwe.mitre.org/data/definitions/352.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-2" name="Image contents may not be secure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Images must have no known vulnerabilities or malicious code. Developers must help to ensure images have not been tampered with as they move from development to production. Applications of this feature include scanning images for vulnerabilities and malicious code and using image signing and validation mechanisms. 
&lt;/div&gt;&lt;div&gt;
  Ensuring that only the required components are packaged inside the image can be a challenge due to the complexity of applications. If this is not carefully managed it can result in the compromise of an unnecessary component.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Ensuring third-party components are free of vulnerabilities and updated as needed can be a challenge due to differing update frequencies by third-party vendors. This can result in the compromise of third-party components.&amp;nbsp; OS package managers are a particular challenge in this regard due to the large number of updates and downloads they maintain, and the fact that they often have unrestricted access to systems.&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments.&amp;nbsp; Developers should not assume that system wide security settings will mitigate potential application vulnerabilities.&amp;nbsp; Rather, they should ensure that their images have no known vulnerabilities or malicious code, and that they have not been tampered with as they move from development to production. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.373">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-285" name="Improper Authorization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not perform - or incorrectly - performs an authorization check when an actor attempts to access a resource or perform an action.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:22.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-173" name="Improper Handling of Alternative Encoding" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software does not properly handle cases in which the input uses an alternative encoding scheme that is valid for the control sphere to which the input is being sent.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:24.449">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-235" name="Improper Handling of Extra Parameters" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:24.449">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-22" name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Many file operations are intended to take place within a restricted directory. By using special elements such as ".." and "/" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the "../" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Path traversal also covers the use of absolute pathnames such as "/usr/local/bin", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add ".txt" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:24.441">
              <output/>
            </source>
            <references>
              <reference name="CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" url="https://cwe.mitre.org/data/definitions/22.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-915" name="Improperly Controlled Modification of Dynamically-Determined Object Attributes" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability. This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, auto-binding, or object injection.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:24.448">
              <output/>
            </source>
            <references>
              <reference name="CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes" url="https://cwe.mitre.org/data/definitions/915.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:22.624">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-548" name="Information Exposure Through Directory Listing" state="0" impact="100" issueId="" issueLink="">
          <desc>A directory listing is inappropriately exposed, yielding
                        potentially sensitive information to attackers.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:24.451">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:24.451">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Improper Input Validation" url="https://cwe.mitre.org/data/definitions/20.html"/>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-N-1" name="Insecure networking settings may be exploited to gain access to containers or hosts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Monitoring network activity and providing the infrastructure to do so can present a challenge because of the lack of network tooling and data storage. The absence can result in the exposure of sensitive information and diminished incident response and detection capabilities. 
&lt;/div&gt;&lt;div&gt;
  In container networking, communications between containers and hosts must be secured, network traffic must be monitored, and access to the network traffic, resources, and configurations must be controlled.&amp;nbsp; In terms of applications, communications between containers affect access control, limiting access to network traffic, resources, and configurations (leveraging network namespace). Other outcomes include isolating the container interfaces, monitoring network activity, and securing communications between containers via SSL/TLS or VPN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.908">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-D-1" name="Insufficient scaling of container resources may lead to inefficient resource utilization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring resource scaling requests take priority over other containers may provide a challenge.&amp;nbsp; This is due to complexity and implementation of the CMP to allow such prioritization. The absence can result in priority applications not being able to scale for user workloads. 
&lt;/div&gt;&lt;div&gt;
  It is a challenge for developers to define application performance profiles. Predictive application workload modeling is a complex task often substituted by a "common practice" or, equally precise, "by analogy".&amp;nbsp; This is largely due to lack of tooling in development environments. Both are likely to lead to inefficient resource utilization. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.907">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-436" name="Interpretation Conflict" state="0" impact="100" issueId="" issueLink="">
          <desc>Product A handles inputs or steps differently than Product B,
          which causes A to perform incorrect actions based on its perception of B's
          state.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:22.622">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-assets-inventory" name="Lack of assets inventory and retirement strategies" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;Lack of asset inventory and retirement strategies may lead to running unpatched systems, resulting in leakage of sensitive data. It is common to find unnecessarily exposed API hosts because of modern concepts like microservices, which make applications easy to deploy and independent (e.g., cloud computing, k8s).&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:22.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-1" name="Lack of continuous monitoring can result in application version mismatches and system availability issues" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  The ephemeral nature of application containers increases the necessity of reliable and centralized monitoring of platform, host, and containers.&amp;nbsp; It is essential to ensure that container runtime actions and events are monitored and logged in order to allow timely identification and mitigation of problems and threats. 
&lt;/div&gt;&lt;div&gt;
  There may be a challenge for developers to understand which container versions are running and where. This information needs to be easily and quickly digestible by appropriate parties. The absence can result in application version mismatches and system availability issues. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.624">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-G-1" name="Lifecycle events prevent secure startup and shutdown of applications" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Developing a containerized application that can be scaled up or down without notice is a challenge because of the extra effort required to design and implement the application in a manner where it can gracefully handle such scaling events while maintaining a secure state.&amp;nbsp; &amp;nbsp;It is a more robust approach to ensure that stateful containerized applications are aware of container scaling events to ensure transitions between secure states. 
&lt;/div&gt;&lt;div&gt;
  In an ideal world, either application containers are stateless, or the applications have been developed with clustering technologies to attach and release neighbors as they start and are terminated.&amp;nbsp; Some use cases, though, will have containers that have not been developed in such a manner, or which contain legacy applications that have migrated to containers. Such applications running inside a container may not be aware of pending lifecycle events issued by a CMP such as container start/stop/scale.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The containerized application should have an opportunity to be informed of the pending container's lifecycle events to manage its own lifecycle accordingly. This is essential to ensure the application's secure startup and shutdown.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.624">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-2" name="Mismanagement of container volumes can compromise underlying architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   In container volume management, it is essential to ensure the container has need-only access to data volumes and uses dedicated storage resources for runtime operations.&amp;nbsp; In the application, it is vital to ensure that access control exists for file system resources and raw storage devices, and that data is encrypted at rest in the data volumes.&amp;nbsp; Applications directly mounting a host directory should be avoided. 
 &lt;/div&gt;Building an image that minimizes using shared container volumes is imperative due to the risk of exposing sensitive data to the host or other containers, and the current reliance on sharing information with containers. This can result in exposure of sensitive data.&amp;nbsp;&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Building an image that does not share the host filesystem is equally crucial because exposing the host filesystem can result in compromising the underlying infrastructure, and other containers that share the same environment.&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.908">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-2" name="The complexity of container architectures can make logging and monitoring difficult to implement" state="0" impact="100" issueId="" issueLink="">
          <desc>Ensuring that coding policies include logging capabilities at the planning and design stages is a challenge due to the lack of presence of security concerns in the design phase and tooling.&amp;nbsp; In addition, there are many logging features which may be implemented in microservices and an absence of clear policies can result in lack of ownership from key parties, including developers.&amp;nbsp;&amp;nbsp;&lt;div&gt;
  Usually application logging is added after the fact as a response to an incident or audit.&amp;nbsp; Ensuring that application logs, starting with authentication logs, are captured for existing applications is a challenge due to lack of resources to modify the application and necessary guidance to do so.&amp;nbsp;&amp;nbsp;This will result in diminishing incident response and detection capabilities.&amp;nbsp; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.623">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-650" name="Trusting HTTP Permission Methods on the Server Side" state="0" impact="100" issueId="" issueLink="">
          <desc>The server contains a protection mechanism that assumes that
                        any URI that is accessed using HTTP GET will not cause a state change to the
                        associated resource. This might allow attackers to bypass intended access
                        restrictions and conduct resource modification and deletion attacks, since some
                        applications allow GET to modify state.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:24.451">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-601" name="URL Redirection to Untrusted Site ('Open Redirect')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;A web application accepts a user-controlled input specifying a link to an external site, and uses this link in a Redirect. This functionality aids phishing attacks.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:24.451">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-2" name="Unexpected Environment Condition" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;This is a generic weakness which includes several different situations that are all connected to unexpected environmental conditions and could be related to:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify the areas of the application that can be affected by the following causes:
                            &lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Misconfiguration.&lt;/li&gt;
                            &lt;li&gt;Uncleared buffers, shared memory, files, etc.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Problems between the interaction of two different entities that cause unexpected
                            behavior.&lt;/li&gt;
                            &lt;/ol&gt;
                            &lt;div&gt;
                            Perform testing on them to look for a security problem.&amp;nbsp;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:24.449">
              <output/>
            </source>
            <references>
              <reference name="CWE-2: Unexpected Environment Condition" url="https://cwe.mitre.org/data/definitions/2.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CSA-SACA-3.1.5:1" name="Applications must use secure network communication protocols" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Network traffic generated by the containers should maintain confidentiality regarding the applications and management by utilizing proper encryption protocols (i.e., SSL/TLS, IPSec). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Selecting libraries that support secure communications to provide encryption and maintain confidentiality prevents information spillage and network traffic tampering. Tampering of network traffic may result in system compromise. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.5" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify any communications in your application which will be sent as network traffic and ensure that encryption protocols have been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.831">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-639" name="Avoid using direct references to files" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method. Many flaws in applications result from unsafe handling of filenames or path data, for example directory traversal and arbitrary file disclosure. Use of filenames or other direct references to objects such as files on the server-side increases the risk of compromise of the system or unauthorized access to other files, content, or functionality.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Avoid using direct references to files or validate file name.&lt;/li&gt;&lt;li&gt;For example, instead of using:&amp;nbsp;www.example.com/open.jsp?file=details.txt&amp;nbsp;use:&amp;nbsp;www.example.com/open.jsp?file=[GUID]&amp;nbsp;and then use a lookup table on the server to associate the [GUID] value with file details.txt.&lt;/li&gt;&lt;li&gt;Files should be stored outside the web-root to prevent an attacker browsing directly to them.&lt;/li&gt;&lt;li&gt;Do not use obscurity to prevent access; for example do not rely on renaming a file to include a random string to prevent direct download or disclosure.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If direct references are used to access files from within the web-root deviating from recommended security practice, the following must be implemented:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String input validation must be applied.&amp;nbsp; Identify and filter for directory traversal meta-characters such as "../" or "..\" or "/", together with encoded variations and derivations.&lt;/li&gt;&lt;li&gt;Use of a strict white-list of files that may be downloaded.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;When a parameter that represents a file or a file path is found in the application:&lt;/li&gt;&lt;li&gt;For each of them try to change this parameter to gain access to unexpected files.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For example: www.example.com/open.jsp?file=details.txt&amp;nbsp;&lt;br&gt;Shouldn't be implemented that way and if so, it should not be possible to access locations outside of this domain (i.e. file=/etc/passwd or file= &lt;a href="http://www.google.com"&gt;http://www.google.com&lt;/a&gt;, etc.).&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:23.801">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.2.1" name="Avoid using images with OS package managers" issueId="" issueLink="" platform="" cost="1" risk="39" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&amp;nbsp;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images with OS package managers or shells could contain unknown vulnerabilities.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Package managers are normally run with unrestricted access in order to allow them to modify critical system software. The package manager's actions, therefore, affect the entire system.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you must include OS packages, remove the package manager before deploying the container.&amp;nbsp; The following steps may also help mitigate the risk: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use repositories you trust. Use only mirrors that belong to reputable organizations.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Manually update your systems (and local mirror caches).&lt;/li&gt; 
  &lt;li&gt;Use signed repository metadata.&lt;/li&gt; 
  &lt;li&gt;Use HTTPS for mirror communication.&lt;/li&gt; 
  &lt;li&gt;Use package managers that implement metadata expiration.&lt;/li&gt; 
  &lt;li&gt;Use distributions that properly make use of the package manager's security features.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="cs.arizona.edu: Attacks on Package Managers" url="https://www2.cs.arizona.edu/stork/packagemanagersecurity/attacks-on-package-managers.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Follow the steps for your particular OS to identify if package managers are installed on the container.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.292">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:1" name="Create and follow coding policies to include logging capabilities" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An application should provide logs regarding authentication, authorization, actions, and failures. The developer should include this capability as part of planning and design phases. For new applications, the developer should create and follow coding policies to include logging capabilities at the planning and design stages.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been planned and designed in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.542">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:2" name="Create common libraries for developers to handle sensitive data and secrets in the backend application code" issueId="" issueLink="" platform="" cost="1" risk="50" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable consistent ways of addressing the handling of sensitive data and secrets within backend application code, a common set of libraries should be provided to developers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Application developers are not necessarily security developers and should devote time to developing application features, not security. Security that is required within applications should be easy to use and made clear, so that minimum effort is spent and consistency across applications is achieved. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that libraries exist for securing sensitive data and that they have been applied to your applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.543">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-SRV-XML" name="Define and enforce secure validation through an XSD or DSD schema on XML input data" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The XML standards provides for formal validation criteria to be specified in a schema (XSD or DTD). Defining a schema with security in mind, and enforcing it on input data, will mitigate many attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define an XSD or DTD schema with secure input validation criteria.&lt;/li&gt;&lt;li&gt;Validate all XML input data against the schema before processing it.&lt;/li&gt;&lt;li&gt;The acceptance of unvalidated or non compliant data could have unexpected impact on the behavior of the application, and may facilitate attacks such as SQL injection.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;For every endpoint which consumes XML data.&lt;/li&gt;
                            &lt;li&gt;Get the permitted structure of this data.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Construct non-compliant samples and send them to the endpoints.&lt;/li&gt;
                            &lt;li&gt;Check they are not accepted.&amp;nbsp;&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:23.804">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.9:1" name="Developers should receive sufficient training on volume management" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should receive sufficient training to ensure development of applications that minimize the need to use shared container volumes and that do not require any access to host directories. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Shared volumes can result in exposure of sensitive data. Images which share the host volumes or filesystem can result in the compromise of the underlying infrastructure and other containers sharing the same environment. Avoiding these configurations is a challenge, which is why developer training is essential. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.9" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.831">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DIRECTORY_LISTING" name="Disable web server directory listing and ensure file metadata (e.g. .git) and backup files are not present within web roots" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Indexable directories allow an attacker to easily discover the existence of content on your web server that should remain private.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Disable directory listings in the web - or application - server configuration by default.&lt;/li&gt;&lt;li&gt;Restrict access to unnecessary directories and files.&lt;/li&gt;&lt;li&gt;Create an index (default) file for each directory.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Apache - auto index" url="https://httpd.apache.org/docs/trunk/mod/mod_autoindex.html"/>
            <reference name="Apache - directory listing" url="https://wiki.apache.org/httpd/DirectoryListings"/>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Directory_Indexing" url="https://www.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Directory_Indexing"/>
            <reference name="OWASP Insecure Indexing" url="https://www.owasp.org/index.php/File_System#Insecure_Indexing"/>
          </references>
          <standards>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check that the directory listing is disabled on the web server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:23.803">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-11.5" name="Do not share system information in HTTP headers and responses" issueId="" issueLink="" platform="" cost="0" risk="48" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should not share detailed version information of system components or other information that would assist attackers in the HTTP header or HTTP responses.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
          </references>
          <standards>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that the HTTP responses and headers do not reveal sensitive data about the system.
                            Using a command line web client like telnet or netcat could help on this task.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:23.803">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:3" name="Encrypt the sensitive application and create a container entry point application that decrypts and executes the main application" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By encrypting the sensitive application, the risk of unintended exposure of the sensitive application can be mitigated. This allows the container image (and sensitive application) to be stored, transmitted, or shared without unauthorized exposure. Encryption and decryption of the application should be treated as any other data encryption/decryption process. For sensitive applications, developers should encrypt the sensitive application, then create a container entry point application that decrypts and executes the main application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that an appropriate level of encryption has been applied to any sensitive data in the application.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.543">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.12:1" name="Ensure sustainable system performance by balancing system resources" issueId="" issueLink="" platform="" cost="1" risk="77" state="Required" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Working with the operator and architect, the developer should ensure that the binaries and libraries are optimized to operate in a containerized infrastructure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Default configurations or those that are suitable for non-containerized systems may conflict with the needs of container architectures.&amp;nbsp; Developers need to be aware of the environmental impacts on their applications. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.12" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review optimization configurations to ensure they are compliant with the needs or policies of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.831">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="review-api-responses" name="Ensure that the API responses contain only legitimate needed data" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;APIs rely on clients to perform the data filtering. Since APIs are used as data sources, sometimes developers try to implement them in a generic way without thinking about the sensitivity of the exposed data.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Never rely on the client-side to perform sensitive data filtering.&lt;/li&gt;&lt;li&gt;Ensure that the API responses contain only legitimate needed data.&lt;/li&gt;&lt;li&gt;Explicitly define and enforce data returned by all API methods, including errors. Whenever possible: use schema's for responses, patterns for all strings and clear field names.&lt;/li&gt;&lt;li&gt;Define all sensitive and personally identifiable information (PII) that your application stores and processes and review all API calls returning such information, to see if these responses could be a security issue.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP REST Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
            <reference name="REST Security CheatSheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="22" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API3:2019-Excessive Data Exposure" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Exploitation of excessive data exposure is simple, and is usually performed by sniffing (covertly observing) the traffic to analyze API responses, looking for any sensitive data that should not be returned to the user.&lt;/p&gt;&lt;p&gt;Automatic tools usually can't detect this type of vulnerability because it's hard to differentiate between legitimate data returned from the API, and sensitive data that should not be returned without a deep understanding of the application. However, you can use a "man-in-the-middle proxy" like OWASP Zap to manually explore your application to find sensitive data in API responses.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To Manually Explore your application:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Start ZAP and click the Quick Start tab of the Workspace Window.&lt;/li&gt;&lt;li&gt;Click the large Manual Explore button.&lt;/li&gt;&lt;li&gt;In the URL to explore text box, enter the full URL of the web application you want to inspect.&lt;/li&gt;&lt;li&gt;Select the browser you would like to use.&lt;/li&gt;&lt;li&gt;Click Launch Browser.&lt;/li&gt;&lt;li&gt;Explore your application.&lt;/li&gt;&lt;li&gt;To examine a tree view of the explored pages, click the Sites tab in the Tree Window. You can expand the nodes to see the individual URLs accessed.&lt;/li&gt;&lt;li&gt;To view the request / response information, select a request from the left side panel and get the information via the right-side "Request" and "Response" tabs.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:21.356">
              <output/>
            </source>
            <references>
              <reference name="OWASP ZAP Getting Started Guide" url="https://www.zaproxy.org/getting-started/"/>
              <reference name="Testing for Exposed Session Variables (OTG-SESS-004)" url="https://www.owasp.org/index.php/Testing_for_Exposed_Session_Variables_(OTG-SESS-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-HTTP-METHODS" name="Ensure that the application accepts only a defined set of required HTTP request methods" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP offers a number of methods that can be used to perform actions on the web server. Many of theses methods are designed to aid developers in deploying and testing HTTP applications. These HTTP methods can be used for nefarious purposes if the web server is misconfigured. For example, Cross Site Tracing (XST), a form of cross site scripting using the server's HTTP TRACE method.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While GET and POST are by far the most common methods that are used to access information provided by a web server, the Hypertext Transfer Protocol (HTTP) allows several other (and somewhat less known) methods. RFC 2616 (which describes HTTP version 1.1 which is the standard today) defines the following eight methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;HEAD&lt;/li&gt;&lt;li&gt;GET&lt;/li&gt;&lt;li&gt;POST&lt;/li&gt;&lt;li&gt;PUT&lt;/li&gt;&lt;li&gt;DELETE&lt;/li&gt;&lt;li&gt;TRACE&lt;/li&gt;&lt;li&gt;OPTIONS&lt;/li&gt;&lt;li&gt;CONNECT&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Some of these methods can potentially pose a security risk for a web application, as they allow an attacker to modify the files stored on the web server and, in some scenarios, steal the credentials of legitimate users. More specifically, the methods that should be disabled are the following:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;PUT: &lt;/strong&gt;This method allows a client to upload new files onto the web server. An attacker may exploit this by uploading malicious files (e.g.: an asp file that executes commands by invoking cmd.exe), or by simply using the victim's server as a file repository.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;DELETE:&lt;/strong&gt; This method allows a client to delete a file on the web server. An attacker may exploit it as a very simple and direct way to deface a web site or to mount a DoS attack.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;CONNECT: &lt;/strong&gt;This method could allow a client to use the web server as a proxy.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;TRACE: &lt;/strong&gt;This method simply echoes back to the client whatever string has been sent to the server, and is used mainly for debugging purposes. This method, originally assumed harmless, can be used to mount an attack known as Cross Site Tracing, which was discovered by Jeremiah Grossman (see links at the bottom of the page).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If an application needs one or more of these methods, such as REST Web Services (which may require PUT or DELETE), it is important to check their usage is properly limited to trusted users and safe conditions.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Ensure the application accepts only the HTTP requests GET and POST. The HTTP requests TRACE, PUT and DELETE are blocked.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP test HTTP methods" url="https://github.com/ManhNho/OWASP-Testing-Guide-v5/blob/master/document/4%20Web%20Application%20Security%20Testing/4.3%20Configuration%20and%20Deployment%20Management%20Testing/4.3.6%20Test%20HTTP%20Methods%20(OTG-CONFIG-006).md"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Check that the application only accepts the request with the following HTTP
                            methods: GET and POST.&lt;/li&gt;
                            &lt;li&gt;Check that the application rejects and blocks the following requests with the HTTP
                            methods: TRACE, PUT and DELETE.&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:23.803">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SEC-DEPLOY" name="Ensure the build pipeline contains a build step to automatically build and verify the secure deployment of the application" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts.</desc>
          <implementations/>
          <references>
            <reference name="Secure development and deployment guidance" url="https://www.ncsc.gov.uk/collection/developers-collection?curPage=/collection/developers-collection/principles/secure-the-build-and-deployment-pipeline"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>
                            Understanding the deployed configuration of the server hosting the web application is almost as important as the application security testing itself. After all, an application chain is only as strong as its weakest link. Application platforms are wide and varied, but some key platform configuration errors can compromise the application in the same way an unsecured application can compromise the server.
                            &lt;br /&gt;
                            &lt;br /&gt;In order to evaluate the readiness of the application platform, testing for configuration management includes the following sections:
                            &lt;br /&gt;
                            &lt;br /&gt;4.3.1 Test Network/Infrastructure Configuration (OTG-CONFIG-001)
                            &lt;br /&gt;4.3.2 Test Application Platform Configuration (OTG-CONFIG-002)
                            &lt;br /&gt;4.3.3 Test File Extensions Handling for Sensitive Information (OTG-CONFIG-003)
                            &lt;br /&gt;4.3.4 Review Old, Backup and Unreferenced Files for Sensitive Information (OTG-CONFIG-004)
                            &lt;br /&gt;4.3.5 Enumerate Infrastructure and Application Admin Interfaces (OTG-CONFIG-005)
                            &lt;br /&gt;4.3.6 Test HTTP Methods (OTG-CONFIG-006)
                            &lt;br /&gt;4.3.7 Test HTTP Strict Transport Security (OTG-CONFIG-007)
                            &lt;br /&gt;4.3.8 Test RIA cross domain policy (OTG-CONFIG-008)
                            &lt;br /&gt;4.3.9 Test File Permission (OTG-CONFIG-009)
                            &lt;br /&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:23.805">
              <output/>
            </source>
            <references>
              <reference name="Testing for configuration management" url="https://www.owasp.org/index.php/Testing_for_configuration_management"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ENV-USE" name="Ensure there are no environmental security weaknesses" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Application security can be undermined by misconfiguration of the underlying server or
                        development environment.
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;br /&gt;
                        &lt;/div&gt;
                        &lt;div&gt;
                        Ensure that vendor and best-practice guidelines have been applied, in particular affecting areas
                        such as:
                        &lt;/div&gt;
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Cryptographic strength of elements such as session tokens, GUIDs, and protection of
                        data in transit and at rest.&lt;/li&gt;
                        &lt;li&gt;Removal of debugging and compiler options and artifacts used during development.&lt;/li&gt;
                        &lt;li&gt;Configuration of error trapping and use of generic error messages and pages (e.g.
                        stack traces should not be returned to users).&lt;/li&gt;
                        &lt;li&gt;Appropriate access controls over software components, variables (e.g. EJBs and
                        methods).&lt;/li&gt;
                        &lt;li&gt;Insecure or inappropriate storage of data in configuration files or other data
                        structures (e.g. passwords in configuration files).&lt;/li&gt;
                        &lt;li&gt;Use of compilation/build features or security enhancements provided by the IDE&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                        &lt;div&gt;&lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="OWASP Juice Shop: Vulnerable Components" url="https://pwning.owasp-juice.shop/part2/vulnerable-components.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.3.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A06:2021-Vulnerable and Outdated Components" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A6:2017-Security Misconfiguration" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A9:2017-Using Components with Known Vulnerabilities" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2019-Security Misconfiguration" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;figure class="table"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;p&gt;Identify the areas of the application that could potentially be affected by the following:&amp;nbsp;&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Misconfiguration.&lt;/li&gt;&lt;li&gt;Uncleared buffers, shared memory, files, etc.&lt;/li&gt;&lt;li&gt;Problems between the interaction of two different entities that cause unexpected behavior.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Verify they are correctly implemented.&amp;nbsp;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:23.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SAC-3.1.1:1" name="Establish a root of trust" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A public key infrastructure (PKI) allows creation and management of a hierarchy of digital certificates for encryption and digital signatures. A PKI may already exist in an organization-certificates from this new or existing system can be used to sign container images and later verify their provenance and integrity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To ensure the integrity of the build chain, the developer must have the ability to digitally sign and provide a digital signature for the code and/or binary artifacts that will be promoted between environments or to the next promotion phase. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By signing a container image with a certificate that is part of a PKI, container management platform (CMP), users can easily verify the source of an image. This is important as once the source of the image is determined, users can ensure that the image has been through appropriate scrutiny before being promoted for production use. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all existing images are appropriately signed or verified, using keys provided by your organization.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.293">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="rest-content-type-val" name="Explicitly check the incoming Content-Type for REST services" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A REST request or response body should match the intended content type in the header. Otherwise this could cause misinterpretation on the consumer/producer side and lead to code injection/execution vulnerabilities.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Explicitly check incoming Content-Type for REST services are the expected ones, such as application/xml or application/JSON.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP REST Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="13.2.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Modify the content-type server header and test if the request is accepted by the server or not. For example: modify "content application/JSON" to "application/XML" and insert an XML entity payload to determine the XML entity injection point.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:21.378">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.1" name="Harden all applications in an image" issueId="" issueLink="" platform="" cost="1" risk="39" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;span style="line-height: 107%; font-size: 14.6667px;"&gt;&lt;font face="Times New Roman, serif"&gt; 
   &lt;div style=""&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Description:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Ensure that applications are secure and follow best practices. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Rationale:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      When deploying applications in a containerized system, vulnerabilities that compromise the application can in turn compromise the entire architecture.&amp;nbsp; This is a result of the way containers and pods communicate and access resources throughout the whole cluster. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Remediation:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Analyze source code regularly to ensure it is following best practices to avoid vulnerabilities.&amp;nbsp; &amp;nbsp;Continuously test your application against common attack practices, like SQL injection, DDoS attack, etc. There are various dynamic analysis tools available to assist.&amp;nbsp; 
    &lt;/div&gt; 
   &lt;/div&gt;&lt;/font&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;, serif; font-size: 11pt;"&gt;&lt;br&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="The New Stack: A Security Checklist for Cloud Native Kubernetes Environments" url="https://thenewstack.io/a-security-checklist-for-cloud-native-kubernetes-environments/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a reliable tool such as Veracode or Synopsys to analyze source code for vulnerabilities before deploying.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.293">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="harden-http-headers" name="Harden HTTP Headers" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;HTTP headers are a fundamental part of website security.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The Referrer-Policy HTTP header controls how much referrer information (sent via the Referrer header) should be included with requests. This security header was designed to prevent cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;The Origin request header indicates where a fetch originates from. It doesn't include any path information, but only the server name. It is sent with CORS requests, as well as with POST requests. It is similar to the Referer header, but, unlike this header, it doesn't disclose the whole path.&lt;/li&gt;&lt;li&gt;The Content-Disposition response header tells the browser to download a file rather than displaying it in the browser window.&lt;/li&gt;&lt;li&gt;If a response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use a suitable "Referrer-Policy" header, such as "no-referrer" or "same-origin".&lt;/li&gt;&lt;li&gt;Don't use the Origin header for authentication or access control decisions, as the Origin header can easily be changed by an attacker.&lt;/li&gt;&lt;li&gt;Use the Content-Disposition response header for file downloading in all API responses with the following directives: Content-Disposition: attachment; filename="api.json" (or other appropriate filename for the content type).&lt;/li&gt;&lt;li&gt;Use a content-type header specifying a safe character set (e.g., UTF-8, ISO 8859-1) in every HTTP response.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTML does not specify charset" url="https://portswigger.net/kb/issues/00800200_html-does-not-specify-charset"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="Origin Header" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"/>
            <reference name="Referrer-Policy" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"/>
            <reference name="Reflected File Download" url="https://www.owasp.org/index.php/Reflected_File_Download"/>
            <reference name="Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)" url="https://tools.ietf.org/html/rfc6266"/>
          </references>
          <standards>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;An easy way to access your HTTP security headers, as part of your response headers, is to fire up Chrome DevTools. To run this click into the "Network" panel and press Ctrl + R (Cmd + R) to refresh the page. Click into your domain's request and you will see a section for response headers.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Check if "Referrer-Policy" header exists in HTTP responses and has the right directives to prevent cross-domain Referrer leakage.&lt;/li&gt;&lt;li&gt;From a penetration testing perspective you should look for insecure configurations; for example, when the server returns back the Origin header in the Access-Control-Allow-Origin without any additional checks AND returns Access-Control-Allow-Credentials: true, which can lead to access of sensitive data. Note that this configuration is very insecure, and is not acceptable in general terms, except in the case of a public API that is intended to be accessible by everyone.&lt;/li&gt;&lt;li&gt;Try Reflected File Download input payloads to launch commands on the client machine. Reflected File Download is an attack combining URL path segments (now deprecated) with pages that reflect user inputs in the response. Generally web services vulnerable to JSONP Injection are leveraged to deliver malware to end users.&lt;/li&gt;&lt;li&gt;Character encoding has a popular misuse; namely, being used for encoding malicious injection strings in a way that obfuscates them. Try different character encoding schemes (like UTF-7) to bypass input validation filters, or take advantage of particular ways in which browsers render encoded text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:23.806">
              <output/>
            </source>
            <references>
              <reference name="A new security header: Referrer Policy" url="https://scotthelme.co.uk/a-new-security-header-referrer-policy/"/>
              <reference name="OWASP Testing Guide Appendix D: Encoded Injection" url="https://www.owasp.org/index.php/OWASP_Testing_Guide_Appendix_D:_Encoded_Injection"/>
              <reference name="Reflected File Download - A New Web Attack Vector" url="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/reflected-file-download-a-new-web-attack-vector/"/>
              <reference name="Test Cross Origin Resource Sharing (OTG-CLIENT-007)" url="https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:2" name="Identify a data at rest (DAR) solution" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer should utilize a DAR solution, if at all possible, that has been FIPS 140-2 validated. The developer should also analyze the application programming interface (API) and a compatible key management system (KMS).&amp;nbsp; The developer should also utilize the latest advanced encryption standard (AES) with the highest possible key length. Developers also have to take into account if the solution has been validated by an impartial third party and if the solution is viable in the intended operational environment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  With a FIPS-validated solution and a compatible KMS, there is some third party validation that the solution is secure and thus a higher level of assurance.&amp;nbsp; Robust use of AES will ensure data confidentiality. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that encryption is included and that the level is appropriate to the application security needs and the wider system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.543">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="centralized-authz-module" name="Implement a centralized authorization module that is invoked from all your business functions" issueId="" issueLink="" platform="" cost="0" risk="42" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Authorization checks for a function or resource are usually managed via configuration, and sometimes at the code level. Implementing proper checks can be a confusing task, since modern applications can contain many types of roles or groups and complex user hierarchy (e.g., sub-users, users with more than one role).&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Your application should have a consistent and easy to analyze authorization module that is invoked from all your business functions. Frequently, such protection is provided by one or more components external to the application code.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The enforcement mechanism(s) should deny all access by default, requiring explicit grants to specific roles for access to every function.&lt;/li&gt;&lt;li&gt;Review your API endpoints against function-level authorization flaws, while keeping in mind the business logic of the application and groups hierarchy.&lt;/li&gt;&lt;li&gt;Ensure that all of your administrative controllers inherit from an administrative abstract controller that implements authorization checks based on the user's group/role.&lt;/li&gt;&lt;li&gt;Ensure that administrative functions inside a regular controller implements authorization checks based on the user's group and role.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Forced browsing" url="https://www.owasp.org/index.php/Forced_browsing"/>
            <reference name="OWASP Development Guide: Chapter on Authorization" url="https://www.owasp.org/index.php/Category:Access_Control"/>
            <reference name="Top 10 2013-A7-Missing Function Level Access Control" url="https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="API5:2019-Broken Function Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Exploitation requires the attacker to send legitimate API calls to the API endpoint that they should not have access to. These endpoints might be exposed to anonymous users or regular, non-privileged users. It's easier to discover these flaws in APIs since APIs are more structured, and the way to access certain functions is more predictable (e.g., replacing the HTTP method from GET to PUT, or changing the "users" string in the URL to "admins", or changing the value of a parameter like "is_admin" from "false" to "true").&lt;/p&gt;&lt;p&gt;Don't assume that an API endpoint is regular or administrative only based on the URL path. While developers might choose to expose most of the administrative endpoints under a specific relative path, like api/admins, it's very common to find these administrative endpoints under other relative paths together with regular endpoints, like api/users&lt;/p&gt;&lt;p&gt;The best way to find broken function-level authorization issues is to perform deep analysis of the authorization mechanism, while keeping in mind the user hierarchy, different roles or groups in the application, and:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Verify if a regular user can access administrative endpoints.&lt;/li&gt;&lt;li&gt;Verify if a user can perform sensitive actions (e.g., creation, modification, or erasure) that they should not have access to by simply changing the HTTP method (e.g., from GET to DELETE).&lt;/li&gt;&lt;li&gt;Verify if a user from group X can access a function that should be exposed only to users from group Y, by simply guessing the endpoint URL and parameters (e.g., /api/v1/users/export_all).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:21.379">
              <output/>
            </source>
            <references>
              <reference name="OWASP Cheatsheet Testing Automation" url="https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Testing_Automation.html"/>
              <reference name="Testing for Authorization" url="https://www.owasp.org/index.php/Testing_for_Authorization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="best-practices-api-auth" name="Implement best practices for API authentication" issueId="" issueLink="" platform="" cost="0" risk="8" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;One of the challenges to building any RESTful API is having a well thought out authentication strategy. An API built without protection from malicious threats through authentication represents an API design failure that can threaten an organization's data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Know all the possible flows to authenticate to the API (mobile / web / deep links that implement one-click authentication / etc).&lt;/li&gt;&lt;li&gt;Check these flows with the API engineers.&lt;/li&gt;&lt;li&gt;Understand deeply the authentication mechanisms and how they are be used. OAuth is not authentication, and neither are API keys.&lt;/li&gt;&lt;li&gt;Don't reinvent the wheel in authentication, token generation, password storage. Use the standard frameworks.&lt;/li&gt;&lt;li&gt;Credential recovery / forget password endpoints should be treated as login endpoints in terms of brute force, rate limiting and lockout protections.&lt;/li&gt;&lt;li&gt;Use the OWASP Authentication Cheatsheet.&lt;/li&gt;&lt;li&gt;Where possible, implement multi-factor authentication.&lt;/li&gt;&lt;li&gt;Implement anti-brute-force mechanisms to mitigate credential stuffing, dictionary attack and brute force attacks on your authentication endpoints. This mechanism should be stricter than the regular rate limiting mechanism on your API.&lt;/li&gt;&lt;li&gt;Implement account lockout / captcha mechanisms to prevent brute force attacks. Implement weak-password checks.&lt;/li&gt;&lt;li&gt;API keys should not be used for authentication, but for client app / project authentication.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="How to Secure APIs" url="https://dzone.com/articles/how-to-secure-apis"/>
            <reference name="OWASP REST Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
            <reference name="REST Security CheatSheet" url="https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="11" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="23" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="26" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="9" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API2:2019-Broken Authentication" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Testing the authentication schema means deeply understanding how the authentication process works and using that information to circumvent the authentication mechanism.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Verify that the user's authentication data are transferred via an encrypted channel (&lt;a href="https://www.owasp.org/index.php/Testing_for_Credentials_Transported_over_an_Encrypted_Channel_(OTG-AUTHN-001)"&gt;OTG-AUTHN-001&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Test for default credentials of common applications (&lt;a href="https://www.owasp.org/index.php/Testing_for_default_credentials_(OTG-AUTHN-002)"&gt;OTG-AUTHN-002&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Attempt an invalid login by using incorrect passwords a number of times to test the account lockout mechanism's ability to mitigate brute force password guessing (&lt;a href="https://www.owasp.org/index.php/Testing_for_Weak_lock_out_mechanism_(OTG-AUTHN-003)"&gt;OTG-AUTHN-003&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Modify user input parameters to gain access to protected areas without providing valid credentials (&lt;a href="https://www.owasp.org/index.php/Testing_for_Bypassing_Authentication_Schema_(OTG-AUTHN-004)"&gt;OTG-AUTHN-004&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Verify that the credentials are only sent during the login phase, and not sent together with every request to the application (&lt;a href="https://www.owasp.org/index.php/Testing_for_Vulnerable_Remember_Password_(OTG-AUTHN-005)"&gt;OTG-AUTHN-005&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Check that the application does not leak any sensitive data into the browser cache. In order to do that, use a proxy (such as WebScarab) and search through the server responses that belong to the session, checking that for every page which contains sensitive information, the server instructed the browser not to cache any data (&lt;a href="https://www.owasp.org/index.php/Testing_for_Browser_cache_weakness_(OTG-AUTHN-006)"&gt;OTG-AUTHN-006&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Determine the resistance of the application against brute force password guessing using available password dictionaries by evaluating the length, complexity, reuse and aging requirements of passwords (&lt;a href="https://www.owasp.org/index.php/Testing_for_Weak_password_policy_(OTG-AUTHN-007)"&gt;OTG-AUTHN-007&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Try to create security questions by creating a new account or by configuring your existing account's password recovery properties, to find weak self-generated questions (&lt;a href="https://www.owasp.org/index.php/Testing_for_Weak_security_question/answer_(OTG-AUTHN-008)"&gt;OTG-AUTHN-008&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Determine the resistance of the passwords reset functionality against guessing or bypassing (&lt;a href="https://www.owasp.org/index.php/Testing_for_weak_password_change_or_reset_functionalities_(OTG-AUTHN-009)"&gt;OTG-AUTHN-009&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Fully test the website's primary authentication functions. This should identify how accounts are issued, created or changed and how passwords are recovered, reset, or changed. Additionally knowledge of any elevated privilege authentication and authentication protection measures should be known (&lt;a href="https://www.owasp.org/index.php/Testing_for_Weaker_authentication_in_alternative_channel_(OTG-AUTHN-010)"&gt;OTG-AUTHN-010&lt;/a&gt;).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:21.379">
              <output/>
            </source>
            <references>
              <reference name="OWASP Testing Guide v4. Testing for authentication" url="https://www.owasp.org/index.php/Testing_for_authentication"/>
              <reference name="OWASP Testing for authentication" url="https://www.owasp.org/index.php/Testing_for_authentication"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="object-level-authorization" name="Implement object-level authorization checks in every function that accesses a data source using input from the user" issueId="" issueLink="" platform="" cost="0" risk="42" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement a proper authorization mechanism that relies on the user policies and hierarchy. Object-level authorization checks should be considered in every function that accesses a data source using input from the user.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Favor not using an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.&lt;/li&gt;&lt;li&gt;Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an input from the client to access a record in the database.&lt;/li&gt;&lt;li&gt;Use random and unpredictable values as GUIDs for records' IDs.&lt;/li&gt;&lt;li&gt;Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break these tests.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Top 10 2007-Insecure Direct Object Reference" url="https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Map out all locations in the application in which user input is used to reference objects directly. For example, locations where user input is used to access a database row, a file, application page, etc.&lt;/li&gt;&lt;li&gt;Modify the value of the parameter used to reference objects to see if the application raises an authorization error.&lt;/li&gt;&lt;li&gt;Assess whether it is possible to retrieve objects belonging to other users or otherwise bypass authorization.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:21.380">
              <output/>
            </source>
            <references>
              <reference name="Testing for Insecure Direct Object References (OTG-AUTHZ-004)" url="https://www.owasp.org/index.php/Testing_for_Insecure_Direct_Object_References_(OTG-AUTHZ-004)"/>
              <reference name="Top 10 2007-Insecure Direct Object Reference" url="https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:2" name="Implement plans to capture application logs" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An existing application should provide logs regarding authentication, authorization, actions, and failures. If any of these logging items have not been implemented, developers should provide these capabilities as part of the maintenance phase. For existing applications, the developer should implement plans to capture application logs, starting with authentication logs 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been applied in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.543">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:3" name="Include only necessary components inside the image" issueId="" issueLink="" platform="" cost="1" risk="39" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should trim down images to include only necessary components. It is preferred to use a baseline image with minimal set of packages over a full OS distribution.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Removing unnecessary components from the image will reduce the number of potentially outdated or unpatched packages and therefore reduce the number of security vulnerabilities. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.294">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="inventory-api" name="Inventory all API hosts and document important aspects of each one of them" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Asset management is a systematic process of developing, operating, maintaining, upgrading, and disposing of assets in the most cost-effective manner (including all costs, risks and performance attributes). The asset inventory makes up the first part of a chain in many risk management frameworks.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Inventory all API hosts and document important aspects of each one of them, focusing on the API environment (e.g., production, staging, test, development), who should have network access to the host (e.g., public, internal, partners) and the API version.&lt;/li&gt;&lt;li&gt;Inventory integrated services and document important aspects such as their role in the system, what data is exchanged (data flow), and its sensitivity.&lt;/li&gt;&lt;li&gt;Document all aspects of your API such as authentication, errors, redirects, rate limiting, cross-origin resource sharing (CORS) policy and endpoints, including their parameters, requests, and responses.&lt;/li&gt;&lt;li&gt;Generate documentation automatically by adopting open standards. Include the documentation build in your CI/CD pipeline.&lt;/li&gt;&lt;li&gt;Make API documentation available to those authorized to use the API.&lt;/li&gt;&lt;li&gt;Use external protection measures such as API security firewalls for all exposed versions of your APIs, not just for the current production version.&lt;/li&gt;&lt;li&gt;Avoid using production data with non-production API deployments. If this is unavoidable, these endpoints should get the same security treatment as the production ones.&lt;/li&gt;&lt;li&gt;When newer versions of APIs include security improvements, perform risk analysis to make the decision of the mitigation actions required for the older versions: for example, whether it is possible to backport the improvements without breaking API compatibility, or simply take the older versions out swiftly and force all clients to move to the latest versions.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Best Practices in API Documentation" url="https://swagger.io/blog/api-documentation/best-practices-in-api-documentation"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="20" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="21" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="27" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API9:2019-Improper Assets Management" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Make sure the API host inventory and API documentation are updated and available to stakeholders. To check the validity of this documentation you can use an active/passive discovery tool to identify undocumented API hosts or endpoints.
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:21.380">
              <output/>
            </source>
            <references>
              <reference name="Inventory and Control of Software Assets" url="https://www.cisecurity.org/controls/inventory-and-control-of-software-assets/"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.11:1" name="Left the application in an unknown state if a containerized application is unaware of the container's transitions" issueId="" issueLink="" platform="" cost="1" risk="77" state="Required" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The CMP should provide the encapsulated application an opportunity to perform a graceful transition to a known secure state. The conventional solution is to allow an application to be notified of the container lifecycle events. Resources, freed after container's removal, should be released back to the pool in a well known state and containers should be allowed to log any state changing events. The container's lifecycle (start/stop/scaled) is managed by CMP. From a developer's perspective, the application could be left in an unknown state if a containerized application is unaware of the container's transitions 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is essential to inform the application of the container's lifecycle events, so that it may take appropriate action to ensure a secure startup and shutdown. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.11" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the container's stop start process and ensure that any related and relevant configurations have been applied to your applications.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.543">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.2" name="Limit credential exposure" issueId="" issueLink="" platform="" cost="1" risk="38" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Harden credentials before deploying applications 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Plain text (non-encrypted) credentials (account passwords, SSH Keys, DevOps secrets, etc.) may be embedded into source code because it helps to simplify deployments at scale.&amp;nbsp; This poses formidable security risks that are routinely exploited by malware and hackers. In some cases, a threat actor may insert hardcoded credentials to create a backdoor, allowing them persistent access to a device, application, or system. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Hardcoded credentials are favored cyberattack targets for password guessing exploits, allowing hackers and malware to hijack systems, and software. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Don't define credentials in your application code. Use managed identities for cloud resources to let your pod request access to cloud provider.&amp;nbsp; Avoid the use of fixed or shared credentials. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="BeyondTrust: Hardcoded and Embedded Credentials are an IT Security Hazard" url="https://www.beyondtrust.com/blog/entry/hardcoded-and-embedded-credentials-are-an-it-security-hazard-heres-what-you-need-to-know"/>
            <reference name="Microsoft docs: Best practices for pod security in Azure Kubernetes Service" url="https://docs.microsoft.com/en-us/azure/aks/developer-best-practices-pod-security"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review application code before deployment for embedded credentials.&amp;nbsp; Carry out pen testing of applications to find overlooked credential vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.543">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="8" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. A token/identifier that is not accessible to the attacker is needed to mitigate this and would not be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For maximum security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on the server-side is problematic, an alternative defense is to use the double-submit cookie technique. This technique is easy to implement and is stateless. In this technique, a random value is sent in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudo random value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudo-random value as a hidden form value (or other request parameter/header). If both of them match on the server-side, the server accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely on examining an HTTP request header value. Firstly, determining the origin the request is coming from (source origin). This can be achieved via Origin and/or referer headers. Secondly, determining the origin the request is going to (target origin). On the server-side verify if both of these match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, discard the request (meaning that the request originated from a cross-domain). Reliability of these headers comes from the fact they cannot be altered programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-30" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.- Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:21.381">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:1" name="Provide training and best practices guidance to developers" issueId="" issueLink="" platform="" cost="1" risk="50" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers should be informed and trained on threats arising from multi-tenancy on public clouds.&amp;nbsp; They also need to be trained and provided with templates for how to use the secret management feature within their apps so they avoid the practice of hard-coding static secrets within application code. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers are accustomed to the practice of baking sensitive information into server code from the days when server-side was considered trusted environment. Raising the awareness of the nuances and threats present in current public cloud environments helps drive in the need to avoid such practices 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.543">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-18.8" name="Reject requests containing unexpected or missing content type headers" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
                        Reject requests containing unexpected or missing content type headers with HTTP response status
                        &amp;quot;406 Unacceptable&amp;quot; or &amp;quot;415 Unsupported Media Type&amp;quot;.
                        &lt;/div&gt;
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Validate request content-type" url="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet#Validate_request_content_types"/>
            <reference name="Spring docs: CSRF" url="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html"/>
          </references>
          <standards>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that HTTP requests with non-valid Content-type are rejected.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:23.805">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.1" name="Remove components which are only required for development" issueId="" issueLink="" platform="" cost="1" risk="39" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Tools that are essential during application development can create security risks in deployment 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Any unnecessary component is another potential entrance point for an attacker.&amp;nbsp; Debuggers and common tools like Curl that are useful to attackers should not be included in images in deployment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Perform an analysis of the entire container before deployment and remove any components or functions you do not need. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.294">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-SESS-REAUTH" name="Require additional authentication for sensitive operations / high value transactions" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Having gained access to an account, for example through session hijacking or cross-site scripting, an attack may compromise data and functionality accessible to the victim. This may include elevating privileges or accessing sensitive data and functionality, such as changing passwords, creating accounts, or transferring funds.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;These critical functions and sensitive data should be further protected from attack using a risk-based authentication model requiring re-authentication via multi-factor authentication, or use of a token to sign transactions or operations.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement re-authentication on key functions (such as requiring the old password before setting a new one).&lt;/li&gt;&lt;li&gt;Use secondary authentication such as a transaction PIN to allow financial transfers.&lt;/li&gt;&lt;li&gt;Critical administrative functionality should require multi-factor authentication (such as a hard or soft token).&lt;/li&gt;&lt;li&gt;Consider use of signing technologies or tokens that enable the server-side to verify the authenticity of a request and mitigate Man in the Middle (MiTM) or Man in the Browser (MiTB) attacks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
          </references>
          <standards>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify critical functionalities of the application.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Check the risk appetite for those functionalities.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Validate that re-authentication is required for those functions if deemed
                            necessary.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:23.806">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.2" name="Secure any dependencies" issueId="" issueLink="" platform="" cost="1" risk="39" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that any dependencies used by applications are also secure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is hard to keep to track of all the packages an application uses and to make sure they are not vulnerable.&amp;nbsp; Even if you ensure that your own application is free of vulnerabilities, if the base packages and dependencies are not secure, the container could still be vulnerable to attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Regularly perform a full dependency analysis for code to uncover your open source and other dependencies for any vulnerabilities they contain. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a suitable vulnerability scanner to carry out a full dependency analysis for code to uncover your dependencies and any vulnerabilities they contain.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.294">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.2" name="Secure the container base image" issueId="" issueLink="" platform="" cost="1" risk="39" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br&gt;Ensure that container images are built using secure and approved base images&lt;br&gt;&lt;br&gt;&lt;b&gt;Rationale:&lt;/b&gt;&lt;br&gt;Vulnerabilities in software packages can be exploited by hackers or malicious users to obtain unauthorized access to local or cloud resources. &lt;br&gt;&lt;br&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br&gt;Select minimal base images, add only what you require, and scan them for vulnerabilities.&amp;nbsp; &amp;nbsp;Ideally, the tool you choose for this function should be aware of your base image choice and alert you when there is an updated version of your base image, or if there are alternate base images that can reduce vulnerabilities.&lt;br&gt;&lt;br&gt;Only deploy authorized container images that you've analyzed, scanned, and signed (i.e. Software Supply Chain Security). Grafeas, TUF, and Notary can help here.&lt;br&gt;&lt;br&gt;Ensure that only images from image registries on allow lists are used to launch containers in your Kubernetes environment.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Peter Benjamin: Kubernetes Security Best-Practices" url="https://dev.to/petermbenjamin/kubernetes-security-best-practices-hlk"/>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;font face="Times New Roman, serif"&gt;Please follow your 3rd party image scanning provider's guidelines for enabling Image Scanning.&lt;/font&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.294">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:1" name="Sign images as part of the image build process and validate images before use" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images should be signed as part of the build process and validated before used. Signing and validation can be achieved through GNU Privacy Guard (GPG) signatures on image contents or through similar methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Digital signing of image content at build time and validation of the signed data before usage ensures that image data cannot be tampered with between build and run time. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review your applications to ensure that the appropriate signing has taken place.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.294">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASSIGN-WHITE" name="Use a white-list approach to assign values to variables" issueId="" issueLink="" platform="" cost="2" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>
                        &lt;p&gt;All data received from the client-side should be considered tainted and a potential risk, regardless of the source or transport method.&amp;nbsp;Using mass-assignment or auto-binding when accepting values from an untrusted source and mapping them to trusted server side values increases the risk of tainted data being used unsafely.&lt;/p&gt;
                        &lt;p&gt;&lt;/p&gt;
                        &lt;ul&gt;
                         &lt;li&gt;Bind individual values to specific fields, instead of binding whole objects.&lt;/li&gt;
                         &lt;li&gt;Use available features of the language or framework that allow specification of white lists of attributes or fields that are allowed to be modified.&amp;nbsp;&lt;/li&gt;
                         &lt;ul&gt;
                          &lt;li&gt;For example, applications written with Ruby on Rails can use the attr_accessible (white list) or attr_protected (black list) macros in each class that may be used in mass assignment.&lt;/li&gt;
                         &lt;/ul&gt;
                        &lt;/ul&gt;
                    </desc>
          <implementations>
            <implementation platform="Spring.java">
              <desc>ICAgIEBSZXF1ZXN0TWFwcGluZyh2YWx1ZSA9ICIvdmVudWUve2NpdHl9L3twbGFjZX0iLCBtZXRob2QgPSAiR0VUIikKICAgIHB1YmxpYyBTdHJpbmcgZ2V0VmVudWVEZXRhaWxzKFZlbnVlIHZlbnVlLCBNb2RlbCBtb2RlbCkgewogICAgICAgIC8vIHZlbnVlIG9iamVjdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgcG9wdWxhdGVkIHdpdGggY2l0eSBhbmQgcGxhY2UKICAgIH0=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="OWASP Juice Shop: XSS" url="https://pwning.owasp-juice.shop/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API6:2019-Mass Assignment" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the framework the component is using.&lt;/li&gt;&lt;li&gt;Check if this particular framework provides automatic binding of variables.&lt;/li&gt;&lt;li&gt;Verify if it is disabled or restricted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:23.804">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.3:1" name="Use clear versioning schemes to identify application versions running in containers" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By defining and using an accepted versioning scheme, a development team can have version numbers automatically implemented as part of a build process. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By applying versions either to a container name, tag, or label, the developer is then able to easily identify application versions running in containers. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.3" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review container names, tags, or labels to check that they contain version numbers in line with your organizational or system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.543">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.1" name="Use IAM for access control" issueId="" issueLink="" platform="" cost="1" risk="38" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Description:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Implement authentication and access control with the Identity and Access Management (IAM) service provided by the cloud provider. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Rationale:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Applications which have access to the full scope of the cloud provider may perform actions outside of their scope.&amp;nbsp; This can be exploited by attackers to gain access to large areas of the cluster. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Use IAM roles to provide fine-grained access.&amp;nbsp; Assign roles only the specific amount of resources they need, or allow them&amp;nbsp; to perform only a particular amount of activities. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: A journey to Kubernetes security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="we45: Security Essentials for a Developer - Kubernetes" url="https://we45.com/blog/security-essentials-for-a-developer-kubernetes/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use the relevant tools for your cloud provider to audit the use of IAM roles in applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.544">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:1" name="Use standard, commonly available authentication systems" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When either data or applications are encrypted within a container, having a reliable method to authorize use of encryption keys is required. Alternatively, applications must be written to support multiple authentication methods, introducing unnecessary complexity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By using common authentication methods, this ensures a predictable ability to authenticate and authorize the use of encryption keys across CMPs.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
            <standard ref="K06 - Broken Authentication" supportedStandardRef="owasp-kubernetes-top-10-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that an encryption policy or standard exists for your organization, and that it has been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:50.544">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:2" name="Use vulnerability scanning tools as part of the development process" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should use vulnerability scanning tools as part of the development process and the CI pipeline, and integrate a vulnerability assessment into the build process. They will also want to consider failing a build if the vulnerability assessment fails. Once a vulnerability is identified, apply security patches to the vulnerable component and rebuild the image. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A vulnerability scanner will identify and alert on the use of third-party components with known security vulnerabilities. Applying vulnerability scanning as part of the development cycle improves the security quality of the images, since well-known vulnerabilities are identified and patched before software gets into runtime environment. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if a protocol exists for vulnerability scanning in your organization and, if so, that it has been utilized.&amp;nbsp; If one does not exist, use one of the recommended tools to ensure that your own applications and containers do not contain vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.294">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.14:1" name="Utilize resource control features to orchestrate intra-container resource utilization, prioritization and allocation thresholds" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should expect the presence of horizontal infrastructure scaling capability but should avoid the need for vertical scaling by ensuring that the application can function within the parameters established by the configuration management team. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer must obtain the resource utilization and hardening parameters and incorporate those configurations into the software development environment and testing scripts. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The application developer must accept that the application under development will not have on-hand the entirety of computing resources available in the production environment. Even in the presence of auto-scale, auto-scaling capability has limits and does not scale out infinitely.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Without testing application functions within defined production parameters, the risk of poor application performance goes up, not down. Proper configuration of resource and security functionality as appropriate to the CMP in use ensures that a resource consumption fault or runaway container processes do not affect adjacent containers.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.14" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the capabilities of the CMP in terms of the relevant thresholds and ensure your application is compliant.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.832">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Serialized Java objects&lt;/li&gt; 
 &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt; 
 &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt;To test data validation:&amp;nbsp; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp, Fiddler, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:21.381">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-147" name="Validate input parameters to prevent HTTP Parameter Pollution" issueId="" issueLink="" platform="" cost="0" risk="42" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>All data received from external sources should be considered tainted and a potential risk, regardless of the source or transport method. HTTP Parameter Pollution attacks result when parameters are added or inserted into requests, and are inappropriately or unsafely handled by the server. For example, injection of parameters into strings or cookies sent to the application can result in the variables being interpreted out of sequence, exploiting flaws in the business logic and flow.
&lt;div&gt;
 &lt;div&gt;
  &lt;ul&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
 &lt;div&gt;
  &lt;p&gt;For example, there was a bug in the Blogger platform which illustrates this vulnerability. The bug allowed malicious users to take ownership of the victim's blog by using the following HTTP request:&lt;/p&gt;
  &lt;blockquote&gt;
   &lt;p&gt;&lt;code&gt;POST /add-authors.do HTTP/1.1&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;blockquote&gt;
   &lt;p&gt;&lt;code&gt;security_token=attackertoken&amp;amp;&lt;b&gt;blogID=attackerblogidvalue&lt;/b&gt;&amp;amp;&lt;b&gt;blogID=victimblogidvalue&lt;/b&gt;&amp;amp;authorsList=goldshlager19test%40gmail.com(attacker email)&amp;amp;ok=Invite&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
  &lt;p&gt;The flaw resided in the authentication mechanism used by the web application, as the security check was performed on the first&amp;nbsp;&lt;code&gt;blogID&lt;/code&gt;&amp;nbsp;parameter, whereas the actual operation used the second occurrence.&lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify parameters within the application used for authentication decisions, or critical business logic.&lt;/li&gt;&lt;li&gt;Send specially forged requests to the application in which those parameters are duplicated, or passed through other methods (e.g. POST parameters in the URL as GET fields, cookies as form fields etc.)&lt;ul&gt;&lt;li&gt;Review the application logic to ensure:&lt;/li&gt;&lt;li&gt;The same parameter is for all the decisions.&lt;/li&gt;&lt;li&gt;Parameters received over unexpected or non compliant methods result in a security exception.&lt;/li&gt;&lt;li&gt;Duplicate parameters are identified and result in a security exception.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The application should fail-safe; i.e. unexpected or suspicious behavior should result in termination of the user's session and a security event being logged.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A number of tools can be used to aid in testing:&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly inside your browser with the Developer Tools&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data)&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.)&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T13:45:23.804">
              <output/>
            </source>
            <references>
              <reference name="OWASP - Testing for HTTP Parameter Pollution" url="https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OTG-INPVAL-004)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-601" name="Whitelist which URLs the application may redirect to" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should maintain a list of URLs to which it may redirect users. This whitelisting can also be achieved by applying regular expressions. The application should only allow redirects to trusted URLS.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-04 Information Flow Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/26-08_02_AC-04"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.9" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-4" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify the points of the application in which a redirection takes place. Redirections are usually indicated by the use of the "Location" HTTP header along with the "3xx" code.&lt;/li&gt;&lt;li&gt;Verify if the value inside the Location header is coming from user input (URL string, Cookies, HTTP headers, forms, etc.).&lt;/li&gt;&lt;li&gt;Modify the input value which will be part of the Location header to redirect to domains which should not be permitted.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T13:45:23.804">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="access-sensitive-data" name="Access sensitive data" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="sniff-api-responses" name="Attackers analyze API responses looking for sensitive data" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Exploitation of excessive data exposure can be a simple process, and is usually performed by sniffing (covertly observing) the traffic to analyze API responses, looking for sensitive data that should not be returned to the user.&lt;/p&gt;&lt;p&gt;The API may return sensitive data to the client by design. This data is usually filtered on the client side before being presented to the user. An attacker could potentially sniff this traffic and see the sensitive data.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="review-api-responses" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="review-api-responses" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNCONFIGURED-SECURITY-DATA" name="Sensitive data is exposed through weak security configurations" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Weak security configurations make possible for an attacker to access sensitive data like API keys, credentials, etc.</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AS-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="abusing-API-authentication" name="Attackers gain control of users' accounts in the system by abusing poorly implemented API authentication" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;API authentication can be complex and at times confusing. Software and security engineers might have misconceptions about the boundaries of authentication and how to implement it correctly. In addition, the authentication mechanism is a prime target for attackers, since it's exposed to everyone. These two points make the authentication component potentially valuable to miscreants.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-114: Authentication Abuse" url="https://capec.mitre.org/data/definitions/114.html"/>
                <reference name="CAPEC-57: Utilizing REST's Trust in the System Resource to Obtain Sensitive Data" url="https://capec.mitre.org/data/definitions/57.html"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="cwe-352-csrf" mitigation="10"/>
                  </countermeasures>
                </weakness>
                <weakness ref="api-broken-authentication">
                  <countermeasures>
                    <countermeasure ref="best-practices-api-auth" mitigation="90"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="best-practices-api-auth" mitigation="90"/>
                <countermeasure ref="cwe-352-csrf" mitigation="10"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CLOUD-VULNERABILITIES" name="Attackers use known cloud vulnerabilities to access unauthorized data" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Known vulnerabilities in a specific cloud environment are used to exploit a system, allowing an attacker to access unauthorized data</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AA-1">
                  <countermeasures>
                    <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                    <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authorization" name="Authorization" desc="" library="CS-Default">
          <threats>
            <threat ref="broken-authorization-api" name="Attackers can exploit API endpoints that are vulnerable to broken authorization to access forbidden functionality" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Attackers could exploit API endpoints that are vulnerable to broken object-level authorization by manipulating the ID of an object that is sent within the request. This may lead to unauthorized access to sensitive data. This issue is extremely common in API-based applications because the server component usually does not fully track the client's state, and instead, relies more on parameters like object IDs, that are sent from the client to decide which objects to access.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-1: Accessing Functionality Not Properly Constrained by ACLs" url="http://capec.mitre.org/data/definitions/1.html"/>
                <reference name="CAPEC-87: Forceful Browsing" url="http://capec.mitre.org/data/definitions/87.html"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-285">
                  <countermeasures>
                    <countermeasure ref="centralized-authz-module" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="api-broken-object-level-authorization">
                  <countermeasures>
                    <countermeasure ref="object-level-authorization" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="centralized-authz-module" mitigation="50"/>
                <countermeasure ref="object-level-authorization" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="7k-CWE-Environment" name="Attackers gain unauthorised access to the application through an environment flaw" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This section includes everything that is outside of the source code but is still critical to the security of the product that is being created. Because the issues covered by this section are not directly related to source code, we separated it from the rest of the realms.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-2">
                  <countermeasures>
                    <countermeasure ref="ENV-USE" mitigation="50"/>
                    <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ENV-USE" mitigation="50"/>
                <countermeasure ref="SEC-DEPLOY" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-D-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="IMAGE-MODIFICATION" name="Attackers compromise images by modifying their content" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker modifies/forges a microservices image to introduce vulnerabilities in the system</desc>
              <riskRating confidentiality="100" integrity="100" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                    <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                    <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A1:2017" name="Attackers gain access to the sensitive data through injecting code in the repositories" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Almost any source of data can be an injection vector: environment variables,
                                parameters, external and internal web services, and all types of users. Injection flaws
                                occur when an attacker can send hostile data to an interpreter.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                    <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SCALABILITY-ISSUES" name="Availability is compromised through attacks against scalability configuration" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker compromise the availability of a system by exploiting scalability configurations in order to consume resources</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CO-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-CONTAINER-VOLUMES" name="Sensitive data is compromised by unauthorized access to container volumes" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker find flaws to access container volumes without permission</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-LM-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="APP-LM-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNAUTHORIZED-ACCESS-NETWORK" name="Sensitive data is compromised through network access" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Attackers gain undetected access to the network systems and changes made by the
                                attackers couldn't be audited or detected.
                            </desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-N-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-62" name="An attacker crafts malicious web links and distributes them hoping to induce users to click on the link and execute a malicious action" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level.
&lt;br&gt;This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply "riding" the existing session cookie.
&lt;br&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-352">
                  <countermeasures>
                    <countermeasure ref="ASVS-18.8" mitigation="34"/>
                    <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                    <countermeasure ref="cwe-352-csrf" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-18.8" mitigation="34"/>
                <countermeasure ref="CSD-SESS-REAUTH" mitigation="33"/>
                <countermeasure ref="cwe-352-csrf" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="open-redirect-threat" name="An attacker leverages the redirection functionality in the application to conduct more convincing phishing attacks" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An http parameter may contain a URL value for redirecting the request to another specified URL. By modifying this URL value to point towards a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy and convincing appearance.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-601">
                  <countermeasures>
                    <countermeasure ref="CWE-601" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-601" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-117" name="An attacker monitors HTTP headers from a target in order to gather information" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>An attacker monitors data streams to or from a target in order to gather information.
                                This attack may be undertaken in order to gather information to support a later attack,
                                or the data collected may be the end goal of the attack. This attack usually involves
                                sniffing network traffic, but may include observing other types of data streams, such as
                                radio. In most varieties of this attack, the attacker is passive and simply observes
                                regular communication, however in some variants the attacker may attempt to initiate the
                                establishment of a data stream or influence the nature of the data transmitted. However,
                                in all variants of this attack, and distinguishing this attack from other data
                                collection methods, the attacker is not the intended recipient of the data stream.
                                Unlike some other data leakage attacks, the attacker is observing explicit data channels
                                (e.g. network traffic) and reading the content. This differs from attacks that collect
                                more qualitative information, such as communication volume, or other information not
                                explicitly communicated via a data stream.
                            </desc>
              <riskRating confidentiality="25" integrity="25" availability="25" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="ASVS-11.5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASVS-11.5" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-267" name="Attackers encode potentially harmful input and submit it to bypass input filtering protections" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This attack leverages the possibility of encoding potentially harmful input and submitting it to applications not expecting or effective at validating this encoding, thus, thwarting the validation.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-173">
                  <countermeasures>
                    <countermeasure ref="harden-http-headers" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-235">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="50"/>
                <countermeasure ref="harden-http-headers" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="api-injection" name="Attackers feed the API with malicious data through injection vectors (e.g., direct input, parameters, integrated services, etc.), hoping for it to be sent to an interpreter" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Injection flaws are very common and are often found in SQL, LDAP, or NoSQL queries, OS commands, XML parsers, and ORM. These flaws are relatively easy to discover when reviewing the source code. Attackers can use scanners and fuzzers.&lt;/p&gt;&lt;p&gt;Injection exploits can lead to information disclosure and data loss. It could also lead to DoS, or complete host takeover in the worst scenarios.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-248: Command Injection" url="https://capec.mitre.org/data/definitions/248.html"/>
                <reference name="CAPEC-66: SQL Injection" url="https://capec.mitre.org/data/definitions/66.html"/>
              </references>
              <weaknesses>
                <weakness ref="api-vulnerable-injection">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-273" name="Attackers inject content into a server response that is interpreted differently by intermediaries than it is by the target browser" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To achieve this takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, using different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, defacement, cache poisoning, or similar actions.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-436">
                  <countermeasures>
                    <countermeasure ref="rest-content-type-val" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="rest-content-type-val" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="unpatched-api" name="Attackers may gain access to sensitive data, or even take over the server through old, unpatched, API versions connected to the same database" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  Old API versions are usually unpatched and are an easy way to compromise systems without having to fight state-of-the-art security mechanisms, which might be in place to protect the most recent API versions.
&lt;/div&gt;
&lt;div&gt;
  Outdated documentation makes it more difficult to find and/or fix vulnerabilities.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
 &lt;br&gt;
&lt;/div&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="CAPEC-310: Scanning for Vulnerable Software" url="https://capec.mitre.org/data/definitions/310.html"/>
              </references>
              <weaknesses>
                <weakness ref="lack-assets-inventory">
                  <countermeasures>
                    <countermeasure ref="inventory-api" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="inventory-api" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-137-MASS" name="Functionality could be subverted through mass assignment" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>If the application binds parameters to back-end objects, then attackers could potentially set fields on those objects that were not designed to be modified by the user.</desc>
              <riskRating confidentiality="75" integrity="75" availability="1" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-915">
                  <countermeasures>
                    <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                    <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSIGN-WHITE" mitigation="50"/>
                <countermeasure ref="WEB-SRV-XML" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-101" name="Unauthorised data could be accessed by manipulating parameters sent to the application" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>The application could be tricked into exposing data to unauthorized users by
                                manipulating the parameters it accepts. All data received from the client side could be
                                subject to manipulation, including fields like cookies and HTTP headers, if these are
                                used as inputs to the application.
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="CWE-147" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-22">
                  <countermeasures>
                    <countermeasure ref="CWE-639" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-548">
                  <countermeasures>
                    <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-650">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-147" mitigation="25"/>
                <countermeasure ref="CWE-639" mitigation="25"/>
                <countermeasure ref="DIRECTORY_LISTING" mitigation="25"/>
                <countermeasure ref="RESTRICT-HTTP-METHODS" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="7e80910b-1d71-4d8e-b743-66004cf62914" diagramComponentId="85a6936a-89c4-4218-9bdc-cd1a34c8bfe0" ref="85a95b22-8293-49eb-be6d-aaa441e54e11" name="Redis Server" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="redis-server">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:54.098">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:53.875">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-943" name="Improper Neutralization of Special Elements in Data Query Logic" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.&lt;/p&gt;&lt;p&gt;Depending on the capabilities of the query language, an attacker could inject additional logic into the query to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated&lt;/li&gt;&lt;li&gt;Append additional commands to the query&lt;/li&gt;&lt;li&gt;Return more entities than intended&lt;/li&gt;&lt;li&gt;Return fewer entities than intended&lt;/li&gt;&lt;li&gt;Cause entities to be sorted in an unexpected way&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.&lt;/p&gt;&lt;p&gt;While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and NoSQL languages.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:57.430">
              <output/>
            </source>
            <references>
              <reference name="CWE-943: Improper Neutralization of Special Elements in Data Query Logic" url="https://cwe.mitre.org/data/definitions/943.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-78" name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  There are at least two subtypes of OS command injection:&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(&amp;quot;nslookup [HOSTNAME]&amp;quot;) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.The application accepts an input that it uses to fully select which program to run, as well as which commands to use.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;The application simply redirects this entire command to the operating system. For example, the program might use &amp;quot;exec([COMMAND])&amp;quot; to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;In the first variant, the programmer clearly intends input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T11:03:53.497">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:53.497">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt; 
 &lt;li&gt;Weak encryption algorithms&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Loss of encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Compromised encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Revoked keys are still active (bad key lifecycle management)&lt;/li&gt; 
&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:53.876">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="redis-server-exposed" name="The Redis server is exposed" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;If access is permitted from other servers or public access, compromise is more likely, as the Redis server is exposed.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:53.497">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="RESTRICT-ACCESS-DATABASE" name="Access the data store from an account with the least privileges necessary" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Use an account with only the minimum set of permissions required to access the data store. The account should not be able to perform operations that are not explicitly required by the component that performs these operations. For example, if a web application needs to read data from certain tables and insert and update data from others, then a database account with only those specific permissions should be used by the application server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the user account used by external components to access this data store.&lt;/li&gt; 
 &lt;li&gt;Check which permissions are assigned to this user account.&lt;/li&gt; 
 &lt;li&gt;Verify that they are the minimum set of permissions necessary and no unnecessary permissions are assigned.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:54.037">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PATCH-SERVICE" name="Apply required security patches to the service" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Vendors and other maintainers of software release patches in response to security flaws and other bugs in their products.&amp;nbsp; The longer a system is exposed with a known security vulnerability, the easier to compromise it. &amp;nbsp;As the exploit enters the public domain, they get included in automated exploitation suites like Metasploit and a wider less skilled miscreant is able to leverage them.&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected failures or exploitation.&lt;/li&gt;&lt;li&gt;Clearly define an approach for testing and applying patches, in particular security patches, with expected timescales. &amp;nbsp;There is often a small window between the release of a patch, and potentially malicious actors reverse-engineering the patch to identify and exploit the flaw.&lt;/li&gt;&lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting services to ensure the project team is promptly aware of issues within the project or its components.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-01 Configuration Management Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/152-08_02_CM-01"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CM-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check with the software or service vendor whether security vulnerabilities and
                            their associated patches are available for the version deployed.&lt;/li&gt;
                            &lt;li&gt;Evaluate the criticality of the vulnerability and schedule a fix accordingly.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:53.691">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" name="Encrypt personal data" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement encryption at rest (see guidance below) or give a risk-based explanation as to why encryption was not implemented.&lt;br /&gt;&lt;br /&gt;Use well-known encryption libraries, taking into account the data use, and do not invent your own. 
          &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;personal data must be encrypted&lt;/li&gt;
              &lt;li&gt;data that is not used by the application (e.g. passwords, ...) should be hashed so they cannot be recovered easily&lt;/li&gt;
              &lt;/ul&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Proactive controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify that users' personal data processed by the application is encrypted at rest (e.g. databases).&lt;/li&gt;
                &lt;li&gt;If encryption is not being leveraged, verify that there is documentation outlining the reasoning for that decision.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:53.692">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For less sensitive but still restricted data, simple verification of the location of the user may suffice (e.g. IP restrictions).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For non-sensitive but non-public data, access could be restricted by IP address, limiting access to internal networks, workstations, or gateways&lt;/li&gt;&lt;li&gt;For more sensitive data, TLS client-side certificates may be appropriate&lt;/li&gt;&lt;li&gt;Where secret or other sensitive data is handled, a full authentication process to identify and validate users with single or multi-factor authentication may be required&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-21" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-21" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-21" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                &lt;li&gt;Try to obtain access to this information without any type of authentication, for example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:53.692">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer to reduce exposure" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to services should be restricted to expected sources, limiting the exposure of the service and its attack surface; and the likelihood of a malicious actor gaining access to the system.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Apply network layer security controls so that only the necessary and expected IP addresses are permitted access to connect to the service.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check that the network access to the service is only allowed for the components which need it.&lt;/li&gt; 
 &lt;li&gt;There should be a firewall protecting the network segment in which the service is installed.&lt;/li&gt; 
 &lt;li&gt;Check that the firewall restricts all access and only permits the minimum connections required using the principal of least privilege.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:53.692">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-redis-access-localhost-only" name="Secure Redis Server access to localhost only" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;By default, Redis server is - and should only be - accessible from the localhost. But if access has been allowed from other servers or public access, likelihood of compromise increases.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Open the Redis configuration file, # vim /usr/local/redis/6379.conf&lt;/li&gt;&lt;li&gt;Once opened, look for 'bind' parameter &amp;amp; change it to, bind 127.0.0.1 ::1&lt;/li&gt;&lt;li&gt;Save the file &amp;amp; exit. Now restart the Redis service to implement the changes made.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Easy guide for Securing Redis Server" url="https://linuxtechlab.com/easy-guide-for-securing-redis-server/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check the Redis server is only accessible from localhost.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:53.438">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-redis-renaming-dangerous-commands" name="Secure Redis Server by renaming or disabling dangerous commands" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In order to avoid any serious repercussions if someone gains access to their Redis server, Redis provides a way to rename some of the dangerous commands like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;LUSHDB,&lt;/li&gt;&lt;li&gt;FLUSHALL,&lt;/li&gt;&lt;li&gt;KEYS,&lt;/li&gt;&lt;li&gt;DEL,&lt;/li&gt;&lt;li&gt;CONFIG,&lt;/li&gt;&lt;li&gt;SHUTDOWN,&lt;/li&gt;&lt;li&gt;BGREWRITEAOF,&lt;/li&gt;&lt;li&gt;BGSAVE,&lt;/li&gt;&lt;li&gt;SAVE,&lt;/li&gt;&lt;li&gt;RENAME,&lt;/li&gt;&lt;li&gt;and DEBUG.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are other commands also that can be renamed but these are some of the most dangerous ones. Ensure to disable commands altogether if not needed in the application.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Disabling a command is a similar process to renaming a command, for renaming, provide an alternate name for the command, but for disabling rename it to an empty name or string.&lt;/p&gt;&lt;p&gt;To rename a command, open the configuration file, # vim /usr/local/redis/6379.conf&lt;/p&gt;&lt;p&gt;Under the 'Security' section, we can rename or disable a command. To disable a command, use the following example as a reference: rename-command FLUSHALL ""&lt;/p&gt;&lt;p&gt;For renaming a command, use the following example as reference: rename-command FLUSHALL DELETEITALL&lt;/p&gt;&lt;p&gt;Here, we have renamed FLUSHALL command to DELETEITALL (Delete It All). Once changes have been made, save the file &amp;amp; restart the Redis service to implement the changes. Now login to redis-cli &amp;amp; check the renamed commands.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Easy guide for Securing Redis Server" url="https://linuxtechlab.com/easy-guide-for-securing-redis-server/"/>
          </references>
          <standards>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Try to use the following Redis Server commands in the redis-cli and verify they do not work:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;LUSHDB,&lt;/li&gt;&lt;li&gt;FLUSHALL,&lt;/li&gt;&lt;li&gt;KEYS,&lt;/li&gt;&lt;li&gt;DEL,&lt;/li&gt;&lt;li&gt;CONFIG,&lt;/li&gt;&lt;li&gt;SHUTDOWN,&lt;/li&gt;&lt;li&gt;BGREWRITEAOF,&lt;/li&gt;&lt;li&gt;BGSAVE,&lt;/li&gt;&lt;li&gt;SAVE,&lt;/li&gt;&lt;li&gt;RENAME,&lt;/li&gt;&lt;li&gt;and DEBUG.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T11:03:53.439">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-redis-with-password" name="Secure Redis Server installation with a password" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The first operation to perform with a Redis installation, is to assign a password:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;open the configuration file. (Note:- This is the configuration file path for local installation, yours may be '/etc/redis/redis.conf' or if you have a custom installation, then go to that location. # vim /usr/local/redis/6379.conf)&lt;/li&gt;&lt;li&gt;Look for the parameter 'requirepass', and uncomment it and then assign a password, requirepass&amp;nbsp; test@9879&lt;/li&gt;&lt;li&gt;Once the changes have been made, restart the Redis service to implement the changes made. In order to connect to the redis-cli, enter the password. First, connect to redis-cli, # redis-cli&lt;/li&gt;&lt;li&gt;Now provide the password: 127.0.0.1:6379&amp;gt; auth test#9897&lt;/li&gt;&lt;li&gt;Connection to redis-cli established.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="Easy guide for Securing Redis Server" url="https://linuxtechlab.com/easy-guide-for-securing-redis-server/"/>
          </references>
          <standards>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
     &lt;ol&gt;
      &lt;li&gt;Connect to redis-cli: # redis-cli&lt;/li&gt;
      &lt;li&gt;Check that the password is required.&lt;/li&gt;
      &lt;li&gt;Provide the password: 127.0.0.1:6379&amp;gt; auth test#9897&lt;/li&gt;
      &lt;li&gt;Check that the authentication is successful.&lt;/li&gt;
     &lt;/ol&gt;
    &lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:53.439">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should used be in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:57.313">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Serialized Java objects&lt;/li&gt; 
 &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt; 
 &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt;To test data validation:&amp;nbsp; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp, Fiddler, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T11:03:57.314">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS SERVICE" name="Access service" desc="" library="CS-Default">
          <threats>
            <threat ref="VULN-SERVICE" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                    <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="AUTH-DATASTORE-LEAST-PRIV" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="secure-redis-with-password" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="secure-redis-with-password" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-341" name="Attackers gain access to user data by manipulating server-side code" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Server-Side Code Injection happens when an attacker is able to direct input under his control and mix it with executed code on the server-side by modifying the logic executed on it.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-943">
                  <countermeasures>
                    <countermeasure ref="CWE-89-PREPARED" mitigation="50"/>
                    <countermeasure ref="DATA-VAL" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-89-PREPARED" mitigation="50"/>
                <countermeasure ref="DATA-VAL" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="AUTH-DATASTORE-LEAST-PRIV" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-88" name="An adversary injects operating system commands into existing application functions" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.
    &lt;br /&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-78">
                  <countermeasures>
                    <countermeasure ref="secure-redis-renaming-dangerous-commands" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="secure-redis-renaming-dangerous-commands" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="VULN-SERVICE" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="redis-server-exposed">
                  <countermeasures>
                    <countermeasure ref="secure-redis-access-localhost-only" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="secure-redis-access-localhost-only" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="5927025a-fce3-485e-9dfb-889614d37108" diagramComponentId="0cc26ac2-be19-4533-82b2-1d86cd4e240f" ref="df661557-3440-41ad-a563-621fc3f3e0cb" name="PostgreSQL" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="postgresql">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:49.917">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-284" name="Improper Access Control" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.128">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-89" name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted and executed as SQL instead of ordinary user data. This can be leveraged to alter query logic in order to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is relatively easily detected, and often easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted automated attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:49.778">
              <output/>
            </source>
            <references>
              <reference name="CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" url="https://cwe.mitre.org/data/definitions/89.html"/>
              <reference name="OWASP Testing Guide" url="https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)#Standard_SQL_Injection_Testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-306" name="Missing Authentication for Critical Function" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.129">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;ul&gt; 
 &lt;li&gt;Weak encryption algorithms&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Loss of encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Compromised encryption keys&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Revoked keys are still active (bad key lifecycle management)&lt;/li&gt; 
&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.129">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="RESTRICT-ACCESS-DATABASE" name="Access the data store from an account with the least privileges necessary" issueId="" issueLink="" platform="" cost="1" risk="61" state="Required" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Use an account with only the minimum set of permissions required to access the data store. The account should not be able to perform operations that are not explicitly required by the component that performs these operations. For example, if a web application needs to read data from certain tables and insert and update data from others, then a database account with only those specific permissions should be used by the application server.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the user account used by external components to access this data store.&lt;/li&gt; 
 &lt;li&gt;Check which permissions are assigned to this user account.&lt;/li&gt; 
 &lt;li&gt;Verify that they are the minimum set of permissions necessary and no unnecessary permissions are assigned.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-27T12:41:49.872">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="PATCH-SERVICE" name="Apply required security patches to the service" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Vendors and other maintainers of software release patches in response to security flaws and other bugs in their products.&amp;nbsp; The longer a system is exposed with a known security vulnerability, the easier to compromise it. &amp;nbsp;As the exploit enters the public domain, they get included in automated exploitation suites like Metasploit and a wider less skilled miscreant is able to leverage them.&amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Apply patches and other software updates in a timely manner to prevent unexpected failures or exploitation.&lt;/li&gt;&lt;li&gt;Clearly define an approach for testing and applying patches, in particular security patches, with expected timescales. &amp;nbsp;There is often a small window between the release of a patch, and potentially malicious actors reverse-engineering the patch to identify and exploit the flaw.&lt;/li&gt;&lt;li&gt;Use a threat intelligence, vulnerability scanning, or other alerting services to ensure the project team is promptly aware of issues within the project or its components.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-01 Configuration Management Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/152-08_02_CM-01"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CM-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;br /&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Check with the software or service vendor whether security vulnerabilities and
                            their associated patches are available for the version deployed.&lt;/li&gt;
                            &lt;li&gt;Evaluate the criticality of the vulnerability and schedule a fix accordingly.&lt;/li&gt;
                            &lt;/ol&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.015">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" name="Encrypt personal data" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Implement encryption at rest (see guidance below) or give a risk-based explanation as to why encryption was not implemented.&lt;br /&gt;&lt;br /&gt;Use well-known encryption libraries, taking into account the data use, and do not invent your own. 
          &lt;br /&gt;
              &lt;ul&gt;
              &lt;li&gt;personal data must be encrypted&lt;/li&gt;
              &lt;li&gt;data that is not used by the application (e.g. passwords, ...) should be hashed so they cannot be recovered easily&lt;/li&gt;
              &lt;/ul&gt;
          </desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OWASP Pro active controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
            <reference name="OWASP Proactive controls [C8]" url="https://www.owasp.org/images/b/bc/OWASP_Top_10_Proactive_Controls_V3.pdf"/>
          </references>
          <standards>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="8.3.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                &lt;ol&gt;
                &lt;li&gt;Verify that users' personal data processed by the application is encrypted at rest (e.g. databases).&lt;/li&gt;
                &lt;li&gt;If encryption is not being leveraged, verify that there is documentation outlining the reasoning for that decision.&lt;/li&gt;
                &lt;/ol&gt;
                &lt;/div&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.016">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-306-SERVICE" name="Require authentication before presenting restricted data" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The application should ensure users have undergone an Identification and Verification (ID&amp;amp;V) process before allowing access to secret, sensitive or otherwise restricted data. For less sensitive but still restricted data, simple verification of the location of the user may suffice (e.g. IP restrictions).&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For non-sensitive but non-public data, access could be restricted by IP address, limiting access to internal networks, workstations, or gateways&lt;/li&gt;&lt;li&gt;For more sensitive data, TLS client-side certificates may be appropriate&lt;/li&gt;&lt;li&gt;Where secret or other sensitive data is handled, a full authentication process to identify and validate users with single or multi-factor authentication may be required&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="EU GDPR - EU Data Protection" url="https://ec.europa.eu/justice/data-protection/reform/files/regulation_oj_en.pdf"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA IA-01 Identification And Authentication Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/181-08_02_IA-01"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-21" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-21" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-21" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-22" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-22" supportedStandardRef="NIST 800-53"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="IA-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="IA-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.CO-3" supportedStandardRef="nist-csf"/>
            <standard ref="SI-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                &lt;li&gt;Identify which parts of the service present sensitive data.&amp;nbsp;&lt;/li&gt;
                &lt;li&gt;Try to obtain access to this information without any type of authentication, for example, attempt to navigate directly to URLs that present sensitive data.&lt;/li&gt;
                &lt;/ol&gt;
            </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.016">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="RESTRICT-SERVICE" name="Restrict access to the service at the network layer to reduce exposure" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access to services should be restricted to expected sources, limiting the exposure of the service and its attack surface; and the likelihood of a malicious actor gaining access to the system.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Apply network layer security controls so that only the necessary and expected IP addresses are permitted access to connect to the service.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Juice Shop: Broken Authentication" url="https://pwning.owasp-juice.shop/part2/broken-authentication.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.7.18" supportedStandardRef="iotsf-class-2"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A07:2021-Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A2:2017-Broken Authentication" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API1:2019-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Check that the network access to the service is only allowed for the components which need it.&lt;/li&gt; 
 &lt;li&gt;There should be a firewall protecting the network segment in which the service is installed.&lt;/li&gt; 
 &lt;li&gt;Check that the firewall restricts all access and only permits the minimum connections required using the principal of least privilege.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:50.016">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should used be in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-27T12:41:49.679">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="ACCESS SERVICE" name="Access service" desc="" library="CS-Default">
          <threats>
            <threat ref="VULN-SERVICE" name="Attackers gain access to unauthorised data by exploiting vulnerabilities in the service" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Attackers exploit vulnerabilities in the service and gain access to data, or to
                                services for which they are not authorized.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                    <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="PATCH-SERVICE" mitigation="50"/>
                <countermeasure ref="RESTRICT-SERVICE" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-115" name="Authentication Bypass" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An attacker gains access to the application, service, or device with the privileges of an authorized or privileged user by evading - or circumventing - an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. &lt;/p&gt; This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to access secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-306">
                  <countermeasures>
                    <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-306-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="EU-GDPR-DATA_LEAKAGE-UNAUTHZ-PARTIES" name="Data leakage or disclosure to unauthorized parties" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An unauthorized party might access/breach the personal data of a data subject.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="EU-GDPR-MISSING-ENCRYPTION-SENSITIVE-DATA">
                  <countermeasures>
                    <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="EU-GDPR-ENCRYPT-PERSONAL-DATA" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication" name="Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="AUTH-DATASTORE-LEAST-PRIV" name="Attackers who compromise the application or application server could directly access and modify the data store" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>If attackers gain access to the application or the application server, then they could
                                directly access the data store using the privilege assigned to the application.
                                &lt;div&gt;
                                If the data store user account used by the application has elevated privileges then this
                                could allow attackers to perform unauthorized operations such as dropping tables,
                                modifying the database schema or modifying data.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="1" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="RESTRICT-ACCESS-DATABASE" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-66" name="Attackers gain unauthorised access to data and/or systems through SQL Injection attacks" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;Successful SQL Injection attacks could lead to full compromise of the database or to a partial compromise of only the data visible to the application.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Typically, these types of attacks result in unauthorized disclosure of sensitive data, but can also be used to inject spurious data into the database or to drop tables and deny services to legitimate users.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-89">
                  <countermeasures>
                    <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="00aff6c2-f18c-4317-98d5-056f2e20e224" diagramComponentId="4536b78b-e1a0-4b2d-8415-c73dfb9c9997" ref="b0cec9ef-1745-4dcf-9c27-597a3d8c5c1a" name="Web UI" desc="" library="CS-Default" parentComponentRef="295a899b-e1f6-4ff3-8227-1dd1855f2ab6" componentDefinitionRef="web-ui">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-798, CWE-603" name="Client side code stores secret keys, sensitive business logic or other proprietary information" state="0" impact="100" issueId="" issueLink="">
          <desc>When client side code is fully controlled by the user, a malicious user may be able to read the code or reverse engineer it if it is compiled in any form. If the client side code includes secret keys, sensitive business logic (like client authentication) or proprietary information, all of this is directly exposed to the user, allowing them to get the sensitive information or study the business logic with the aim of bypassing it.&amp;nbsp; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Some examples of this vulnerability are:&amp;nbsp; 
 &lt;div&gt; 
  &lt;ul&gt; 
   &lt;li&gt;Performing an authentication on the client side without server side validation.&amp;nbsp;&lt;/li&gt; 
   &lt;li&gt;Making privileged calls from the client based solely on client side conditions (i.e. a cash check on the client side to place an order on an e-commerce platform).&lt;/li&gt; 
   &lt;li&gt;&amp;nbsp;Hard-coding keys and secrets on the client side to make client-to-client calls without a proxy.&lt;/li&gt; 
  &lt;/ul&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:51.266">
              <output/>
            </source>
            <references>
              <reference name="CWE-602: client-side Enforcement of Server-Side Security" url="https://cwe.mitre.org/data/definitions/602.html"/>
              <reference name="CWE-603: Use of client-side Authentication" url="https://cwe.mitre.org/data/definitions/603.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-250" name="Execution with Unnecessary Privileges" state="0" impact="100" issueId="" issueLink="">
          <desc>The software performs an operation at a privilege level that is higher than the minimum level
                        required, which creates new weaknesses or amplifies the consequences of other weaknesses.

                        New weaknesses can be exposed because running with extra privileges, such as root or
                        Administrator, can disable the normal security checks being performed by the operating system or
                        surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if
                        they occur while operating at raised privileges. Privilege management functions can behave in
                        some less-than-obvious ways, and they have different quirks on different platforms. These
                        inconsistencies are particularly pronounced if you are transitioning from one non-root user to
                        another. Signal handlers and spawned processes run at the privilege of the owning process, so if
                        a process is running as root when a signal fires or a sub-process is executed, the signal
                        handler or sub-process will operate with root privileges.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:50.977">
              <output/>
            </source>
            <references>
              <reference name="CWE-250: Execution with Unnecessary Privileges" url="https://cwe.mitre.org/data/definitions/250.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-79" name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not neutralize or incorrectly neutralizes user-controllable input before it
                        is placed in output that is used as a web page that is served to other users. Cross-site
                        scripting (XSS) vulnerabilities occur when:
                        &lt;ol&gt;
                        &lt;li&gt;Untrusted data enters a web application, typically from a web request.&lt;/li&gt;
                        &lt;li&gt;The web application dynamically generates a web page that contains this untrusted
                        data.&lt;/li&gt;
                        &lt;li&gt;During page generation, the application does not prevent the data from containing
                        content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes,
                        mouse events, Flash, ActiveX, etc.&lt;/li&gt;
                        &lt;li&gt;A victim visits the generated web page through a web browser, which contains malicious
                        script that was injected using the untrusted data.&lt;/li&gt;
                        &lt;li&gt;Since the script comes from a web page that was sent by the web server, the victim's
                        web browser executes the malicious script in the context of the web server's domain.&lt;/li&gt;
                        &lt;li&gt;This effectively violates the intention of the web browser's same-origin policy, which
                        states that scripts in one domain should not be able to access resources or run code in a
                        different domain.&lt;/li&gt;
                        &lt;/ol&gt;There are three main kinds of XSS:
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 1: Reflected XSS (or Non-Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The server reads data directly from the HTTP request and reflects it back in the HTTP response.
                        Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a
                        vulnerable web application, which is then reflected back to the victim and executed by the web
                        browser. The most common mechanism for delivering malicious content is to include it as a
                        parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed
                        in this manner constitute the core of many phishing schemes, whereby an attacker convinces a
                        victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's
                        content back to the victim, the content is executed by the victim's browser.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 2: Stored XSS (or Persistent)&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        The application stores dangerous data in a database, message forum, visitor log, or other
                        trusted data store. At a later time, the dangerous data is subsequently read back into the
                        application and included in dynamic content. From an attacker's perspective, the optimal place
                        to inject malicious content is in an area that is displayed to either many users or particularly
                        interesting users. Interesting users typically have elevated privileges in the application or
                        interact with sensitive data that is valuable to the attacker. If one of these users executes
                        malicious content, the attacker may be able to perform privileged operations on behalf of the
                        user or gain access to sensitive data belonging to the user. For example, the attacker might
                        inject XSS into a log message, which might not be handled properly when an administrator views
                        the logs.
                        &lt;/blockquote&gt;
                        &lt;ul&gt;
                        &lt;li&gt;&lt;b&gt;Type 0: DOM-Based XSS&lt;/b&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;blockquote&gt;
                        In DOM-based XSS, the client performs the injection of XSS into the page; in the other types,
                        the server performs the injection. DOM-based XSS generally involves server-controlled, trusted
                        script that is sent to the client, such as Javascript that performs sanity checks on a form
                        before the user submits it. If the server-supplied script processes user-supplied data and then
                        injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is
                        possible.Once the malicious script is injected, the attacker can perform a variety of malicious
                        activities. The attacker could transfer private information, such as cookies that may include
                        session information, from the victim's machine to the attacker. The attacker could send
                        malicious requests to a web site on behalf of the victim, which could be especially dangerous to
                        the site if the victim has administrator privileges to manage that site. Phishing attacks could
                        be used to emulate trusted web sites and trick the victim into entering a password, allowing the
                        attacker to compromise the victim's account on that web site. Finally, the script could exploit
                        a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes
                        referred to as &amp;quot;drive-by hacking&amp;quot;.
                        &lt;/blockquote&gt;
                        &lt;blockquote&gt;
                        &lt;br /&gt;
                        &lt;/blockquote&gt;In many cases, the attack can be launched without the victim even being aware
                        of it. Even with careful users, attackers frequently use a variety of methods to encode the
                        malicious portion of the attack, such as URL encoding or Unicode, so the request looks less
                        suspicious.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.977">
              <output/>
            </source>
            <references>
              <reference name="CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" url="https://cwe.mitre.org/data/definitions/79.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-830" name="Inclusion of Web Functionality from an Untrusted Source" state="0" impact="100" issueId="" issueLink="">
          <desc>The software includes web functionality (such as a web widget)
                        from another domain, which causes it to operate within the domain of the
                        software, potentially granting total access and control of the software to the
                        untrusted source.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:50.769">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-20" name="Input to exported activities, intents or content providers is not validated" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not validate or incorrectly validates input that can affect the control flow
                        or data flow of a program.

                        When software does not validate input properly, an attacker is able to craft the input in a form
                        that is not expected by the rest of the application. This will lead to parts of the system
                        receiving unintended input, which may result in altered control flow, arbitrary control of a
                        resource, or arbitrary code execution.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.644">
              <output/>
            </source>
            <references>
              <reference name="CWE-20: Input to exported activities, intents or content providers is not validated" url="https://cwe.mitre.org/data/definitions/20.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693-NOSNIFF" name="Internet Explorer could allow Cross Site Scripting attacks through content sniffing" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The product does not use - or incorrectly uses - a protection mechanism providing defense against attacks on the product. This weakness covers three distinct situations:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A "missing" protection mechanism occurs when the application does not define any mechanism against a certain class of attack.&lt;/li&gt;&lt;li&gt;An "insufficient" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended.&lt;/li&gt;&lt;li&gt;An "ignored" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;&lt;/ul&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.976">
              <output/>
            </source>
            <references>
              <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-84-HTTP-ONLY" name="Lack of 'HttpOnly' flag on session cookie" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The web application improperly neutralizes user-controlled input for executable scripts disguised with URI encodings.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.977">
              <output/>
            </source>
            <references>
              <reference name="CWE-84: Improper Neutralization of Encoded URI Schemes in a Web Page" url="https://cwe.mitre.org/data/definitions/84.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="WEB-CSP" name="Lack of Content Security Policy version 2 (CSPv2)" state="0" impact="100" issueId="" issueLink="">
          <desc>Content Security Policy (CSP) is a computer security standard introduced to prevent cross-site
                        scripting (XSS), click jacking and other code injection attacks resulting from execution of
                        malicious content in the trusted web page context.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.977">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="lack-automated-vuln-identification" name="Lack of automated vulnerability identification" state="0" impact="100" issueId="" issueLink="">
          <desc>Developmental security testing/evaluation is not enforced during post-design phases of the system development life cycle. Such testing/evaluation is necessary because it confirms that the required security controls are implemented correctly, operating as intended, enforcing the desired security policy, and meeting established security requirements.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:50.502">
              <output/>
            </source>
            <references>
              <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-311" name="Missing Encryption of Sensitive Data" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not encrypt sensitive or critical information
                        before storage or transmission.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:51.267">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-312" name="Secrets, API keys and or passwords are included in the source code or online repositories" state="0" impact="100" issueId="" issueLink="">
          <desc>API keys, passwords or secrets included in the source code or in the configuration files can be leaked to users with access to the code. This access can be incidentally granted by publishing the source code on a package-form or an online, public repository.

          The unauthorized access to any of those secrets could lead to a compromise of sensitive data or a system.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:51.267">
              <output/>
            </source>
            <references>
              <reference name="CWE-312: Secrets, API keys and or passwords are included in the source code or online repositories" url="https://cwe.mitre.org/data/definitions/312.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693-CLICKJACK" name="The page can be included in an iframe" state="0" impact="100" issueId="" issueLink="">
          <desc>The product does not use or incorrectly uses a protection mechanism that provides sufficient
                        defense against directed attacks against the product. This weakness covers three distinct
                        situations:
                        &lt;div&gt;
                        &lt;ul&gt;
                        &lt;li&gt;A &amp;quot;missing&amp;quot; protection mechanism occurs when the application does
                        not define any mechanism against a certain class of attack.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;An &amp;quot;insufficient&amp;quot; protection mechanism might provide some defenses -
                        for example, against the most common attacks - but it does not protect against everything that
                        is intended.&amp;nbsp;&lt;/li&gt;
                        &lt;li&gt;Finally, an &amp;quot;ignored&amp;quot; mechanism occurs when a mechanism is available
                        and in active use within the product, but the developer has not applied it in some code path.&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;/div&gt;
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.977">
              <output/>
            </source>
            <references>
              <reference name="CWE-693: Protection Mechanism Failure" url="https://cwe.mitre.org/data/definitions/693.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-477" name="Use of Obsolete Function" state="0" impact="75" issueId="" issueLink="">
          <desc>The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.
&lt;br /&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:51.266">
              <output/>
            </source>
            <references>
              <reference name="CWE-477: Use of Obsolete Function" url="https://cwe.mitre.org/data/definitions/477.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-327" name="Use of a Broken or Risky Cryptographic Algorithm" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in
                        the exposure of sensitive information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:51.267">
              <output/>
            </source>
            <references>
              <reference name="CWE-327: Use of a Broken or Risky Cryptographic Algorithm" url="https://cwe.mitre.org/data/definitions/327.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="WEB-CSP" name="Define a restrictive 'least privilege' Content Security Policy" issueId="" issueLink="" platform="" cost="1" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Content-Security-Policy instructs compliant browsers on how they may interact with external sites while in the current context. This enables the server to control interactive code and content from third parties, mitigating some client-side code injection attacks. The policy allows the server to specify what connections are permitted for each type of resource.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example, the following policy tells the browser to allow connections (including websockets) to the same domain to which the page was served: *.iriusrisk.com.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src 'self' wss://*.iriusrisk.com; img-src 'self' data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define and set a Content-Security-Policy with least-privileges to allow only those interactions which are explicitly required.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to determine if a&amp;nbsp;&lt;i&gt;Content-Security-Policy&amp;nbsp;&lt;/i&gt;header is returned, and if so, that it follows the security practice of least-privilege.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component end-points.&lt;/li&gt;&lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite):&lt;ul&gt;&lt;li&gt;Browse the site through the proxy.&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For more information on &lt;i&gt;Content-Security-Policy&lt;/i&gt; policy setup, see:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.876">
              <output/>
            </source>
            <references>
              <reference name="Mozilla Developer Documentation - CSP" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-319-TRANSPORT" name="Encrypt data between the client and server/service" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Data passed between the client and server should be protected by encryption in transit.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement cryptographically strong TLS end-to-end encryption between the client and server, terminating within a secure environment on the server-side.&lt;/li&gt;&lt;li&gt;Consider use of client certificates to prevent interception of (or man-in-the-middle attacks on) the encrypted connection.&lt;/li&gt;&lt;li&gt;Alternatively, asymmetric (public-key) encryption could be utilized and a recognized, proven, and tested implementation/library should be used&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA AC-14 Permitted Actions Without Identification Or Authentication" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/38-08_02_AC-14"/>
            <reference name="OSA AC-16 Automated Labeling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/198-08_02_AC-16"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
          </references>
          <standards>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="164.312(a)(1)(D)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="164.312(e)(1)(A)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L1+R"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2"/>
            <standard ref="5.1" supportedStandardRef="OWASP-MASVS-L2+R"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="9.2.4" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-14" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-16" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Check client to server connections use and enforce established encryption protocols, e.g. TLSv1.2.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Verify only strong cipher suites are in use and permitted.&lt;/li&gt;&lt;li&gt;Ensure attempts to use unencrypted transport mechanisms are rejected or redirected (e.g. HTTP instead of HTTPS)&lt;/li&gt;&lt;li&gt;Review configuration of protocols and services against best-practice guidelines.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:51.136">
              <output/>
            </source>
            <references>
              <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASSETS-HOSTED-BY-APP" name="Ensure that all application assets are hosted by the application" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Review periodically all assets which are accessed by the application and ensure that these
                        assets are hosted by the application. If this is not the case and there are assets in external
                        providers or a CDN, you shall move these assets to be hosted by the application and remove them
                        from external providers or CDNs.
                    </desc>
          <implementations/>
          <references>
            <reference name="OSA SI-07 Software And Information Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/45-08_02_SI-07"/>
          </references>
          <standards>
            <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-8" supportedStandardRef="nist-csf"/>
            <standard ref="SI-7" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all assets are hosted by the application, and not by external providers.
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:50.718">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="INS-CLIENT" name="Ensure the application does not use unsupported, insecure, or deprecated client-side technologies" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure the application does not use unsupported, insecure, or deprecated client-side technologies such as: NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.14.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;
 &lt;li&gt;Test the presence of any client side applet such as Flash, ActiveX and Silverlight.&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:51.138">
              <output/>
            </source>
            <references>
              <reference name="Testing Information Gathering" url="https://www.owasp.org/index.php/Testing_Information_Gathering"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CS-CLIENT-SECRET" name="Implement sensitive logic and data validation on the server-side" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data and functionalities on the client-side must be considered tainted and subject to manipulation by a malicious actor, regardless of the controls in place (e.g. encryption or obfuscation of client-side code or content). &lt;/p&gt; This includes application logic decisions, such as access controls, and data considered sensitive or secret, such as encryption keys. While controls may be duplicated on the client-side to improve the user experience, it is important to have these enforced on the server-side.&amp;nbsp; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Business logic, in particular access controls, must be implemented on the server-side.&lt;/li&gt; 
  &lt;li&gt;Secret data should be stored on the server-side, and only what is explicitly required should be duplicated on the client-side.&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt;All data provided from the client-side (even from binary clients) should be considered tainted, and security decisions should not be made solely on this data. For example, an insecure implementation could include a compiled application (e.g. Flash!) performing authentication on the client-side against a stored password. The decompilation of the binary (in this case flv file) or the interception and modification of controls between the client and server could expose the password or allow unauthorized access to the authenticated application content. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.7" supportedStandardRef="iotsf-class-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-1" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-24" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify where critical decisions are made on the application. Key areas include:&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;authentication&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;input validation&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;access to resources&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;state bypasses&amp;nbsp;&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;li&gt;Ensure those decisions are made or validated on the server side, particularly where client-side controls are implemented.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Verify that sensitive data passed to the client side is appropriate, and ensure no inappropriate data is stored or hard-coded into client-side components, for example&amp;nbsp;&lt;/li&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Personally Identifiable Information.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Financial data, in particular cardholder data (as defined by the &lt;span class="caps"&gt;PCI&lt;/span&gt; Council).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Application secrets - such as symmetric encryption keys or passwords.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:51.137">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-79-ENCODE" name="Perform contextual HTML encoding of all user submitted data" issueId="" issueLink="" platform="" cost="1" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received from the client-side should be considered tainted and a potential risk. If handled properly at the point of input, this untrusted tainted data should have been sanitized and encoded safely. The context when returning the data to the user is important, however, as this will affect what metacharacters have significance, and how they will be interpreted at the client-side. &lt;/p&gt;

 For example, if data is inserted into the &lt;span class="caps"&gt;HTML&lt;/span&gt; body then &lt;span class="caps"&gt;HTML&lt;/span&gt; Entity encoding should be performed, but if the data is inserted into a JavaScript block, then JavaScript escaping should be performed. Similarly, while JavaScript code should not be executed in the browser when returned in an application/json response, it may then be rendered in an unsafe manner. 
 - Apply contextual encoding to all tainted data when returned to the users (including secondary users if the application has multiple interfaces - e.g. an internal user viewing data entered by an external customer).
 - This should be in addition to, and in conjunction with, sanitization and encoding applied at the time of data acquisition.</desc>
          <implementations>
            <implementation platform=".NET">
              <desc>ClJlc3BvbnNlLldyaXRlKEh0dHBVdGlsaXR5Lkh0bWxFbmNvZGUoUmVxdWVzdC5Gb3JtWyJuYW1lIl0pKTs=</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-02 Flaw Remediation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/40-08_02_SI-02"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OWASP Juice Shop: XSS" url="https://pwning.owasp-juice.shop/part2/xss.html"/>
          </references>
          <standards>
            <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.11" supportedStandardRef="iotsf-class-2"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A7:2017-Cross-Site Scripting (XSS)" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-12" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-2" supportedStandardRef="nist-csf"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Identify the areas of the application in which tainted data acquired from outside the application presented back (e.g. user input, uploaded files, third party content)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Review the encoding and sanitization applied to the data before presentation.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;If possible, pass metacharacters and other unexpected content through the application to review the efficacy of the encoding.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.877">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="excessive-permissions" name="Request only the minimum required permissions" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Security best practices dictate that the practice of least-privilege be followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
  Request only the minimum required permissions. For example, if there is no requirement to use the camera then the application should not request this permission.
&lt;/div&gt;
&lt;div&gt;
  Review features and functionalities present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them along with associated OS permissions.
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that the application only requests the necessary permissions to work correctly.
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:50.877">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSD-CLIENT-SECRET" name="Review code, configuration, and online repositories for secrets and sensitive information systemically" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secret or sensitive information should not be exposed in source-code or client-side software.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Code and online repositories must not contain secrets or sensitive information.&lt;/li&gt;&lt;li&gt;Configuration files on the client- and server-side must not contain hard-coded credentials or other sensitive data.&lt;/li&gt;&lt;li&gt;Online repositories, services, and other associated restricted content must have appropriate access controls in place.&lt;/li&gt;&lt;li&gt;Where sensitive information must be stored on the server side, it should be in memory for transient data, or encrypted if persistent. &amp;nbsp;Depending on the use case, this encryption may be asymmetric or public key, or symmetric using a shared secret. Note however that reversible encryption on the client-side and in-memory storage are still susceptible to client-side attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="2.10.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="AU-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Use automated tools to regularly search for keywords or regular expression patterns within the code, configuration and other files exposed on the client and server-side, and any remote repositories.&lt;/li&gt;&lt;li&gt;The scanning process must be triggered before the code is published (in particular for public/open source code) as once published it is likely to be archived (and any disclosed secrets would be exposed and/or have to be changed)&lt;/li&gt;&lt;li&gt;Review criteria and requirements for any temporary or persistent storage of sensitive or secret data on the client-side, and the protections in place.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:51.137">
              <output/>
            </source>
            <references>
              <reference name="Amazon git-secrets" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Microsoft Exchange 2016 Sensitive Information Patterns" url="https://technet.microsoft.com/en-us/library/jj150541(v=exchg.160).aspx"/>
              <reference name="Prevents you from committing secrets and credentials into git repositories" url="https://github.com/awslabs/git-secrets"/>
              <reference name="Seekret" url="https://github.com/apuigsech/seekret"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="use-analysis-static-code" name="Scan the code with static code analysis tools" issueId="" issueLink="" platform="" cost="0" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Use periodically a static code analysis tool to analyze the code and detect potentially malicious code, such as time functions, unsafe file operations and networks connections. With the scanning of static code, we ensure the integrity of the application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that a code analysis tool is in use and it is configured to detect potentially malicious code, such as time functions, unsafe file operations and network connections. 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:50.464">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-attributes-of-cookies" name="Secure Cookies with their attributes" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The session ID exchange mechanism based on cookies provides multiple security features in the form of cookie attributes that can be used to protect the exchange of the session ID:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Secure and HttpOnly Attribute:&lt;/strong&gt;&amp;nbsp;a secure cookie is only sent to the server with an encrypted request over the HTTPS protocol. Even with Secure, sensitive information should never be stored in cookies, as they are inherently insecure and this flag doesn't offer robust protection. Starting with Chrome 52 and Firefox 52, insecure sites (http:) can't set cookies with the Secure directive.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To mitigate cross-site scripting (XSS) attacks, HttpOnly cookies are inaccessible to JavaScript's Document.cookie API; they are only sent to the server. For example, cookies that persist server-side sessions don't need to be available to JavaScript, and so the HttpOnlyflag should be set.&lt;/p&gt;&lt;p&gt;Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;SameSite Attribute: &amp;nbsp;&lt;/strong&gt;The SameSite attribute should be configured to limit exposure against cross-site request forgery attacks. There are two possibilities:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Strict:&lt;/strong&gt; the browser will only send cookies if the request originated from the website that set the cookie. If the request originated from a different URL than the URL of the current location, none of the cookies tagged with the Strict attribute will be included.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Lax:&lt;/strong&gt; if the attribute is set to Lax, same-site cookies are withheld on cross-site subrequests, such as calls to load images or frames, but will be sent when a user navigates to the URL from an external site, for example, by following a link.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;By default SameSite is not configured, we need to configure it with one of the above types, as shown below:&lt;/p&gt;&lt;p&gt;Set-Cookie: key=value; SameSite=Strict&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Domain and Path Attributes:&lt;/strong&gt; The session token value issued after users have successfully identified and authenticated themselves is of equivalent value to the secrets the user presents to login, and must be protected accordingly.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the cookie domain attribute is too liberal, the cookie may be accessible to other hosts within the parent domain. This is a particular issue in multi-tenanted hosting, or where applications are delivered as subdomains of a third party parent domain.&lt;/li&gt;&lt;li&gt;If the cookie path attribute is not appropriately restricted, the session token may be accessible from other applications or content on the server.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The domain and the path attributes for the session cookie should be restricted to the fully qualified hostname on which the application is running.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example:&lt;/p&gt;&lt;p&gt;Set-Cookie: session=token; Path=/theapp/; Domain=myapp.example.com; secure; HTTPOnly&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;__Host- prefix:&lt;/strong&gt; ensure that all Cookies with a name starting with __Host- are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;set with the secure flag,&lt;/li&gt;&lt;li&gt;from a secure page (HTTPS),&lt;/li&gt;&lt;li&gt;does not have a domain specified (and therefore aren't sent to subdomains)&lt;/li&gt;&lt;li&gt;and the path must be "/".&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="HttpOnly" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"/>
            <reference name="OWASP Proactive Controls [C6]" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="OWASP XSS (Cross Site Scripting) Prevention Cheat Sheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md"/>
            <reference name="Owasp Cheatsheet: Session Management" url="https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
            <reference name="__Host-Prefix" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie"/>
          </references>
          <standards>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="3.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1" supportedStandardRef="nist-800-63"/>
            <standard ref="7.1.1" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Using a browser, open the Web Developer tools.&lt;/li&gt;&lt;li&gt;Load the Network inspection tab.&lt;/li&gt;&lt;li&gt;Load the endpoints of the application which set cookies (send the Set-Cookie HTTP header).&lt;/li&gt;&lt;li&gt;Check that within the HTTP response, the Set-Cookie has:&lt;ul&gt;&lt;li&gt;the path and domain attributes set to the most restrictive path and domain respectively.&lt;/li&gt;&lt;li&gt;'HttpOnly' and 'secure' flag set and configured&lt;/li&gt;&lt;li&gt;'SameSite' attribute configured.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Check that all Cookies with a name starting with __Host- are:&lt;ul&gt;&lt;li&gt;set with the secure flag,&lt;/li&gt;&lt;li&gt;from a secure page (HTTPS),&lt;/li&gt;&lt;li&gt;does not have a domain specified (and therefore aren't sent to subdomains)&lt;/li&gt;&lt;li&gt;and the path is"/".&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.877">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-693-NOSNIFF" name="Set the HTTP security header 'X-Content-Type-Options' from the server" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;A number of browser-based attacks rely on incorrectly stating MIME types on content in an attempt to bypass server and browser controls to render malicious content to the user.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set the &lt;i&gt;X-Content-Type-Options: nosniff&lt;/i&gt;&amp;nbsp;header on any page that displays previously uploaded content to prevent some XSS and related attacks.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
                            &lt;ol&gt;
                            &lt;li&gt;Review the HTTP Server responses to ensure the&amp;nbsp;&lt;i&gt;&lt;i&gt;X-Content-Type-Options:
                            nosniff&lt;/i&gt;&amp;nbsp;&lt;/i&gt;header is returned.&lt;/li&gt;
                            &lt;li&gt;Using a browser:&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Open the Web Developer Console.&amp;nbsp;&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Make requests to the different component's endpoints.&amp;nbsp;&lt;/li&gt;
                            &lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;/li&gt;
                            &lt;ul&gt;
                            &lt;li&gt;Browse the site through the proxy&lt;/li&gt;
                            &lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;
                            &lt;/ul&gt;
                            &lt;/ol&gt;
                            &lt;/div&gt;
                        </steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.877">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="@cwe-693-clickjack" name="Set the HTTP security header 'X-Frame-Options header' from the server" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Prevent the page from being framed by setting the X-Frame-Options header&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Set the X-Frame-Options header to the value: SAMEORIGIN or DENY. &amp;nbsp;This header is honored by the following browser versions:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Chrome 4.1.249.1042&lt;/li&gt;&lt;li&gt;Firefox (Gecko) 3.6.9&lt;/li&gt;&lt;li&gt;Internet Explorer 8.0 9.0&lt;/li&gt;&lt;li&gt;Opera 10.50Safari 4.0&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Newer versions may also support the additional value: ALLOW-FROM which allows specifying URLs that are permitted to frame the page.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="CM-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to ensure the&lt;i&gt;&amp;nbsp;X-Frame-Options: DENY &lt;/i&gt;header is returned.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the component's endpoints.&lt;/li&gt;&lt;li&gt;Verify the following header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite)&lt;ul&gt;&lt;li&gt;Browse the site through the proxy&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.877">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="secure-communication-ra-and-csp" name="Use secure communication between CSP and RA" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;In situations where the verifier and CSP are separate entities, communications between RA (Registration Authority) and CSP (Credential Service Provider), should be authenticated with a mutually-authenticated secure channel, such as a client-authenticated TLS connection, using approved cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;NIST's digital identity model involves some entities:&lt;/p&gt;
&lt;p&gt;- CSP (Credential Service Provider): A credential service provider is a trusted entity that issues security tokens or electronic credentials to subscribers. A CSP forms part of an authentication system, most typically identified as a separate entity in a Federated authentication system. A CSP may be an independent third party, or may issue credentials for its own use. Credential Service Provider is typically also the Identity Provider (IDP). An example of a CSP would be an online site whose primary purpose may be, for example, internet banking - but whose users may be subsequently authenticated to other sites, applications or services without further action on their part.&lt;/p&gt;
&lt;p&gt;- Registration Authority (RA): A trusted entity that establishes and vouches for the identity of a subscriber to a CSP. The RA may be an integral part of a CSP, or it may be independent of a CSP, but it has a relationship to the CSP.&lt;/p&gt;
&lt;p&gt;- Verifier: This refers to an entity that verifies the claimant's identity by verifying the claimant's possession and control of one or two authenticators, using an authentication protocol.&lt;/p&gt;
&lt;p&gt;- RP (Relying party): This refers to an entity that relies on the subscriber's authenticator(s) and credentials or a verifier's assertion of a claimant's identity, typically to process a transaction or grant access to information or a system.&lt;/p&gt;
&lt;p&gt;- Applicant: This refers to a subject undergoing the processes of enrollment and identity proofing.&lt;/p&gt;
&lt;p&gt;- Claimant: This refers to a subject whose identity is to be verified using one or more authentication protocols.&lt;/p&gt;
&lt;p&gt;- Subscriber: This refers to a party who has received a credential or an authenticator from a CSP.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST 800-63-1" url="https://csrc.nist.rip/groups/SMA/forum/documents/feb2012_nist-sp-800-63-1_newton-perlner.pdf"/>
            <reference name="NIST 800-63C" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="2.2.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="nist-800-63"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Verify the CSP and RA communicate securely with a secure channel, for example with TLS.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:51.138">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="46" state="Recommended" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API8:2019-Injection" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="CA-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-3" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="SC-13" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-13" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-1" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-15" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Forms with user input (including hidden fields)&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; calls&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Application states such as &lt;span class="caps"&gt;ASP&lt;/span&gt; Viewstates&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Serialized Java objects&lt;/li&gt; 
 &lt;li&gt;Any data structure received from the client-side&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt; 
 &lt;li&gt;Where possible, define a white-list of accepted input or characters&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&amp;nbsp;&lt;/li&gt; 
&lt;/ul&gt;To test data validation:&amp;nbsp; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Pass invalid input to the application and review error trapping and handling.&amp;nbsp;&lt;/li&gt; 
 &lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;/p&gt; A number of tools can be used to aid in testing: 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Directly from your browser with the Developer Tools.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. &lt;span class="caps"&gt;OWASP&lt;/span&gt; &lt;span class="caps"&gt;ZAP&lt;/span&gt;, Burp, Fiddler, etc.).&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:50.579">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-295-CLIENT" name="Validate the certificate presented by the server" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Certificates presented by the server must be valid, provable, and cryptographically secure in order to derive the benefits of TLS encrypted communications.&amp;nbsp; Invalid certificates expose the application and its users to spoofing attacks such as Man In The Middle (MITM) where data may be intercepted or redirected to a malicious site, and undermine confidence in the site.&lt;/p&gt;&lt;p&gt;Validate the certificate presented by the server is signed by a trusted Certificate Authority.&lt;/p&gt;&lt;p&gt;Ensure the certificate chain of trust is legitimate and secure.&lt;/p&gt;&lt;p&gt;Verify cryptographically secure ciphers are in use throughout the chain, in particular strong hashing algorithms for certificate signatures.&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-11 Trusted Path" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/71-08_02_SC-11"/>
            <reference name="OSA SC-17 Public Key Infrastructure Certificates" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/77-08_02_SC-17"/>
          </references>
          <standards>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.9.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="SC-11" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-17" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-17" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify the client is conducting appropriate checks and receives a positive response regarding the validity and quality of the site certificate.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the server certificate, and those in the trust chain.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:51.137">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-327" name="Validate the TLS implementation in use" issueId="" issueLink="" platform="" cost="0" risk="0" state="N/A" owner="iriusrisk21@st.by" library="CS-Default" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;There are a number of established open- and closed- source TLS implementations in use, which have undergone extensive review and testing by the developers, as well as third-parties in the development, security, and cryptography space. Typically, these widely used implementations have a lower risk of exploitation compared with privately developed - or less known - implementations (although vulnerabilities such as Heartbleed highlight this is not universally true) due to this additional scrutiny scrutiny.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify the TLS and other cryptographic libraries, implementations, and technologies in use.&lt;/li&gt;&lt;li&gt;Verify the veracity of the implementations, and review third party validations together with security advisories or best-practices relating to them.&lt;/li&gt;&lt;li&gt;Some well-known TLS libraries are NSS from Mozilla, and OpenSSL.&lt;/li&gt;&lt;li&gt;Where an unknown or unproven implementation is in use, consider use of an established option.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Mozilla SSL Compatibility" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
            <reference name="Mozilla SSL Config" url="https://ssl-config.mozilla.org/"/>
            <reference name="OSA SC-08 Transmission Integrity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/68-08_02_SC-08"/>
            <reference name="Server Side TLS Configuration" url="https://wiki.mozilla.org/Security/Server_Side_TLS"/>
          </references>
          <standards>
            <standard ref="13.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="164.312(e)(1)(B)" supportedStandardRef="hipaa-addressable"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="9.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="PR.DS-2" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="SC-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="SC-8" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Confirm the TLS layer in use is a secure, stable, release of a publicly published implementation that has been subject to expert analysis and review.&lt;ul&gt;&lt;li&gt;If not, assurance of the security of the implementation should be sought, or the risk quantified.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Verify that a client connecting to the server will only be able to negotiate cryptographically strong, secure ciphers.&lt;/li&gt;&lt;li&gt;Confirm that a client can not downgrade to a weaker cipher after initial negotiation.&lt;/li&gt;&lt;li&gt;Use TLS analysis tools to check and rate the server security, for example:&lt;ol&gt;&lt;li&gt;SSL Labs SSL Server Test:&amp;nbsp;https://www.ssllabs.com/ssltest/&lt;/li&gt;&lt;li&gt;sslscan tool: https://github.com/rbsec/sslscan&lt;/li&gt;&lt;li&gt;testssh.sh tool: https://github.com/drwetter/testssl.sh&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Remediate all security issues and warnings relating to the TLS/SSL ciphers, protocols, and security mechanisms.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:51.138">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-63" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-20">
                  <countermeasures>
                    <countermeasure ref="DATA-VAL" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="DATA-VAL" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="sec-vuln-dev-process" name="Application contains security vulnerabilities not identified during the development process" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Application security should be embedded into a project's development environment, allowing developers to monitor their code regularly in order to avoid security vulnerabilities when the application is deployed in the production environment.</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="NIST Security Considerations in the System Development Life Cycle" url="https://csrc.nist.gov/publications/detail/sp/800-64/rev-2/archive/2008-10-16"/>
                <reference name="Risk-Based and Functional Security Testing" url="https://www.us-cert.gov/bsi/articles/best-practices/security-testing/risk-based-and-functional-security-testing"/>
              </references>
              <weaknesses>
                <weakness ref="lack-automated-vuln-identification">
                  <countermeasures>
                    <countermeasure ref="use-analysis-static-code" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="use-analysis-static-code" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CWE-937-WEB" name="Attackers gain unauthorised access to data by compromising third party web resources" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Web applications typically make extensive use of 3rd party web resources such as
                                JavaScript and CSS files.&amp;nbsp; Should attackers gain access to the source code
                                repositories, or even Content Delivery Networks that host these libraries, then they
                                could gain access to applications that use this content.
                                &lt;div&gt;
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-830">
                  <countermeasures>
                    <countermeasure ref="ASSETS-HOSTED-BY-APP" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="ASSETS-HOSTED-BY-APP" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CSD-CLIENT-SECRET" name="Attackers gain unauthorised access to data or services by accessing a client side secret" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>Secrets stored in any client side components, such as a mobile application, thick
                                client application or in JavaScript used by a browser, can be accessed by
                                users/attackers who have access to this client.
                                &lt;div&gt;
                                &lt;br /&gt;
                                &lt;/div&gt;
                                &lt;div&gt;
                                Attackers could then gain access to the data or services that are protected by this
                                secret, if no other credentials are required.
                                &lt;/div&gt;
                            </desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-312">
                  <countermeasures>
                    <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-798, CWE-603">
                  <countermeasures>
                    <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CS-CLIENT-SECRET" mitigation="50"/>
                <countermeasure ref="CSD-CLIENT-SECRET" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="DEP-CLIENT-TECH" name="Attackers gain unauthorised access to the application by the use of deprecated client-side technologies" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;div&gt;
  As programming languages evolve, functions occasionally become obsolete due to:
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;Advances in the language.&lt;/li&gt;
 &lt;li&gt;Improved understanding of how operations should be performed effectively and securely.&lt;/li&gt;
 &lt;li&gt;Changes in the conventions that govern certain operations. &lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way.
&lt;br /&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-477">
                  <countermeasures>
                    <countermeasure ref="INS-CLIENT" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="INS-CLIENT" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-63" name="An adversary embeds malicious scripts in content that will be served to web browsers" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="1" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693-NOSNIFF">
                  <countermeasures>
                    <countermeasure ref="CWE-693-NOSNIFF" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-79">
                  <countermeasures>
                    <countermeasure ref="CWE-79-ENCODE" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-84-HTTP-ONLY">
                  <countermeasures>
                    <countermeasure ref="secure-attributes-of-cookies" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="WEB-CSP">
                  <countermeasures>
                    <countermeasure ref="WEB-CSP" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-693-NOSNIFF" mitigation="25"/>
                <countermeasure ref="CWE-79-ENCODE" mitigation="25"/>
                <countermeasure ref="WEB-CSP" mitigation="25"/>
                <countermeasure ref="secure-attributes-of-cookies" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed to the other component as if it were never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-311">
                  <countermeasures>
                    <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                    <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                    <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-327">
                  <countermeasures>
                    <countermeasure ref="CWE-327" mitigation="25"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-295-CLIENT" mitigation="25"/>
                <countermeasure ref="CWE-319-TRANSPORT" mitigation="25"/>
                <countermeasure ref="CWE-327" mitigation="25"/>
                <countermeasure ref="secure-communication-ra-and-csp" mitigation="25"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="excessive-permissions" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="excessive-permissions" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="TRANSACTION AUTHENTICATION" name="Transaction Authentication" desc="" library="CS-Default">
          <threats>
            <threat ref="CAPEC-103" name="Attackers cause users to peform arbitrary clicks on the site through ClickJacking attacks" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="CS-Default" editable="true">
              <desc>&lt;p&gt;In a clickjacking attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from a seemingly different system.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;While being logged in to some target system, the victim visits the attackers' malicious site which displays a UI that the victim wishes to interact with. In reality, the clickjacked page has a transparent layer above the visible UI with action controls that the attacker wishes the victim to execute. The victim clicks on buttons or other UI elements they see on the page which actually triggers actions in the transparent overlaying layer.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Depending on what that action is, the attacker may have just tricked the victim into executing some potentially privileged (and most certainly undesired) functionality in the target system to which the victim is authenticated.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;The basic problem here is that there is a dichotomy between what the victim thinks he's clicking versus what he or she is actually clicking on.&amp;nbsp;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693-CLICKJACK">
                  <countermeasures>
                    <countermeasure ref="@cwe-693-clickjack" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="@cwe-693-clickjack" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="adad0817-a993-4e56-88a0-55f2d18bea73" diagramComponentId="bce5a505-2fce-4133-a019-a24a94825fab" ref="159009df-8374-4463-8b8c-8f8c38f279ae" name="Migration microservices" desc="" library="microservices-library-dev" parentComponentRef="" componentDefinitionRef="microservice">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="APP-AS-1" name="Application secrets at risk of exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring that there is no sensitive data (such as credentials) in the application code or in configuration files is a challenge because the environments that containers run in have varying security controls and may provide access to unintended parties.&amp;nbsp; Developers need to consider the new threats brought about by multi-tenancy and shared platforms.&amp;nbsp; Not doing so can result in exposure of sensitive data.&amp;nbsp; 
&lt;/div&gt;Encryption methods are only useful if they are robust.&amp;nbsp; This is a particular challenge in container architectures as there are many competing interests and constraints which must be accounted for.&amp;nbsp; It is important that developers take ownership of encryption, while also working within the needs and requirements of the framework. Because of the complexity of containerized systems, and the general tendency of organizations to place security in the hands of operators, encryption of application secrets may be overlooked by developers.&amp;nbsp; This can result in exploitable vulnerabilities which administrators of the system are unaware of.&amp;nbsp;Some of the challenges of securing containerized systems include the variety of secrets which must be protected, and the fact that the available methods for protection may not be consistent between environments.&amp;nbsp; Organizations should be aware of these challenges and implement robust mechanisms which anticipate the problems inherent and provide mitigating strategies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.503">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-AA-1" name="Cloud-native environments may introduce risks to the microservice architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of cloud providers introduces many capabilities to container architectures, while also streamlining workflows and reducing the necessity of managing hardware.&amp;nbsp; However it also increases complexity, and this can make it more difficult to identify and mitigate vulnerabilities.&amp;nbsp; It can also result in a lack of ownership for security issues as developers assume that other parties are taking responsibility. Applications and containers which run or on otherwise access cloud providers must identify themselves.&amp;nbsp; Credentials and access control must be securely managed in order to prevent secret exposure and privilege escalation.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.503">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-1" name="Code promotion across environments may introduce vulnerabilities" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Code and image provenance is a developer and application owner concern; verification requires certification and key management across the code promotion path. This can be a challenge as multiple parties and certificate owners may be involved. The absence can result in application version mismatches or running tampered images. 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments. Today, developers can push code across application container environments without the need for operator interaction.&amp;nbsp; Systems should have robust policies and procedures in place to ensure that images are secured by developers at all stages of the build chain. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.797">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-1" name="Contention issues arise due to the elasticity of workload and dynamic resource requests" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   Ensuring resource availability as needed to support workloads is a challenge.&amp;nbsp; This is because of the dynamic use and availability of resources in a potentially shared environment, combined with the possibly unpredictable use of an application. The absence can result in either the CMP being unable to allocate appropriate resources for an application container, or a resource shortage within the CMP. 
 &lt;/div&gt;&lt;div&gt;
  Resources usage which is not properly managed by developers will affect the usage of others in a shared environment. The absence may result in a DOS-style scenario. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:47.023">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-2" name="Image contents may not be secure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Images must have no known vulnerabilities or malicious code. Developers must help to ensure images have not been tampered with as they move from development to production. Applications of this feature include scanning images for vulnerabilities and malicious code and using image signing and validation mechanisms. 
&lt;/div&gt;&lt;div&gt;
  Ensuring that only the required components are packaged inside the image can be a challenge due to the complexity of applications. If this is not carefully managed it can result in the compromise of an unnecessary component.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Ensuring third-party components are free of vulnerabilities and updated as needed can be a challenge due to differing update frequencies by third-party vendors. This can result in the compromise of third-party components.&amp;nbsp; OS package managers are a particular challenge in this regard due to the large number of updates and downloads they maintain, and the fact that they often have unrestricted access to systems.&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments.&amp;nbsp; Developers should not assume that system wide security settings will mitigate potential application vulnerabilities.&amp;nbsp; Rather, they should ensure that their images have no known vulnerabilities or malicious code, and that they have not been tampered with as they move from development to production. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.796">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-N-1" name="Insecure networking settings may be exploited to gain access to containers or hosts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Monitoring network activity and providing the infrastructure to do so can present a challenge because of the lack of network tooling and data storage. The absence can result in the exposure of sensitive information and diminished incident response and detection capabilities. 
&lt;/div&gt;&lt;div&gt;
  In container networking, communications between containers and hosts must be secured, network traffic must be monitored, and access to the network traffic, resources, and configurations must be controlled.&amp;nbsp; In terms of applications, communications between containers affect access control, limiting access to network traffic, resources, and configurations (leveraging network namespace). Other outcomes include isolating the container interfaces, monitoring network activity, and securing communications between containers via SSL/TLS or VPN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:47.024">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-D-1" name="Insufficient scaling of container resources may lead to inefficient resource utilization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring resource scaling requests take priority over other containers may provide a challenge.&amp;nbsp; This is due to complexity and implementation of the CMP to allow such prioritization. The absence can result in priority applications not being able to scale for user workloads. 
&lt;/div&gt;&lt;div&gt;
  It is a challenge for developers to define application performance profiles. Predictive application workload modeling is a complex task often substituted by a "common practice" or, equally precise, "by analogy".&amp;nbsp; This is largely due to lack of tooling in development environments. Both are likely to lead to inefficient resource utilization. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:47.024">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-1" name="Lack of continuous monitoring can result in application version mismatches and system availability issues" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  The ephemeral nature of application containers increases the necessity of reliable and centralized monitoring of platform, host, and containers.&amp;nbsp; It is essential to ensure that container runtime actions and events are monitored and logged in order to allow timely identification and mitigation of problems and threats. 
&lt;/div&gt;&lt;div&gt;
  There may be a challenge for developers to understand which container versions are running and where. This information needs to be easily and quickly digestible by appropriate parties. The absence can result in application version mismatches and system availability issues. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.502">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-G-1" name="Lifecycle events prevent secure startup and shutdown of applications" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Developing a containerized application that can be scaled up or down without notice is a challenge because of the extra effort required to design and implement the application in a manner where it can gracefully handle such scaling events while maintaining a secure state.&amp;nbsp; &amp;nbsp;It is a more robust approach to ensure that stateful containerized applications are aware of container scaling events to ensure transitions between secure states. 
&lt;/div&gt;&lt;div&gt;
  In an ideal world, either application containers are stateless, or the applications have been developed with clustering technologies to attach and release neighbors as they start and are terminated.&amp;nbsp; Some use cases, though, will have containers that have not been developed in such a manner, or which contain legacy applications that have migrated to containers. Such applications running inside a container may not be aware of pending lifecycle events issued by a CMP such as container start/stop/scale.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The containerized application should have an opportunity to be informed of the pending container's lifecycle events to manage its own lifecycle accordingly. This is essential to ensure the application's secure startup and shutdown.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.503">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-2" name="Mismanagement of container volumes can compromise underlying architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   In container volume management, it is essential to ensure the container has need-only access to data volumes and uses dedicated storage resources for runtime operations.&amp;nbsp; In the application, it is vital to ensure that access control exists for file system resources and raw storage devices, and that data is encrypted at rest in the data volumes.&amp;nbsp; Applications directly mounting a host directory should be avoided. 
 &lt;/div&gt;Building an image that minimizes using shared container volumes is imperative due to the risk of exposing sensitive data to the host or other containers, and the current reliance on sharing information with containers. This can result in exposure of sensitive data.&amp;nbsp;&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Building an image that does not share the host filesystem is equally crucial because exposing the host filesystem can result in compromising the underlying infrastructure, and other containers that share the same environment.&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:47.024">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-2" name="The complexity of container architectures can make logging and monitoring difficult to implement" state="0" impact="100" issueId="" issueLink="">
          <desc>Ensuring that coding policies include logging capabilities at the planning and design stages is a challenge due to the lack of presence of security concerns in the design phase and tooling.&amp;nbsp; In addition, there are many logging features which may be implemented in microservices and an absence of clear policies can result in lack of ownership from key parties, including developers.&amp;nbsp;&amp;nbsp;&lt;div&gt;
  Usually application logging is added after the fact as a response to an incident or audit.&amp;nbsp; Ensuring that application logs, starting with authentication logs, are captured for existing applications is a challenge due to lack of resources to modify the application and necessary guidance to do so.&amp;nbsp;&amp;nbsp;This will result in diminishing incident response and detection capabilities.&amp;nbsp; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.501">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CSA-SACA-3.1.5:1" name="Applications must use secure network communication protocols" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Network traffic generated by the containers should maintain confidentiality regarding the applications and management by utilizing proper encryption protocols (i.e., SSL/TLS, IPSec). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Selecting libraries that support secure communications to provide encryption and maintain confidentiality prevents information spillage and network traffic tampering. Tampering of network traffic may result in system compromise. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.5" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify any communications in your application which will be sent as network traffic and ensure that encryption protocols have been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.965">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.2.1" name="Avoid using images with OS package managers" issueId="" issueLink="" platform="" cost="1" risk="39" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&amp;nbsp;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images with OS package managers or shells could contain unknown vulnerabilities.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Package managers are normally run with unrestricted access in order to allow them to modify critical system software. The package manager's actions, therefore, affect the entire system.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you must include OS packages, remove the package manager before deploying the container.&amp;nbsp; The following steps may also help mitigate the risk: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use repositories you trust. Use only mirrors that belong to reputable organizations.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Manually update your systems (and local mirror caches).&lt;/li&gt; 
  &lt;li&gt;Use signed repository metadata.&lt;/li&gt; 
  &lt;li&gt;Use HTTPS for mirror communication.&lt;/li&gt; 
  &lt;li&gt;Use package managers that implement metadata expiration.&lt;/li&gt; 
  &lt;li&gt;Use distributions that properly make use of the package manager's security features.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="cs.arizona.edu: Attacks on Package Managers" url="https://www2.cs.arizona.edu/stork/packagemanagersecurity/attacks-on-package-managers.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Follow the steps for your particular OS to identify if package managers are installed on the container.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.708">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:1" name="Create and follow coding policies to include logging capabilities" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An application should provide logs regarding authentication, authorization, actions, and failures. The developer should include this capability as part of planning and design phases. For new applications, the developer should create and follow coding policies to include logging capabilities at the planning and design stages.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been planned and designed in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.393">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:2" name="Create common libraries for developers to handle sensitive data and secrets in the backend application code" issueId="" issueLink="" platform="" cost="1" risk="50" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable consistent ways of addressing the handling of sensitive data and secrets within backend application code, a common set of libraries should be provided to developers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Application developers are not necessarily security developers and should devote time to developing application features, not security. Security that is required within applications should be easy to use and made clear, so that minimum effort is spent and consistency across applications is achieved. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that libraries exist for securing sensitive data and that they have been applied to your applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.394">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.9:1" name="Developers should receive sufficient training on volume management" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should receive sufficient training to ensure development of applications that minimize the need to use shared container volumes and that do not require any access to host directories. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Shared volumes can result in exposure of sensitive data. Images which share the host volumes or filesystem can result in the compromise of the underlying infrastructure and other containers sharing the same environment. Avoiding these configurations is a challenge, which is why developer training is essential. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.9" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.965">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:3" name="Encrypt the sensitive application and create a container entry point application that decrypts and executes the main application" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By encrypting the sensitive application, the risk of unintended exposure of the sensitive application can be mitigated. This allows the container image (and sensitive application) to be stored, transmitted, or shared without unauthorized exposure. Encryption and decryption of the application should be treated as any other data encryption/decryption process. For sensitive applications, developers should encrypt the sensitive application, then create a container entry point application that decrypts and executes the main application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that an appropriate level of encryption has been applied to any sensitive data in the application.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.394">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.12:1" name="Ensure sustainable system performance by balancing system resources" issueId="" issueLink="" platform="" cost="1" risk="77" state="Required" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Working with the operator and architect, the developer should ensure that the binaries and libraries are optimized to operate in a containerized infrastructure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Default configurations or those that are suitable for non-containerized systems may conflict with the needs of container architectures.&amp;nbsp; Developers need to be aware of the environmental impacts on their applications. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.12" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review optimization configurations to ensure they are compliant with the needs or policies of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.966">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SAC-3.1.1:1" name="Establish a root of trust" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A public key infrastructure (PKI) allows creation and management of a hierarchy of digital certificates for encryption and digital signatures. A PKI may already exist in an organization-certificates from this new or existing system can be used to sign container images and later verify their provenance and integrity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To ensure the integrity of the build chain, the developer must have the ability to digitally sign and provide a digital signature for the code and/or binary artifacts that will be promoted between environments or to the next promotion phase. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By signing a container image with a certificate that is part of a PKI, container management platform (CMP), users can easily verify the source of an image. This is important as once the source of the image is determined, users can ensure that the image has been through appropriate scrutiny before being promoted for production use. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all existing images are appropriately signed or verified, using keys provided by your organization.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.709">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.1" name="Harden all applications in an image" issueId="" issueLink="" platform="" cost="1" risk="39" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;span style="line-height: 107%; font-size: 14.6667px;"&gt;&lt;font face="Times New Roman, serif"&gt; 
   &lt;div style=""&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Description:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Ensure that applications are secure and follow best practices. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Rationale:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      When deploying applications in a containerized system, vulnerabilities that compromise the application can in turn compromise the entire architecture.&amp;nbsp; This is a result of the way containers and pods communicate and access resources throughout the whole cluster. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Remediation:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Analyze source code regularly to ensure it is following best practices to avoid vulnerabilities.&amp;nbsp; &amp;nbsp;Continuously test your application against common attack practices, like SQL injection, DDoS attack, etc. There are various dynamic analysis tools available to assist.&amp;nbsp; 
    &lt;/div&gt; 
   &lt;/div&gt;&lt;/font&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;, serif; font-size: 11pt;"&gt;&lt;br&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="The New Stack: A Security Checklist for Cloud Native Kubernetes Environments" url="https://thenewstack.io/a-security-checklist-for-cloud-native-kubernetes-environments/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a reliable tool such as Veracode or Synopsys to analyze source code for vulnerabilities before deploying.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.709">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:2" name="Identify a data at rest (DAR) solution" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer should utilize a DAR solution, if at all possible, that has been FIPS 140-2 validated. The developer should also analyze the application programming interface (API) and a compatible key management system (KMS).&amp;nbsp; The developer should also utilize the latest advanced encryption standard (AES) with the highest possible key length. Developers also have to take into account if the solution has been validated by an impartial third party and if the solution is viable in the intended operational environment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  With a FIPS-validated solution and a compatible KMS, there is some third party validation that the solution is secure and thus a higher level of assurance.&amp;nbsp; Robust use of AES will ensure data confidentiality. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that encryption is included and that the level is appropriate to the application security needs and the wider system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.395">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:2" name="Implement plans to capture application logs" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An existing application should provide logs regarding authentication, authorization, actions, and failures. If any of these logging items have not been implemented, developers should provide these capabilities as part of the maintenance phase. For existing applications, the developer should implement plans to capture application logs, starting with authentication logs 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been applied in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.395">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:3" name="Include only necessary components inside the image" issueId="" issueLink="" platform="" cost="1" risk="39" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should trim down images to include only necessary components. It is preferred to use a baseline image with minimal set of packages over a full OS distribution.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Removing unnecessary components from the image will reduce the number of potentially outdated or unpatched packages and therefore reduce the number of security vulnerabilities. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.709">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.11:1" name="Left the application in an unknown state if a containerized application is unaware of the container's transitions" issueId="" issueLink="" platform="" cost="1" risk="77" state="Required" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The CMP should provide the encapsulated application an opportunity to perform a graceful transition to a known secure state. The conventional solution is to allow an application to be notified of the container lifecycle events. Resources, freed after container's removal, should be released back to the pool in a well known state and containers should be allowed to log any state changing events. The container's lifecycle (start/stop/scaled) is managed by CMP. From a developer's perspective, the application could be left in an unknown state if a containerized application is unaware of the container's transitions 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is essential to inform the application of the container's lifecycle events, so that it may take appropriate action to ensure a secure startup and shutdown. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.11" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the container's stop start process and ensure that any related and relevant configurations have been applied to your applications.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.395">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.2" name="Limit credential exposure" issueId="" issueLink="" platform="" cost="1" risk="38" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Harden credentials before deploying applications 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Plain text (non-encrypted) credentials (account passwords, SSH Keys, DevOps secrets, etc.) may be embedded into source code because it helps to simplify deployments at scale.&amp;nbsp; This poses formidable security risks that are routinely exploited by malware and hackers. In some cases, a threat actor may insert hardcoded credentials to create a backdoor, allowing them persistent access to a device, application, or system. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Hardcoded credentials are favored cyberattack targets for password guessing exploits, allowing hackers and malware to hijack systems, and software. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Don't define credentials in your application code. Use managed identities for cloud resources to let your pod request access to cloud provider.&amp;nbsp; Avoid the use of fixed or shared credentials. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="BeyondTrust: Hardcoded and Embedded Credentials are an IT Security Hazard" url="https://www.beyondtrust.com/blog/entry/hardcoded-and-embedded-credentials-are-an-it-security-hazard-heres-what-you-need-to-know"/>
            <reference name="Microsoft docs: Best practices for pod security in Azure Kubernetes Service" url="https://docs.microsoft.com/en-us/azure/aks/developer-best-practices-pod-security"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review application code before deployment for embedded credentials.&amp;nbsp; Carry out pen testing of applications to find overlooked credential vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.395">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:1" name="Provide training and best practices guidance to developers" issueId="" issueLink="" platform="" cost="1" risk="50" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers should be informed and trained on threats arising from multi-tenancy on public clouds.&amp;nbsp; They also need to be trained and provided with templates for how to use the secret management feature within their apps so they avoid the practice of hard-coding static secrets within application code. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers are accustomed to the practice of baking sensitive information into server code from the days when server-side was considered trusted environment. Raising the awareness of the nuances and threats present in current public cloud environments helps drive in the need to avoid such practices 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.395">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.1" name="Remove components which are only required for development" issueId="" issueLink="" platform="" cost="1" risk="39" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Tools that are essential during application development can create security risks in deployment 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Any unnecessary component is another potential entrance point for an attacker.&amp;nbsp; Debuggers and common tools like Curl that are useful to attackers should not be included in images in deployment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Perform an analysis of the entire container before deployment and remove any components or functions you do not need. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.709">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.2" name="Secure any dependencies" issueId="" issueLink="" platform="" cost="1" risk="39" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that any dependencies used by applications are also secure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is hard to keep to track of all the packages an application uses and to make sure they are not vulnerable.&amp;nbsp; Even if you ensure that your own application is free of vulnerabilities, if the base packages and dependencies are not secure, the container could still be vulnerable to attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Regularly perform a full dependency analysis for code to uncover your open source and other dependencies for any vulnerabilities they contain. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a suitable vulnerability scanner to carry out a full dependency analysis for code to uncover your dependencies and any vulnerabilities they contain.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.709">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.2" name="Secure the container base image" issueId="" issueLink="" platform="" cost="1" risk="39" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br&gt;Ensure that container images are built using secure and approved base images&lt;br&gt;&lt;br&gt;&lt;b&gt;Rationale:&lt;/b&gt;&lt;br&gt;Vulnerabilities in software packages can be exploited by hackers or malicious users to obtain unauthorized access to local or cloud resources. &lt;br&gt;&lt;br&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br&gt;Select minimal base images, add only what you require, and scan them for vulnerabilities.&amp;nbsp; &amp;nbsp;Ideally, the tool you choose for this function should be aware of your base image choice and alert you when there is an updated version of your base image, or if there are alternate base images that can reduce vulnerabilities.&lt;br&gt;&lt;br&gt;Only deploy authorized container images that you've analyzed, scanned, and signed (i.e. Software Supply Chain Security). Grafeas, TUF, and Notary can help here.&lt;br&gt;&lt;br&gt;Ensure that only images from image registries on allow lists are used to launch containers in your Kubernetes environment.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Peter Benjamin: Kubernetes Security Best-Practices" url="https://dev.to/petermbenjamin/kubernetes-security-best-practices-hlk"/>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;font face="Times New Roman, serif"&gt;Please follow your 3rd party image scanning provider's guidelines for enabling Image Scanning.&lt;/font&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.709">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:1" name="Sign images as part of the image build process and validate images before use" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images should be signed as part of the build process and validated before used. Signing and validation can be achieved through GNU Privacy Guard (GPG) signatures on image contents or through similar methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Digital signing of image content at build time and validation of the signed data before usage ensures that image data cannot be tampered with between build and run time. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review your applications to ensure that the appropriate signing has taken place.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.709">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.3:1" name="Use clear versioning schemes to identify application versions running in containers" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By defining and using an accepted versioning scheme, a development team can have version numbers automatically implemented as part of a build process. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By applying versions either to a container name, tag, or label, the developer is then able to easily identify application versions running in containers. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.3" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review container names, tags, or labels to check that they contain version numbers in line with your organizational or system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.395">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.1" name="Use IAM for access control" issueId="" issueLink="" platform="" cost="1" risk="38" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Description:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Implement authentication and access control with the Identity and Access Management (IAM) service provided by the cloud provider. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Rationale:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Applications which have access to the full scope of the cloud provider may perform actions outside of their scope.&amp;nbsp; This can be exploited by attackers to gain access to large areas of the cluster. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Use IAM roles to provide fine-grained access.&amp;nbsp; Assign roles only the specific amount of resources they need, or allow them&amp;nbsp; to perform only a particular amount of activities. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: A journey to Kubernetes security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="we45: Security Essentials for a Developer - Kubernetes" url="https://we45.com/blog/security-essentials-for-a-developer-kubernetes/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use the relevant tools for your cloud provider to audit the use of IAM roles in applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.395">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:1" name="Use standard, commonly available authentication systems" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When either data or applications are encrypted within a container, having a reliable method to authorize use of encryption keys is required. Alternatively, applications must be written to support multiple authentication methods, introducing unnecessary complexity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By using common authentication methods, this ensures a predictable ability to authenticate and authorize the use of encryption keys across CMPs.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
            <standard ref="K06 - Broken Authentication" supportedStandardRef="owasp-kubernetes-top-10-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that an encryption policy or standard exists for your organization, and that it has been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.395">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:2" name="Use vulnerability scanning tools as part of the development process" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should use vulnerability scanning tools as part of the development process and the CI pipeline, and integrate a vulnerability assessment into the build process. They will also want to consider failing a build if the vulnerability assessment fails. Once a vulnerability is identified, apply security patches to the vulnerable component and rebuild the image. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A vulnerability scanner will identify and alert on the use of third-party components with known security vulnerabilities. Applying vulnerability scanning as part of the development cycle improves the security quality of the images, since well-known vulnerabilities are identified and patched before software gets into runtime environment. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if a protocol exists for vulnerability scanning in your organization and, if so, that it has been utilized.&amp;nbsp; If one does not exist, use one of the recommended tools to ensure that your own applications and containers do not contain vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T07:45:46.709">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.14:1" name="Utilize resource control features to orchestrate intra-container resource utilization, prioritization and allocation thresholds" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should expect the presence of horizontal infrastructure scaling capability but should avoid the need for vertical scaling by ensuring that the application can function within the parameters established by the configuration management team. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer must obtain the resource utilization and hardening parameters and incorporate those configurations into the software development environment and testing scripts. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The application developer must accept that the application under development will not have on-hand the entirety of computing resources available in the production environment. Even in the presence of auto-scale, auto-scaling capability has limits and does not scale out infinitely.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Without testing application functions within defined production parameters, the risk of poor application performance goes up, not down. Proper configuration of resource and security functionality as appropriate to the CMP in use ensures that a resource consumption fault or runaway container processes do not affect adjacent containers.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.14" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the capabilities of the CMP in terms of the relevant thresholds and ensure your application is compliant.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T07:45:46.966">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="access-sensitive-data" name="Access sensitive data" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNCONFIGURED-SECURITY-DATA" name="Sensitive data is exposed through weak security configurations" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Weak security configurations make possible for an attacker to access sensitive data like API keys, credentials, etc.</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AS-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CLOUD-VULNERABILITIES" name="Attackers use known cloud vulnerabilities to access unauthorized data" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Known vulnerabilities in a specific cloud environment are used to exploit a system, allowing an attacker to access unauthorized data</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AA-1">
                  <countermeasures>
                    <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                    <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-D-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="IMAGE-MODIFICATION" name="Attackers compromise images by modifying their content" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker modifies/forges a microservices image to introduce vulnerabilities in the system</desc>
              <riskRating confidentiality="100" integrity="100" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                    <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                    <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A1:2017" name="Attackers gain access to the sensitive data through injecting code in the repositories" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Almost any source of data can be an injection vector: environment variables,
                                parameters, external and internal web services, and all types of users. Injection flaws
                                occur when an attacker can send hostile data to an interpreter.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                    <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SCALABILITY-ISSUES" name="Availability is compromised through attacks against scalability configuration" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker compromise the availability of a system by exploiting scalability configurations in order to consume resources</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CO-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-CONTAINER-VOLUMES" name="Sensitive data is compromised by unauthorized access to container volumes" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker find flaws to access container volumes without permission</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-LM-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="APP-LM-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNAUTHORIZED-ACCESS-NETWORK" name="Sensitive data is compromised through network access" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Attackers gain undetected access to the network systems and changes made by the
                                attackers couldn't be audited or detected.
                            </desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-N-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="78b5114d-6ec5-4628-841e-5c50903cc3fc" diagramComponentId="7ec88393-fafd-43d6-b205-cfa51d8cf175" ref="1109d524-d643-4eca-92e2-38b9ccf070f7" name="Studio" desc="" library="microservices-library-dev" parentComponentRef="" componentDefinitionRef="microservice">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="APP-AS-1" name="Application secrets at risk of exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring that there is no sensitive data (such as credentials) in the application code or in configuration files is a challenge because the environments that containers run in have varying security controls and may provide access to unintended parties.&amp;nbsp; Developers need to consider the new threats brought about by multi-tenancy and shared platforms.&amp;nbsp; Not doing so can result in exposure of sensitive data.&amp;nbsp; 
&lt;/div&gt;Encryption methods are only useful if they are robust.&amp;nbsp; This is a particular challenge in container architectures as there are many competing interests and constraints which must be accounted for.&amp;nbsp; It is important that developers take ownership of encryption, while also working within the needs and requirements of the framework. Because of the complexity of containerized systems, and the general tendency of organizations to place security in the hands of operators, encryption of application secrets may be overlooked by developers.&amp;nbsp; This can result in exploitable vulnerabilities which administrators of the system are unaware of.&amp;nbsp;Some of the challenges of securing containerized systems include the variety of secrets which must be protected, and the fact that the available methods for protection may not be consistent between environments.&amp;nbsp; Organizations should be aware of these challenges and implement robust mechanisms which anticipate the problems inherent and provide mitigating strategies.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:42.865">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-AA-1" name="Cloud-native environments may introduce risks to the microservice architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>The use of cloud providers introduces many capabilities to container architectures, while also streamlining workflows and reducing the necessity of managing hardware.&amp;nbsp; However it also increases complexity, and this can make it more difficult to identify and mitigate vulnerabilities.&amp;nbsp; It can also result in a lack of ownership for security issues as developers assume that other parties are taking responsibility. Applications and containers which run or on otherwise access cloud providers must identify themselves.&amp;nbsp; Credentials and access control must be securely managed in order to prevent secret exposure and privilege escalation.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:42.866">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-1" name="Code promotion across environments may introduce vulnerabilities" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Code and image provenance is a developer and application owner concern; verification requires certification and key management across the code promotion path. This can be a challenge as multiple parties and certificate owners may be involved. The absence can result in application version mismatches or running tampered images. 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments. Today, developers can push code across application container environments without the need for operator interaction.&amp;nbsp; Systems should have robust policies and procedures in place to ensure that images are secured by developers at all stages of the build chain. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:39.694">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-1" name="Contention issues arise due to the elasticity of workload and dynamic resource requests" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   Ensuring resource availability as needed to support workloads is a challenge.&amp;nbsp; This is because of the dynamic use and availability of resources in a potentially shared environment, combined with the possibly unpredictable use of an application. The absence can result in either the CMP being unable to allocate appropriate resources for an application container, or a resource shortage within the CMP. 
 &lt;/div&gt;&lt;div&gt;
  Resources usage which is not properly managed by developers will affect the usage of others in a shared environment. The absence may result in a DOS-style scenario. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:40.089">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="IM-G-2" name="Image contents may not be secure" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Images must have no known vulnerabilities or malicious code. Developers must help to ensure images have not been tampered with as they move from development to production. Applications of this feature include scanning images for vulnerabilities and malicious code and using image signing and validation mechanisms. 
&lt;/div&gt;&lt;div&gt;
  Ensuring that only the required components are packaged inside the image can be a challenge due to the complexity of applications. If this is not carefully managed it can result in the compromise of an unnecessary component.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Ensuring third-party components are free of vulnerabilities and updated as needed can be a challenge due to differing update frequencies by third-party vendors. This can result in the compromise of third-party components.&amp;nbsp; OS package managers are a particular challenge in this regard due to the large number of updates and downloads they maintain, and the fact that they often have unrestricted access to systems.&amp;nbsp; 
&lt;/div&gt;&lt;div&gt;
  Developers and operators need to be equally engaged in the process of code promotion across application container environments.&amp;nbsp; Developers should not assume that system wide security settings will mitigate potential application vulnerabilities.&amp;nbsp; Rather, they should ensure that their images have no known vulnerabilities or malicious code, and that they have not been tampered with as they move from development to production. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:39.693">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-N-1" name="Insecure networking settings may be exploited to gain access to containers or hosts" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Monitoring network activity and providing the infrastructure to do so can present a challenge because of the lack of network tooling and data storage. The absence can result in the exposure of sensitive information and diminished incident response and detection capabilities. 
&lt;/div&gt;&lt;div&gt;
  In container networking, communications between containers and hosts must be secured, network traffic must be monitored, and access to the network traffic, resources, and configurations must be controlled.&amp;nbsp; In terms of applications, communications between containers affect access control, limiting access to network traffic, resources, and configurations (leveraging network namespace). Other outcomes include isolating the container interfaces, monitoring network activity, and securing communications between containers via SSL/TLS or VPN. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:40.092">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-D-1" name="Insufficient scaling of container resources may lead to inefficient resource utilization" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Ensuring resource scaling requests take priority over other containers may provide a challenge.&amp;nbsp; This is due to complexity and implementation of the CMP to allow such prioritization. The absence can result in priority applications not being able to scale for user workloads. 
&lt;/div&gt;&lt;div&gt;
  It is a challenge for developers to define application performance profiles. Predictive application workload modeling is a complex task often substituted by a "common practice" or, equally precise, "by analogy".&amp;nbsp; This is largely due to lack of tooling in development environments. Both are likely to lead to inefficient resource utilization. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:40.091">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-1" name="Lack of continuous monitoring can result in application version mismatches and system availability issues" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  The ephemeral nature of application containers increases the necessity of reliable and centralized monitoring of platform, host, and containers.&amp;nbsp; It is essential to ensure that container runtime actions and events are monitored and logged in order to allow timely identification and mitigation of problems and threats. 
&lt;/div&gt;&lt;div&gt;
  There may be a challenge for developers to understand which container versions are running and where. This information needs to be easily and quickly digestible by appropriate parties. The absence can result in application version mismatches and system availability issues. 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:42.865">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-G-1" name="Lifecycle events prevent secure startup and shutdown of applications" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
  Developing a containerized application that can be scaled up or down without notice is a challenge because of the extra effort required to design and implement the application in a manner where it can gracefully handle such scaling events while maintaining a secure state.&amp;nbsp; &amp;nbsp;It is a more robust approach to ensure that stateful containerized applications are aware of container scaling events to ensure transitions between secure states. 
&lt;/div&gt;&lt;div&gt;
  In an ideal world, either application containers are stateless, or the applications have been developed with clustering technologies to attach and release neighbors as they start and are terminated.&amp;nbsp; Some use cases, though, will have containers that have not been developed in such a manner, or which contain legacy applications that have migrated to containers. Such applications running inside a container may not be aware of pending lifecycle events issued by a CMP such as container start/stop/scale.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The containerized application should have an opportunity to be informed of the pending container's lifecycle events to manage its own lifecycle accordingly. This is essential to ensure the application's secure startup and shutdown.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:42.866">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CO-G-2" name="Mismanagement of container volumes can compromise underlying architecture" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;div&gt;
   In container volume management, it is essential to ensure the container has need-only access to data volumes and uses dedicated storage resources for runtime operations.&amp;nbsp; In the application, it is vital to ensure that access control exists for file system resources and raw storage devices, and that data is encrypted at rest in the data volumes.&amp;nbsp; Applications directly mounting a host directory should be avoided. 
 &lt;/div&gt;Building an image that minimizes using shared container volumes is imperative due to the risk of exposing sensitive data to the host or other containers, and the current reliance on sharing information with containers. This can result in exposure of sensitive data.&amp;nbsp;&amp;nbsp; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div&gt;
   Building an image that does not share the host filesystem is equally crucial because exposing the host filesystem can result in compromising the underlying infrastructure, and other containers that share the same environment.&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:40.092">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="APP-LM-2" name="The complexity of container architectures can make logging and monitoring difficult to implement" state="0" impact="100" issueId="" issueLink="">
          <desc>Ensuring that coding policies include logging capabilities at the planning and design stages is a challenge due to the lack of presence of security concerns in the design phase and tooling.&amp;nbsp; In addition, there are many logging features which may be implemented in microservices and an absence of clear policies can result in lack of ownership from key parties, including developers.&amp;nbsp;&amp;nbsp;&lt;div&gt;
  Usually application logging is added after the fact as a response to an incident or audit.&amp;nbsp; Ensuring that application logs, starting with authentication logs, are captured for existing applications is a challenge due to lack of resources to modify the application and necessary guidance to do so.&amp;nbsp;&amp;nbsp;This will result in diminishing incident response and detection capabilities.&amp;nbsp; 
&lt;/div&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:42.864">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="CSA-SACA-3.1.5:1" name="Applications must use secure network communication protocols" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Network traffic generated by the containers should maintain confidentiality regarding the applications and management by utilizing proper encryption protocols (i.e., SSL/TLS, IPSec). 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Selecting libraries that support secure communications to provide encryption and maintain confidentiality prevents information spillage and network traffic tampering. Tampering of network traffic may result in system compromise. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.5" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Identify any communications in your application which will be sent as network traffic and ensure that encryption protocols have been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:39.952">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.2.1" name="Avoid using images with OS package managers" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&amp;nbsp;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images with OS package managers or shells could contain unknown vulnerabilities.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Package managers are normally run with unrestricted access in order to allow them to modify critical system software. The package manager's actions, therefore, affect the entire system.&amp;nbsp;&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  If you must include OS packages, remove the package manager before deploying the container.&amp;nbsp; The following steps may also help mitigate the risk: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Use repositories you trust. Use only mirrors that belong to reputable organizations.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Manually update your systems (and local mirror caches).&lt;/li&gt; 
  &lt;li&gt;Use signed repository metadata.&lt;/li&gt; 
  &lt;li&gt;Use HTTPS for mirror communication.&lt;/li&gt; 
  &lt;li&gt;Use package managers that implement metadata expiration.&lt;/li&gt; 
  &lt;li&gt;Use distributions that properly make use of the package manager's security features.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="cs.arizona.edu: Attacks on Package Managers" url="https://www2.cs.arizona.edu/stork/packagemanagersecurity/attacks-on-package-managers.html"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Follow the steps for your particular OS to identify if package managers are installed on the container.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:37.267">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:1" name="Create and follow coding policies to include logging capabilities" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An application should provide logs regarding authentication, authorization, actions, and failures. The developer should include this capability as part of planning and design phases. For new applications, the developer should create and follow coding policies to include logging capabilities at the planning and design stages.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been planned and designed in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:42.756">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:2" name="Create common libraries for developers to handle sensitive data and secrets in the backend application code" issueId="" issueLink="" platform="" cost="1" risk="50" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To enable consistent ways of addressing the handling of sensitive data and secrets within backend application code, a common set of libraries should be provided to developers. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Application developers are not necessarily security developers and should devote time to developing application features, not security. Security that is required within applications should be easy to use and made clear, so that minimum effort is spent and consistency across applications is achieved. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that libraries exist for securing sensitive data and that they have been applied to your applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:42.758">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.9:1" name="Developers should receive sufficient training on volume management" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should receive sufficient training to ensure development of applications that minimize the need to use shared container volumes and that do not require any access to host directories. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt;
   Shared volumes can result in exposure of sensitive data. Images which share the host volumes or filesystem can result in the compromise of the underlying infrastructure and other containers sharing the same environment. Avoiding these configurations is a challenge, which is why developer training is essential. 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.9" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:39.953">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:3" name="Encrypt the sensitive application and create a container entry point application that decrypts and executes the main application" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By encrypting the sensitive application, the risk of unintended exposure of the sensitive application can be mitigated. This allows the container image (and sensitive application) to be stored, transmitted, or shared without unauthorized exposure. Encryption and decryption of the application should be treated as any other data encryption/decryption process. For sensitive applications, developers should encrypt the sensitive application, then create a container entry point application that decrypts and executes the main application. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that an appropriate level of encryption has been applied to any sensitive data in the application.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:42.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.12:1" name="Ensure sustainable system performance by balancing system resources" issueId="" issueLink="" platform="" cost="1" risk="77" state="Required" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Working with the operator and architect, the developer should ensure that the binaries and libraries are optimized to operate in a containerized infrastructure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Default configurations or those that are suitable for non-containerized systems may conflict with the needs of container architectures.&amp;nbsp; Developers need to be aware of the environmental impacts on their applications. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.12" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review optimization configurations to ensure they are compliant with the needs or policies of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:39.953">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SAC-3.1.1:1" name="Establish a root of trust" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A public key infrastructure (PKI) allows creation and management of a hierarchy of digital certificates for encryption and digital signatures. A PKI may already exist in an organization-certificates from this new or existing system can be used to sign container images and later verify their provenance and integrity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  To ensure the integrity of the build chain, the developer must have the ability to digitally sign and provide a digital signature for the code and/or binary artifacts that will be promoted between environments or to the next promotion phase. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By signing a container image with a certificate that is part of a PKI, container management platform (CMP), users can easily verify the source of an image. This is important as once the source of the image is determined, users can ensure that the image has been through appropriate scrutiny before being promoted for production use. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.1" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that all existing images are appropriately signed or verified, using keys provided by your organization.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:37.268">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.1" name="Harden all applications in an image" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;span style="line-height: 107%; font-size: 14.6667px;"&gt;&lt;font face="Times New Roman, serif"&gt; 
   &lt;div style=""&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Description:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Ensure that applications are secure and follow best practices. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Rationale:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      When deploying applications in a containerized system, vulnerabilities that compromise the application can in turn compromise the entire architecture.&amp;nbsp; This is a result of the way containers and pods communicate and access resources throughout the whole cluster. 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;br&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt; 
     &lt;b&gt;Remediation:&lt;/b&gt; 
    &lt;/div&gt; 
    &lt;div style=""&gt;
      Analyze source code regularly to ensure it is following best practices to avoid vulnerabilities.&amp;nbsp; &amp;nbsp;Continuously test your application against common attack practices, like SQL injection, DDoS attack, etc. There are various dynamic analysis tools available to assist.&amp;nbsp; 
    &lt;/div&gt; 
   &lt;/div&gt;&lt;/font&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span style="font-family: &amp;quot;Times New Roman&amp;quot;, serif; font-size: 11pt;"&gt;&lt;br&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;div style=""&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="The New Stack: A Security Checklist for Cloud Native Kubernetes Environments" url="https://thenewstack.io/a-security-checklist-for-cloud-native-kubernetes-environments/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a reliable tool such as Veracode or Synopsys to analyze source code for vulnerabilities before deploying.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:37.268">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:2" name="Identify a data at rest (DAR) solution" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer should utilize a DAR solution, if at all possible, that has been FIPS 140-2 validated. The developer should also analyze the application programming interface (API) and a compatible key management system (KMS).&amp;nbsp; The developer should also utilize the latest advanced encryption standard (AES) with the highest possible key length. Developers also have to take into account if the solution has been validated by an impartial third party and if the solution is viable in the intended operational environment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  With a FIPS-validated solution and a compatible KMS, there is some third party validation that the solution is secure and thus a higher level of assurance.&amp;nbsp; Robust use of AES will ensure data confidentiality. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that encryption is included and that the level is appropriate to the application security needs and the wider system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:42.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.7:2" name="Implement plans to capture application logs" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  An existing application should provide logs regarding authentication, authorization, actions, and failures. If any of these logging items have not been implemented, developers should provide these capabilities as part of the maintenance phase. For existing applications, the developer should implement plans to capture application logs, starting with authentication logs 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Logging application authentication, authorization, actions, and failures provides a trail of evidence to follow when an investigation takes place and a root cause needs to be established. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.7" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the logging capabilities for your application and ensure they have been applied in a way which is consistent with the features of the container architecture.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:42.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:3" name="Include only necessary components inside the image" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should trim down images to include only necessary components. It is preferred to use a baseline image with minimal set of packages over a full OS distribution.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Removing unnecessary components from the image will reduce the number of potentially outdated or unpatched packages and therefore reduce the number of security vulnerabilities. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:37.268">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.11:1" name="Left the application in an unknown state if a containerized application is unaware of the container's transitions" issueId="" issueLink="" platform="" cost="1" risk="77" state="Required" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The CMP should provide the encapsulated application an opportunity to perform a graceful transition to a known secure state. The conventional solution is to allow an application to be notified of the container lifecycle events. Resources, freed after container's removal, should be released back to the pool in a well known state and containers should be allowed to log any state changing events. The container's lifecycle (start/stop/scaled) is managed by CMP. From a developer's perspective, the application could be left in an unknown state if a containerized application is unaware of the container's transitions 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is essential to inform the application of the container's lifecycle events, so that it may take appropriate action to ensure a secure startup and shutdown. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.11" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the container's stop start process and ensure that any related and relevant configurations have been applied to your applications.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:42.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.2" name="Limit credential exposure" issueId="" issueLink="" platform="" cost="1" risk="38" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Harden credentials before deploying applications 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Plain text (non-encrypted) credentials (account passwords, SSH Keys, DevOps secrets, etc.) may be embedded into source code because it helps to simplify deployments at scale.&amp;nbsp; This poses formidable security risks that are routinely exploited by malware and hackers. In some cases, a threat actor may insert hardcoded credentials to create a backdoor, allowing them persistent access to a device, application, or system. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Hardcoded credentials are favored cyberattack targets for password guessing exploits, allowing hackers and malware to hijack systems, and software. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Don't define credentials in your application code. Use managed identities for cloud resources to let your pod request access to cloud provider.&amp;nbsp; Avoid the use of fixed or shared credentials. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="BeyondTrust: Hardcoded and Embedded Credentials are an IT Security Hazard" url="https://www.beyondtrust.com/blog/entry/hardcoded-and-embedded-credentials-are-an-it-security-hazard-heres-what-you-need-to-know"/>
            <reference name="Microsoft docs: Best practices for pod security in Azure Kubernetes Service" url="https://docs.microsoft.com/en-us/azure/aks/developer-best-practices-pod-security"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review application code before deployment for embedded credentials.&amp;nbsp; Carry out pen testing of applications to find overlooked credential vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:42.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.10:1" name="Provide training and best practices guidance to developers" issueId="" issueLink="" platform="" cost="1" risk="50" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers should be informed and trained on threats arising from multi-tenancy on public clouds.&amp;nbsp; They also need to be trained and provided with templates for how to use the secret management feature within their apps so they avoid the practice of hard-coding static secrets within application code. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Backend Developers are accustomed to the practice of baking sensitive information into server code from the days when server-side was considered trusted environment. Raising the awareness of the nuances and threats present in current public cloud environments helps drive in the need to avoid such practices 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.10" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Ensure that relevant training is available and up to date.&amp;nbsp;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:42.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.1" name="Remove components which are only required for development" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Tools that are essential during application development can create security risks in deployment 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Any unnecessary component is another potential entrance point for an attacker.&amp;nbsp; Debuggers and common tools like Curl that are useful to attackers should not be included in images in deployment. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Perform an analysis of the entire container before deployment and remove any components or functions you do not need. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="StackRox: Kubernetes Security" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Perform a suitable scan based on your operating system for extraneous tools and components.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:37.268">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.3.2" name="Secure any dependencies" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Ensure that any dependencies used by applications are also secure. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;&lt;br&gt;&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  It is hard to keep to track of all the packages an application uses and to make sure they are not vulnerable.&amp;nbsp; Even if you ensure that your own application is free of vulnerabilities, if the base packages and dependencies are not secure, the container could still be vulnerable to attacks. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Remediation:&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Regularly perform a full dependency analysis for code to uncover your open source and other dependencies for any vulnerabilities they contain. 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use a suitable vulnerability scanner to carry out a full dependency analysis for code to uncover your dependencies and any vulnerabilities they contain.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:37.268">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="IM-G-2.1.2" name="Secure the container base image" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;b&gt;Description: &lt;/b&gt;&lt;br&gt;Ensure that container images are built using secure and approved base images&lt;br&gt;&lt;br&gt;&lt;b&gt;Rationale:&lt;/b&gt;&lt;br&gt;Vulnerabilities in software packages can be exploited by hackers or malicious users to obtain unauthorized access to local or cloud resources. &lt;br&gt;&lt;br&gt;&lt;b&gt;Remediation:&lt;/b&gt;&lt;br&gt;Select minimal base images, add only what you require, and scan them for vulnerabilities.&amp;nbsp; &amp;nbsp;Ideally, the tool you choose for this function should be aware of your base image choice and alert you when there is an updated version of your base image, or if there are alternate base images that can reduce vulnerabilities.&lt;br&gt;&lt;br&gt;Only deploy authorized container images that you've analyzed, scanned, and signed (i.e. Software Supply Chain Security). Grafeas, TUF, and Notary can help here.&lt;br&gt;&lt;br&gt;Ensure that only images from image registries on allow lists are used to launch containers in your Kubernetes environment.&lt;/p&gt; 
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Peter Benjamin: Kubernetes Security Best-Practices" url="https://dev.to/petermbenjamin/kubernetes-security-best-practices-hlk"/>
            <reference name="StackRox: Kubernetes Security 101" url="https://www.stackrox.com/post/2020/05/kubernetes-security-101/"/>
            <reference name="snyk: Kubernetes Security" url="https://snyk.io/learn/kubernetes-security/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;font face="Times New Roman, serif"&gt;Please follow your 3rd party image scanning provider's guidelines for enabling Image Scanning.&lt;/font&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:37.268">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:1" name="Sign images as part of the image build process and validate images before use" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Images should be signed as part of the build process and validated before used. Signing and validation can be achieved through GNU Privacy Guard (GPG) signatures on image contents or through similar methods. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Digital signing of image content at build time and validation of the signed data before usage ensures that image data cannot be tampered with between build and run time. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review your applications to ensure that the appropriate signing has taken place.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:37.268">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.3:1" name="Use clear versioning schemes to identify application versions running in containers" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By defining and using an accepted versioning scheme, a development team can have version numbers automatically implemented as part of a build process. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By applying versions either to a container name, tag, or label, the developer is then able to easily identify application versions running in containers. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.3" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review container names, tags, or labels to check that they contain version numbers in line with your organizational or system policies.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:42.759">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="APP-AA-1.1.1" name="Use IAM for access control" issueId="" issueLink="" platform="" cost="1" risk="38" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Description:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Implement authentication and access control with the Identity and Access Management (IAM) service provided by the cloud provider. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Rationale:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Applications which have access to the full scope of the cloud provider may perform actions outside of their scope.&amp;nbsp; This can be exploited by attackers to gain access to large areas of the cluster. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;b&gt;Remediation:&lt;/b&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Use IAM roles to provide fine-grained access.&amp;nbsp; Assign roles only the specific amount of resources they need, or allow them&amp;nbsp; to perform only a particular amount of activities. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="IBM: A journey to Kubernetes security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="IBM: Journey to Kubernetes Security" url="https://developer.ibm.com/technologies/containers/articles/journey-to-kubernetes-security/"/>
            <reference name="we45: Security Essentials for a Developer - Kubernetes" url="https://we45.com/blog/security-essentials-for-a-developer-kubernetes/"/>
          </references>
          <standards/>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Use the relevant tools for your cloud provider to audit the use of IAM roles in applications.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:42.760">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.17:1" name="Use standard, commonly available authentication systems" issueId="" issueLink="" platform="" cost="1" risk="50" state="Recommended" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  When either data or applications are encrypted within a container, having a reliable method to authorize use of encryption keys is required. Alternatively, applications must be written to support multiple authentication methods, introducing unnecessary complexity. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  By using common authentication methods, this ensures a predictable ability to authenticate and authorize the use of encryption keys across CMPs.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.17" supportedStandardRef="csa-container-architectures"/>
            <standard ref="K06 - Broken Authentication" supportedStandardRef="owasp-kubernetes-top-10-2022"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Verify that an encryption policy or standard exists for your organization, and that it has been applied.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:42.760">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.6:2" name="Use vulnerability scanning tools as part of the development process" issueId="" issueLink="" platform="" cost="1" risk="0" state="N/A" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should use vulnerability scanning tools as part of the development process and the CI pipeline, and integrate a vulnerability assessment into the build process. They will also want to consider failing a build if the vulnerability assessment fails. Once a vulnerability is identified, apply security patches to the vulnerable component and rebuild the image. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  A vulnerability scanner will identify and alert on the use of third-party components with known security vulnerabilities. Applying vulnerability scanning as part of the development cycle improves the security quality of the images, since well-known vulnerabilities are identified and patched before software gets into runtime environment. 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.6" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check if a protocol exists for vulnerability scanning in your organization and, if so, that it has been utilized.&amp;nbsp; If one does not exist, use one of the recommended tools to ensure that your own applications and containers do not contain vulnerabilities.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2023-03-28T10:58:37.268">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CSA-SACA-3.1.14:1" name="Utilize resource control features to orchestrate intra-container resource utilization, prioritization and allocation thresholds" issueId="" issueLink="" platform="" cost="1" risk="0" state="Implemented" owner="iriusrisk21@st.by" library="microservices-library-dev" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt; 
 &lt;b&gt;Description&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Developers should expect the presence of horizontal infrastructure scaling capability but should avoid the need for vertical scaling by ensuring that the application can function within the parameters established by the configuration management team. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The developer must obtain the resource utilization and hardening parameters and incorporate those configurations into the software development environment and testing scripts. 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;b&gt;Rationale&lt;/b&gt; 
&lt;/div&gt; 
&lt;div&gt;
  The application developer must accept that the application under development will not have on-hand the entirety of computing resources available in the production environment. Even in the presence of auto-scale, auto-scaling capability has limits and does not scale out infinitely.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Without testing application functions within defined production parameters, the risk of poor application performance goes up, not down. Proper configuration of resource and security functionality as appropriate to the CMP in use ensures that a resource consumption fault or runaway container processes do not affect adjacent containers.&amp;nbsp; 
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="3.1.14" supportedStandardRef="csa-container-architectures"/>
          </standards>
          <customFields/>
          <test expiryDate="" expiryPeriod="0">
            <steps>Review the capabilities of the CMP in terms of the relevant thresholds and ensure your application is compliant.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Passed" enabled="true" timestamp="2023-03-28T10:58:39.953">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="access-sensitive-data" name="Access sensitive data" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNCONFIGURED-SECURITY-DATA" name="Sensitive data is exposed through weak security configurations" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Weak security configurations make possible for an attacker to access sensitive data like API keys, credentials, etc.</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AS-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                    <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.10:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.10:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:1" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:2" mitigation="20"/>
                <countermeasure ref="CSA-SACA-3.1.17:3" mitigation="20"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="authentication-and-authorization" name="Authentication and Authorization" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CLOUD-VULNERABILITIES" name="Attackers use known cloud vulnerabilities to access unauthorized data" state="Partly-Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Known vulnerabilities in a specific cloud environment are used to exploit a system, allowing an attacker to access unauthorized data</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-AA-1">
                  <countermeasures>
                    <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                    <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="APP-AA-1.1.1" mitigation="50"/>
                <countermeasure ref="APP-AA-1.1.2" mitigation="50"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="deployment" name="Deployment" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="CAPEC-130" name="Excessive Allocation" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>&lt;p&gt;An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-D-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.14:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="general" name="General" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="IMAGE-MODIFICATION" name="Attackers compromise images by modifying their content" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker modifies/forges a microservices image to introduce vulnerabilities in the system</desc>
              <riskRating confidentiality="100" integrity="100" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                    <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                    <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                    <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.6:3" mitigation="20"/>
                <countermeasure ref="IM-G-2.1.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.1.2" mitigation="16"/>
                <countermeasure ref="IM-G-2.2.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.1" mitigation="16"/>
                <countermeasure ref="IM-G-2.3.2" mitigation="16"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="OWASP A1:2017" name="Attackers gain access to the sensitive data through injecting code in the repositories" state="Not Applicable" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Almost any source of data can be an injection vector: environment variables,
                                parameters, external and internal web services, and all types of users. Injection flaws
                                occur when an attacker can send hostile data to an interpreter.
                            </desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="IM-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                    <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SAC-3.1.1:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.6:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.6:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="SCALABILITY-ISSUES" name="Availability is compromised through attacks against scalability configuration" state="Expose" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker compromise the availability of a system by exploiting scalability configurations in order to consume resources</desc>
              <riskRating confidentiality="75" integrity="75" availability="100" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CO-G-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.11:1" mitigation="100"/>
                <countermeasure ref="CSA-SACA-3.1.12:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
            <threat ref="UNAUTHORIZED-ACCESS-CONTAINER-VOLUMES" name="Sensitive data is compromised by unauthorized access to container volumes" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>An attacker find flaws to access container volumes without permission</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-G-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.9:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="logging-and-monitoring" name="Logging and Monitoring" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="OWASP A10:2017" name="Exploitation of insufficient logging and monitoring" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>	&lt;p&gt;Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.&lt;br /&gt;
 Attackers rely on the lack of monitoring and timely response to achieve their goals without being detected.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="APP-LM-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                  </countermeasures>
                </weakness>
                <weakness ref="APP-LM-2">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                    <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.3:1" mitigation="34"/>
                <countermeasure ref="CSA-SACA-3.1.7:1" mitigation="33"/>
                <countermeasure ref="CSA-SACA-3.1.7:2" mitigation="33"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
        <usecase ref="networking" name="Networking" desc="" library="microservices-library-dev">
          <threats>
            <threat ref="UNAUTHORIZED-ACCESS-NETWORK" name="Sensitive data is compromised through network access" state="Mitigate" source="RULES" edited="false" owner="iriusrisk21@st.by" library="microservices-library-dev" editable="true">
              <desc>Attackers gain undetected access to the network systems and changes made by the
                                attackers couldn't be audited or detected.
                            </desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CO-N-1">
                  <countermeasures>
                    <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CSA-SACA-3.1.5:1" mitigation="100"/>
              </countermeasures>
              <customFields/>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>
